
STM32F767Zi_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf80  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016ec  0800c180  0800c180  0001c180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d86c  0800d86c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d86c  0800d86c  0001d86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d874  0800d874  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d874  0800d874  0001d874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d878  0800d878  0001d878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800d87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f594  20000080  0800d8fc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f614  0800d8fc  0002f614  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002730d  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000485e  00000000  00000000  000473bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd8  00000000  00000000  0004bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b40  00000000  00000000  0004d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000064ec  00000000  00000000  0004f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023ded  00000000  00000000  00055924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a079  00000000  00000000  00079711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019378a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ec8  00000000  00000000  001937dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c168 	.word	0x0800c168

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800c168 	.word	0x0800c168

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800055c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000560:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d013      	beq.n	8000594 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800056c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000570:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000574:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00b      	beq.n	8000594 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800057c:	e000      	b.n	8000580 <ITM_SendChar+0x2c>
    {
      __NOP();
 800057e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f9      	beq.n	800057e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800058a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f002 feef 	bl	800338c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f8c3 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  vTraceEnable(TRC_START);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 faa7 	bl	8000b04 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b6:	f000 f92f 	bl	8000818 <MX_ADC1_Init>
  MX_TIM13_Init();
 80005ba:	f000 f9f7 	bl	80009ac <MX_TIM13_Init>
  MX_ADC2_Init();
 80005be:	f000 f97f 	bl	80008c0 <MX_ADC2_Init>
  MX_TIM10_Init();
 80005c2:	f000 f9cf 	bl	8000964 <MX_TIM10_Init>
  MX_USART3_UART_Init();
 80005c6:	f000 fa3f 	bl	8000a48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ca:	f000 fa6d 	bl	8000aa8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 80005ce:	483a      	ldr	r0, [pc, #232]	; (80006b8 <main+0x114>)
 80005d0:	f002 ff72 	bl	80034b8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80005d4:	4839      	ldr	r0, [pc, #228]	; (80006bc <main+0x118>)
 80005d6:	f002 ff6f 	bl	80034b8 <HAL_ADC_Start>

  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80005da:	2100      	movs	r1, #0
 80005dc:	4838      	ldr	r0, [pc, #224]	; (80006c0 <main+0x11c>)
 80005de:	f005 f901 	bl	80057e4 <HAL_TIM_PWM_Start>

  ITM_SendChar(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ffb6 	bl	8000554 <ITM_SendChar>
  ITM_SendChar(0x0F);
 80005e8:	200f      	movs	r0, #15
 80005ea:	f7ff ffb3 	bl	8000554 <ITM_SendChar>
  ITM_SendChar(0xF0);
 80005ee:	20f0      	movs	r0, #240	; 0xf0
 80005f0:	f7ff ffb0 	bl	8000554 <ITM_SendChar>
  ITM_SendChar(0xFF);
 80005f4:	20ff      	movs	r0, #255	; 0xff
 80005f6:	f7ff ffad 	bl	8000554 <ITM_SendChar>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fa:	f006 ff71 	bl	80074e0 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
#if(TRACELIZER_ENB == 1)
  vTraceEnable(TRC_START);
 80005fe:	2001      	movs	r0, #1
 8000600:	f001 fa66 	bl	8001ad0 <vTraceEnable>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of msg_Queue */
  msg_QueueHandle = osMessageQueueNew (16, sizeof(QUEUE_t), &msg_Queue_attributes);
 8000604:	4a2f      	ldr	r2, [pc, #188]	; (80006c4 <main+0x120>)
 8000606:	21ca      	movs	r1, #202	; 0xca
 8000608:	2010      	movs	r0, #16
 800060a:	f007 f9c7 	bl	800799c <osMessageQueueNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a2d      	ldr	r2, [pc, #180]	; (80006c8 <main+0x124>)
 8000612:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000614:	4a2d      	ldr	r2, [pc, #180]	; (80006cc <main+0x128>)
 8000616:	2100      	movs	r1, #0
 8000618:	482d      	ldr	r0, [pc, #180]	; (80006d0 <main+0x12c>)
 800061a:	f006 ffcb 	bl	80075b4 <osThreadNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a2c      	ldr	r2, [pc, #176]	; (80006d4 <main+0x130>)
 8000622:	6013      	str	r3, [r2, #0]

  /* creation of BlinkyTask */
  BlinkyTaskHandle = osThreadNew(StartBlinkyTask, NULL, &BlinkyTask_attributes);
 8000624:	4a2c      	ldr	r2, [pc, #176]	; (80006d8 <main+0x134>)
 8000626:	2100      	movs	r1, #0
 8000628:	482c      	ldr	r0, [pc, #176]	; (80006dc <main+0x138>)
 800062a:	f006 ffc3 	bl	80075b4 <osThreadNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a2b      	ldr	r2, [pc, #172]	; (80006e0 <main+0x13c>)
 8000632:	6013      	str	r3, [r2, #0]

  /* creation of adcReadValueT */
  adcReadValueTHandle = osThreadNew(adcReadValueTask, NULL, &adcReadValueT_attributes);
 8000634:	4a2b      	ldr	r2, [pc, #172]	; (80006e4 <main+0x140>)
 8000636:	2100      	movs	r1, #0
 8000638:	482b      	ldr	r0, [pc, #172]	; (80006e8 <main+0x144>)
 800063a:	f006 ffbb 	bl	80075b4 <osThreadNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a2a      	ldr	r2, [pc, #168]	; (80006ec <main+0x148>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of readTempT */
  readTempTHandle = osThreadNew(readTempTask, NULL, &readTempT_attributes);
 8000644:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <main+0x14c>)
 8000646:	2100      	movs	r1, #0
 8000648:	482a      	ldr	r0, [pc, #168]	; (80006f4 <main+0x150>)
 800064a:	f006 ffb3 	bl	80075b4 <osThreadNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a29      	ldr	r2, [pc, #164]	; (80006f8 <main+0x154>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of pwmLedBrightnes */
  pwmLedBrightnesHandle = osThreadNew(pwmLedBrightnessTask, NULL, &pwmLedBrightnes_attributes);
 8000654:	4a29      	ldr	r2, [pc, #164]	; (80006fc <main+0x158>)
 8000656:	2100      	movs	r1, #0
 8000658:	4829      	ldr	r0, [pc, #164]	; (8000700 <main+0x15c>)
 800065a:	f006 ffab 	bl	80075b4 <osThreadNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a28      	ldr	r2, [pc, #160]	; (8000704 <main+0x160>)
 8000662:	6013      	str	r3, [r2, #0]

  /* creation of usartDebugPrint */
  usartDebugPrintHandle = osThreadNew(usartDebugPrintTask, NULL, &usartDebugPrint_attributes);
 8000664:	4a28      	ldr	r2, [pc, #160]	; (8000708 <main+0x164>)
 8000666:	2100      	movs	r1, #0
 8000668:	4828      	ldr	r0, [pc, #160]	; (800070c <main+0x168>)
 800066a:	f006 ffa3 	bl	80075b4 <osThreadNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <main+0x16c>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of checkISRStateT */
  checkISRStateTHandle = osThreadNew(checkISRStateTask, NULL, &checkISRStateT_attributes);
 8000674:	4a27      	ldr	r2, [pc, #156]	; (8000714 <main+0x170>)
 8000676:	2100      	movs	r1, #0
 8000678:	4827      	ldr	r0, [pc, #156]	; (8000718 <main+0x174>)
 800067a:	f006 ff9b 	bl	80075b4 <osThreadNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a26      	ldr	r2, [pc, #152]	; (800071c <main+0x178>)
 8000682:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  EventGroup1 = osEventFlagsNew(NULL);
 8000684:	2000      	movs	r0, #0
 8000686:	f007 f869 	bl	800775c <osEventFlagsNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a24      	ldr	r2, [pc, #144]	; (8000720 <main+0x17c>)
 800068e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  xTaskCreate(
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <main+0x180>)
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2308      	movs	r3, #8
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	4922      	ldr	r1, [pc, #136]	; (8000728 <main+0x184>)
 800069e:	4823      	ldr	r0, [pc, #140]	; (800072c <main+0x188>)
 80006a0:	f009 f99d 	bl	80099de <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of ISREvent */
  ISREventHandle = osEventFlagsNew(&ISREvent_attributes);
 80006a4:	4822      	ldr	r0, [pc, #136]	; (8000730 <main+0x18c>)
 80006a6:	f007 f859 	bl	800775c <osEventFlagsNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <main+0x190>)
 80006ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b0:	f006 ff4a 	bl	8007548 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <main+0x110>
 80006b6:	bf00      	nop
 80006b8:	2000009c 	.word	0x2000009c
 80006bc:	200000e4 	.word	0x200000e4
 80006c0:	20000178 	.word	0x20000178
 80006c4:	0800d7a4 	.word	0x0800d7a4
 80006c8:	20001730 	.word	0x20001730
 80006cc:	0800d6a8 	.word	0x0800d6a8
 80006d0:	08000d15 	.word	0x08000d15
 80006d4:	20000754 	.word	0x20000754
 80006d8:	0800d6cc 	.word	0x0800d6cc
 80006dc:	08000d41 	.word	0x08000d41
 80006e0:	20000758 	.word	0x20000758
 80006e4:	0800d6f0 	.word	0x0800d6f0
 80006e8:	08000d61 	.word	0x08000d61
 80006ec:	2000075c 	.word	0x2000075c
 80006f0:	0800d714 	.word	0x0800d714
 80006f4:	08000da1 	.word	0x08000da1
 80006f8:	20000a20 	.word	0x20000a20
 80006fc:	0800d738 	.word	0x0800d738
 8000700:	08000e49 	.word	0x08000e49
 8000704:	20000ce4 	.word	0x20000ce4
 8000708:	0800d75c 	.word	0x0800d75c
 800070c:	08000ed5 	.word	0x08000ed5
 8000710:	20000fa8 	.word	0x20000fa8
 8000714:	0800d780 	.word	0x0800d780
 8000718:	08000f05 	.word	0x08000f05
 800071c:	2000126c 	.word	0x2000126c
 8000720:	20002450 	.word	0x20002450
 8000724:	2000244c 	.word	0x2000244c
 8000728:	0800c1fc 	.word	0x0800c1fc
 800072c:	08000d25 	.word	0x08000d25
 8000730:	0800d7bc 	.word	0x0800d7bc
 8000734:	20002424 	.word	0x20002424

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2234      	movs	r2, #52	; 0x34
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f00b fbe6 	bl	800bf18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800075c:	f003 fe12 	bl	8004384 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <SystemClock_Config+0xd8>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a2a      	ldr	r2, [pc, #168]	; (8000810 <SystemClock_Config+0xd8>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xd8>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <SystemClock_Config+0xdc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000780:	4a24      	ldr	r2, [pc, #144]	; (8000814 <SystemClock_Config+0xdc>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <SystemClock_Config+0xdc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000794:	2303      	movs	r3, #3
 8000796:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2310      	movs	r3, #16
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 80007b0:	230f      	movs	r3, #15
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 80007b4:	2390      	movs	r3, #144	; 0x90
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007bc:	2305      	movs	r3, #5
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 fdeb 	bl	80043a4 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007d4:	f000 fc0e 	bl	8000ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2302      	movs	r3, #2
 80007de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2103      	movs	r1, #3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 f882 	bl	8004900 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000802:	f000 fbf7 	bl	8000ff4 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800082c:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <MX_ADC1_Init+0xa0>)
 800082e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000832:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000836:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800083a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800083e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000848:	2201      	movs	r2, #1
 800084a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800084e:	2200      	movs	r2, #0
 8000850:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000856:	2200      	movs	r2, #0
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_ADC1_Init+0xa4>)
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000868:	2201      	movs	r2, #1
 800086a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_ADC1_Init+0x9c>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800087c:	f002 fdd8 	bl	8003430 <HAL_ADC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000886:	f000 fbb5 	bl	8000ff4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800088a:	2303      	movs	r3, #3
 800088c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800088e:	2301      	movs	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800089c:	f002 fee8 	bl	8003670 <HAL_ADC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008a6:	f000 fba5 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000009c 	.word	0x2000009c
 80008b8:	40012000 	.word	0x40012000
 80008bc:	0f000001 	.word	0x0f000001

080008c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_ADC2_Init+0x98>)
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <MX_ADC2_Init+0x9c>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_ADC2_Init+0x98>)
 80008da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_ADC2_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_ADC2_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_ADC2_Init+0x98>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_ADC2_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_ADC2_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_ADC2_Init+0x98>)
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <MX_ADC2_Init+0xa0>)
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_ADC2_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_ADC2_Init+0x98>)
 800090e:	2201      	movs	r2, #1
 8000910:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_ADC2_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_ADC2_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_ADC2_Init+0x98>)
 8000922:	f002 fd85 	bl	8003430 <HAL_ADC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800092c:	f000 fb62 	bl	8000ff4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000930:	230a      	movs	r3, #10
 8000932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000934:	2301      	movs	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_ADC2_Init+0x98>)
 8000942:	f002 fe95 	bl	8003670 <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800094c:	f000 fb52 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200000e4 	.word	0x200000e4
 800095c:	40012100 	.word	0x40012100
 8000960:	0f000001 	.word	0x0f000001

08000964 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_TIM10_Init+0x40>)
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <MX_TIM10_Init+0x44>)
 800096c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_TIM10_Init+0x40>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_TIM10_Init+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_TIM10_Init+0x40>)
 800097c:	f240 2257 	movw	r2, #599	; 0x257
 8000980:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_TIM10_Init+0x40>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_TIM10_Init+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_TIM10_Init+0x40>)
 8000990:	f004 fdf6 	bl	8005580 <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800099a:	f000 fb2b 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000012c 	.word	0x2000012c
 80009a8:	40014400 	.word	0x40014400

080009ac <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
 80009c0:	615a      	str	r2, [r3, #20]
 80009c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_TIM13_Init+0x94>)
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <MX_TIM13_Init+0x98>)
 80009c8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_TIM13_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <MX_TIM13_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1023;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_TIM13_Init+0x94>)
 80009d8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80009dc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_TIM13_Init+0x94>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_TIM13_Init+0x94>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <MX_TIM13_Init+0x94>)
 80009ec:	f004 fdc8 	bl	8005580 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80009f6:	f000 fafd 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80009fa:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_TIM13_Init+0x94>)
 80009fc:	f004 fe90 	bl	8005720 <HAL_TIM_PWM_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000a06:	f000 faf5 	bl	8000ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0a:	2360      	movs	r3, #96	; 0x60
 8000a0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_TIM13_Init+0x94>)
 8000a22:	f005 f8f9 	bl	8005c18 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000a2c:	f000 fae2 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <MX_TIM13_Init+0x94>)
 8000a32:	f000 fbbd 	bl	80011b0 <HAL_TIM_MspPostInit>

}
 8000a36:	bf00      	nop
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000178 	.word	0x20000178
 8000a44:	40001c00 	.word	0x40001c00

08000a48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_USART3_UART_Init+0x5c>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a8c:	f005 fd41 	bl	8006512 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a96:	f000 faad 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200001c4 	.word	0x200001c4
 8000aa4:	40004800 	.word	0x40004800

08000aa8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	2206      	movs	r2, #6
 8000ab8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aec:	f003 fb02 	bl	80040f4 <HAL_PCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000af6:	f000 fa7d 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000024c 	.word	0x2000024c

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b4b      	ldr	r3, [pc, #300]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a4a      	ldr	r2, [pc, #296]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b48      	ldr	r3, [pc, #288]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a44      	ldr	r2, [pc, #272]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a3e      	ldr	r2, [pc, #248]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a38      	ldr	r2, [pc, #224]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a2c      	ldr	r2, [pc, #176]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bb0:	4826      	ldr	r0, [pc, #152]	; (8000c4c <MX_GPIO_Init+0x148>)
 8000bb2:	f003 fa53 	bl	800405c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	4825      	ldr	r0, [pc, #148]	; (8000c50 <MX_GPIO_Init+0x14c>)
 8000bbc:	f003 fa4e 	bl	800405c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481f      	ldr	r0, [pc, #124]	; (8000c54 <MX_GPIO_Init+0x150>)
 8000bd8:	f003 f87c 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bdc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4815      	ldr	r0, [pc, #84]	; (8000c4c <MX_GPIO_Init+0x148>)
 8000bf6:	f003 f86d 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bfa:	2340      	movs	r3, #64	; 0x40
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480f      	ldr	r0, [pc, #60]	; (8000c50 <MX_GPIO_Init+0x14c>)
 8000c12:	f003 f85f 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4809      	ldr	r0, [pc, #36]	; (8000c50 <MX_GPIO_Init+0x14c>)
 8000c2a:	f003 f853 	bl	8003cd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2105      	movs	r1, #5
 8000c32:	2028      	movs	r0, #40	; 0x28
 8000c34:	f003 f824 	bl	8003c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c38:	2028      	movs	r0, #40	; 0x28
 8000c3a:	f003 f83d 	bl	8003cb8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3730      	adds	r7, #48	; 0x30
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40020800 	.word	0x40020800

08000c58 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
#if (FREERTOS_PROFILER == 1)
void configureTimerForRunTimeStats(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <configureTimerForRunTimeStats+0x14>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim10);
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <configureTimerForRunTimeStats+0x18>)
 8000c64:	f004 fce4 	bl	8005630 <HAL_TIM_Base_Start_IT>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20002448 	.word	0x20002448
 8000c70:	2000012c 	.word	0x2000012c

08000c74 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <getRunTimeCounterValue+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20002448 	.word	0x20002448

08000c8c <HAL_GPIO_EXTI_Callback>:
  * @brief User button IRQ callback function
  * @param uint16_t GPIO_Pin
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == USER_Btn_Pin)
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c9c:	d10a      	bne.n	8000cb4 <HAL_GPIO_EXTI_Callback+0x28>
  {
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <HAL_GPIO_EXTI_Callback+0x30>)
 8000ca4:	f003 f9f3 	bl	800408e <HAL_GPIO_TogglePin>
    osEventFlagsSet(EventGroup1, LED_ISR_FLAG);
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2151      	movs	r1, #81	; 0x51
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f006 fda6 	bl	8007800 <osEventFlagsSet>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	20002450 	.word	0x20002450

08000cc4 <getTemperature>:
  * @brief calculates temperature from TM35 sensor ADC raw value
  * @param uint16_t adc_raw_value
  * @retval None
  */
static uint16_t getTemperature(uint16_t adc_raw_value)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
	return (adc_raw_value / TM35_MV_TO_C); /* 10mV / 1C degree*/
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <getTemperature+0x24>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	08db      	lsrs	r3, r3, #3
 8000cd8:	b29b      	uxth	r3, r3
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	cccccccd 	.word	0xcccccccd

08000cec <printUsartMessage>:
  * @brief print message via USART interface
  * @param const char* message
  * @retval None
  */
static void printUsartMessage(char* message)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(
	     &huart3,
	     (uint8_t*)message,
	     strlen(message),
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff faa3 	bl	8000240 <strlen>
 8000cfa:	4603      	mov	r3, r0
	HAL_UART_Transmit(
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	2301      	movs	r3, #1
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	4803      	ldr	r0, [pc, #12]	; (8000d10 <printUsartMessage+0x24>)
 8000d04:	f005 fc53 	bl	80065ae <HAL_UART_Transmit>
	     1
	     );
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200001c4 	.word	0x200001c4

08000d14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  (void) argument;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f006 fcef 	bl	8007700 <osDelay>
 8000d22:	e7fb      	b.n	8000d1c <StartDefaultTask+0x8>

08000d24 <ledBlinkBlue>:
* @brief Function implementing the ledBlinkBlue thread (native FreeRTOS API).
* @param argument: Not used
* @retval None
*/
void ledBlinkBlue(void *pvParameters)
 {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	(void) pvParameters;
	for(;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <ledBlinkBlue+0x18>)
 8000d30:	f003 f9ad 	bl	800408e <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 8000d34:	2064      	movs	r0, #100	; 0x64
 8000d36:	f009 f803 	bl	8009d40 <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d3a:	e7f7      	b.n	8000d2c <ledBlinkBlue+0x8>
 8000d3c:	40020400 	.word	0x40020400

08000d40 <StartBlinkyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask */
void StartBlinkyTask(void *argument)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask */
  (void) argument;
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4804      	ldr	r0, [pc, #16]	; (8000d5c <StartBlinkyTask+0x1c>)
 8000d4c:	f003 f99f 	bl	800408e <HAL_GPIO_TogglePin>
	osDelay(500);
 8000d50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d54:	f006 fcd4 	bl	8007700 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d58:	e7f6      	b.n	8000d48 <StartBlinkyTask+0x8>
 8000d5a:	bf00      	nop
 8000d5c:	40020400 	.word	0x40020400

08000d60 <adcReadValueTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adcReadValueTask */
void adcReadValueTask(void *argument)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0b6      	sub	sp, #216	; 0xd8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  (void) argument;
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {
	uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <adcReadValueTask+0x38>)
 8000d6a:	f002 fc73 	bl	8003654 <HAL_ADC_GetValue>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6

	message.adc_val = adc_value;
 8000d74:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8000d78:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

	osMessageQueuePut(msg_QueueHandle,
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <adcReadValueTask+0x3c>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	f107 010c 	add.w	r1, r7, #12
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f006 fe8d 	bl	8007aa8 <osMessageQueuePut>
			&message,
			0,
			osWaitForever);

    osDelay(10);
 8000d8e:	200a      	movs	r0, #10
 8000d90:	f006 fcb6 	bl	8007700 <osDelay>
  {
 8000d94:	e7e8      	b.n	8000d68 <adcReadValueTask+0x8>
 8000d96:	bf00      	nop
 8000d98:	2000009c 	.word	0x2000009c
 8000d9c:	20001730 	.word	0x20001730

08000da0 <readTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readTempTask */
void readTempTask(void *argument)
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b0b6      	sub	sp, #216	; 0xd8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  (void) argument;
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {
	uint16_t adc_voltage = (ADC_VREF * (uint16_t)HAL_ADC_GetValue(&hadc2)) / ADC_RESOLUTION;
 8000da8:	4823      	ldr	r0, [pc, #140]	; (8000e38 <readTempTask+0x98>)
 8000daa:	f002 fc53 	bl	8003654 <HAL_ADC_GetValue>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000db8:	fb02 f303 	mul.w	r3, r2, r3
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <readTempTask+0x9c>)
 8000dbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc2:	441a      	add	r2, r3
 8000dc4:	12d2      	asrs	r2, r2, #11
 8000dc6:	17db      	asrs	r3, r3, #31
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	uint16_t tempC = getTemperature(adc_voltage); /* 10mV / 1C degree*/
 8000dce:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff76 	bl	8000cc4 <getTemperature>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

	itoa(tempC, message.msg_buf, 10);
 8000dde:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000de2:	f107 0108 	add.w	r1, r7, #8
 8000de6:	220a      	movs	r2, #10
 8000de8:	4618      	mov	r0, r3
 8000dea:	f00b f883 	bl	800bef4 <itoa>
	strcat(message.msg_buf, " C :[temperature value]\r\n\0");
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fa24 	bl	8000240 <strlen>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	4413      	add	r3, r2
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <readTempTask+0xa0>)
 8000e04:	461d      	mov	r5, r3
 8000e06:	4614      	mov	r4, r2
 8000e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0a:	6028      	str	r0, [r5, #0]
 8000e0c:	6069      	str	r1, [r5, #4]
 8000e0e:	60aa      	str	r2, [r5, #8]
 8000e10:	60eb      	str	r3, [r5, #12]
 8000e12:	cc03      	ldmia	r4!, {r0, r1}
 8000e14:	6128      	str	r0, [r5, #16]
 8000e16:	6169      	str	r1, [r5, #20]
 8000e18:	8823      	ldrh	r3, [r4, #0]
 8000e1a:	832b      	strh	r3, [r5, #24]

	osMessageQueuePut(msg_QueueHandle,
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <readTempTask+0xa4>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	f107 0108 	add.w	r1, r7, #8
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f006 fe3d 	bl	8007aa8 <osMessageQueuePut>
			&message,
			0,
			osWaitForever
			);

    osDelay(10);
 8000e2e:	200a      	movs	r0, #10
 8000e30:	f006 fc66 	bl	8007700 <osDelay>
  {
 8000e34:	e7b8      	b.n	8000da8 <readTempTask+0x8>
 8000e36:	bf00      	nop
 8000e38:	200000e4 	.word	0x200000e4
 8000e3c:	80080081 	.word	0x80080081
 8000e40:	0800c208 	.word	0x0800c208
 8000e44:	20001730 	.word	0x20001730

08000e48 <pwmLedBrightnessTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pwmLedBrightnessTask */
void pwmLedBrightnessTask(void *argument)
{
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b0b6      	sub	sp, #216	; 0xd8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  QUEUE_t message;

  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(msg_QueueHandle,
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <pwmLedBrightnessTask+0x80>)
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	f107 010c 	add.w	r1, r7, #12
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f006 fe97 	bl	8007b90 <osMessageQueueGet>
			&message,
			0,
			osWaitForever);


	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, message.adc_val);
 8000e62:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <pwmLedBrightnessTask+0x84>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34


	itoa(message.adc_val, message.msg_buf, 10);
 8000e6c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000e70:	4618      	mov	r0, r3
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	220a      	movs	r2, #10
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f00b f83b 	bl	800bef4 <itoa>
	strcat(message.msg_buf, " :[potentiometer value]\r\n\0");
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff f9dc 	bl	8000240 <strlen>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4413      	add	r3, r2
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <pwmLedBrightnessTask+0x88>)
 8000e94:	461d      	mov	r5, r3
 8000e96:	4614      	mov	r4, r2
 8000e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e9a:	6028      	str	r0, [r5, #0]
 8000e9c:	6069      	str	r1, [r5, #4]
 8000e9e:	60aa      	str	r2, [r5, #8]
 8000ea0:	60eb      	str	r3, [r5, #12]
 8000ea2:	cc03      	ldmia	r4!, {r0, r1}
 8000ea4:	6128      	str	r0, [r5, #16]
 8000ea6:	6169      	str	r1, [r5, #20]
 8000ea8:	8823      	ldrh	r3, [r4, #0]
 8000eaa:	832b      	strh	r3, [r5, #24]

	osMessageQueuePut(msg_QueueHandle,
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <pwmLedBrightnessTask+0x80>)
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	f107 010c 	add.w	r1, r7, #12
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f006 fdf5 	bl	8007aa8 <osMessageQueuePut>
			&message,
			0,
			osWaitForever
			);

    osDelay(10);
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f006 fc1e 	bl	8007700 <osDelay>
	osMessageQueueGet(msg_QueueHandle,
 8000ec4:	e7c4      	b.n	8000e50 <pwmLedBrightnessTask+0x8>
 8000ec6:	bf00      	nop
 8000ec8:	20001730 	.word	0x20001730
 8000ecc:	20000178 	.word	0x20000178
 8000ed0:	0800c224 	.word	0x0800c224

08000ed4 <usartDebugPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usartDebugPrintTask */
void usartDebugPrintTask(void *argument)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0b6      	sub	sp, #216	; 0xd8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  QUEUE_t message;
//	char msg[20] = "test\r\n\0";
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(msg_QueueHandle,
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <usartDebugPrintTask+0x2c>)
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	f107 010c 	add.w	r1, r7, #12
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f006 fe51 	bl	8007b90 <osMessageQueueGet>
			&message,
			0,
			osWaitForever
			);

	printUsartMessage(&message.msg_buf);
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fefa 	bl	8000cec <printUsartMessage>

    osDelay(1);
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f006 fc01 	bl	8007700 <osDelay>
	osMessageQueueGet(msg_QueueHandle,
 8000efe:	e7ed      	b.n	8000edc <usartDebugPrintTask+0x8>
 8000f00:	20001730 	.word	0x20001730

08000f04 <checkISRStateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_checkISRStateTask */
void checkISRStateTask(void *argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0b8      	sub	sp, #224	; 0xe0
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN checkISRStateTask */
  (void) argument;

  GPIO_PinState led_gpio_state;

  const char* led_on = "Pin state HIGH [Flag from ISR]\r\n\0";
 8000f0c:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <checkISRStateTask+0xb4>)
 8000f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  const char* led_off = "Pin state LOW [Flag from ISR]\r\n\0";
 8000f12:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <checkISRStateTask+0xb8>)
 8000f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  const char* led_unknown = "Pin state UNKNOWN [Flag from ISR]\r\n\0";
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <checkISRStateTask+0xbc>)
 8000f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {

	osEventFlagsWait(EventGroup1,
 8000f1e:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <checkISRStateTask+0xc0>)
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	2201      	movs	r2, #1
 8000f28:	2151      	movs	r1, #81	; 0x51
 8000f2a:	f006 fcc1 	bl	80078b0 <osEventFlagsWait>
			LED_ISR_FLAG,
			osFlagsWaitAll,
			osWaitForever
			);

	led_gpio_state = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000f2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f32:	4825      	ldr	r0, [pc, #148]	; (8000fc8 <checkISRStateTask+0xc4>)
 8000f34:	f003 f87a 	bl	800402c <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

	switch(led_gpio_state)
 8000f3e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d012      	beq.n	8000f6c <checkISRStateTask+0x68>
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d121      	bne.n	8000f8e <checkISRStateTask+0x8a>
	{
	case GPIO_PIN_SET:
		strcpy(message.msg_buf, led_on);
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8000f52:	4618      	mov	r0, r3
 8000f54:	f00b f852 	bl	800bffc <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <checkISRStateTask+0xc8>)
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	f107 0108 	add.w	r1, r7, #8
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	2200      	movs	r2, #0
 8000f66:	f006 fd9f 	bl	8007aa8 <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000f6a:	e021      	b.n	8000fb0 <checkISRStateTask+0xac>

	case GPIO_PIN_RESET:
		strcpy(message.msg_buf, led_off);
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000f74:	4618      	mov	r0, r3
 8000f76:	f00b f841 	bl	800bffc <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <checkISRStateTask+0xc8>)
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	f107 0108 	add.w	r1, r7, #8
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	2200      	movs	r2, #0
 8000f88:	f006 fd8e 	bl	8007aa8 <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000f8c:	e010      	b.n	8000fb0 <checkISRStateTask+0xac>

	default:
		strcpy(message.msg_buf, led_unknown);
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8000f96:	4618      	mov	r0, r3
 8000f98:	f00b f830 	bl	800bffc <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <checkISRStateTask+0xc8>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f107 0108 	add.w	r1, r7, #8
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f006 fd7d 	bl	8007aa8 <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000fae:	bf00      	nop
	}

    osDelay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f006 fba5 	bl	8007700 <osDelay>
	osEventFlagsWait(EventGroup1,
 8000fb6:	e7b2      	b.n	8000f1e <checkISRStateTask+0x1a>
 8000fb8:	0800c240 	.word	0x0800c240
 8000fbc:	0800c264 	.word	0x0800c264
 8000fc0:	0800c288 	.word	0x0800c288
 8000fc4:	20002450 	.word	0x20002450
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	20001730 	.word	0x20001730

08000fd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fe2:	f002 f9e1 	bl	80033a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <Error_Handler+0x8>
	...

08001000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_MspInit+0x4c>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_MspInit+0x4c>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	210f      	movs	r1, #15
 800103a:	f06f 0001 	mvn.w	r0, #1
 800103e:	f002 fe1f 	bl	8003c80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800

08001050 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a2a      	ldr	r2, [pc, #168]	; (8001118 <HAL_ADC_MspInit+0xc8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d124      	bne.n	80010bc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <HAL_ADC_MspInit+0xcc>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a29      	ldr	r2, [pc, #164]	; (800111c <HAL_ADC_MspInit+0xcc>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <HAL_ADC_MspInit+0xcc>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <HAL_ADC_MspInit+0xcc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <HAL_ADC_MspInit+0xcc>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <HAL_ADC_MspInit+0xcc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = Potentiometer_AIN_Pin;
 80010a2:	2308      	movs	r3, #8
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Potentiometer_AIN_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	481a      	ldr	r0, [pc, #104]	; (8001120 <HAL_ADC_MspInit+0xd0>)
 80010b6:	f002 fe0d 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010ba:	e028      	b.n	800110e <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a18      	ldr	r2, [pc, #96]	; (8001124 <HAL_ADC_MspInit+0xd4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d123      	bne.n	800110e <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_ADC_MspInit+0xcc>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_ADC_MspInit+0xcc>)
 80010cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_ADC_MspInit+0xcc>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_ADC_MspInit+0xcc>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_ADC_MspInit+0xcc>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_ADC_MspInit+0xcc>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LM35_sensor_AIN_Pin;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LM35_sensor_AIN_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <HAL_ADC_MspInit+0xd8>)
 800110a:	f002 fde3 	bl	8003cd4 <HAL_GPIO_Init>
}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	; 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000
 8001124:	40012100 	.word	0x40012100
 8001128:	40020800 	.word	0x40020800

0800112c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <HAL_TIM_Base_MspInit+0x78>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d114      	bne.n	8001168 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_TIM_Base_MspInit+0x7c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <HAL_TIM_Base_MspInit+0x7c>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_TIM_Base_MspInit+0x7c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2105      	movs	r1, #5
 800115a:	2019      	movs	r0, #25
 800115c:	f002 fd90 	bl	8003c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001160:	2019      	movs	r0, #25
 8001162:	f002 fda9 	bl	8003cb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001166:	e018      	b.n	800119a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM13)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <HAL_TIM_Base_MspInit+0x80>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d113      	bne.n	800119a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_TIM_Base_MspInit+0x7c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_TIM_Base_MspInit+0x7c>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_TIM_Base_MspInit+0x7c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 15, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	210f      	movs	r1, #15
 800118e:	202c      	movs	r0, #44	; 0x2c
 8001190:	f002 fd76 	bl	8003c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001194:	202c      	movs	r0, #44	; 0x2c
 8001196:	f002 fd8f 	bl	8003cb8 <HAL_NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40014400 	.word	0x40014400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40001c00 	.word	0x40001c00

080011b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a11      	ldr	r2, [pc, #68]	; (8001214 <HAL_TIM_MspPostInit+0x64>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d11b      	bne.n	800120a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_TIM_MspPostInit+0x68>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <HAL_TIM_MspPostInit+0x68>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_TIM_MspPostInit+0x68>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011ea:	2340      	movs	r3, #64	; 0x40
 80011ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80011fa:	2309      	movs	r3, #9
 80011fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <HAL_TIM_MspPostInit+0x6c>)
 8001206:	f002 fd65 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40001c00 	.word	0x40001c00
 8001218:	40023800 	.word	0x40023800
 800121c:	40020000 	.word	0x40020000

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0ae      	sub	sp, #184	; 0xb8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2290      	movs	r2, #144	; 0x90
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f00a fe69 	bl	800bf18 <memset>
  if(huart->Instance==USART3)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <HAL_UART_MspInit+0xb4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d13c      	bne.n	80012ca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001254:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8001256:	2320      	movs	r3, #32
 8001258:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fd66 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800126a:	f7ff fec3 	bl	8000ff4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_UART_MspInit+0xb8>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_UART_MspInit+0xb8>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_UART_MspInit+0xb8>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_UART_MspInit+0xb8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <HAL_UART_MspInit+0xb8>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_UART_MspInit+0xb8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800129e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012b8:	2307      	movs	r3, #7
 80012ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_UART_MspInit+0xbc>)
 80012c6:	f002 fd05 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	37b8      	adds	r7, #184	; 0xb8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40004800 	.word	0x40004800
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0ae      	sub	sp, #184	; 0xb8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2290      	movs	r2, #144	; 0x90
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00a fe09 	bl	800bf18 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800130e:	d159      	bne.n	80013c4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001314:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4618      	mov	r0, r3
 8001322:	f003 fd05 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800132c:	f7ff fe62 	bl	8000ff4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_PCD_MspInit+0xec>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	4a25      	ldr	r2, [pc, #148]	; (80013cc <HAL_PCD_MspInit+0xec>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6313      	str	r3, [r2, #48]	; 0x30
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_PCD_MspInit+0xec>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8001348:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800134c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001362:	230a      	movs	r3, #10
 8001364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800136c:	4619      	mov	r1, r3
 800136e:	4818      	ldr	r0, [pc, #96]	; (80013d0 <HAL_PCD_MspInit+0xf0>)
 8001370:	f002 fcb0 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800138c:	4619      	mov	r1, r3
 800138e:	4810      	ldr	r0, [pc, #64]	; (80013d0 <HAL_PCD_MspInit+0xf0>)
 8001390:	f002 fca0 	bl	8003cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_PCD_MspInit+0xec>)
 8001396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001398:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <HAL_PCD_MspInit+0xec>)
 800139a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139e:	6353      	str	r3, [r2, #52]	; 0x34
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_PCD_MspInit+0xec>)
 80013a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_PCD_MspInit+0xec>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_PCD_MspInit+0xec>)
 80013b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b6:	6453      	str	r3, [r2, #68]	; 0x44
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <HAL_PCD_MspInit+0xec>)
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	37b8      	adds	r7, #184	; 0xb8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000

080013d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_InitTick+0xd0>)
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	4a2e      	ldr	r2, [pc, #184]	; (80014a4 <HAL_InitTick+0xd0>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	6453      	str	r3, [r2, #68]	; 0x44
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <HAL_InitTick+0xd0>)
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013fc:	f107 020c 	add.w	r2, r7, #12
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fc60 	bl	8004ccc <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800140c:	f003 fc4a 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 8001410:	4603      	mov	r3, r0
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	4a23      	ldr	r2, [pc, #140]	; (80014a8 <HAL_InitTick+0xd4>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0c9b      	lsrs	r3, r3, #18
 8001420:	3b01      	subs	r3, #1
 8001422:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8001424:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_InitTick+0xd8>)
 8001426:	4a22      	ldr	r2, [pc, #136]	; (80014b0 <HAL_InitTick+0xdc>)
 8001428:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <HAL_InitTick+0xd8>)
 800142c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001430:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_InitTick+0xd8>)
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_InitTick+0xd8>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_InitTick+0xd8>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_InitTick+0xd8>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim8);
 800144a:	4818      	ldr	r0, [pc, #96]	; (80014ac <HAL_InitTick+0xd8>)
 800144c:	f004 f898 	bl	8005580 <HAL_TIM_Base_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800145a:	2b00      	cmp	r3, #0
 800145c:	d11b      	bne.n	8001496 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <HAL_InitTick+0xd8>)
 8001460:	f004 f8e6 	bl	8005630 <HAL_TIM_Base_Start_IT>
 8001464:	4603      	mov	r3, r0
 8001466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800146a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800146e:	2b00      	cmp	r3, #0
 8001470:	d111      	bne.n	8001496 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001472:	202c      	movs	r0, #44	; 0x2c
 8001474:	f002 fc20 	bl	8003cb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	d808      	bhi.n	8001490 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 800147e:	2200      	movs	r2, #0
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	202c      	movs	r0, #44	; 0x2c
 8001484:	f002 fbfc 	bl	8003c80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <HAL_InitTick+0xe0>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e002      	b.n	8001496 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800149a:	4618      	mov	r0, r3
 800149c:	3730      	adds	r7, #48	; 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	431bde83 	.word	0x431bde83
 80014ac:	20002454 	.word	0x20002454
 80014b0:	40010400 	.word	0x40010400
 80014b4:	20000010 	.word	0x20000010

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler+0x4>

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
#if (FREERTOS_PROFILER == 1)
  ulHighFrequencyTimerTicks++;
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	4a03      	ldr	r2, [pc, #12]	; (80014fc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80014f0:	6013      	str	r3, [r2, #0]
#endif
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80014f4:	f004 fa70 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20002448 	.word	0x20002448
 8001500:	2000012c 	.word	0x2000012c

08001504 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001508:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800150c:	f002 fdda 	bl	80040c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800151a:	f004 fa5d 	bl	80059d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001520:	f004 fa5a 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20002454 	.word	0x20002454
 800152c:	20000178 	.word	0x20000178

08001530 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800155a:	490e      	ldr	r1, [pc, #56]	; (8001594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001570:	4c0b      	ldr	r4, [pc, #44]	; (80015a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157e:	f7ff ffd7 	bl	8001530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f00a fc7b 	bl	800be7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff f80d 	bl	80005a4 <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800158c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001598:	0800d87c 	.word	0x0800d87c
  ldr r2, =_sbss
 800159c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80015a0:	2000f614 	.word	0x2000f614

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>

080015a6 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f008 f80c 	bl	80095cc <uxQueueGetQueueNumber>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f008 f81a 	bl	8009600 <ucQueueGetQueueType>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f009 f8fa 	bl	800a7d8 <uxTaskGetTaskNumber>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29b      	uxth	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f009 f8ed 	bl	800a7d8 <uxTaskGetTaskNumber>
 80015fe:	4603      	mov	r3, r0
 8001600:	0c1b      	lsrs	r3, r3, #16
 8001602:	b29b      	uxth	r3, r3
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f009 f8dd 	bl	800a7d8 <uxTaskGetTaskNumber>
 800161e:	4602      	mov	r2, r0
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <prvTraceSetTaskNumberLow16+0x2c>)
 8001622:	4013      	ands	r3, r2
 8001624:	887a      	ldrh	r2, [r7, #2]
 8001626:	4313      	orrs	r3, r2
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f009 f8ea 	bl	800a804 <vTaskSetTaskNumber>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	ffff0000 	.word	0xffff0000

0800163c <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f009 f8c5 	bl	800a7d8 <uxTaskGetTaskNumber>
 800164e:	4603      	mov	r3, r0
 8001650:	b29a      	uxth	r2, r3
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041b      	lsls	r3, r3, #16
 8001656:	4313      	orrs	r3, r2
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f009 f8d2 	bl	800a804 <vTaskSetTaskNumber>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff98 	bl	80015a6 <prvTraceGetQueueNumber>
 8001676:	4603      	mov	r3, r0
 8001678:	b29b      	uxth	r3, r3
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ff8b 	bl	80015a6 <prvTraceGetQueueNumber>
 8001690:	4603      	mov	r3, r0
 8001692:	0c1b      	lsrs	r3, r3, #16
 8001694:	b29b      	uxth	r3, r3
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff7a 	bl	80015a6 <prvTraceGetQueueNumber>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <prvTraceSetQueueNumberLow16+0x2c>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	887a      	ldrh	r2, [r7, #2]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f007 ff90 	bl	80095e4 <vQueueSetQueueNumber>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	ffff0000 	.word	0xffff0000

080016d0 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff62 	bl	80015a6 <prvTraceGetQueueNumber>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	4313      	orrs	r3, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f007 ff78 	bl	80095e4 <vQueueSetQueueNumber>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <prvTraceGetTimerNumberLow16>:

#if (TRC_CFG_INCLUDE_TIMER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0)

uint16_t prvTraceGetTimerNumberLow16(void* handle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTimerGetTimerNumber(handle));
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f009 ff65 	bl	800b5d4 <uxTimerGetTimerNumber>
 800170a:	4603      	mov	r3, r0
 800170c:	b29b      	uxth	r3, r3
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <prvTraceGetTimerNumberHigh16>:

uint16_t prvTraceGetTimerNumberHigh16(void* handle)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTimerGetTimerNumber(handle));
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f009 ff58 	bl	800b5d4 <uxTimerGetTimerNumber>
 8001724:	4603      	mov	r3, r0
 8001726:	0c1b      	lsrs	r3, r3, #16
 8001728:	b29b      	uxth	r3, r3
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <prvTraceGetEventGroupNumberLow16>:
#endif /* (TRC_CFG_INCLUDE_TIMER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#if (TRC_CFG_INCLUDE_EVENT_GROUP_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0)

uint16_t prvTraceGetEventGroupNumberLow16(void* handle)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxEventGroupGetNumber(handle));
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f006 fe56 	bl	80083ec <uxEventGroupGetNumber>
 8001740:	4603      	mov	r3, r0
 8001742:	b29b      	uxth	r3, r3
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <prvTraceGetEventGroupNumberHigh16>:

uint16_t prvTraceGetEventGroupNumberHigh16(void* handle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxEventGroupGetNumber(handle));
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f006 fe49 	bl	80083ec <uxEventGroupGetNumber>
 800175a:	4603      	mov	r3, r0
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	b29b      	uxth	r3, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <prvTraceSetEventGroupNumberLow16>:

void prvTraceSetEventGroupNumberLow16(void* handle, uint16_t value)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
	vEventGroupSetNumber(handle, TRACE_SET_LOW16(uxEventGroupGetNumber(handle), value));
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f006 fe39 	bl	80083ec <uxEventGroupGetNumber>
 800177a:	4602      	mov	r2, r0
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <prvTraceSetEventGroupNumberLow16+0x2c>)
 800177e:	4013      	ands	r3, r2
 8001780:	887a      	ldrh	r2, [r7, #2]
 8001782:	4313      	orrs	r3, r2
 8001784:	4619      	mov	r1, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f006 fe46 	bl	8008418 <vEventGroupSetNumber>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	ffff0000 	.word	0xffff0000

08001798 <prvTraceSetEventGroupNumberHigh16>:

void prvTraceSetEventGroupNumberHigh16(void* handle, uint16_t value)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
	vEventGroupSetNumber(handle, TRACE_SET_HIGH16(uxEventGroupGetNumber(handle), value));
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f006 fe21 	bl	80083ec <uxEventGroupGetNumber>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	4313      	orrs	r3, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f006 fe2e 	bl	8008418 <vEventGroupSetNumber>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 80017c8:	f009 f90c 	bl	800a9e4 <xTaskGetCurrentTaskHandle>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80017d8:	4b64      	ldr	r3, [pc, #400]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2209      	movs	r2, #9
 80017de:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 80017e0:	4b62      	ldr	r3, [pc, #392]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	220a      	movs	r2, #10
 80017e6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 80017ea:	4b60      	ldr	r3, [pc, #384]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	220a      	movs	r2, #10
 80017f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 80017f4:	4b5d      	ldr	r3, [pc, #372]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	220a      	movs	r2, #10
 80017fa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 80017fe:	4b5b      	ldr	r3, [pc, #364]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	220f      	movs	r2, #15
 8001804:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8001808:	4b58      	ldr	r3, [pc, #352]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2205      	movs	r2, #5
 800180e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8001812:	4b56      	ldr	r3, [pc, #344]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2205      	movs	r2, #5
 8001818:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 800181c:	4b53      	ldr	r3, [pc, #332]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2205      	movs	r2, #5
 8001822:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8001826:	4b51      	ldr	r3, [pc, #324]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2205      	movs	r2, #5
 800182c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8001830:	4b4e      	ldr	r3, [pc, #312]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2205      	movs	r2, #5
 8001836:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 800183a:	4b4c      	ldr	r3, [pc, #304]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	220f      	movs	r2, #15
 8001840:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8001844:	4b49      	ldr	r3, [pc, #292]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	220f      	movs	r2, #15
 800184a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	220f      	movs	r2, #15
 8001854:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8001858:	4b44      	ldr	r3, [pc, #272]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	220f      	movs	r2, #15
 800185e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8001862:	4b42      	ldr	r3, [pc, #264]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	220f      	movs	r2, #15
 8001868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 800186c:	4b3f      	ldr	r3, [pc, #252]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	220f      	movs	r2, #15
 8001872:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8001876:	4b3d      	ldr	r3, [pc, #244]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	220f      	movs	r2, #15
 800187c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8001880:	4b3a      	ldr	r3, [pc, #232]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	220f      	movs	r2, #15
 8001886:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 800188a:	4b38      	ldr	r3, [pc, #224]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	220f      	movs	r2, #15
 8001890:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2210      	movs	r2, #16
 800189a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2210      	movs	r2, #16
 80018a4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 80018a8:	4b30      	ldr	r3, [pc, #192]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2210      	movs	r2, #16
 80018ae:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 80018b2:	4b2e      	ldr	r3, [pc, #184]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2213      	movs	r2, #19
 80018b8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2211      	movs	r2, #17
 80018c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 80018c6:	4b29      	ldr	r3, [pc, #164]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2210      	movs	r2, #16
 80018cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 80018d0:	4b26      	ldr	r3, [pc, #152]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2213      	movs	r2, #19
 80018d6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2213      	movs	r2, #19
 80018e0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2213      	movs	r2, #19
 80018ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 80018f8:	4b1c      	ldr	r3, [pc, #112]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	22a0      	movs	r2, #160	; 0xa0
 80018fe:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800190a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001916:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f240 22fd 	movw	r2, #765	; 0x2fd
 8001922:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f240 3252 	movw	r2, #850	; 0x352
 800192e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f240 32a2 	movw	r2, #930	; 0x3a2
 800193a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f240 4201 	movw	r2, #1025	; 0x401
 8001946:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001952:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <vTraceInitObjectPropertyTable+0x198>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800195e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	2000abd8 	.word	0x2000abd8

08001970 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8001974:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001976:	2200      	movs	r2, #0
 8001978:	825a      	strh	r2, [r3, #18]
 800197a:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 800197c:	8a5a      	ldrh	r2, [r3, #18]
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001980:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001984:	220a      	movs	r2, #10
 8001986:	829a      	strh	r2, [r3, #20]
 8001988:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 800198a:	8a9a      	ldrh	r2, [r3, #20]
 800198c:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 800198e:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8001990:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001992:	2214      	movs	r2, #20
 8001994:	82da      	strh	r2, [r3, #22]
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001998:	8ada      	ldrh	r2, [r3, #22]
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 800199c:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 800199e:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019a0:	221e      	movs	r2, #30
 80019a2:	831a      	strh	r2, [r3, #24]
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019a6:	8b1a      	ldrh	r2, [r3, #24]
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019aa:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 80019ac:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019ae:	222d      	movs	r2, #45	; 0x2d
 80019b0:	835a      	strh	r2, [r3, #26]
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019b4:	8b5a      	ldrh	r2, [r3, #26]
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019b8:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019bc:	2232      	movs	r2, #50	; 0x32
 80019be:	839a      	strh	r2, [r3, #28]
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019c2:	8b9a      	ldrh	r2, [r3, #28]
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019c6:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019ca:	2237      	movs	r2, #55	; 0x37
 80019cc:	83da      	strh	r2, [r3, #30]
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019d0:	8bda      	ldrh	r2, [r3, #30]
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019d4:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019d8:	223c      	movs	r2, #60	; 0x3c
 80019da:	841a      	strh	r2, [r3, #32]
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019de:	8c1a      	ldrh	r2, [r3, #32]
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019e2:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019e6:	2241      	movs	r2, #65	; 0x41
 80019e8:	845a      	strh	r2, [r3, #34]	; 0x22
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019ec:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019f0:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019f4:	2209      	movs	r2, #9
 80019f6:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 80019fa:	2213      	movs	r2, #19
 80019fc:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001a00:	221d      	movs	r2, #29
 8001a02:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001a06:	222c      	movs	r2, #44	; 0x2c
 8001a08:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001a0c:	2231      	movs	r2, #49	; 0x31
 8001a0e:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001a12:	2236      	movs	r2, #54	; 0x36
 8001a14:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001a18:	223b      	movs	r2, #59	; 0x3b
 8001a1a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001a1e:	2240      	movs	r2, #64	; 0x40
 8001a20:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <vTraceInitObjectHandleStack+0xc4>)
 8001a24:	2245      	movs	r2, #69	; 0x45
 8001a26:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	200024cc 	.word	0x200024cc

08001a38 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d827      	bhi.n	8001a98 <pszTraceGetErrorNotEnoughHandles+0x60>
 8001a48:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <pszTraceGetErrorNotEnoughHandles+0x18>)
 8001a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4e:	bf00      	nop
 8001a50:	08001a85 	.word	0x08001a85
 8001a54:	08001a7d 	.word	0x08001a7d
 8001a58:	08001a81 	.word	0x08001a81
 8001a5c:	08001a75 	.word	0x08001a75
 8001a60:	08001a79 	.word	0x08001a79
 8001a64:	08001a89 	.word	0x08001a89
 8001a68:	08001a8d 	.word	0x08001a8d
 8001a6c:	08001a91 	.word	0x08001a91
 8001a70:	08001a95 	.word	0x08001a95
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8001a76:	e010      	b.n	8001a9a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <pszTraceGetErrorNotEnoughHandles+0x74>)
 8001a7a:	e00e      	b.n	8001a9a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <pszTraceGetErrorNotEnoughHandles+0x78>)
 8001a7e:	e00c      	b.n	8001a9a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8001a82:	e00a      	b.n	8001a9a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <pszTraceGetErrorNotEnoughHandles+0x80>)
 8001a86:	e008      	b.n	8001a9a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <pszTraceGetErrorNotEnoughHandles+0x84>)
 8001a8a:	e006      	b.n	8001a9a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <pszTraceGetErrorNotEnoughHandles+0x88>)
 8001a8e:	e004      	b.n	8001a9a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8001a92:	e002      	b.n	8001a9a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <pszTraceGetErrorNotEnoughHandles+0x90>)
 8001a96:	e000      	b.n	8001a9a <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	0800c2b0 	.word	0x0800c2b0
 8001aac:	0800c2f8 	.word	0x0800c2f8
 8001ab0:	0800c340 	.word	0x0800c340
 8001ab4:	0800c394 	.word	0x0800c394
 8001ab8:	0800c3e0 	.word	0x0800c3e0
 8001abc:	0800c42c 	.word	0x0800c42c
 8001ac0:	0800c478 	.word	0x0800c478
 8001ac4:	0800c4cc 	.word	0x0800c4cc
 8001ac8:	0800c524 	.word	0x0800c524
 8001acc:	0800c580 	.word	0x0800c580

08001ad0 <vTraceEnable>:
* 
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
 8001ad8:	f000 fd2a 	bl	8002530 <prvTraceInitTraceData>
	
	if (startOption == TRC_START)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d102      	bne.n	8001ae8 <vTraceEnable+0x18>
	{
		vTraceStart();
 8001ae2:	f000 f887 	bl	8001bf4 <vTraceStart>
	}
	else if (startOption != TRC_INIT)
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
	}	
}
 8001ae6:	e00c      	b.n	8001b02 <vTraceEnable+0x32>
	else if (startOption == TRC_START_AWAIT_HOST)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d103      	bne.n	8001af6 <vTraceEnable+0x26>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8001aee:	4807      	ldr	r0, [pc, #28]	; (8001b0c <vTraceEnable+0x3c>)
 8001af0:	f001 f8a0 	bl	8002c34 <prvTraceError>
}
 8001af4:	e005      	b.n	8001b02 <vTraceEnable+0x32>
	else if (startOption != TRC_INIT)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <vTraceEnable+0x32>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <vTraceEnable+0x40>)
 8001afe:	f001 f899 	bl	8002c34 <prvTraceError>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	0800c5b0 	.word	0x0800c5b0
 8001b10:	0800c5f0 	.word	0x0800c5f0

08001b14 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <uiTraceStart+0xcc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10a      	bne.n	8001b3c <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <uiTraceStart+0xcc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d104      	bne.n	8001b38 <uiTraceStart+0x24>
 8001b2e:	482d      	ldr	r0, [pc, #180]	; (8001be4 <uiTraceStart+0xd0>)
 8001b30:	f001 f880 	bl	8002c34 <prvTraceError>
 8001b34:	2300      	movs	r3, #0
 8001b36:	e04e      	b.n	8001bd6 <uiTraceStart+0xc2>
		return 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e04c      	b.n	8001bd6 <uiTraceStart+0xc2>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8001b3c:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <uiTraceStart+0xcc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <uiTraceStart+0x36>
		return 1; /* Already running */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e045      	b.n	8001bd6 <uiTraceStart+0xc2>

	if (traceErrorMessage == NULL)
 8001b4a:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <uiTraceStart+0xd4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d13e      	bne.n	8001bd0 <uiTraceStart+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b52:	f3ef 8310 	mrs	r3, PRIMASK
 8001b56:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b58:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f383 8810 	msr	PRIMASK, r3
}
 8001b66:	bf00      	nop
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <uiTraceStart+0xd8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <uiTraceStart+0xd8>)
 8001b70:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <uiTraceStart+0xcc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8001b7a:	f7ff fe23 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fd28 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 8001b86:	4603      	mov	r3, r0
 8001b88:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d110      	bne.n	8001bb2 <uiTraceStart+0x9e>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 fe5d 	bl	8002850 <prvTraceGetObjectHandle>
 8001b96:	4603      	mov	r3, r0
 8001b98:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <uiTraceStart+0xdc>)
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 ff97 	bl	8002ad4 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4619      	mov	r1, r3
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 fba3 	bl	80022f8 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 fa73 	bl	80020a0 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <uiTraceStart+0xd8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <uiTraceStart+0xd8>)
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f383 8810 	msr	PRIMASK, r3
}
 8001bce:	bf00      	nop
	}

	return RecorderDataPtr->recorderActive;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <uiTraceStart+0xcc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000abd8 	.word	0x2000abd8
 8001be4:	0800c624 	.word	0x0800c624
 8001be8:	200024bc 	.word	0x200024bc
 8001bec:	200024b4 	.word	0x200024b4
 8001bf0:	0800c668 	.word	0x0800c668

08001bf4 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 8001bf8:	f7ff ff8c 	bl	8001b14 <uiTraceStart>
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <vTraceStop+0x28>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <vTraceStop+0x28>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <vTraceStop+0x2c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <vTraceStop+0x2c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4798      	blx	r3
	}
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000abd8 	.word	0x2000abd8
 8001c2c:	200024c4 	.word	0x200024c4

08001c30 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08e      	sub	sp, #56	; 0x38
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 8001c3c:	4b40      	ldr	r3, [pc, #256]	; (8001d40 <vTraceStoreMemMangEvent+0x110>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d078      	beq.n	8001d36 <vTraceStoreMemMangEvent+0x106>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	da03      	bge.n	8001c52 <vTraceStoreMemMangEvent+0x22>
		size = (uint32_t)(- signed_size);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	425b      	negs	r3, r3
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c50:	e001      	b.n	8001c56 <vTraceStoreMemMangEvent+0x26>
	else
		size = (uint32_t)(signed_size);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c56:	f3ef 8310 	mrs	r3, PRIMASK
 8001c5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8001c5c:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8001c60:	2301      	movs	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f383 8810 	msr	PRIMASK, r3
}
 8001c6a:	bf00      	nop
 8001c6c:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <vTraceStoreMemMangEvent+0x114>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <vTraceStoreMemMangEvent+0x114>)
 8001c74:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
 8001c7c:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <vTraceStoreMemMangEvent+0x118>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a30      	ldr	r2, [pc, #192]	; (8001d48 <vTraceStoreMemMangEvent+0x118>)
 8001c86:	6013      	str	r3, [r2, #0]
	
	if (RecorderDataPtr->recorderActive)
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <vTraceStoreMemMangEvent+0x110>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d046      	beq.n	8001d20 <vTraceStoreMemMangEvent+0xf0>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8001c92:	20ff      	movs	r0, #255	; 0xff
 8001c94:	f001 f8ac 	bl	8002df0 <prvTraceGetDTS>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8001c9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ca0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ca4:	f000 f95a 	bl	8001f5c <prvTraceGetParam>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8001cac:	f000 fd54 	bl	8002758 <prvTraceNextFreeEventBufferSlot>
 8001cb0:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d033      	beq.n	8001d20 <vTraceStoreMemMangEvent+0xf0>
		{
			ms->dts = dts1;
 8001cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001cbe:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8001cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8001cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001cca:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001ccc:	f001 f868 	bl	8002da0 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cd6:	f000 f941 	bl	8001f5c <prvTraceGetParam>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8001ce4:	f000 fd38 	bl	8002758 <prvTraceNextFreeEventBufferSlot>
 8001ce8:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d017      	beq.n	8001d20 <vTraceStoreMemMangEvent+0xf0>
			{
				ma->addr_low = addr_low;
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001cf4:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001cfc:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
 8001d12:	f001 f845 	bl	8002da0 <prvTraceUpdateCounters>
				RecorderDataPtr->heapMemUsage = heapMemUsage;
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <vTraceStoreMemMangEvent+0x110>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <vTraceStoreMemMangEvent+0x118>)
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <vTraceStoreMemMangEvent+0x114>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <vTraceStoreMemMangEvent+0x114>)
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f383 8810 	msr	PRIMASK, r3
}
 8001d34:	e000      	b.n	8001d38 <vTraceStoreMemMangEvent+0x108>
		return;
 8001d36:	bf00      	nop
}
 8001d38:	3738      	adds	r7, #56	; 0x38
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000abd8 	.word	0x2000abd8
 8001d44:	200024b4 	.word	0x200024b4
 8001d48:	200024c8 	.word	0x200024c8

08001d4c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	460b      	mov	r3, r1
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2bfe      	cmp	r3, #254	; 0xfe
 8001d5e:	d903      	bls.n	8001d68 <prvTraceStoreKernelCall+0x1c>
 8001d60:	4832      	ldr	r0, [pc, #200]	; (8001e2c <prvTraceStoreKernelCall+0xe0>)
 8001d62:	f000 ff67 	bl	8002c34 <prvTraceError>
 8001d66:	e05d      	b.n	8001e24 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8001d68:	7afb      	ldrb	r3, [r7, #11]
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d903      	bls.n	8001d76 <prvTraceStoreKernelCall+0x2a>
 8001d6e:	4830      	ldr	r0, [pc, #192]	; (8001e30 <prvTraceStoreKernelCall+0xe4>)
 8001d70:	f000 ff60 	bl	8002c34 <prvTraceError>
 8001d74:	e056      	b.n	8001e24 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <prvTraceStoreKernelCall+0xe8>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	7afb      	ldrb	r3, [r7, #11]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d903      	bls.n	8001d92 <prvTraceStoreKernelCall+0x46>
 8001d8a:	482b      	ldr	r0, [pc, #172]	; (8001e38 <prvTraceStoreKernelCall+0xec>)
 8001d8c:	f000 ff52 	bl	8002c34 <prvTraceError>
 8001d90:	e048      	b.n	8001e24 <prvTraceStoreKernelCall+0xd8>

	if (recorder_busy)
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <prvTraceStoreKernelCall+0xf0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8001d9a:	4829      	ldr	r0, [pc, #164]	; (8001e40 <prvTraceStoreKernelCall+0xf4>)
 8001d9c:	f000 ff4a 	bl	8002c34 <prvTraceError>
		return;
 8001da0:	e040      	b.n	8001e24 <prvTraceStoreKernelCall+0xd8>
	}

	if (handle_of_last_logged_task == 0)
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <prvTraceStoreKernelCall+0xf8>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03b      	beq.n	8001e22 <prvTraceStoreKernelCall+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001daa:	f3ef 8310 	mrs	r3, PRIMASK
 8001dae:	617b      	str	r3, [r7, #20]
  return(result);
 8001db0:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
 8001db4:	2301      	movs	r3, #1
 8001db6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f383 8810 	msr	PRIMASK, r3
}
 8001dbe:	bf00      	nop
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <prvTraceStoreKernelCall+0xf0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <prvTraceStoreKernelCall+0xf0>)
 8001dc8:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <prvTraceStoreKernelCall+0xe8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <prvTraceStoreKernelCall+0xc0>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001dd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dd8:	f001 f80a 	bl	8002df0 <prvTraceGetDTS>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8001de6:	f000 fcb7 	bl	8002758 <prvTraceNextFreeEventBufferSlot>
 8001dea:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <prvTraceStoreKernelCall+0xc0>
		{
			kse->dts = dts1;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001df6:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001e06:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8001e08:	f000 ffca 	bl	8002da0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <prvTraceStoreKernelCall+0xf0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <prvTraceStoreKernelCall+0xf0>)
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f383 8810 	msr	PRIMASK, r3
}
 8001e20:	e000      	b.n	8001e24 <prvTraceStoreKernelCall+0xd8>
		return;
 8001e22:	bf00      	nop
}
 8001e24:	3728      	adds	r7, #40	; 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	0800ca48 	.word	0x0800ca48
 8001e30:	0800ca80 	.word	0x0800ca80
 8001e34:	2000abd8 	.word	0x2000abd8
 8001e38:	0800cac8 	.word	0x0800cac8
 8001e3c:	200024b4 	.word	0x200024b4
 8001e40:	0800cb10 	.word	0x0800cb10
 8001e44:	200024c0 	.word	0x200024c0

08001e48 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	460b      	mov	r3, r1
 8001e56:	72fb      	strb	r3, [r7, #11]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2bfe      	cmp	r3, #254	; 0xfe
 8001e5c:	d903      	bls.n	8001e66 <prvTraceStoreKernelCallWithParam+0x1e>
 8001e5e:	4838      	ldr	r0, [pc, #224]	; (8001f40 <prvTraceStoreKernelCallWithParam+0xf8>)
 8001e60:	f000 fee8 	bl	8002c34 <prvTraceError>
 8001e64:	e068      	b.n	8001f38 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8001e66:	7afb      	ldrb	r3, [r7, #11]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d903      	bls.n	8001e74 <prvTraceStoreKernelCallWithParam+0x2c>
 8001e6c:	4835      	ldr	r0, [pc, #212]	; (8001f44 <prvTraceStoreKernelCallWithParam+0xfc>)
 8001e6e:	f000 fee1 	bl	8002c34 <prvTraceError>
 8001e72:	e061      	b.n	8001f38 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 8001e74:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <prvTraceStoreKernelCallWithParam+0x100>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d903      	bls.n	8001e90 <prvTraceStoreKernelCallWithParam+0x48>
 8001e88:	4830      	ldr	r0, [pc, #192]	; (8001f4c <prvTraceStoreKernelCallWithParam+0x104>)
 8001e8a:	f000 fed3 	bl	8002c34 <prvTraceError>
 8001e8e:	e053      	b.n	8001f38 <prvTraceStoreKernelCallWithParam+0xf0>

	if (recorder_busy)
 8001e90:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <prvTraceStoreKernelCallWithParam+0x108>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <prvTraceStoreKernelCallWithParam+0x58>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8001e98:	482e      	ldr	r0, [pc, #184]	; (8001f54 <prvTraceStoreKernelCallWithParam+0x10c>)
 8001e9a:	f000 fecb 	bl	8002c34 <prvTraceError>
		return;
 8001e9e:	e04b      	b.n	8001f38 <prvTraceStoreKernelCallWithParam+0xf0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea4:	617b      	str	r3, [r7, #20]
  return(result);
 8001ea6:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f383 8810 	msr	PRIMASK, r3
}
 8001eb4:	bf00      	nop
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <prvTraceStoreKernelCallWithParam+0x108>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <prvTraceStoreKernelCallWithParam+0x108>)
 8001ebe:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <prvTraceStoreKernelCallWithParam+0x100>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d02b      	beq.n	8001f22 <prvTraceStoreKernelCallWithParam+0xda>
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <prvTraceStoreKernelCallWithParam+0x110>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d027      	beq.n	8001f22 <prvTraceStoreKernelCallWithParam+0xda>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8001ed2:	20ff      	movs	r0, #255	; 0xff
 8001ed4:	f000 ff8c 	bl	8002df0 <prvTraceGetDTS>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	20ff      	movs	r0, #255	; 0xff
 8001ee2:	f000 f83b 	bl	8001f5c <prvTraceGetParam>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8001ef2:	f000 fc31 	bl	8002758 <prvTraceNextFreeEventBufferSlot>
 8001ef6:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d011      	beq.n	8001f22 <prvTraceStoreKernelCallWithParam+0xda>
		{
			kse->dts = dts2;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f04:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001f14:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001f1c:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001f1e:	f000 ff3f 	bl	8002da0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <prvTraceStoreKernelCallWithParam+0x108>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <prvTraceStoreKernelCallWithParam+0x108>)
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	f383 8810 	msr	PRIMASK, r3
}
 8001f36:	bf00      	nop
}
 8001f38:	3728      	adds	r7, #40	; 0x28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	0800cb48 	.word	0x0800cb48
 8001f44:	0800cb88 	.word	0x0800cb88
 8001f48:	2000abd8 	.word	0x2000abd8
 8001f4c:	0800cbd8 	.word	0x0800cbd8
 8001f50:	200024b4 	.word	0x200024b4
 8001f54:	0800cc28 	.word	0x0800cc28
 8001f58:	200024c0 	.word	0x200024c0

08001f5c <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2bff      	cmp	r3, #255	; 0xff
 8001f6a:	d009      	beq.n	8001f80 <prvTraceGetParam+0x24>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d004      	beq.n	8001f80 <prvTraceGetParam+0x24>
 8001f76:	4816      	ldr	r0, [pc, #88]	; (8001fd0 <prvTraceGetParam+0x74>)
 8001f78:	f000 fe5c 	bl	8002c34 <prvTraceError>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	e023      	b.n	8001fc8 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d801      	bhi.n	8001f8c <prvTraceGetParam+0x30>
	{
		return param;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	e01d      	b.n	8001fc8 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8001f8c:	f000 fbe4 	bl	8002758 <prvTraceNextFreeEventBufferSlot>
 8001f90:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d014      	beq.n	8001fc2 <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	43da      	mvns	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	0c1b      	lsrs	r3, r3, #16
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001fbe:	f000 feef 	bl	8002da0 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4013      	ands	r3, r2
	}
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	0800cc60 	.word	0x0800cc60

08001fd4 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2bfe      	cmp	r3, #254	; 0xfe
 8001fe6:	d903      	bls.n	8001ff0 <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 8001fe8:	4828      	ldr	r0, [pc, #160]	; (800208c <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8001fea:	f000 fe23 	bl	8002c34 <prvTraceError>
 8001fee:	e049      	b.n	8002084 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>

	if (recorder_busy)
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8001ff8:	4826      	ldr	r0, [pc, #152]	; (8002094 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8001ffa:	f000 fe1b 	bl	8002c34 <prvTraceError>
		return;
 8001ffe:	e041      	b.n	8002084 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002000:	f3ef 8310 	mrs	r3, PRIMASK
 8002004:	613b      	str	r3, [r7, #16]
  return(result);
 8002006:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8002008:	623b      	str	r3, [r7, #32]
 800200a:	2301      	movs	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f383 8810 	msr	PRIMASK, r3
}
 8002014:	bf00      	nop
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800201e:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	2b00      	cmp	r3, #0
 8002028:	d021      	beq.n	800206e <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01d      	beq.n	800206e <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8002032:	20ff      	movs	r0, #255	; 0xff
 8002034:	f000 fedc 	bl	8002df0 <prvTraceGetDTS>
 8002038:	4603      	mov	r3, r0
 800203a:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002042:	f7ff ff8b 	bl	8001f5c <prvTraceGetParam>
 8002046:	4603      	mov	r3, r0
 8002048:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 800204a:	f000 fb85 	bl	8002758 <prvTraceNextFreeEventBufferSlot>
 800204e:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
		{
			kse->dts = dts6;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	7ffa      	ldrb	r2, [r7, #31]
 800205a:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002068:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800206a:	f000 fe99 	bl	8002da0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3b01      	subs	r3, #1
 8002074:	4a06      	ldr	r2, [pc, #24]	; (8002090 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f383 8810 	msr	PRIMASK, r3
}
 8002082:	bf00      	nop
}
 8002084:	3728      	adds	r7, #40	; 0x28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	0800cc9c 	.word	0x0800cc9c
 8002090:	200024b4 	.word	0x200024b4
 8002094:	0800ccf4 	.word	0x0800ccf4
 8002098:	2000abd8 	.word	0x2000abd8
 800209c:	200024c0 	.word	0x200024c0

080020a0 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2b0f      	cmp	r3, #15
 80020ae:	d903      	bls.n	80020b8 <prvTraceStoreTaskswitch+0x18>
 80020b0:	482f      	ldr	r0, [pc, #188]	; (8002170 <prvTraceStoreTaskswitch+0xd0>)
 80020b2:	f000 fdbf 	bl	8002c34 <prvTraceError>
 80020b6:	e058      	b.n	800216a <prvTraceStoreTaskswitch+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020b8:	f3ef 8310 	mrs	r3, PRIMASK
 80020bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80020be:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	2301      	movs	r3, #1
 80020c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f383 8810 	msr	PRIMASK, r3
}
 80020cc:	bf00      	nop
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <prvTraceStoreTaskswitch+0xd4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <prvTraceStoreTaskswitch+0xd4>)
 80020d6:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <prvTraceStoreTaskswitch+0xd8>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	79fa      	ldrb	r2, [r7, #7]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d038      	beq.n	8002154 <prvTraceStoreTaskswitch+0xb4>
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <prvTraceStoreTaskswitch+0xdc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d033      	beq.n	8002154 <prvTraceStoreTaskswitch+0xb4>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <prvTraceStoreTaskswitch+0xe0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80020f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020f6:	f000 fe7b 	bl	8002df0 <prvTraceGetDTS>
 80020fa:	4603      	mov	r3, r0
 80020fc:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 80020fe:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <prvTraceStoreTaskswitch+0xd8>)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <prvTraceStoreTaskswitch+0xd8>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 800210a:	f000 fb25 	bl	8002758 <prvTraceNextFreeEventBufferSlot>
 800210e:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01e      	beq.n	8002154 <prvTraceStoreTaskswitch+0xb4>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <prvTraceStoreTaskswitch+0xd8>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	4619      	mov	r1, r3
 800211c:	2003      	movs	r0, #3
 800211e:	f000 f9a1 	bl	8002464 <prvTraceGetObjectState>
 8002122:	4603      	mov	r3, r0
 8002124:	2b01      	cmp	r3, #1
 8002126:	d103      	bne.n	8002130 <prvTraceStoreTaskswitch+0x90>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2207      	movs	r2, #7
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e002      	b.n	8002136 <prvTraceStoreTaskswitch+0x96>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2206      	movs	r2, #6
 8002134:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	8b7a      	ldrh	r2, [r7, #26]
 800213a:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	7e7a      	ldrb	r2, [r7, #25]
 8002140:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8002142:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <prvTraceStoreTaskswitch+0xd8>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2201      	movs	r2, #1
 8002148:	4619      	mov	r1, r3
 800214a:	2003      	movs	r0, #3
 800214c:	f000 f94e 	bl	80023ec <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8002150:	f000 fe26 	bl	8002da0 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <prvTraceStoreTaskswitch+0xd4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3b01      	subs	r3, #1
 800215a:	4a06      	ldr	r2, [pc, #24]	; (8002174 <prvTraceStoreTaskswitch+0xd4>)
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f383 8810 	msr	PRIMASK, r3
}
 8002168:	bf00      	nop
}
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	0800cd2c 	.word	0x0800cd2c
 8002174:	200024b4 	.word	0x200024b4
 8002178:	200024c0 	.word	0x200024c0
 800217c:	2000abd8 	.word	0x2000abd8
 8002180:	200024a4 	.word	0x200024a4

08002184 <prvTraceStoreObjectNameOnCloseEvent>:
 * and name (a symbol table handle). The stored name-handle mapping is thus the
 * "old" one, valid up until this point.
 ******************************************************************************/
void prvTraceStoreObjectNameOnCloseEvent(uint8_t evtcode, traceHandle handle,
										traceObjectClass objectclass)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
 800218e:	460b      	mov	r3, r1
 8002190:	71bb      	strb	r3, [r7, #6]
 8002192:	4613      	mov	r3, r2
 8002194:	717b      	strb	r3, [r7, #5]
	ObjCloseNameEvent * ce;
	const char * name;
	traceString idx;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8002196:	797b      	ldrb	r3, [r7, #5]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d903      	bls.n	80021a4 <prvTraceStoreObjectNameOnCloseEvent+0x20>
 800219c:	481f      	ldr	r0, [pc, #124]	; (800221c <prvTraceStoreObjectNameOnCloseEvent+0x98>)
 800219e:	f000 fd49 	bl	8002c34 <prvTraceError>
 80021a2:	e037      	b.n	8002214 <prvTraceStoreObjectNameOnCloseEvent+0x90>
		"prvTraceStoreObjectNameOnCloseEvent: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <prvTraceStoreObjectNameOnCloseEvent+0x9c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	797b      	ldrb	r3, [r7, #5]
 80021aa:	4413      	add	r3, r2
 80021ac:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80021b0:	79ba      	ldrb	r2, [r7, #6]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d903      	bls.n	80021be <prvTraceStoreObjectNameOnCloseEvent+0x3a>
 80021b6:	481b      	ldr	r0, [pc, #108]	; (8002224 <prvTraceStoreObjectNameOnCloseEvent+0xa0>)
 80021b8:	f000 fd3c 	bl	8002c34 <prvTraceError>
 80021bc:	e02a      	b.n	8002214 <prvTraceStoreObjectNameOnCloseEvent+0x90>
		"prvTraceStoreObjectNameOnCloseEvent: Invalid value for handle", TRC_UNUSED);

	if (RecorderDataPtr->recorderActive)
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <prvTraceStoreObjectNameOnCloseEvent+0x9c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d025      	beq.n	8002214 <prvTraceStoreObjectNameOnCloseEvent+0x90>
	{
		uint8_t hnd8 = prvTraceGet8BitHandle(handle);
 80021c8:	79bb      	ldrb	r3, [r7, #6]
 80021ca:	75fb      	strb	r3, [r7, #23]
		name = TRACE_PROPERTY_NAME_GET(objectclass, handle);
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <prvTraceStoreObjectNameOnCloseEvent+0x9c>)
 80021ce:	681c      	ldr	r4, [r3, #0]
 80021d0:	797a      	ldrb	r2, [r7, #5]
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fae2 	bl	80027a0 <uiIndexOfObject>
 80021dc:	4603      	mov	r3, r0
 80021de:	3398      	adds	r3, #152	; 0x98
 80021e0:	4423      	add	r3, r4
 80021e2:	3304      	adds	r3, #4
 80021e4:	613b      	str	r3, [r7, #16]
		idx = prvTraceOpenSymbol(name, 0);
 80021e6:	2100      	movs	r1, #0
 80021e8:	6938      	ldr	r0, [r7, #16]
 80021ea:	f000 fcd1 	bl	8002b90 <prvTraceOpenSymbol>
 80021ee:	4603      	mov	r3, r0
 80021f0:	81fb      	strh	r3, [r7, #14]

		// Interrupt disable not necessary, already done in trcHooks.h macro
		ce = (ObjCloseNameEvent*) prvTraceNextFreeEventBufferSlot();
 80021f2:	f000 fab1 	bl	8002758 <prvTraceNextFreeEventBufferSlot>
 80021f6:	60b8      	str	r0, [r7, #8]
		if (ce != NULL)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <prvTraceStoreObjectNameOnCloseEvent+0x90>
		{
			ce->type = (uint8_t) evtcode;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	79fa      	ldrb	r2, [r7, #7]
 8002202:	701a      	strb	r2, [r3, #0]
			ce->objHandle = hnd8;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	7dfa      	ldrb	r2, [r7, #23]
 8002208:	705a      	strb	r2, [r3, #1]
			ce->symbolIndex = idx;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	89fa      	ldrh	r2, [r7, #14]
 800220e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8002210:	f000 fdc6 	bl	8002da0 <prvTraceUpdateCounters>
		}
	}
}
 8002214:	371c      	adds	r7, #28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd90      	pop	{r4, r7, pc}
 800221a:	bf00      	nop
 800221c:	0800cd74 	.word	0x0800cd74
 8002220:	2000abd8 	.word	0x2000abd8
 8002224:	0800cdc8 	.word	0x0800cdc8

08002228 <prvTraceStoreObjectPropertiesOnCloseEvent>:

void prvTraceStoreObjectPropertiesOnCloseEvent(uint8_t evtcode, traceHandle handle,
											 traceObjectClass objectclass)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
 8002232:	460b      	mov	r3, r1
 8002234:	71bb      	strb	r3, [r7, #6]
 8002236:	4613      	mov	r3, r2
 8002238:	717b      	strb	r3, [r7, #5]
	ObjClosePropEvent * pe;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800223a:	797b      	ldrb	r3, [r7, #5]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d903      	bls.n	8002248 <prvTraceStoreObjectPropertiesOnCloseEvent+0x20>
 8002240:	482a      	ldr	r0, [pc, #168]	; (80022ec <prvTraceStoreObjectPropertiesOnCloseEvent+0xc4>)
 8002242:	f000 fcf7 	bl	8002c34 <prvTraceError>
 8002246:	e04d      	b.n	80022e4 <prvTraceStoreObjectPropertiesOnCloseEvent+0xbc>
		"prvTraceStoreObjectPropertiesOnCloseEvent: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	797b      	ldrb	r3, [r7, #5]
 800224e:	4413      	add	r3, r2
 8002250:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002254:	79ba      	ldrb	r2, [r7, #6]
 8002256:	429a      	cmp	r2, r3
 8002258:	d903      	bls.n	8002262 <prvTraceStoreObjectPropertiesOnCloseEvent+0x3a>
 800225a:	4826      	ldr	r0, [pc, #152]	; (80022f4 <prvTraceStoreObjectPropertiesOnCloseEvent+0xcc>)
 800225c:	f000 fcea 	bl	8002c34 <prvTraceError>
 8002260:	e040      	b.n	80022e4 <prvTraceStoreObjectPropertiesOnCloseEvent+0xbc>
		"prvTraceStoreObjectPropertiesOnCloseEvent: Invalid value for handle", TRC_UNUSED);

	if (RecorderDataPtr->recorderActive)
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	2b00      	cmp	r3, #0
 800226a:	d03b      	beq.n	80022e4 <prvTraceStoreObjectPropertiesOnCloseEvent+0xbc>
	{
		// Interrupt disable not necessary, already done in trcHooks.h macro
		pe = (ObjClosePropEvent*) prvTraceNextFreeEventBufferSlot();
 800226c:	f000 fa74 	bl	8002758 <prvTraceNextFreeEventBufferSlot>
 8002270:	60f8      	str	r0, [r7, #12]
		if (pe != NULL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d035      	beq.n	80022e4 <prvTraceStoreObjectPropertiesOnCloseEvent+0xbc>
		{
			if (objectclass == TRACE_CLASS_TASK)
 8002278:	797b      	ldrb	r3, [r7, #5]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d117      	bne.n	80022ae <prvTraceStoreObjectPropertiesOnCloseEvent+0x86>
			{
				pe->arg1 = TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, handle);
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 8002280:	681c      	ldr	r4, [r3, #0]
 8002282:	797a      	ldrb	r2, [r7, #5]
 8002284:	79bb      	ldrb	r3, [r7, #6]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fa89 	bl	80027a0 <uiIndexOfObject>
 800228e:	4603      	mov	r3, r0
 8002290:	4619      	mov	r1, r3
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	797b      	ldrb	r3, [r7, #5]
 8002298:	4413      	add	r3, r2
 800229a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800229e:	440b      	add	r3, r1
 80022a0:	3301      	adds	r3, #1
 80022a2:	4423      	add	r3, r4
 80022a4:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	705a      	strb	r2, [r3, #1]
 80022ac:	e015      	b.n	80022da <prvTraceStoreObjectPropertiesOnCloseEvent+0xb2>
			}
			else
			{
				pe->arg1 = TRACE_PROPERTY_OBJECT_STATE(objectclass, handle);
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 80022b0:	681c      	ldr	r4, [r3, #0]
 80022b2:	797a      	ldrb	r2, [r7, #5]
 80022b4:	79bb      	ldrb	r3, [r7, #6]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fa71 	bl	80027a0 <uiIndexOfObject>
 80022be:	4603      	mov	r3, r0
 80022c0:	4619      	mov	r1, r3
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	797b      	ldrb	r3, [r7, #5]
 80022c8:	4413      	add	r3, r2
 80022ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80022ce:	440b      	add	r3, r1
 80022d0:	4423      	add	r3, r4
 80022d2:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	705a      	strb	r2, [r3, #1]
			}
			pe->type = evtcode;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	79fa      	ldrb	r2, [r7, #7]
 80022de:	701a      	strb	r2, [r3, #0]
			prvTraceUpdateCounters();
 80022e0:	f000 fd5e 	bl	8002da0 <prvTraceUpdateCounters>
		}
	}
}
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd90      	pop	{r4, r7, pc}
 80022ea:	bf00      	nop
 80022ec:	0800ce14 	.word	0x0800ce14
 80022f0:	2000abd8 	.word	0x2000abd8
 80022f4:	0800ce6c 	.word	0x0800ce6c

080022f8 <prvTraceSetPriorityProperty>:

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
 8002302:	460b      	mov	r3, r1
 8002304:	71bb      	strb	r3, [r7, #6]
 8002306:	4613      	mov	r3, r2
 8002308:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d903      	bls.n	8002318 <prvTraceSetPriorityProperty+0x20>
 8002310:	4814      	ldr	r0, [pc, #80]	; (8002364 <prvTraceSetPriorityProperty+0x6c>)
 8002312:	f000 fc8f 	bl	8002c34 <prvTraceError>
 8002316:	e022      	b.n	800235e <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <prvTraceSetPriorityProperty+0x70>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	4413      	add	r3, r2
 8002320:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002324:	79ba      	ldrb	r2, [r7, #6]
 8002326:	429a      	cmp	r2, r3
 8002328:	d903      	bls.n	8002332 <prvTraceSetPriorityProperty+0x3a>
 800232a:	4810      	ldr	r0, [pc, #64]	; (800236c <prvTraceSetPriorityProperty+0x74>)
 800232c:	f000 fc82 	bl	8002c34 <prvTraceError>
 8002330:	e015      	b.n	800235e <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <prvTraceSetPriorityProperty+0x70>)
 8002334:	681c      	ldr	r4, [r3, #0]
 8002336:	79fa      	ldrb	r2, [r7, #7]
 8002338:	79bb      	ldrb	r3, [r7, #6]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fa2f 	bl	80027a0 <uiIndexOfObject>
 8002342:	4603      	mov	r3, r0
 8002344:	4619      	mov	r1, r3
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <prvTraceSetPriorityProperty+0x70>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	4413      	add	r3, r2
 800234e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002352:	440b      	add	r3, r1
 8002354:	3301      	adds	r3, #1
 8002356:	4423      	add	r3, r4
 8002358:	797a      	ldrb	r2, [r7, #5]
 800235a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}
 8002364:	0800cec0 	.word	0x0800cec0
 8002368:	2000abd8 	.word	0x2000abd8
 800236c:	0800cf0c 	.word	0x0800cf0c

08002370 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	460a      	mov	r2, r1
 800237a:	71fb      	strb	r3, [r7, #7]
 800237c:	4613      	mov	r3, r2
 800237e:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	2b08      	cmp	r3, #8
 8002384:	d904      	bls.n	8002390 <prvTraceGetPriorityProperty+0x20>
 8002386:	4816      	ldr	r0, [pc, #88]	; (80023e0 <prvTraceGetPriorityProperty+0x70>)
 8002388:	f000 fc54 	bl	8002c34 <prvTraceError>
 800238c:	2300      	movs	r3, #0
 800238e:	e022      	b.n	80023d6 <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <prvTraceGetPriorityProperty+0x74>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	4413      	add	r3, r2
 8002398:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800239c:	79ba      	ldrb	r2, [r7, #6]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d904      	bls.n	80023ac <prvTraceGetPriorityProperty+0x3c>
 80023a2:	4811      	ldr	r0, [pc, #68]	; (80023e8 <prvTraceGetPriorityProperty+0x78>)
 80023a4:	f000 fc46 	bl	8002c34 <prvTraceError>
 80023a8:	2300      	movs	r3, #0
 80023aa:	e014      	b.n	80023d6 <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <prvTraceGetPriorityProperty+0x74>)
 80023ae:	681c      	ldr	r4, [r3, #0]
 80023b0:	79fa      	ldrb	r2, [r7, #7]
 80023b2:	79bb      	ldrb	r3, [r7, #6]
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f9f2 	bl	80027a0 <uiIndexOfObject>
 80023bc:	4603      	mov	r3, r0
 80023be:	4619      	mov	r1, r3
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <prvTraceGetPriorityProperty+0x74>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	4413      	add	r3, r2
 80023c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80023cc:	440b      	add	r3, r1
 80023ce:	3301      	adds	r3, #1
 80023d0:	4423      	add	r3, r4
 80023d2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd90      	pop	{r4, r7, pc}
 80023de:	bf00      	nop
 80023e0:	0800cf4c 	.word	0x0800cf4c
 80023e4:	2000abd8 	.word	0x2000abd8
 80023e8:	0800cf98 	.word	0x0800cf98

080023ec <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	460b      	mov	r3, r1
 80023f8:	71bb      	strb	r3, [r7, #6]
 80023fa:	4613      	mov	r3, r2
 80023fc:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d903      	bls.n	800240c <prvTraceSetObjectState+0x20>
 8002404:	4814      	ldr	r0, [pc, #80]	; (8002458 <prvTraceSetObjectState+0x6c>)
 8002406:	f000 fc15 	bl	8002c34 <prvTraceError>
 800240a:	e021      	b.n	8002450 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <prvTraceSetObjectState+0x70>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	4413      	add	r3, r2
 8002414:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002418:	79ba      	ldrb	r2, [r7, #6]
 800241a:	429a      	cmp	r2, r3
 800241c:	d903      	bls.n	8002426 <prvTraceSetObjectState+0x3a>
 800241e:	4810      	ldr	r0, [pc, #64]	; (8002460 <prvTraceSetObjectState+0x74>)
 8002420:	f000 fc08 	bl	8002c34 <prvTraceError>
 8002424:	e014      	b.n	8002450 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <prvTraceSetObjectState+0x70>)
 8002428:	681c      	ldr	r4, [r3, #0]
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	79bb      	ldrb	r3, [r7, #6]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f9b5 	bl	80027a0 <uiIndexOfObject>
 8002436:	4603      	mov	r3, r0
 8002438:	4619      	mov	r1, r3
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <prvTraceSetObjectState+0x70>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	4413      	add	r3, r2
 8002442:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002446:	440b      	add	r3, r1
 8002448:	4423      	add	r3, r4
 800244a:	797a      	ldrb	r2, [r7, #5]
 800244c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}
 8002456:	bf00      	nop
 8002458:	0800cfd8 	.word	0x0800cfd8
 800245c:	2000abd8 	.word	0x2000abd8
 8002460:	0800d01c 	.word	0x0800d01c

08002464 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	460a      	mov	r2, r1
 800246e:	71fb      	strb	r3, [r7, #7]
 8002470:	4613      	mov	r3, r2
 8002472:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	2b08      	cmp	r3, #8
 8002478:	d904      	bls.n	8002484 <prvTraceGetObjectState+0x20>
 800247a:	4815      	ldr	r0, [pc, #84]	; (80024d0 <prvTraceGetObjectState+0x6c>)
 800247c:	f000 fbda 	bl	8002c34 <prvTraceError>
 8002480:	2300      	movs	r3, #0
 8002482:	e021      	b.n	80024c8 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <prvTraceGetObjectState+0x70>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	4413      	add	r3, r2
 800248c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002490:	79ba      	ldrb	r2, [r7, #6]
 8002492:	429a      	cmp	r2, r3
 8002494:	d904      	bls.n	80024a0 <prvTraceGetObjectState+0x3c>
 8002496:	4810      	ldr	r0, [pc, #64]	; (80024d8 <prvTraceGetObjectState+0x74>)
 8002498:	f000 fbcc 	bl	8002c34 <prvTraceError>
 800249c:	2300      	movs	r3, #0
 800249e:	e013      	b.n	80024c8 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <prvTraceGetObjectState+0x70>)
 80024a2:	681c      	ldr	r4, [r3, #0]
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	79bb      	ldrb	r3, [r7, #6]
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f978 	bl	80027a0 <uiIndexOfObject>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4619      	mov	r1, r3
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <prvTraceGetObjectState+0x70>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4413      	add	r3, r2
 80024bc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80024c0:	440b      	add	r3, r1
 80024c2:	4423      	add	r3, r4
 80024c4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}
 80024d0:	0800d058 	.word	0x0800d058
 80024d4:	2000abd8 	.word	0x2000abd8
 80024d8:	0800d09c 	.word	0x0800d09c

080024dc <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <prvTraceSetTaskInstanceFinished+0x4c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80024ee:	79fa      	ldrb	r2, [r7, #7]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d903      	bls.n	80024fc <prvTraceSetTaskInstanceFinished+0x20>
 80024f4:	480d      	ldr	r0, [pc, #52]	; (800252c <prvTraceSetTaskInstanceFinished+0x50>)
 80024f6:	f000 fb9d 	bl	8002c34 <prvTraceError>
 80024fa:	e011      	b.n	8002520 <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <prvTraceSetTaskInstanceFinished+0x4c>)
 80024fe:	681c      	ldr	r4, [r3, #0]
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2103      	movs	r1, #3
 8002504:	4618      	mov	r0, r3
 8002506:	f000 f94b 	bl	80027a0 <uiIndexOfObject>
 800250a:	4603      	mov	r3, r0
 800250c:	461a      	mov	r2, r3
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <prvTraceSetTaskInstanceFinished+0x4c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002516:	4413      	add	r3, r2
 8002518:	4423      	add	r3, r4
 800251a:	2200      	movs	r2, #0
 800251c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
#endif
}
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bd90      	pop	{r4, r7, pc}
 8002526:	bf00      	nop
 8002528:	2000abd8 	.word	0x2000abd8
 800252c:	0800d0d8 	.word	0x0800d0d8

08002530 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
 8002534:	4b82      	ldr	r3, [pc, #520]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d103      	bne.n	8002544 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 800253c:	4b80      	ldr	r3, [pc, #512]	; (8002740 <prvTraceInitTraceData+0x210>)
 800253e:	4a81      	ldr	r2, [pc, #516]	; (8002744 <prvTraceInitTraceData+0x214>)
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e006      	b.n	8002552 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
 8002544:	4b7e      	ldr	r3, [pc, #504]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	f000 80f4 	beq.w	800273a <prvTraceInitTraceData+0x20a>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
 8002552:	4b7d      	ldr	r3, [pc, #500]	; (8002748 <prvTraceInitTraceData+0x218>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a7d      	ldr	r2, [pc, #500]	; (800274c <prvTraceInitTraceData+0x21c>)
 8002558:	6013      	str	r3, [r2, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 800255a:	4b79      	ldr	r3, [pc, #484]	; (8002740 <prvTraceInitTraceData+0x210>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f248 6278 	movw	r2, #34424	; 0x8678
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f009 fcd7 	bl	800bf18 <memset>
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 800256a:	4b75      	ldr	r3, [pc, #468]	; (8002740 <prvTraceInitTraceData+0x210>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8002572:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8002574:	4b72      	ldr	r3, [pc, #456]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2205      	movs	r2, #5
 800257a:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 800257c:	4b70      	ldr	r3, [pc, #448]	; (8002740 <prvTraceInitTraceData+0x210>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8002584:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f248 6278 	movw	r2, #34424	; 0x8678
 800258c:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800258e:	4b6c      	ldr	r3, [pc, #432]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002596:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
 8002598:	4b69      	ldr	r3, [pc, #420]	; (8002740 <prvTraceInitTraceData+0x210>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 80025a2:	4b67      	ldr	r3, [pc, #412]	; (8002740 <prvTraceInitTraceData+0x210>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80025aa:	4b65      	ldr	r3, [pc, #404]	; (8002740 <prvTraceInitTraceData+0x210>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 80025b2:	f7ff f90f 	bl	80017d4 <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 80025b6:	4b62      	ldr	r3, [pc, #392]	; (8002740 <prvTraceInitTraceData+0x210>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 80025be:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80025c2:	4b5f      	ldr	r3, [pc, #380]	; (8002740 <prvTraceInitTraceData+0x210>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80025ca:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80025ce:	4b5c      	ldr	r3, [pc, #368]	; (8002740 <prvTraceInitTraceData+0x210>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <prvTraceInitTraceData+0x210>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 80025e0:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80025e4:	4b56      	ldr	r3, [pc, #344]	; (8002740 <prvTraceInitTraceData+0x210>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80025ec:	2250      	movs	r2, #80	; 0x50
 80025ee:	4958      	ldr	r1, [pc, #352]	; (8002750 <prvTraceInitTraceData+0x220>)
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fa49 	bl	8002a88 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 80025f6:	4b52      	ldr	r3, [pc, #328]	; (8002740 <prvTraceInitTraceData+0x210>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 80025fe:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
	RecorderDataPtr->endmarker0 = 0x0A;
 8002602:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800260a:	220a      	movs	r2, #10
 800260c:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
	RecorderDataPtr->endmarker1 = 0x0B;
 8002610:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002618:	220b      	movs	r2, #11
 800261a:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
	RecorderDataPtr->endmarker2 = 0x0C;
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002626:	220c      	movs	r2, #12
 8002628:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
	RecorderDataPtr->endmarker3 = 0x0D;
 800262c:	4b44      	ldr	r3, [pc, #272]	; (8002740 <prvTraceInitTraceData+0x210>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002634:	220d      	movs	r2, #13
 8002636:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
	RecorderDataPtr->endmarker4 = 0x71;
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <prvTraceInitTraceData+0x210>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002642:	2271      	movs	r2, #113	; 0x71
 8002644:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
	RecorderDataPtr->endmarker5 = 0x72;
 8002648:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <prvTraceInitTraceData+0x210>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002650:	2272      	movs	r2, #114	; 0x72
 8002652:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
	RecorderDataPtr->endmarker6 = 0x73;
 8002656:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800265e:	2273      	movs	r2, #115	; 0x73
 8002660:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
	RecorderDataPtr->endmarker7 = 0x74;
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800266c:	2274      	movs	r2, #116	; 0x74
 800266e:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
	RecorderDataPtr->endmarker8 = 0xF1;
 8002672:	4b33      	ldr	r3, [pc, #204]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800267a:	22f1      	movs	r2, #241	; 0xf1
 800267c:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
	RecorderDataPtr->endmarker9 = 0xF2;
 8002680:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002688:	22f2      	movs	r2, #242	; 0xf2
 800268a:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
	RecorderDataPtr->endmarker10 = 0xF3;
 800268e:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002696:	22f3      	movs	r2, #243	; 0xf3
 8002698:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
	RecorderDataPtr->endmarker11 = 0xF4;
 800269c:	4b28      	ldr	r3, [pc, #160]	; (8002740 <prvTraceInitTraceData+0x210>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80026a4:	22f4      	movs	r2, #244	; 0xf4
 80026a6:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 80026aa:	f7ff f961 	bl	8001970 <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
 80026ae:	4b24      	ldr	r3, [pc, #144]	; (8002740 <prvTraceInitTraceData+0x210>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	22f4      	movs	r2, #244	; 0xf4
 80026b4:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <prvTraceInitTraceData+0x210>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	22f3      	movs	r2, #243	; 0xf3
 80026bc:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <prvTraceInitTraceData+0x210>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	22f2      	movs	r2, #242	; 0xf2
 80026c4:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <prvTraceInitTraceData+0x210>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	22f1      	movs	r2, #241	; 0xf1
 80026cc:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <prvTraceInitTraceData+0x210>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2274      	movs	r2, #116	; 0x74
 80026d4:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <prvTraceInitTraceData+0x210>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2273      	movs	r2, #115	; 0x73
 80026dc:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <prvTraceInitTraceData+0x210>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2272      	movs	r2, #114	; 0x72
 80026e4:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <prvTraceInitTraceData+0x210>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2271      	movs	r2, #113	; 0x71
 80026ec:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <prvTraceInitTraceData+0x210>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2204      	movs	r2, #4
 80026f4:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <prvTraceInitTraceData+0x210>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2203      	movs	r2, #3
 80026fc:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2202      	movs	r2, #2
 8002704:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <prvTraceInitTraceData+0x224>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d012      	beq.n	800273c <prvTraceInitTraceData+0x20c>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <prvTraceInitTraceData+0x210>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800271e:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <prvTraceInitTraceData+0x224>)
 8002720:	6811      	ldr	r1, [r2, #0]
 8002722:	2250      	movs	r2, #80	; 0x50
 8002724:	4618      	mov	r0, r3
 8002726:	f000 f9af 	bl	8002a88 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <prvTraceInitTraceData+0x210>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2201      	movs	r2, #1
 8002730:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		vTraceStop();
 8002734:	f7ff fa64 	bl	8001c00 <vTraceStop>
 8002738:	e000      	b.n	800273c <prvTraceInitTraceData+0x20c>
			return;
 800273a:	bf00      	nop

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000abd8 	.word	0x2000abd8
 8002744:	20002560 	.word	0x20002560
 8002748:	e000e018 	.word	0xe000e018
 800274c:	2000255c 	.word	0x2000255c
 8002750:	0800d120 	.word	0x0800d120
 8002754:	200024bc 	.word	0x200024bc

08002758 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <prvTraceNextFreeEventBufferSlot+0x40>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 8002766:	2300      	movs	r3, #0
 8002768:	e013      	b.n	8002792 <prvTraceNextFreeEventBufferSlot+0x3a>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <prvTraceNextFreeEventBufferSlot+0x40>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002774:	d304      	bcc.n	8002780 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8002776:	4809      	ldr	r0, [pc, #36]	; (800279c <prvTraceNextFreeEventBufferSlot+0x44>)
 8002778:	f000 fa5c 	bl	8002c34 <prvTraceError>
		return NULL;
 800277c:	2300      	movs	r3, #0
 800277e:	e008      	b.n	8002792 <prvTraceNextFreeEventBufferSlot+0x3a>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <prvTraceNextFreeEventBufferSlot+0x40>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <prvTraceNextFreeEventBufferSlot+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8002790:	4413      	add	r3, r2
}
 8002792:	4618      	mov	r0, r3
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000abd8 	.word	0x2000abd8
 800279c:	0800d134 	.word	0x0800d134

080027a0 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	460a      	mov	r2, r1
 80027aa:	71fb      	strb	r3, [r7, #7]
 80027ac:	4613      	mov	r3, r2
 80027ae:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80027b0:	79bb      	ldrb	r3, [r7, #6]
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d904      	bls.n	80027c0 <uiIndexOfObject+0x20>
 80027b6:	4822      	ldr	r0, [pc, #136]	; (8002840 <uiIndexOfObject+0xa0>)
 80027b8:	f000 fa3c 	bl	8002c34 <prvTraceError>
 80027bc:	2300      	movs	r3, #0
 80027be:	e03a      	b.n	8002836 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <uiIndexOfObject+0x38>
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <uiIndexOfObject+0xa4>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	79bb      	ldrb	r3, [r7, #6]
 80027cc:	4413      	add	r3, r2
 80027ce:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80027d2:	79fa      	ldrb	r2, [r7, #7]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d904      	bls.n	80027e2 <uiIndexOfObject+0x42>
 80027d8:	481b      	ldr	r0, [pc, #108]	; (8002848 <uiIndexOfObject+0xa8>)
 80027da:	f000 fa2b 	bl	8002c34 <prvTraceError>
 80027de:	2300      	movs	r3, #0
 80027e0:	e029      	b.n	8002836 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80027e2:	79bb      	ldrb	r3, [r7, #6]
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d822      	bhi.n	800282e <uiIndexOfObject+0x8e>
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01f      	beq.n	800282e <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <uiIndexOfObject+0xa4>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	79bb      	ldrb	r3, [r7, #6]
 80027f4:	4413      	add	r3, r2
 80027f6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80027fa:	79fa      	ldrb	r2, [r7, #7]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d816      	bhi.n	800282e <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <uiIndexOfObject+0xa4>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	79bb      	ldrb	r3, [r7, #6]
 8002806:	3340      	adds	r3, #64	; 0x40
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	891a      	ldrh	r2, [r3, #8]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <uiIndexOfObject+0xa4>)
 8002810:	6819      	ldr	r1, [r3, #0]
 8002812:	79bb      	ldrb	r3, [r7, #6]
 8002814:	440b      	add	r3, r1
 8002816:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 800281a:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	3b01      	subs	r3, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8002820:	b29b      	uxth	r3, r3
 8002822:	fb11 f303 	smulbb	r3, r1, r3
 8002826:	b29b      	uxth	r3, r3
 8002828:	4413      	add	r3, r2
 800282a:	b29b      	uxth	r3, r3
 800282c:	e003      	b.n	8002836 <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 800282e:	4807      	ldr	r0, [pc, #28]	; (800284c <uiIndexOfObject+0xac>)
 8002830:	f000 fa00 	bl	8002c34 <prvTraceError>
	return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	0800d15c 	.word	0x0800d15c
 8002844:	2000abd8 	.word	0x2000abd8
 8002848:	0800d19c 	.word	0x0800d19c
 800284c:	0800d1dc 	.word	0x0800d1dc

08002850 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 800285a:	4b4e      	ldr	r3, [pc, #312]	; (8002994 <prvTraceGetObjectHandle+0x144>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d104      	bne.n	800286c <prvTraceGetObjectHandle+0x1c>
 8002862:	484d      	ldr	r0, [pc, #308]	; (8002998 <prvTraceGetObjectHandle+0x148>)
 8002864:	f000 f9e6 	bl	8002c34 <prvTraceError>
 8002868:	2300      	movs	r3, #0
 800286a:	e08f      	b.n	800298c <prvTraceGetObjectHandle+0x13c>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	2b08      	cmp	r3, #8
 8002870:	d904      	bls.n	800287c <prvTraceGetObjectHandle+0x2c>
 8002872:	484a      	ldr	r0, [pc, #296]	; (800299c <prvTraceGetObjectHandle+0x14c>)
 8002874:	f000 f9de 	bl	8002c34 <prvTraceError>
 8002878:	2300      	movs	r3, #0
 800287a:	e087      	b.n	800298c <prvTraceGetObjectHandle+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287c:	f3ef 8310 	mrs	r3, PRIMASK
 8002880:	60fb      	str	r3, [r7, #12]
  return(result);
 8002882:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	2301      	movs	r3, #1
 8002888:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f383 8810 	msr	PRIMASK, r3
}
 8002890:	bf00      	nop
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <prvTraceGetObjectHandle+0x150>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	4a41      	ldr	r2, [pc, #260]	; (80029a0 <prvTraceGetObjectHandle+0x150>)
 800289a:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	4a41      	ldr	r2, [pc, #260]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 80028a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <prvTraceGetObjectHandle+0x158>)
 80028a8:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <prvTraceGetObjectHandle+0x158>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a3d      	ldr	r2, [pc, #244]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 80028b0:	4413      	add	r3, r2
 80028b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d114      	bne.n	80028e4 <prvTraceGetObjectHandle+0x94>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <prvTraceGetObjectHandle+0x158>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4938      	ldr	r1, [pc, #224]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 80028c4:	3308      	adds	r3, #8
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	440b      	add	r3, r1
 80028ca:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 80028d2:	4b35      	ldr	r3, [pc, #212]	; (80029a8 <prvTraceGetObjectHandle+0x158>)
 80028d4:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 80028d6:	3201      	adds	r2, #1
 80028d8:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 80028da:	4a32      	ldr	r2, [pc, #200]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 80028dc:	4413      	add	r3, r2
 80028de:	460a      	mov	r2, r1
 80028e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 80028e4:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <prvTraceGetObjectHandle+0x158>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2e      	ldr	r2, [pc, #184]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 80028ea:	4413      	add	r3, r2
 80028ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80028f0:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	4a2b      	ldr	r2, [pc, #172]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 80028f6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	4929      	ldr	r1, [pc, #164]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 80028fe:	3310      	adds	r3, #16
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	440b      	add	r3, r1
 8002904:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8002906:	429a      	cmp	r2, r3
 8002908:	d90a      	bls.n	8002920 <prvTraceGetObjectHandle+0xd0>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff f893 	bl	8001a38 <pszTraceGetErrorNotEnoughHandles>
 8002912:	4603      	mov	r3, r0
 8002914:	4618      	mov	r0, r3
 8002916:	f000 f98d 	bl	8002c34 <prvTraceError>
		handle = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	77fb      	strb	r3, [r7, #31]
 800291e:	e029      	b.n	8002974 <prvTraceGetObjectHandle+0x124>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 8002924:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002928:	3201      	adds	r2, #1
 800292a:	b291      	uxth	r1, r2
 800292c:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 800292e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 8002936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800293a:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 8002940:	3308      	adds	r3, #8
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8002948:	1acb      	subs	r3, r1, r3
 800294a:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 8002950:	3318      	adds	r3, #24
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	88db      	ldrh	r3, [r3, #6]
 8002958:	461a      	mov	r2, r3
		if (hndCount >
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	4293      	cmp	r3, r2
 800295e:	dd09      	ble.n	8002974 <prvTraceGetObjectHandle+0x124>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8002964:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8002966:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8002968:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <prvTraceGetObjectHandle+0x154>)
 800296a:	3318      	adds	r3, #24
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	460a      	mov	r2, r1
 8002972:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <prvTraceGetObjectHandle+0x150>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3b01      	subs	r3, #1
 800297a:	4a09      	ldr	r2, [pc, #36]	; (80029a0 <prvTraceGetObjectHandle+0x150>)
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f383 8810 	msr	PRIMASK, r3
}
 8002988:	bf00      	nop

	return handle;
 800298a:	7ffb      	ldrb	r3, [r7, #31]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	2000abd8 	.word	0x2000abd8
 8002998:	0800c674 	.word	0x0800c674
 800299c:	0800d21c 	.word	0x0800d21c
 80029a0:	200024b4 	.word	0x200024b4
 80029a4:	200024cc 	.word	0x200024cc
 80029a8:	2000abdc 	.word	0x2000abdc

080029ac <prvTraceFreeObjectHandle>:

void prvTraceFreeObjectHandle(traceObjectClass objectclass, traceHandle handle)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	460a      	mov	r2, r1
 80029b6:	71fb      	strb	r3, [r7, #7]
 80029b8:	4613      	mov	r3, r2
 80029ba:	71bb      	strb	r3, [r7, #6]
	int indexOfHandle;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d903      	bls.n	80029ca <prvTraceFreeObjectHandle+0x1e>
 80029c2:	481d      	ldr	r0, [pc, #116]	; (8002a38 <prvTraceFreeObjectHandle+0x8c>)
 80029c4:	f000 f936 	bl	8002c34 <prvTraceError>
 80029c8:	e033      	b.n	8002a32 <prvTraceFreeObjectHandle+0x86>
		"prvTraceFreeObjectHandle: Invalid value for objectclass", TRC_UNUSED);
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80029ca:	79bb      	ldrb	r3, [r7, #6]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <prvTraceFreeObjectHandle+0x36>
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <prvTraceFreeObjectHandle+0x90>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	4413      	add	r3, r2
 80029d8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80029dc:	79ba      	ldrb	r2, [r7, #6]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d903      	bls.n	80029ea <prvTraceFreeObjectHandle+0x3e>
 80029e2:	4817      	ldr	r0, [pc, #92]	; (8002a40 <prvTraceFreeObjectHandle+0x94>)
 80029e4:	f000 f926 	bl	8002c34 <prvTraceError>
 80029e8:	e023      	b.n	8002a32 <prvTraceFreeObjectHandle+0x86>
		"prvTraceFreeObjectHandle: Invalid value for handle", TRC_UNUSED);

	/* Check that there is room to push the handle on the stack */
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <prvTraceFreeObjectHandle+0x98>)
 80029ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		objectHandleStacks.lowestIndexOfClass[objectclass])
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	4913      	ldr	r1, [pc, #76]	; (8002a44 <prvTraceFreeObjectHandle+0x98>)
 80029f6:	3308      	adds	r3, #8
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	440b      	add	r3, r1
 80029fc:	885b      	ldrh	r3, [r3, #2]
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d803      	bhi.n	8002a0a <prvTraceFreeObjectHandle+0x5e>
	{
		/* Error */
		prvTraceError("Attempt to free more handles than allocated!");
 8002a02:	4811      	ldr	r0, [pc, #68]	; (8002a48 <prvTraceFreeObjectHandle+0x9c>)
 8002a04:	f000 f916 	bl	8002c34 <prvTraceError>
 8002a08:	e013      	b.n	8002a32 <prvTraceFreeObjectHandle+0x86>
	}
	else
	{
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]--;
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <prvTraceFreeObjectHandle+0x98>)
 8002a0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a12:	3a01      	subs	r2, #1
 8002a14:	b291      	uxth	r1, r2
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <prvTraceFreeObjectHandle+0x98>)
 8002a18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <prvTraceFreeObjectHandle+0x98>)
 8002a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a24:	60fb      	str	r3, [r7, #12]
		objectHandleStacks.objectHandles[indexOfHandle] = handle;
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <prvTraceFreeObjectHandle+0x98>)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3348      	adds	r3, #72	; 0x48
 8002a2e:	79ba      	ldrb	r2, [r7, #6]
 8002a30:	701a      	strb	r2, [r3, #0]
	}
}
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	0800d264 	.word	0x0800d264
 8002a3c:	2000abd8 	.word	0x2000abd8
 8002a40:	0800d2ac 	.word	0x0800d2ac
 8002a44:	200024cc 	.word	0x200024cc
 8002a48:	0800d2f0 	.word	0x0800d2f0

08002a4c <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	460a      	mov	r2, r1
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8002a5c:	79fa      	ldrb	r2, [r7, #7]
 8002a5e:	79bb      	ldrb	r3, [r7, #6]
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fe9c 	bl	80027a0 <uiIndexOfObject>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <prvMarkObjectAsUsed+0x38>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	89fb      	ldrh	r3, [r7, #14]
 8002a72:	4413      	add	r3, r2
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	2000abd8 	.word	0x2000abd8

08002a88 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	e010      	b.n	8002abc <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	441a      	add	r2, r3
 8002aa0:	68f9      	ldr	r1, [r7, #12]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	440b      	add	r3, r1
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	4413      	add	r3, r2
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3ea      	bcc.n	8002a9a <prvStrncpy+0x12>
			break;
	}
}
 8002ac4:	e000      	b.n	8002ac8 <prvStrncpy+0x40>
			break;
 8002ac6:	bf00      	nop
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	603a      	str	r2, [r7, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <prvTraceSetObjectName+0x1e>
 8002aea:	4823      	ldr	r0, [pc, #140]	; (8002b78 <prvTraceSetObjectName+0xa4>)
 8002aec:	f000 f8a2 	bl	8002c34 <prvTraceError>
 8002af0:	e03e      	b.n	8002b70 <prvTraceSetObjectName+0x9c>

	if (objectclass >= TRACE_NCLASSES)
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d903      	bls.n	8002b00 <prvTraceSetObjectName+0x2c>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8002af8:	4820      	ldr	r0, [pc, #128]	; (8002b7c <prvTraceSetObjectName+0xa8>)
 8002afa:	f000 f89b 	bl	8002c34 <prvTraceError>
		return;
 8002afe:	e037      	b.n	8002b70 <prvTraceSetObjectName+0x9c>
	}

	if (handle == 0)
 8002b00:	79bb      	ldrb	r3, [r7, #6]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d103      	bne.n	8002b0e <prvTraceSetObjectName+0x3a>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8002b06:	481e      	ldr	r0, [pc, #120]	; (8002b80 <prvTraceSetObjectName+0xac>)
 8002b08:	f000 f894 	bl	8002c34 <prvTraceError>
		return;
 8002b0c:	e030      	b.n	8002b70 <prvTraceSetObjectName+0x9c>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <prvTraceSetObjectName+0xb0>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	4413      	add	r3, r2
 8002b16:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002b1a:	79ba      	ldrb	r2, [r7, #6]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d908      	bls.n	8002b32 <prvTraceSetObjectName+0x5e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe ff88 	bl	8001a38 <pszTraceGetErrorNotEnoughHandles>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f882 	bl	8002c34 <prvTraceError>
 8002b30:	e01e      	b.n	8002b70 <prvTraceSetObjectName+0x9c>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8002b32:	79fa      	ldrb	r2, [r7, #7]
 8002b34:	79bb      	ldrb	r3, [r7, #6]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fe31 	bl	80027a0 <uiIndexOfObject>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <prvTraceSetObjectName+0xb4>)
 8002b44:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 8002b46:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <prvTraceSetObjectName+0xb8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d110      	bne.n	8002b70 <prvTraceSetObjectName+0x9c>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <prvTraceSetObjectName+0xb0>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <prvTraceSetObjectName+0xb4>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	3398      	adds	r3, #152	; 0x98
 8002b58:	4413      	add	r3, r2
 8002b5a:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8002b5c:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <prvTraceSetObjectName+0xb0>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	4413      	add	r3, r2
 8002b64:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8002b68:	461a      	mov	r2, r3
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	f7ff ff8c 	bl	8002a88 <prvStrncpy>
		}
	}
}
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	0800d320 	.word	0x0800d320
 8002b7c:	0800d354 	.word	0x0800d354
 8002b80:	0800d384 	.word	0x0800d384
 8002b84:	2000abd8 	.word	0x2000abd8
 8002b88:	2000abe0 	.word	0x2000abe0
 8002b8c:	200024bc 	.word	0x200024bc

08002b90 <prvTraceOpenSymbol>:

traceString prvTraceOpenSymbol(const char* name, traceString userEventChannel)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	72fb      	strb	r3, [r7, #11]
	crc = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	72bb      	strb	r3, [r7, #10]
	
	TRACE_ASSERT(name != NULL, "prvTraceOpenSymbol: name == NULL", (traceString)0);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <prvTraceOpenSymbol+0x24>
 8002baa:	4820      	ldr	r0, [pc, #128]	; (8002c2c <prvTraceOpenSymbol+0x9c>)
 8002bac:	f000 f842 	bl	8002c34 <prvTraceError>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e036      	b.n	8002c22 <prvTraceOpenSymbol+0x92>

	prvTraceGetChecksum(name, &crc, &len);
 8002bb4:	f107 020b 	add.w	r2, r7, #11
 8002bb8:	f107 030a 	add.w	r3, r7, #10
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fb28 	bl	8003214 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc8:	613b      	str	r3, [r7, #16]
  return(result);
 8002bca:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	2301      	movs	r3, #1
 8002bd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f383 8810 	msr	PRIMASK, r3
}
 8002bd8:	bf00      	nop
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <prvTraceOpenSymbol+0xa0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <prvTraceOpenSymbol+0xa0>)
 8002be2:	6013      	str	r3, [r2, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 8002be4:	7ab9      	ldrb	r1, [r7, #10]
 8002be6:	7afa      	ldrb	r2, [r7, #11]
 8002be8:	887b      	ldrh	r3, [r7, #2]
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9d8 	bl	8002fa0 <prvTraceLookupSymbolTableEntry>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	83fb      	strh	r3, [r7, #30]
	if (!result)
 8002bf4:	8bfb      	ldrh	r3, [r7, #30]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d107      	bne.n	8002c0a <prvTraceOpenSymbol+0x7a>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 8002bfa:	7ab9      	ldrb	r1, [r7, #10]
 8002bfc:	7afa      	ldrb	r2, [r7, #11]
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fa49 	bl	8003098 <prvTraceCreateSymbolTableEntry>
 8002c06:	4603      	mov	r3, r0
 8002c08:	83fb      	strh	r3, [r7, #30]
	}
	trcCRITICAL_SECTION_END();
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <prvTraceOpenSymbol+0xa0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	4a07      	ldr	r2, [pc, #28]	; (8002c30 <prvTraceOpenSymbol+0xa0>)
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f383 8810 	msr	PRIMASK, r3
}
 8002c1e:	bf00      	nop

	return result;
 8002c20:	8bfb      	ldrh	r3, [r7, #30]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	0800d3b4 	.word	0x0800d3b4
 8002c30:	200024b4 	.word	0x200024b4

08002c34 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <prvTraceError+0x50>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <prvTraceError+0x14>
	{
		vTraceStop();
 8002c44:	f7fe ffdc 	bl	8001c00 <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <prvTraceError+0x54>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d115      	bne.n	8002c7c <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8002c50:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <prvTraceError+0x54>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <prvTraceError+0x50>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00e      	beq.n	8002c7c <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <prvTraceError+0x50>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <prvTraceError+0x54>)
 8002c68:	6811      	ldr	r1, [r2, #0]
 8002c6a:	2250      	movs	r2, #80	; 0x50
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff0b 	bl	8002a88 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8002c72:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <prvTraceError+0x50>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		}
	}
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	2000abd8 	.word	0x2000abd8
 8002c88:	200024bc 	.word	0x200024bc

08002c8c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d172      	bne.n	8002d8a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
 8002ca4:	483c      	ldr	r0, [pc, #240]	; (8002d98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002ca6:	f7ff ffc5 	bl	8002c34 <prvTraceError>
 8002caa:	e072      	b.n	8002d92 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x106>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8002cac:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8002cb8:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8002cc6:	2b98      	cmp	r3, #152	; 0x98
 8002cc8:	d928      	bls.n	8002d1c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8002cca:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8002cd8:	2ba7      	cmp	r3, #167	; 0xa7
 8002cda:	d81f      	bhi.n	8002d1c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8002cdc:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8002cea:	3368      	adds	r3, #104	; 0x68
 8002cec:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	441a      	add	r2, r3
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d241      	bcs.n	8002d82 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8002cfe:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8002d0a:	18d0      	adds	r0, r2, r3
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	461a      	mov	r2, r3
 8002d14:	2100      	movs	r1, #0
 8002d16:	f009 f8ff 	bl	800bf18 <memset>
		{
 8002d1a:	e032      	b.n	8002d82 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8002d1c:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d12a      	bne.n	8002d84 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d20c      	bcs.n	8002d56 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xca>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8002d48:	4413      	add	r3, r2
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f009 f8e2 	bl	800bf18 <memset>
 8002d54:	e016      	b.n	8002d84 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8002d5e:	2204      	movs	r2, #4
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f009 f8d8 	bl	800bf18 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8002d74:	4413      	add	r3, r2
 8002d76:	2204      	movs	r2, #4
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f009 f8cc 	bl	800bf18 <memset>
 8002d80:	e000      	b.n	8002d84 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
 8002d82:	bf00      	nop
			}
		}
		i++;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	3301      	adds	r3, #1
 8002d88:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d38c      	bcc.n	8002cac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	0800d3e4 	.word	0x0800d3e4
 8002d9c:	2000abd8 	.word	0x2000abd8

08002da0 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <prvTraceUpdateCounters+0x4c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01b      	beq.n	8002de6 <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <prvTraceUpdateCounters+0x4c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	3201      	adds	r2, #1
 8002db6:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <prvTraceUpdateCounters+0x4c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	3201      	adds	r2, #1
 8002dc0:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <prvTraceUpdateCounters+0x4c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002dcc:	d307      	bcc.n	8002dde <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <prvTraceUpdateCounters+0x4c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <prvTraceUpdateCounters+0x4c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8002dde:	2001      	movs	r0, #1
 8002de0:	f7ff ff54 	bl	8002c8c <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8002de4:	e000      	b.n	8002de8 <prvTraceUpdateCounters+0x48>
		return;
 8002de6:	bf00      	nop
#endif
}
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000abd8 	.word	0x2000abd8

08002df0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	2bff      	cmp	r3, #255	; 0xff
 8002e0a:	d009      	beq.n	8002e20 <prvTraceGetDTS+0x30>
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <prvTraceGetDTS+0x30>
 8002e16:	485a      	ldr	r0, [pc, #360]	; (8002f80 <prvTraceGetDTS+0x190>)
 8002e18:	f7ff ff0c 	bl	8002c34 <prvTraceError>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e0ab      	b.n	8002f78 <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 8002e20:	4b58      	ldr	r3, [pc, #352]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 8002e2a:	4b57      	ldr	r3, [pc, #348]	; (8002f88 <prvTraceGetDTS+0x198>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8002e32:	4b55      	ldr	r3, [pc, #340]	; (8002f88 <prvTraceGetDTS+0x198>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b53      	ldr	r3, [pc, #332]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	0892      	lsrs	r2, r2, #2
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e3e:	e00b      	b.n	8002e58 <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8002e40:	4b52      	ldr	r3, [pc, #328]	; (8002f8c <prvTraceGetDTS+0x19c>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b52      	ldr	r3, [pc, #328]	; (8002f90 <prvTraceGetDTS+0x1a0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d005      	beq.n	8002e58 <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8002e4c:	4b51      	ldr	r3, [pc, #324]	; (8002f94 <prvTraceGetDTS+0x1a4>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0892      	lsrs	r2, r2, #2
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8002e58:	f107 030c 	add.w	r3, r7, #12
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fa1f 	bl	80032a0 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4b4c      	ldr	r3, [pc, #304]	; (8002f98 <prvTraceGetDTS+0x1a8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a4a      	ldr	r2, [pc, #296]	; (8002f98 <prvTraceGetDTS+0x1a8>)
 8002e70:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8002e72:	4b44      	ldr	r3, [pc, #272]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d043      	beq.n	8002f04 <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8002e7c:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d91d      	bls.n	8002ec4 <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8002e88:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e8e:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e9a:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	440a      	add	r2, r1
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8002ea2:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8002eb4:	fb00 f202 	mul.w	r2, r0, r2
 8002eb8:	1a9a      	subs	r2, r3, r2
 8002eba:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	440a      	add	r2, r1
 8002ec0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ec2:	e007      	b.n	8002ed4 <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002eca:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d313      	bcc.n	8002f0c <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8002ee4:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eea:	3201      	adds	r2, #1
 8002eec:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8002eee:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ef4:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	1a8a      	subs	r2, r1, r2
 8002f00:	629a      	str	r2, [r3, #40]	; 0x28
 8002f02:	e003      	b.n	8002f0c <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <prvTraceGetDTS+0x194>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d92c      	bls.n	8002f6e <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8002f14:	f7ff fc20 	bl	8002758 <prvTraceNextFreeEventBufferSlot>
 8002f18:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d026      	beq.n	8002f6e <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10b      	bne.n	8002f42 <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	22a9      	movs	r2, #169	; 0xa9
 8002f2e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	0c1b      	lsrs	r3, r3, #16
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	705a      	strb	r2, [r3, #1]
 8002f40:	e013      	b.n	8002f6a <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	2bff      	cmp	r3, #255	; 0xff
 8002f46:	d10d      	bne.n	8002f64 <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	22a8      	movs	r2, #168	; 0xa8
 8002f4c:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	0e1b      	lsrs	r3, r3, #24
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	705a      	strb	r2, [r3, #1]
 8002f62:	e002      	b.n	8002f6a <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8002f64:	480d      	ldr	r0, [pc, #52]	; (8002f9c <prvTraceGetDTS+0x1ac>)
 8002f66:	f7ff fe65 	bl	8002c34 <prvTraceError>
			}
			prvTraceUpdateCounters();
 8002f6a:	f7ff ff19 	bl	8002da0 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	4013      	ands	r3, r2
 8002f76:	b29b      	uxth	r3, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	0800d43c 	.word	0x0800d43c
 8002f84:	2000abd8 	.word	0x2000abd8
 8002f88:	200024b8 	.word	0x200024b8
 8002f8c:	e000e018 	.word	0xe000e018
 8002f90:	2000255c 	.word	0x2000255c
 8002f94:	20000000 	.word	0x20000000
 8002f98:	2000abe4 	.word	0x2000abe4
 8002f9c:	0800d47c 	.word	0x0800d47c

08002fa0 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
traceString prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 traceString chn)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	4608      	mov	r0, r1
 8002faa:	4611      	mov	r1, r2
 8002fac:	461a      	mov	r2, r3
 8002fae:	4603      	mov	r3, r0
 8002fb0:	70fb      	strb	r3, [r7, #3]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	70bb      	strb	r3, [r7, #2]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	803b      	strh	r3, [r7, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <prvTraceLookupSymbolTableEntry+0xec>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	f202 4244 	addw	r2, r2, #1092	; 0x444
 8002fc4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002fc8:	81fb      	strh	r3, [r7, #14]

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceString)0);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d104      	bne.n	8002fda <prvTraceLookupSymbolTableEntry+0x3a>
 8002fd0:	482f      	ldr	r0, [pc, #188]	; (8003090 <prvTraceLookupSymbolTableEntry+0xf0>)
 8002fd2:	f7ff fe2f 	bl	8002c34 <prvTraceError>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e053      	b.n	8003082 <prvTraceLookupSymbolTableEntry+0xe2>
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceString)0);
 8002fda:	78bb      	ldrb	r3, [r7, #2]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d14a      	bne.n	8003076 <prvTraceLookupSymbolTableEntry+0xd6>
 8002fe0:	482c      	ldr	r0, [pc, #176]	; (8003094 <prvTraceLookupSymbolTableEntry+0xf4>)
 8002fe2:	f7ff fe27 	bl	8002c34 <prvTraceError>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e04b      	b.n	8003082 <prvTraceLookupSymbolTableEntry+0xe2>

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8002fea:	4b28      	ldr	r3, [pc, #160]	; (800308c <prvTraceLookupSymbolTableEntry+0xec>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	89fb      	ldrh	r3, [r7, #14]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	883b      	ldrh	r3, [r7, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d126      	bne.n	8003050 <prvTraceLookupSymbolTableEntry+0xb0>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 8003002:	4b22      	ldr	r3, [pc, #136]	; (800308c <prvTraceLookupSymbolTableEntry+0xec>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	89fb      	ldrh	r3, [r7, #14]
 8003008:	3303      	adds	r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8003010:	b29a      	uxth	r2, r3
 8003012:	883b      	ldrh	r3, [r7, #0]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	b29b      	uxth	r3, r3
 8003018:	429a      	cmp	r2, r3
 800301a:	d119      	bne.n	8003050 <prvTraceLookupSymbolTableEntry+0xb0>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <prvTraceLookupSymbolTableEntry+0xec>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	89fb      	ldrh	r3, [r7, #14]
 8003022:	1d19      	adds	r1, r3, #4
 8003024:	78bb      	ldrb	r3, [r7, #2]
 8003026:	440b      	add	r3, r1
 8003028:	4413      	add	r3, r2
 800302a:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10e      	bne.n	8003050 <prvTraceLookupSymbolTableEntry+0xb0>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <prvTraceLookupSymbolTableEntry+0xec>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	89fb      	ldrh	r3, [r7, #14]
 8003038:	3304      	adds	r3, #4
 800303a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 800303e:	4413      	add	r3, r2
 8003040:	78ba      	ldrb	r2, [r7, #2]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f008 ffe1 	bl	800c00c <strncmp>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d016      	beq.n	800307e <prvTraceLookupSymbolTableEntry+0xde>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <prvTraceLookupSymbolTableEntry+0xec>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	89fb      	ldrh	r3, [r7, #14]
 8003056:	4413      	add	r3, r2
 8003058:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800305c:	b29a      	uxth	r2, r3
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <prvTraceLookupSymbolTableEntry+0xec>)
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	89fb      	ldrh	r3, [r7, #14]
 8003064:	3301      	adds	r3, #1
 8003066:	440b      	add	r3, r1
 8003068:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800306c:	b29b      	uxth	r3, r3
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	b29b      	uxth	r3, r3
 8003072:	4413      	add	r3, r2
 8003074:	81fb      	strh	r3, [r7, #14]
	while (i != 0)
 8003076:	89fb      	ldrh	r3, [r7, #14]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1b6      	bne.n	8002fea <prvTraceLookupSymbolTableEntry+0x4a>
 800307c:	e000      	b.n	8003080 <prvTraceLookupSymbolTableEntry+0xe0>
						break; /* found */
 800307e:	bf00      	nop
	}
	return i;
 8003080:	89fb      	ldrh	r3, [r7, #14]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	2000abd8 	.word	0x2000abd8
 8003090:	0800d4a0 	.word	0x0800d4a0
 8003094:	0800d4dc 	.word	0x0800d4dc

08003098 <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
uint16_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										traceString channel)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	70fb      	strb	r3, [r7, #3]
 80030aa:	460b      	mov	r3, r1
 80030ac:	70bb      	strb	r3, [r7, #2]
 80030ae:	4613      	mov	r3, r2
 80030b0:	803b      	strh	r3, [r7, #0]
	uint16_t ret = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	81fb      	strh	r3, [r7, #14]

	TRACE_ASSERT(name != NULL, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <prvTraceCreateSymbolTableEntry+0x2e>
 80030bc:	4851      	ldr	r0, [pc, #324]	; (8003204 <prvTraceCreateSymbolTableEntry+0x16c>)
 80030be:	f7ff fdb9 	bl	8002c34 <prvTraceError>
 80030c2:	2300      	movs	r3, #0
 80030c4:	e099      	b.n	80031fa <prvTraceCreateSymbolTableEntry+0x162>
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
 80030c6:	78bb      	ldrb	r3, [r7, #2]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <prvTraceCreateSymbolTableEntry+0x3e>
 80030cc:	484e      	ldr	r0, [pc, #312]	; (8003208 <prvTraceCreateSymbolTableEntry+0x170>)
 80030ce:	f7ff fdb1 	bl	8002c34 <prvTraceError>
 80030d2:	2300      	movs	r3, #0
 80030d4:	e091      	b.n	80031fa <prvTraceCreateSymbolTableEntry+0x162>

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 80030d6:	4b4d      	ldr	r3, [pc, #308]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f8d3 2564 	ldr.w	r2, [r3, #1380]	; 0x564
 80030de:	78bb      	ldrb	r3, [r7, #2]
 80030e0:	4413      	add	r3, r2
 80030e2:	3304      	adds	r3, #4
 80030e4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80030e8:	d305      	bcc.n	80030f6 <prvTraceCreateSymbolTableEntry+0x5e>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 80030ea:	4849      	ldr	r0, [pc, #292]	; (8003210 <prvTraceCreateSymbolTableEntry+0x178>)
 80030ec:	f7ff fda2 	bl	8002c34 <prvTraceError>
		ret = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	81fb      	strh	r3, [r7, #14]
 80030f4:	e080      	b.n	80031f8 <prvTraceCreateSymbolTableEntry+0x160>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 80030f6:	4b45      	ldr	r3, [pc, #276]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	f202 4244 	addw	r2, r2, #1092	; 0x444
 8003100:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
		RecorderDataPtr->SymbolTable.symbytes
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 8003106:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8003108:	4b40      	ldr	r3, [pc, #256]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8d3 3564 	ldr.w	r3, [r3, #1380]	; 0x564
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8003110:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8003112:	4413      	add	r3, r2
 8003114:	460a      	mov	r2, r1
 8003116:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 800311a:	4b3c      	ldr	r3, [pc, #240]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	f202 4244 	addw	r2, r2, #1092	; 0x444
 8003124:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	b299      	uxth	r1, r3
		RecorderDataPtr->SymbolTable.symbytes
 800312c:	4b37      	ldr	r3, [pc, #220]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 800312e:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 8003130:	4b36      	ldr	r3, [pc, #216]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8d3 3564 	ldr.w	r3, [r3, #1380]	; 0x564
 8003138:	3301      	adds	r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 800313a:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 800313c:	4413      	add	r3, r2
 800313e:	460a      	mov	r2, r1
 8003140:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568

		RecorderDataPtr->SymbolTable.symbytes
 8003144:	4b31      	ldr	r3, [pc, #196]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 8003146:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 8003148:	4b30      	ldr	r3, [pc, #192]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8d3 3564 	ldr.w	r3, [r3, #1380]	; 0x564
 8003150:	3302      	adds	r3, #2
			(uint8_t)(channel & 0x00FF);
 8003152:	8839      	ldrh	r1, [r7, #0]
 8003154:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 8003156:	4413      	add	r3, r2
 8003158:	460a      	mov	r2, r1
 800315a:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 800315e:	883b      	ldrh	r3, [r7, #0]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	b299      	uxth	r1, r3
		RecorderDataPtr->SymbolTable.symbytes
 8003164:	4b29      	ldr	r3, [pc, #164]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 8003166:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8003168:	4b28      	ldr	r3, [pc, #160]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8d3 3564 	ldr.w	r3, [r3, #1380]	; 0x564
 8003170:	3303      	adds	r3, #3
			(uint8_t)(channel / 0x100);
 8003172:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8003174:	4413      	add	r3, r2
 8003176:	460a      	mov	r2, r1
 8003178:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800317c:	4b23      	ldr	r3, [pc, #140]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 800317e:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8d3 3564 	ldr.w	r3, [r3, #1380]	; 0x564
 8003188:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800318a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 800318e:	4413      	add	r3, r2
 8003190:	78ba      	ldrb	r2, [r7, #2]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fc77 	bl	8002a88 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 800319c:	681a      	ldr	r2, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 800319e:	4b1b      	ldr	r3, [pc, #108]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8d3 1564 	ldr.w	r1, [r3, #1380]	; 0x564
 80031a6:	78bb      	ldrb	r3, [r7, #2]
 80031a8:	440b      	add	r3, r1
 80031aa:	3304      	adds	r3, #4
 80031ac:	4413      	add	r3, r2
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 80031b4:	4b15      	ldr	r3, [pc, #84]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8d3 1564 	ldr.w	r1, [r3, #1380]	; 0x564
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 80031be:	681b      	ldr	r3, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	b289      	uxth	r1, r1
 80031c4:	f202 4244 	addw	r2, r2, #1092	; 0x444
 80031c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 80031cc:	4b0f      	ldr	r3, [pc, #60]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8d3 2564 	ldr.w	r2, [r3, #1380]	; 0x564
 80031d4:	78bb      	ldrb	r3, [r7, #2]
 80031d6:	441a      	add	r2, r3
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3205      	adds	r2, #5
 80031de:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <prvTraceCreateSymbolTableEntry+0x174>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f8d3 3564 	ldr.w	r3, [r3, #1380]	; 0x564
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	78bb      	ldrb	r3, [r7, #2]
 80031ee:	3305      	adds	r3, #5
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 80031f8:	89fb      	ldrh	r3, [r7, #14]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	0800d514 	.word	0x0800d514
 8003208:	0800d550 	.word	0x0800d550
 800320c:	2000abd8 	.word	0x2000abd8
 8003210:	0800d588 	.word	0x0800d588

08003214 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 8003220:	2301      	movs	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != NULL, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d103      	bne.n	8003236 <prvTraceGetChecksum+0x22>
 800322e:	4819      	ldr	r0, [pc, #100]	; (8003294 <prvTraceGetChecksum+0x80>)
 8003230:	f7ff fd00 	bl	8002c34 <prvTraceError>
 8003234:	e02b      	b.n	800328e <prvTraceGetChecksum+0x7a>
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d103      	bne.n	8003244 <prvTraceGetChecksum+0x30>
 800323c:	4816      	ldr	r0, [pc, #88]	; (8003298 <prvTraceGetChecksum+0x84>)
 800323e:	f7ff fcf9 	bl	8002c34 <prvTraceError>
 8003242:	e024      	b.n	800328e <prvTraceGetChecksum+0x7a>
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <prvTraceGetChecksum+0x3e>
 800324a:	4814      	ldr	r0, [pc, #80]	; (800329c <prvTraceGetChecksum+0x88>)
 800324c:	f7ff fcf2 	bl	8002c34 <prvTraceError>
 8003250:	e01d      	b.n	800328e <prvTraceGetChecksum+0x7a>

	if (pname != (const char *) 0)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00f      	beq.n	8003278 <prvTraceGetChecksum+0x64>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 8003258:	e006      	b.n	8003268 <prvTraceGetChecksum+0x54>
		{
			crc += c;
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4413      	add	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
			length++;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3301      	adds	r3, #1
 8003266:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	60fa      	str	r2, [r7, #12]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	75fb      	strb	r3, [r7, #23]
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <prvTraceGetChecksum+0x46>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	701a      	strb	r2, [r3, #0]
}
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	0800d5d0 	.word	0x0800d5d0
 8003298:	0800d604 	.word	0x0800d604
 800329c:	0800d634 	.word	0x0800d634

080032a0 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 80032b0:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <prvTracePortGetTimeStamp+0xd0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d107      	bne.n	80032c8 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d051      	beq.n	8003362 <prvTracePortGetTimeStamp+0xc2>
			*pTimestamp = last_timestamp;
 80032be:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <prvTracePortGetTimeStamp+0xd4>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	601a      	str	r2, [r3, #0]
		return;
 80032c6:	e04c      	b.n	8003362 <prvTracePortGetTimeStamp+0xc2>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
 80032c8:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <prvTracePortGetTimeStamp+0xd8>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b2b      	ldr	r3, [pc, #172]	; (800337c <prvTracePortGetTimeStamp+0xdc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
 80032d6:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <prvTracePortGetTimeStamp+0xe0>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b2a      	ldr	r3, [pc, #168]	; (8003384 <prvTracePortGetTimeStamp+0xe4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	db03      	blt.n	80032ee <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
 80032e6:	4b26      	ldr	r3, [pc, #152]	; (8003380 <prvTracePortGetTimeStamp+0xe0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e002      	b.n	80032f4 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
 80032ee:	4b25      	ldr	r3, [pc, #148]	; (8003384 <prvTracePortGetTimeStamp+0xe4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
 80032f4:	4b22      	ldr	r3, [pc, #136]	; (8003380 <prvTracePortGetTimeStamp+0xe0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d107      	bne.n	800330e <prvTracePortGetTimeStamp+0x6e>
 80032fe:	4b22      	ldr	r3, [pc, #136]	; (8003388 <prvTracePortGetTimeStamp+0xe8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	429a      	cmp	r2, r3
 8003306:	d202      	bcs.n	800330e <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3301      	adds	r3, #1
 800330c:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d018      	beq.n	8003346 <prvTracePortGetTimeStamp+0xa6>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <prvTracePortGetTimeStamp+0xd8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	4a14      	ldr	r2, [pc, #80]	; (8003374 <prvTracePortGetTimeStamp+0xd4>)
 8003324:	6013      	str	r3, [r2, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <prvTracePortGetTimeStamp+0xd8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	fb03 f202 	mul.w	r2, r3, r2
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4413      	add	r3, r2
 800333a:	089a      	lsrs	r2, r3, #2
 800333c:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <prvTracePortGetTimeStamp+0xd4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4413      	add	r3, r2
 8003342:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <prvTracePortGetTimeStamp+0xd4>)
 8003344:	6013      	str	r3, [r2, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
 8003346:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <prvTracePortGetTimeStamp+0xe0>)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6013      	str	r3, [r2, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <prvTracePortGetTimeStamp+0xba>
		*pTimestamp = last_timestamp;
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <prvTracePortGetTimeStamp+0xd4>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 800335a:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <prvTracePortGetTimeStamp+0xe8>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	e000      	b.n	8003364 <prvTracePortGetTimeStamp+0xc4>
		return;
 8003362:	bf00      	nop
}
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	200024ac 	.word	0x200024ac
 8003374:	200024b0 	.word	0x200024b0
 8003378:	e000e014 	.word	0xe000e014
 800337c:	e000e018 	.word	0xe000e018
 8003380:	2000abe8 	.word	0x2000abe8
 8003384:	200024a8 	.word	0x200024a8
 8003388:	2000abec 	.word	0x2000abec

0800338c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003390:	2003      	movs	r0, #3
 8003392:	f000 fc6a 	bl	8003c6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003396:	200f      	movs	r0, #15
 8003398:	f7fe f81c 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800339c:	f7fd fe30 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_IncTick+0x20>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_IncTick+0x24>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4413      	add	r3, r2
 80033b8:	4a04      	ldr	r2, [pc, #16]	; (80033cc <HAL_IncTick+0x24>)
 80033ba:	6013      	str	r3, [r2, #0]
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000014 	.word	0x20000014
 80033cc:	2000abf0 	.word	0x2000abf0

080033d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return uwTick;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HAL_GetTick+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	2000abf0 	.word	0x2000abf0

080033e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033f0:	f7ff ffee 	bl	80033d0 <HAL_GetTick>
 80033f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d005      	beq.n	800340e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <HAL_Delay+0x44>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800340e:	bf00      	nop
 8003410:	f7ff ffde 	bl	80033d0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	429a      	cmp	r2, r3
 800341e:	d8f7      	bhi.n	8003410 <HAL_Delay+0x28>
  {
  }
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000014 	.word	0x20000014

08003430 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e031      	b.n	80034aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd fdfe 	bl	8001050 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d116      	bne.n	800349c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <HAL_ADC_Init+0x84>)
 8003474:	4013      	ands	r3, r2
 8003476:	f043 0202 	orr.w	r2, r3, #2
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fa4c 	bl	800391c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	f043 0201 	orr.w	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
 800349a:	e001      	b.n	80034a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	ffffeefd 	.word	0xffffeefd

080034b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_Start+0x1a>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e0ad      	b.n	800362e <HAL_ADC_Start+0x176>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d018      	beq.n	800351a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80034f8:	4b50      	ldr	r3, [pc, #320]	; (800363c <HAL_ADC_Start+0x184>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a50      	ldr	r2, [pc, #320]	; (8003640 <HAL_ADC_Start+0x188>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	0c9a      	lsrs	r2, r3, #18
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800350c:	e002      	b.n	8003514 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3b01      	subs	r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f9      	bne.n	800350e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d175      	bne.n	8003614 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800352c:	4b45      	ldr	r3, [pc, #276]	; (8003644 <HAL_ADC_Start+0x18c>)
 800352e:	4013      	ands	r3, r2
 8003530:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800354e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003562:	d106      	bne.n	8003572 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	f023 0206 	bic.w	r2, r3, #6
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
 8003570:	e002      	b.n	8003578 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003588:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800358a:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <HAL_ADC_Start+0x190>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d143      	bne.n	800362c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	e03a      	b.n	800362c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a24      	ldr	r2, [pc, #144]	; (800364c <HAL_ADC_Start+0x194>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d10e      	bne.n	80035de <HAL_ADC_Start+0x126>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d107      	bne.n	80035de <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035dc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80035de:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <HAL_ADC_Start+0x190>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d120      	bne.n	800362c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a18      	ldr	r2, [pc, #96]	; (8003650 <HAL_ADC_Start+0x198>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d11b      	bne.n	800362c <HAL_ADC_Start+0x174>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d114      	bne.n	800362c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003610:	609a      	str	r2, [r3, #8]
 8003612:	e00b      	b.n	800362c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f043 0210 	orr.w	r2, r3, #16
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000
 8003640:	431bde83 	.word	0x431bde83
 8003644:	fffff8fe 	.word	0xfffff8fe
 8003648:	40012300 	.word	0x40012300
 800364c:	40012000 	.word	0x40012000
 8003650:	40012200 	.word	0x40012200

08003654 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1c>
 8003688:	2302      	movs	r3, #2
 800368a:	e136      	b.n	80038fa <HAL_ADC_ConfigChannel+0x28a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b09      	cmp	r3, #9
 800369a:	d93a      	bls.n	8003712 <HAL_ADC_ConfigChannel+0xa2>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036a4:	d035      	beq.n	8003712 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68d9      	ldr	r1, [r3, #12]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	4613      	mov	r3, r2
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4413      	add	r3, r2
 80036ba:	3b1e      	subs	r3, #30
 80036bc:	2207      	movs	r2, #7
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	400a      	ands	r2, r1
 80036ca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a8d      	ldr	r2, [pc, #564]	; (8003908 <HAL_ADC_ConfigChannel+0x298>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10a      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68d9      	ldr	r1, [r3, #12]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	061a      	lsls	r2, r3, #24
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036ea:	e035      	b.n	8003758 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68d9      	ldr	r1, [r3, #12]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	4618      	mov	r0, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4403      	add	r3, r0
 8003704:	3b1e      	subs	r3, #30
 8003706:	409a      	lsls	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003710:	e022      	b.n	8003758 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6919      	ldr	r1, [r3, #16]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	2207      	movs	r2, #7
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43da      	mvns	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	400a      	ands	r2, r1
 8003734:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6919      	ldr	r1, [r3, #16]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	4618      	mov	r0, r3
 8003748:	4603      	mov	r3, r0
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4403      	add	r3, r0
 800374e:	409a      	lsls	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b06      	cmp	r3, #6
 800375e:	d824      	bhi.n	80037aa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	3b05      	subs	r3, #5
 8003772:	221f      	movs	r2, #31
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43da      	mvns	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	400a      	ands	r2, r1
 8003780:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	4618      	mov	r0, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	3b05      	subs	r3, #5
 800379c:	fa00 f203 	lsl.w	r2, r0, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	635a      	str	r2, [r3, #52]	; 0x34
 80037a8:	e04c      	b.n	8003844 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d824      	bhi.n	80037fc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	3b23      	subs	r3, #35	; 0x23
 80037c4:	221f      	movs	r2, #31
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43da      	mvns	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	400a      	ands	r2, r1
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	4618      	mov	r0, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	3b23      	subs	r3, #35	; 0x23
 80037ee:	fa00 f203 	lsl.w	r2, r0, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
 80037fa:	e023      	b.n	8003844 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	3b41      	subs	r3, #65	; 0x41
 800380e:	221f      	movs	r2, #31
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43da      	mvns	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	400a      	ands	r2, r1
 800381c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	4618      	mov	r0, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	3b41      	subs	r3, #65	; 0x41
 8003838:	fa00 f203 	lsl.w	r2, r0, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a30      	ldr	r2, [pc, #192]	; (800390c <HAL_ADC_ConfigChannel+0x29c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10a      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x1f4>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003856:	d105      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003858:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <HAL_ADC_ConfigChannel+0x2a0>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a2c      	ldr	r2, [pc, #176]	; (8003910 <HAL_ADC_ConfigChannel+0x2a0>)
 800385e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003862:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a28      	ldr	r2, [pc, #160]	; (800390c <HAL_ADC_ConfigChannel+0x29c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d10f      	bne.n	800388e <HAL_ADC_ConfigChannel+0x21e>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b12      	cmp	r3, #18
 8003874:	d10b      	bne.n	800388e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003876:	4b26      	ldr	r3, [pc, #152]	; (8003910 <HAL_ADC_ConfigChannel+0x2a0>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4a25      	ldr	r2, [pc, #148]	; (8003910 <HAL_ADC_ConfigChannel+0x2a0>)
 800387c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003880:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003882:	4b23      	ldr	r3, [pc, #140]	; (8003910 <HAL_ADC_ConfigChannel+0x2a0>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4a22      	ldr	r2, [pc, #136]	; (8003910 <HAL_ADC_ConfigChannel+0x2a0>)
 8003888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800388c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1e      	ldr	r2, [pc, #120]	; (800390c <HAL_ADC_ConfigChannel+0x29c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d12b      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x280>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1a      	ldr	r2, [pc, #104]	; (8003908 <HAL_ADC_ConfigChannel+0x298>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <HAL_ADC_ConfigChannel+0x23a>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b11      	cmp	r3, #17
 80038a8:	d122      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80038aa:	4b19      	ldr	r3, [pc, #100]	; (8003910 <HAL_ADC_ConfigChannel+0x2a0>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_ADC_ConfigChannel+0x2a0>)
 80038b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80038b4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80038b6:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_ADC_ConfigChannel+0x2a0>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4a15      	ldr	r2, [pc, #84]	; (8003910 <HAL_ADC_ConfigChannel+0x2a0>)
 80038bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038c0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <HAL_ADC_ConfigChannel+0x298>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d111      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_ADC_ConfigChannel+0x2a4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a11      	ldr	r2, [pc, #68]	; (8003918 <HAL_ADC_ConfigChannel+0x2a8>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0c9a      	lsrs	r2, r3, #18
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038e2:	e002      	b.n	80038ea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f9      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	10000012 	.word	0x10000012
 800390c:	40012000 	.word	0x40012000
 8003910:	40012300 	.word	0x40012300
 8003914:	20000000 	.word	0x20000000
 8003918:	431bde83 	.word	0x431bde83

0800391c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003924:	4b78      	ldr	r3, [pc, #480]	; (8003b08 <ADC_Init+0x1ec>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a77      	ldr	r2, [pc, #476]	; (8003b08 <ADC_Init+0x1ec>)
 800392a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800392e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003930:	4b75      	ldr	r3, [pc, #468]	; (8003b08 <ADC_Init+0x1ec>)
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4973      	ldr	r1, [pc, #460]	; (8003b08 <ADC_Init+0x1ec>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800394c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	021a      	lsls	r2, r3, #8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003992:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6899      	ldr	r1, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	4a58      	ldr	r2, [pc, #352]	; (8003b0c <ADC_Init+0x1f0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d022      	beq.n	80039f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6899      	ldr	r1, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6899      	ldr	r1, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	e00f      	b.n	8003a16 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0202 	bic.w	r2, r2, #2
 8003a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6899      	ldr	r1, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	005a      	lsls	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01b      	beq.n	8003a7c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	035a      	lsls	r2, r3, #13
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	e007      	b.n	8003a8c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	051a      	lsls	r2, r3, #20
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6899      	ldr	r1, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ace:	025a      	lsls	r2, r3, #9
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6899      	ldr	r1, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	029a      	lsls	r2, r3, #10
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	40012300 	.word	0x40012300
 8003b0c:	0f000001 	.word	0x0f000001

08003b10 <__NVIC_SetPriorityGrouping>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <__NVIC_SetPriorityGrouping+0x40>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <__NVIC_SetPriorityGrouping+0x44>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b3e:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <__NVIC_SetPriorityGrouping+0x40>)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	60d3      	str	r3, [r2, #12]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000ed00 	.word	0xe000ed00
 8003b54:	05fa0000 	.word	0x05fa0000

08003b58 <__NVIC_GetPriorityGrouping>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <__NVIC_GetPriorityGrouping+0x18>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	f003 0307 	and.w	r3, r3, #7
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <__NVIC_EnableIRQ>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	db0b      	blt.n	8003b9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	f003 021f 	and.w	r2, r3, #31
 8003b8c:	4907      	ldr	r1, [pc, #28]	; (8003bac <__NVIC_EnableIRQ+0x38>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2001      	movs	r0, #1
 8003b96:	fa00 f202 	lsl.w	r2, r0, r2
 8003b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000e100 	.word	0xe000e100

08003bb0 <__NVIC_SetPriority>:
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	6039      	str	r1, [r7, #0]
 8003bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	db0a      	blt.n	8003bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	490c      	ldr	r1, [pc, #48]	; (8003bfc <__NVIC_SetPriority+0x4c>)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	0112      	lsls	r2, r2, #4
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003bd8:	e00a      	b.n	8003bf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4908      	ldr	r1, [pc, #32]	; (8003c00 <__NVIC_SetPriority+0x50>)
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	3b04      	subs	r3, #4
 8003be8:	0112      	lsls	r2, r2, #4
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	440b      	add	r3, r1
 8003bee:	761a      	strb	r2, [r3, #24]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000e100 	.word	0xe000e100
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <NVIC_EncodePriority>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f1c3 0307 	rsb	r3, r3, #7
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	bf28      	it	cs
 8003c22:	2304      	movcs	r3, #4
 8003c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	2b06      	cmp	r3, #6
 8003c2c:	d902      	bls.n	8003c34 <NVIC_EncodePriority+0x30>
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3b03      	subs	r3, #3
 8003c32:	e000      	b.n	8003c36 <NVIC_EncodePriority+0x32>
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c38:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43da      	mvns	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	401a      	ands	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	fa01 f303 	lsl.w	r3, r1, r3
 8003c56:	43d9      	mvns	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c5c:	4313      	orrs	r3, r2
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ff4c 	bl	8003b10 <__NVIC_SetPriorityGrouping>
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c92:	f7ff ff61 	bl	8003b58 <__NVIC_GetPriorityGrouping>
 8003c96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	6978      	ldr	r0, [r7, #20]
 8003c9e:	f7ff ffb1 	bl	8003c04 <NVIC_EncodePriority>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff ff80 	bl	8003bb0 <__NVIC_SetPriority>
}
 8003cb0:	bf00      	nop
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff ff54 	bl	8003b74 <__NVIC_EnableIRQ>
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b089      	sub	sp, #36	; 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	e175      	b.n	8003fe0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	f040 8164 	bne.w	8003fda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d005      	beq.n	8003d2a <HAL_GPIO_Init+0x56>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d130      	bne.n	8003d8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	2203      	movs	r2, #3
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d60:	2201      	movs	r2, #1
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f003 0201 	and.w	r2, r3, #1
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d017      	beq.n	8003dc8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	2203      	movs	r2, #3
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d123      	bne.n	8003e1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	08da      	lsrs	r2, r3, #3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3208      	adds	r2, #8
 8003ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	220f      	movs	r2, #15
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	08da      	lsrs	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3208      	adds	r2, #8
 8003e16:	69b9      	ldr	r1, [r7, #24]
 8003e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	2203      	movs	r2, #3
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 0203 	and.w	r2, r3, #3
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80be 	beq.w	8003fda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5e:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <HAL_GPIO_Init+0x324>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	4a65      	ldr	r2, [pc, #404]	; (8003ff8 <HAL_GPIO_Init+0x324>)
 8003e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e68:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6a:	4b63      	ldr	r3, [pc, #396]	; (8003ff8 <HAL_GPIO_Init+0x324>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e76:	4a61      	ldr	r2, [pc, #388]	; (8003ffc <HAL_GPIO_Init+0x328>)
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	220f      	movs	r2, #15
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4013      	ands	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a58      	ldr	r2, [pc, #352]	; (8004000 <HAL_GPIO_Init+0x32c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d037      	beq.n	8003f12 <HAL_GPIO_Init+0x23e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a57      	ldr	r2, [pc, #348]	; (8004004 <HAL_GPIO_Init+0x330>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d031      	beq.n	8003f0e <HAL_GPIO_Init+0x23a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a56      	ldr	r2, [pc, #344]	; (8004008 <HAL_GPIO_Init+0x334>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d02b      	beq.n	8003f0a <HAL_GPIO_Init+0x236>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a55      	ldr	r2, [pc, #340]	; (800400c <HAL_GPIO_Init+0x338>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d025      	beq.n	8003f06 <HAL_GPIO_Init+0x232>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a54      	ldr	r2, [pc, #336]	; (8004010 <HAL_GPIO_Init+0x33c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01f      	beq.n	8003f02 <HAL_GPIO_Init+0x22e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a53      	ldr	r2, [pc, #332]	; (8004014 <HAL_GPIO_Init+0x340>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d019      	beq.n	8003efe <HAL_GPIO_Init+0x22a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a52      	ldr	r2, [pc, #328]	; (8004018 <HAL_GPIO_Init+0x344>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <HAL_GPIO_Init+0x226>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a51      	ldr	r2, [pc, #324]	; (800401c <HAL_GPIO_Init+0x348>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00d      	beq.n	8003ef6 <HAL_GPIO_Init+0x222>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a50      	ldr	r2, [pc, #320]	; (8004020 <HAL_GPIO_Init+0x34c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <HAL_GPIO_Init+0x21e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a4f      	ldr	r2, [pc, #316]	; (8004024 <HAL_GPIO_Init+0x350>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <HAL_GPIO_Init+0x21a>
 8003eea:	2309      	movs	r3, #9
 8003eec:	e012      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003eee:	230a      	movs	r3, #10
 8003ef0:	e010      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	e00e      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003ef6:	2307      	movs	r3, #7
 8003ef8:	e00c      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003efa:	2306      	movs	r3, #6
 8003efc:	e00a      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003efe:	2305      	movs	r3, #5
 8003f00:	e008      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f02:	2304      	movs	r3, #4
 8003f04:	e006      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f06:	2303      	movs	r3, #3
 8003f08:	e004      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e002      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f12:	2300      	movs	r3, #0
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	f002 0203 	and.w	r2, r2, #3
 8003f1a:	0092      	lsls	r2, r2, #2
 8003f1c:	4093      	lsls	r3, r2
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f24:	4935      	ldr	r1, [pc, #212]	; (8003ffc <HAL_GPIO_Init+0x328>)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	089b      	lsrs	r3, r3, #2
 8003f2a:	3302      	adds	r3, #2
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f32:	4b3d      	ldr	r3, [pc, #244]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f56:	4a34      	ldr	r2, [pc, #208]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f5c:	4b32      	ldr	r3, [pc, #200]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f80:	4a29      	ldr	r2, [pc, #164]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b0f      	cmp	r3, #15
 8003fe4:	f67f ae86 	bls.w	8003cf4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	3724      	adds	r7, #36	; 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40013800 	.word	0x40013800
 8004000:	40020000 	.word	0x40020000
 8004004:	40020400 	.word	0x40020400
 8004008:	40020800 	.word	0x40020800
 800400c:	40020c00 	.word	0x40020c00
 8004010:	40021000 	.word	0x40021000
 8004014:	40021400 	.word	0x40021400
 8004018:	40021800 	.word	0x40021800
 800401c:	40021c00 	.word	0x40021c00
 8004020:	40022000 	.word	0x40022000
 8004024:	40022400 	.word	0x40022400
 8004028:	40013c00 	.word	0x40013c00

0800402c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	887b      	ldrh	r3, [r7, #2]
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	e001      	b.n	800404e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	807b      	strh	r3, [r7, #2]
 8004068:	4613      	mov	r3, r2
 800406a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800406c:	787b      	ldrb	r3, [r7, #1]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004078:	e003      	b.n	8004082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800407a:	887b      	ldrh	r3, [r7, #2]
 800407c:	041a      	lsls	r2, r3, #16
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	619a      	str	r2, [r3, #24]
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	460b      	mov	r3, r1
 8004098:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040a0:	887a      	ldrh	r2, [r7, #2]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4013      	ands	r3, r2
 80040a6:	041a      	lsls	r2, r3, #16
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	43d9      	mvns	r1, r3
 80040ac:	887b      	ldrh	r3, [r7, #2]
 80040ae:	400b      	ands	r3, r1
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	619a      	str	r2, [r3, #24]
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d006      	beq.n	80040e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040da:	4a05      	ldr	r2, [pc, #20]	; (80040f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fc fdd2 	bl	8000c8c <HAL_GPIO_EXTI_Callback>
  }
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40013c00 	.word	0x40013c00

080040f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f6:	b08f      	sub	sp, #60	; 0x3c
 80040f8:	af0a      	add	r7, sp, #40	; 0x28
 80040fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e116      	b.n	8004334 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7fd f8dd 	bl	80012e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2203      	movs	r2, #3
 800412a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d102      	bne.n	8004140 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f002 ff27 	bl	8006f98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	687e      	ldr	r6, [r7, #4]
 8004152:	466d      	mov	r5, sp
 8004154:	f106 0410 	add.w	r4, r6, #16
 8004158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800415a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800415c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800415e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004160:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004164:	e885 0003 	stmia.w	r5, {r0, r1}
 8004168:	1d33      	adds	r3, r6, #4
 800416a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800416c:	6838      	ldr	r0, [r7, #0]
 800416e:	f002 febb 	bl	8006ee8 <USB_CoreInit>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0d7      	b.n	8004334 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f002 ff15 	bl	8006fba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004190:	2300      	movs	r3, #0
 8004192:	73fb      	strb	r3, [r7, #15]
 8004194:	e04a      	b.n	800422c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004196:	7bfa      	ldrb	r2, [r7, #15]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	333d      	adds	r3, #61	; 0x3d
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	333c      	adds	r3, #60	; 0x3c
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	b298      	uxth	r0, r3
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	3344      	adds	r3, #68	; 0x44
 80041d2:	4602      	mov	r2, r0
 80041d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041d6:	7bfa      	ldrb	r2, [r7, #15]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	3340      	adds	r3, #64	; 0x40
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	3348      	adds	r3, #72	; 0x48
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041fe:	7bfa      	ldrb	r2, [r7, #15]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	334c      	adds	r3, #76	; 0x4c
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004212:	7bfa      	ldrb	r2, [r7, #15]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	3354      	adds	r3, #84	; 0x54
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	3301      	adds	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d3af      	bcc.n	8004196 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	e044      	b.n	80042c6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800427e:	7bfa      	ldrb	r2, [r7, #15]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	3301      	adds	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
 80042c6:	7bfa      	ldrb	r2, [r7, #15]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d3b5      	bcc.n	800423c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	687e      	ldr	r6, [r7, #4]
 80042d8:	466d      	mov	r5, sp
 80042da:	f106 0410 	add.w	r4, r6, #16
 80042de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80042ee:	1d33      	adds	r3, r6, #4
 80042f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042f2:	6838      	ldr	r0, [r7, #0]
 80042f4:	f002 feae 	bl	8007054 <USB_DevInit>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e014      	b.n	8004334 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	2b01      	cmp	r3, #1
 8004320:	d102      	bne.n	8004328 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f80a 	bl	800433c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f003 f86c 	bl	800740a <USB_DevDisconnect>

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800433c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_PCDEx_ActivateLPM+0x44>)
 800436c:	4313      	orrs	r3, r2
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	10000003 	.word	0x10000003

08004384 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a04      	ldr	r2, [pc, #16]	; (80043a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800438e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004392:	6013      	str	r3, [r2, #0]
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40007000 	.word	0x40007000

080043a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80043ac:	2300      	movs	r3, #0
 80043ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e29b      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8087 	beq.w	80044d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043c8:	4b96      	ldr	r3, [pc, #600]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d00c      	beq.n	80043ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d4:	4b93      	ldr	r3, [pc, #588]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d112      	bne.n	8004406 <HAL_RCC_OscConfig+0x62>
 80043e0:	4b90      	ldr	r3, [pc, #576]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ec:	d10b      	bne.n	8004406 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ee:	4b8d      	ldr	r3, [pc, #564]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d06c      	beq.n	80044d4 <HAL_RCC_OscConfig+0x130>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d168      	bne.n	80044d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e275      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440e:	d106      	bne.n	800441e <HAL_RCC_OscConfig+0x7a>
 8004410:	4b84      	ldr	r3, [pc, #528]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a83      	ldr	r2, [pc, #524]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	e02e      	b.n	800447c <HAL_RCC_OscConfig+0xd8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x9c>
 8004426:	4b7f      	ldr	r3, [pc, #508]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a7e      	ldr	r2, [pc, #504]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 800442c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b7c      	ldr	r3, [pc, #496]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a7b      	ldr	r2, [pc, #492]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e01d      	b.n	800447c <HAL_RCC_OscConfig+0xd8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0xc0>
 800444a:	4b76      	ldr	r3, [pc, #472]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a75      	ldr	r2, [pc, #468]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	4b73      	ldr	r3, [pc, #460]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a72      	ldr	r2, [pc, #456]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0xd8>
 8004464:	4b6f      	ldr	r3, [pc, #444]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a6e      	ldr	r2, [pc, #440]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 800446a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	4b6c      	ldr	r3, [pc, #432]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a6b      	ldr	r2, [pc, #428]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800447a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fe ffa4 	bl	80033d0 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800448c:	f7fe ffa0 	bl	80033d0 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e229      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	4b61      	ldr	r3, [pc, #388]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0xe8>
 80044aa:	e014      	b.n	80044d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fe ff90 	bl	80033d0 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b4:	f7fe ff8c 	bl	80033d0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e215      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	4b57      	ldr	r3, [pc, #348]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x110>
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d069      	beq.n	80045b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044e2:	4b50      	ldr	r3, [pc, #320]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ee:	4b4d      	ldr	r3, [pc, #308]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d11c      	bne.n	8004534 <HAL_RCC_OscConfig+0x190>
 80044fa:	4b4a      	ldr	r3, [pc, #296]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_RCC_OscConfig+0x17a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d001      	beq.n	800451e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e1e9      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b41      	ldr	r3, [pc, #260]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	493d      	ldr	r1, [pc, #244]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004532:	e040      	b.n	80045b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d023      	beq.n	8004584 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800453c:	4b39      	ldr	r3, [pc, #228]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a38      	ldr	r2, [pc, #224]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fe ff42 	bl	80033d0 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004550:	f7fe ff3e 	bl	80033d0 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e1c7      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004562:	4b30      	ldr	r3, [pc, #192]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456e:	4b2d      	ldr	r3, [pc, #180]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4929      	ldr	r1, [pc, #164]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
 8004582:	e018      	b.n	80045b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004584:	4b27      	ldr	r3, [pc, #156]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a26      	ldr	r2, [pc, #152]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fe ff1e 	bl	80033d0 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004598:	f7fe ff1a 	bl	80033d0 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e1a3      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045aa:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d038      	beq.n	8004634 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d019      	beq.n	80045fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ca:	4b16      	ldr	r3, [pc, #88]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80045cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d6:	f7fe fefb 	bl	80033d0 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045de:	f7fe fef7 	bl	80033d0 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e180      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 80045f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x23a>
 80045fc:	e01a      	b.n	8004634 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004602:	4a08      	ldr	r2, [pc, #32]	; (8004624 <HAL_RCC_OscConfig+0x280>)
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fe fee1 	bl	80033d0 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004612:	f7fe fedd 	bl	80033d0 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d903      	bls.n	8004628 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e166      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
 8004624:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004628:	4b92      	ldr	r3, [pc, #584]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 800462a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ee      	bne.n	8004612 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80a4 	beq.w	800478a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004642:	4b8c      	ldr	r3, [pc, #560]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10d      	bne.n	800466a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800464e:	4b89      	ldr	r3, [pc, #548]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	4a88      	ldr	r2, [pc, #544]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004658:	6413      	str	r3, [r2, #64]	; 0x40
 800465a:	4b86      	ldr	r3, [pc, #536]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800466a:	4b83      	ldr	r3, [pc, #524]	; (8004878 <HAL_RCC_OscConfig+0x4d4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d118      	bne.n	80046a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004676:	4b80      	ldr	r3, [pc, #512]	; (8004878 <HAL_RCC_OscConfig+0x4d4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a7f      	ldr	r2, [pc, #508]	; (8004878 <HAL_RCC_OscConfig+0x4d4>)
 800467c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004682:	f7fe fea5 	bl	80033d0 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468a:	f7fe fea1 	bl	80033d0 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b64      	cmp	r3, #100	; 0x64
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e12a      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800469c:	4b76      	ldr	r3, [pc, #472]	; (8004878 <HAL_RCC_OscConfig+0x4d4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d106      	bne.n	80046be <HAL_RCC_OscConfig+0x31a>
 80046b0:	4b70      	ldr	r3, [pc, #448]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a6f      	ldr	r2, [pc, #444]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
 80046bc:	e02d      	b.n	800471a <HAL_RCC_OscConfig+0x376>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x33c>
 80046c6:	4b6b      	ldr	r3, [pc, #428]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	4a6a      	ldr	r2, [pc, #424]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	6713      	str	r3, [r2, #112]	; 0x70
 80046d2:	4b68      	ldr	r3, [pc, #416]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	4a67      	ldr	r2, [pc, #412]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80046d8:	f023 0304 	bic.w	r3, r3, #4
 80046dc:	6713      	str	r3, [r2, #112]	; 0x70
 80046de:	e01c      	b.n	800471a <HAL_RCC_OscConfig+0x376>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b05      	cmp	r3, #5
 80046e6:	d10c      	bne.n	8004702 <HAL_RCC_OscConfig+0x35e>
 80046e8:	4b62      	ldr	r3, [pc, #392]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	4a61      	ldr	r2, [pc, #388]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80046ee:	f043 0304 	orr.w	r3, r3, #4
 80046f2:	6713      	str	r3, [r2, #112]	; 0x70
 80046f4:	4b5f      	ldr	r3, [pc, #380]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a5e      	ldr	r2, [pc, #376]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004700:	e00b      	b.n	800471a <HAL_RCC_OscConfig+0x376>
 8004702:	4b5c      	ldr	r3, [pc, #368]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	4a5b      	ldr	r2, [pc, #364]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	6713      	str	r3, [r2, #112]	; 0x70
 800470e:	4b59      	ldr	r3, [pc, #356]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a58      	ldr	r2, [pc, #352]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004714:	f023 0304 	bic.w	r3, r3, #4
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d015      	beq.n	800474e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004722:	f7fe fe55 	bl	80033d0 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472a:	f7fe fe51 	bl	80033d0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0d8      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004740:	4b4c      	ldr	r3, [pc, #304]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ee      	beq.n	800472a <HAL_RCC_OscConfig+0x386>
 800474c:	e014      	b.n	8004778 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474e:	f7fe fe3f 	bl	80033d0 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fe fe3b 	bl	80033d0 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e0c2      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476c:	4b41      	ldr	r3, [pc, #260]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ee      	bne.n	8004756 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477e:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a3c      	ldr	r2, [pc, #240]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80ae 	beq.w	80048f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004794:	4b37      	ldr	r3, [pc, #220]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 030c 	and.w	r3, r3, #12
 800479c:	2b08      	cmp	r3, #8
 800479e:	d06d      	beq.n	800487c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d14b      	bne.n	8004840 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a8:	4b32      	ldr	r3, [pc, #200]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a31      	ldr	r2, [pc, #196]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80047ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fe fe0c 	bl	80033d0 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047bc:	f7fe fe08 	bl	80033d0 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e091      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ce:	4b29      	ldr	r3, [pc, #164]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69da      	ldr	r2, [r3, #28]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	019b      	lsls	r3, r3, #6
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	3b01      	subs	r3, #1
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	061b      	lsls	r3, r3, #24
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	071b      	lsls	r3, r3, #28
 8004806:	491b      	ldr	r1, [pc, #108]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004808:	4313      	orrs	r3, r2
 800480a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800480c:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a18      	ldr	r2, [pc, #96]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fe fdda 	bl	80033d0 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004820:	f7fe fdd6 	bl	80033d0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e05f      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x47c>
 800483e:	e057      	b.n	80048f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a0b      	ldr	r2, [pc, #44]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800484a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fe fdc0 	bl	80033d0 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fe fdbc 	bl	80033d0 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e045      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	4b03      	ldr	r3, [pc, #12]	; (8004874 <HAL_RCC_OscConfig+0x4d0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x4b0>
 8004872:	e03d      	b.n	80048f0 <HAL_RCC_OscConfig+0x54c>
 8004874:	40023800 	.word	0x40023800
 8004878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800487c:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <HAL_RCC_OscConfig+0x558>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d030      	beq.n	80048ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d129      	bne.n	80048ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d122      	bne.n	80048ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d119      	bne.n	80048ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	3b01      	subs	r3, #1
 80048c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d10f      	bne.n	80048ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d107      	bne.n	80048ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800

08004900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0d0      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004918:	4b6a      	ldr	r3, [pc, #424]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d910      	bls.n	8004948 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b67      	ldr	r3, [pc, #412]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 020f 	bic.w	r2, r3, #15
 800492e:	4965      	ldr	r1, [pc, #404]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b63      	ldr	r3, [pc, #396]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0b8      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004960:	4b59      	ldr	r3, [pc, #356]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a58      	ldr	r2, [pc, #352]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800496a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004978:	4b53      	ldr	r3, [pc, #332]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a52      	ldr	r2, [pc, #328]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 800497e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004982:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	494d      	ldr	r1, [pc, #308]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d040      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	4b47      	ldr	r3, [pc, #284]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d115      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d107      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c2:	4b41      	ldr	r3, [pc, #260]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e073      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d2:	4b3d      	ldr	r3, [pc, #244]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e06b      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049e2:	4b39      	ldr	r3, [pc, #228]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f023 0203 	bic.w	r2, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	4936      	ldr	r1, [pc, #216]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f4:	f7fe fcec 	bl	80033d0 <HAL_GetTick>
 80049f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	e00a      	b.n	8004a12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049fc:	f7fe fce8 	bl	80033d0 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e053      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a12:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 020c 	and.w	r2, r3, #12
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d1eb      	bne.n	80049fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a24:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 030f 	and.w	r3, r3, #15
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d210      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 020f 	bic.w	r2, r3, #15
 8004a3a:	4922      	ldr	r1, [pc, #136]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e032      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4916      	ldr	r1, [pc, #88]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	490e      	ldr	r1, [pc, #56]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a92:	f000 f821 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	490a      	ldr	r1, [pc, #40]	; (8004acc <HAL_RCC_ClockConfig+0x1cc>)
 8004aa4:	5ccb      	ldrb	r3, [r1, r3]
 8004aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8004aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_RCC_ClockConfig+0x1d4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fc8e 	bl	80013d4 <HAL_InitTick>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023c00 	.word	0x40023c00
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	0800d7cc 	.word	0x0800d7cc
 8004ad0:	20000000 	.word	0x20000000
 8004ad4:	20000010 	.word	0x20000010

08004ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b090      	sub	sp, #64	; 0x40
 8004ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae8:	2300      	movs	r3, #0
 8004aea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af0:	4b59      	ldr	r3, [pc, #356]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 030c 	and.w	r3, r3, #12
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d00d      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0x40>
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	f200 80a1 	bhi.w	8004c44 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x34>
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d003      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b0a:	e09b      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b10:	e09b      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b12:	4b53      	ldr	r3, [pc, #332]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b16:	e098      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b18:	4b4f      	ldr	r3, [pc, #316]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b22:	4b4d      	ldr	r3, [pc, #308]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d028      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2e:	4b4a      	ldr	r3, [pc, #296]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	2200      	movs	r2, #0
 8004b36:	623b      	str	r3, [r7, #32]
 8004b38:	627a      	str	r2, [r7, #36]	; 0x24
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b40:	2100      	movs	r1, #0
 8004b42:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b44:	fb03 f201 	mul.w	r2, r3, r1
 8004b48:	2300      	movs	r3, #0
 8004b4a:	fb00 f303 	mul.w	r3, r0, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	4a43      	ldr	r2, [pc, #268]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b52:	fba0 1202 	umull	r1, r2, r0, r2
 8004b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b58:	460a      	mov	r2, r1
 8004b5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b5e:	4413      	add	r3, r2
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b64:	2200      	movs	r2, #0
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	61fa      	str	r2, [r7, #28]
 8004b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b72:	f7fb fb6d 	bl	8000250 <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b7e:	e053      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b80:	4b35      	ldr	r3, [pc, #212]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	2200      	movs	r2, #0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	617a      	str	r2, [r7, #20]
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b92:	f04f 0b00 	mov.w	fp, #0
 8004b96:	4652      	mov	r2, sl
 8004b98:	465b      	mov	r3, fp
 8004b9a:	f04f 0000 	mov.w	r0, #0
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	0159      	lsls	r1, r3, #5
 8004ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba8:	0150      	lsls	r0, r2, #5
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	ebb2 080a 	subs.w	r8, r2, sl
 8004bb2:	eb63 090b 	sbc.w	r9, r3, fp
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bca:	ebb2 0408 	subs.w	r4, r2, r8
 8004bce:	eb63 0509 	sbc.w	r5, r3, r9
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	00eb      	lsls	r3, r5, #3
 8004bdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004be0:	00e2      	lsls	r2, r4, #3
 8004be2:	4614      	mov	r4, r2
 8004be4:	461d      	mov	r5, r3
 8004be6:	eb14 030a 	adds.w	r3, r4, sl
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	eb45 030b 	adc.w	r3, r5, fp
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bfe:	4629      	mov	r1, r5
 8004c00:	028b      	lsls	r3, r1, #10
 8004c02:	4621      	mov	r1, r4
 8004c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c08:	4621      	mov	r1, r4
 8004c0a:	028a      	lsls	r2, r1, #10
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c12:	2200      	movs	r2, #0
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	60fa      	str	r2, [r7, #12]
 8004c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c1c:	f7fb fb18 	bl	8000250 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4613      	mov	r3, r2
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	3301      	adds	r3, #1
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c42:	e002      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3740      	adds	r7, #64	; 0x40
 8004c50:	46bd      	mov	sp, r7
 8004c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	00f42400 	.word	0x00f42400
 8004c60:	017d7840 	.word	0x017d7840

08004c64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000000 	.word	0x20000000

08004c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c80:	f7ff fff0 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0a9b      	lsrs	r3, r3, #10
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4903      	ldr	r1, [pc, #12]	; (8004ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	0800d7dc 	.word	0x0800d7dc

08004ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ca8:	f7ff ffdc 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	0b5b      	lsrs	r3, r3, #13
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	4903      	ldr	r1, [pc, #12]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cba:	5ccb      	ldrb	r3, [r1, r3]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	0800d7dc 	.word	0x0800d7dc

08004ccc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	220f      	movs	r2, #15
 8004cda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cdc:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <HAL_RCC_GetClockConfig+0x5c>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 0203 	and.w	r2, r3, #3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <HAL_RCC_GetClockConfig+0x5c>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <HAL_RCC_GetClockConfig+0x5c>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_RCC_GetClockConfig+0x5c>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	08db      	lsrs	r3, r3, #3
 8004d06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d0e:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <HAL_RCC_GetClockConfig+0x60>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 020f 	and.w	r2, r3, #15
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	601a      	str	r2, [r3, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40023c00 	.word	0x40023c00

08004d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d012      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d58:	4b69      	ldr	r3, [pc, #420]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	4a68      	ldr	r2, [pc, #416]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d62:	6093      	str	r3, [r2, #8]
 8004d64:	4b66      	ldr	r3, [pc, #408]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6c:	4964      	ldr	r1, [pc, #400]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d017      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d8a:	4b5d      	ldr	r3, [pc, #372]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d98:	4959      	ldr	r1, [pc, #356]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da8:	d101      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004daa:	2301      	movs	r3, #1
 8004dac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004db6:	2301      	movs	r3, #1
 8004db8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d017      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dc6:	4b4e      	ldr	r3, [pc, #312]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	494a      	ldr	r1, [pc, #296]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004de4:	d101      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004df2:	2301      	movs	r3, #1
 8004df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e02:	2301      	movs	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 808b 	beq.w	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e14:	4b3a      	ldr	r3, [pc, #232]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	4a39      	ldr	r2, [pc, #228]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e20:	4b37      	ldr	r3, [pc, #220]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e2c:	4b35      	ldr	r3, [pc, #212]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a34      	ldr	r2, [pc, #208]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e38:	f7fe faca 	bl	80033d0 <HAL_GetTick>
 8004e3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e40:	f7fe fac6 	bl	80033d0 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b64      	cmp	r3, #100	; 0x64
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e38f      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e52:	4b2c      	ldr	r3, [pc, #176]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f0      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e5e:	4b28      	ldr	r3, [pc, #160]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d035      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d02e      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e7c:	4b20      	ldr	r3, [pc, #128]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e86:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	4a1d      	ldr	r2, [pc, #116]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e92:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	4a1a      	ldr	r2, [pc, #104]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e9e:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ea4:	4b16      	ldr	r3, [pc, #88]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d114      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fe fa8e 	bl	80033d0 <HAL_GetTick>
 8004eb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb6:	e00a      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f7fe fa8a 	bl	80033d0 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e351      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ee      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ee6:	d111      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ef4:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ef6:	400b      	ands	r3, r1
 8004ef8:	4901      	ldr	r1, [pc, #4]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
 8004efe:	e00b      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f00:	40023800 	.word	0x40023800
 8004f04:	40007000 	.word	0x40007000
 8004f08:	0ffffcff 	.word	0x0ffffcff
 8004f0c:	4bac      	ldr	r3, [pc, #688]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4aab      	ldr	r2, [pc, #684]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f16:	6093      	str	r3, [r2, #8]
 8004f18:	4ba9      	ldr	r3, [pc, #676]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f24:	49a6      	ldr	r1, [pc, #664]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0310 	and.w	r3, r3, #16
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d010      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f36:	4ba2      	ldr	r3, [pc, #648]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f3c:	4aa0      	ldr	r2, [pc, #640]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f46:	4b9e      	ldr	r3, [pc, #632]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	499b      	ldr	r1, [pc, #620]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f64:	4b96      	ldr	r3, [pc, #600]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f72:	4993      	ldr	r1, [pc, #588]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f86:	4b8e      	ldr	r3, [pc, #568]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f94:	498a      	ldr	r1, [pc, #552]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fa8:	4b85      	ldr	r3, [pc, #532]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb6:	4982      	ldr	r1, [pc, #520]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fca:	4b7d      	ldr	r3, [pc, #500]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	4979      	ldr	r1, [pc, #484]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fec:	4b74      	ldr	r3, [pc, #464]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff2:	f023 0203 	bic.w	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	4971      	ldr	r1, [pc, #452]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800500e:	4b6c      	ldr	r3, [pc, #432]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005014:	f023 020c 	bic.w	r2, r3, #12
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501c:	4968      	ldr	r1, [pc, #416]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005030:	4b63      	ldr	r3, [pc, #396]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503e:	4960      	ldr	r1, [pc, #384]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005052:	4b5b      	ldr	r3, [pc, #364]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005058:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005060:	4957      	ldr	r1, [pc, #348]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005074:	4b52      	ldr	r3, [pc, #328]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	494f      	ldr	r1, [pc, #316]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005096:	4b4a      	ldr	r3, [pc, #296]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a4:	4946      	ldr	r1, [pc, #280]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050b8:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c6:	493e      	ldr	r1, [pc, #248]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050da:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	4935      	ldr	r1, [pc, #212]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050fc:	4b30      	ldr	r3, [pc, #192]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800510a:	492d      	ldr	r1, [pc, #180]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d011      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800511e:	4b28      	ldr	r3, [pc, #160]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005124:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800512c:	4924      	ldr	r1, [pc, #144]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800513c:	d101      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800513e:	2301      	movs	r3, #1
 8005140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800514e:	2301      	movs	r3, #1
 8005150:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800515e:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005164:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516c:	4914      	ldr	r1, [pc, #80]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005180:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005190:	490b      	ldr	r1, [pc, #44]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00f      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b4:	4902      	ldr	r1, [pc, #8]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051bc:	e002      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00b      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051d0:	4b8a      	ldr	r3, [pc, #552]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	4986      	ldr	r1, [pc, #536]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051f4:	4b81      	ldr	r3, [pc, #516]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005204:	497d      	ldr	r1, [pc, #500]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d006      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80d6 	beq.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005220:	4b76      	ldr	r3, [pc, #472]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a75      	ldr	r2, [pc, #468]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800522a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522c:	f7fe f8d0 	bl	80033d0 <HAL_GetTick>
 8005230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005234:	f7fe f8cc 	bl	80033d0 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b64      	cmp	r3, #100	; 0x64
 8005240:	d901      	bls.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e195      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005246:	4b6d      	ldr	r3, [pc, #436]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d021      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11d      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005266:	4b65      	ldr	r3, [pc, #404]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526c:	0c1b      	lsrs	r3, r3, #16
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005274:	4b61      	ldr	r3, [pc, #388]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800527a:	0e1b      	lsrs	r3, r3, #24
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	019a      	lsls	r2, r3, #6
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	431a      	orrs	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	071b      	lsls	r3, r3, #28
 800529a:	4958      	ldr	r1, [pc, #352]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b6:	d00a      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d02e      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052cc:	d129      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052ce:	4b4b      	ldr	r3, [pc, #300]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052dc:	4b47      	ldr	r3, [pc, #284]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e2:	0f1b      	lsrs	r3, r3, #28
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	019a      	lsls	r2, r3, #6
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	431a      	orrs	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	071b      	lsls	r3, r3, #28
 8005302:	493e      	ldr	r1, [pc, #248]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800530a:	4b3c      	ldr	r3, [pc, #240]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800530c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005310:	f023 021f 	bic.w	r2, r3, #31
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	3b01      	subs	r3, #1
 800531a:	4938      	ldr	r1, [pc, #224]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01d      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800532e:	4b33      	ldr	r3, [pc, #204]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005334:	0e1b      	lsrs	r3, r3, #24
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800533c:	4b2f      	ldr	r3, [pc, #188]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005342:	0f1b      	lsrs	r3, r3, #28
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	019a      	lsls	r2, r3, #6
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	041b      	lsls	r3, r3, #16
 8005356:	431a      	orrs	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	061b      	lsls	r3, r3, #24
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	071b      	lsls	r3, r3, #28
 8005362:	4926      	ldr	r1, [pc, #152]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d011      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	019a      	lsls	r2, r3, #6
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	071b      	lsls	r3, r3, #28
 8005392:	491a      	ldr	r1, [pc, #104]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800539a:	4b18      	ldr	r3, [pc, #96]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a17      	ldr	r2, [pc, #92]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a6:	f7fe f813 	bl	80033d0 <HAL_GetTick>
 80053aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ae:	f7fe f80f 	bl	80033d0 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b64      	cmp	r3, #100	; 0x64
 80053ba:	d901      	bls.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e0d8      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f040 80ce 	bne.w	8005570 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a08      	ldr	r2, [pc, #32]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e0:	f7fd fff6 	bl	80033d0 <HAL_GetTick>
 80053e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053e6:	e00b      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053e8:	f7fd fff2 	bl	80033d0 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b64      	cmp	r3, #100	; 0x64
 80053f4:	d904      	bls.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0bb      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80053fa:	bf00      	nop
 80053fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005400:	4b5e      	ldr	r3, [pc, #376]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800540c:	d0ec      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800542a:	2b00      	cmp	r3, #0
 800542c:	d02e      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d12a      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005436:	4b51      	ldr	r3, [pc, #324]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005444:	4b4d      	ldr	r3, [pc, #308]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	0f1b      	lsrs	r3, r3, #28
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	019a      	lsls	r2, r3, #6
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	061b      	lsls	r3, r3, #24
 8005464:	431a      	orrs	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	071b      	lsls	r3, r3, #28
 800546a:	4944      	ldr	r1, [pc, #272]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005472:	4b42      	ldr	r3, [pc, #264]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005478:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	3b01      	subs	r3, #1
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	493d      	ldr	r1, [pc, #244]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d022      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800549c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a0:	d11d      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054a2:	4b36      	ldr	r3, [pc, #216]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	0e1b      	lsrs	r3, r3, #24
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054b0:	4b32      	ldr	r3, [pc, #200]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	0f1b      	lsrs	r3, r3, #28
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	019a      	lsls	r2, r3, #6
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	431a      	orrs	r2, r3
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	071b      	lsls	r3, r3, #28
 80054d6:	4929      	ldr	r1, [pc, #164]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d028      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f0:	0e1b      	lsrs	r3, r3, #24
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054f8:	4b20      	ldr	r3, [pc, #128]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fe:	0c1b      	lsrs	r3, r3, #16
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	019a      	lsls	r2, r3, #6
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	041b      	lsls	r3, r3, #16
 8005510:	431a      	orrs	r2, r3
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	061b      	lsls	r3, r3, #24
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	071b      	lsls	r3, r3, #28
 800551e:	4917      	ldr	r1, [pc, #92]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005526:	4b15      	ldr	r3, [pc, #84]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800552c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4911      	ldr	r1, [pc, #68]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800553c:	4b0f      	ldr	r3, [pc, #60]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a0e      	ldr	r2, [pc, #56]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005548:	f7fd ff42 	bl	80033d0 <HAL_GetTick>
 800554c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005550:	f7fd ff3e 	bl	80033d0 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	; 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e007      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005562:	4b06      	ldr	r3, [pc, #24]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800556a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556e:	d1ef      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40023800 	.word	0x40023800

08005580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e049      	b.n	8005626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fb fdc0 	bl	800112c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f000 fc66 	bl	8005e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e054      	b.n	80056f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a26      	ldr	r2, [pc, #152]	; (8005700 <HAL_TIM_Base_Start_IT+0xd0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d022      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d01d      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a22      	ldr	r2, [pc, #136]	; (8005704 <HAL_TIM_Base_Start_IT+0xd4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d018      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a21      	ldr	r2, [pc, #132]	; (8005708 <HAL_TIM_Base_Start_IT+0xd8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d013      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1f      	ldr	r2, [pc, #124]	; (800570c <HAL_TIM_Base_Start_IT+0xdc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00e      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <HAL_TIM_Base_Start_IT+0xe0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d009      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <HAL_TIM_Base_Start_IT+0xe4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1b      	ldr	r2, [pc, #108]	; (8005718 <HAL_TIM_Base_Start_IT+0xe8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d115      	bne.n	80056dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	4b19      	ldr	r3, [pc, #100]	; (800571c <HAL_TIM_Base_Start_IT+0xec>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b06      	cmp	r3, #6
 80056c0:	d015      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0xbe>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c8:	d011      	beq.n	80056ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056da:	e008      	b.n	80056ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e000      	b.n	80056f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40010000 	.word	0x40010000
 8005704:	40000400 	.word	0x40000400
 8005708:	40000800 	.word	0x40000800
 800570c:	40000c00 	.word	0x40000c00
 8005710:	40010400 	.word	0x40010400
 8005714:	40014000 	.word	0x40014000
 8005718:	40001800 	.word	0x40001800
 800571c:	00010007 	.word	0x00010007

08005720 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e049      	b.n	80057c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f841 	bl	80057ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	4619      	mov	r1, r3
 800575e:	4610      	mov	r0, r2
 8005760:	f000 fb96 	bl	8005e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <HAL_TIM_PWM_Start+0x24>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	bf14      	ite	ne
 8005800:	2301      	movne	r3, #1
 8005802:	2300      	moveq	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	e03c      	b.n	8005882 <HAL_TIM_PWM_Start+0x9e>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b04      	cmp	r3, #4
 800580c:	d109      	bne.n	8005822 <HAL_TIM_PWM_Start+0x3e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b01      	cmp	r3, #1
 8005818:	bf14      	ite	ne
 800581a:	2301      	movne	r3, #1
 800581c:	2300      	moveq	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	e02f      	b.n	8005882 <HAL_TIM_PWM_Start+0x9e>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b08      	cmp	r3, #8
 8005826:	d109      	bne.n	800583c <HAL_TIM_PWM_Start+0x58>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b01      	cmp	r3, #1
 8005832:	bf14      	ite	ne
 8005834:	2301      	movne	r3, #1
 8005836:	2300      	moveq	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	e022      	b.n	8005882 <HAL_TIM_PWM_Start+0x9e>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b0c      	cmp	r3, #12
 8005840:	d109      	bne.n	8005856 <HAL_TIM_PWM_Start+0x72>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b01      	cmp	r3, #1
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	e015      	b.n	8005882 <HAL_TIM_PWM_Start+0x9e>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b10      	cmp	r3, #16
 800585a:	d109      	bne.n	8005870 <HAL_TIM_PWM_Start+0x8c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e008      	b.n	8005882 <HAL_TIM_PWM_Start+0x9e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e092      	b.n	80059b0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <HAL_TIM_PWM_Start+0xb6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005898:	e023      	b.n	80058e2 <HAL_TIM_PWM_Start+0xfe>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b04      	cmp	r3, #4
 800589e:	d104      	bne.n	80058aa <HAL_TIM_PWM_Start+0xc6>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a8:	e01b      	b.n	80058e2 <HAL_TIM_PWM_Start+0xfe>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d104      	bne.n	80058ba <HAL_TIM_PWM_Start+0xd6>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b8:	e013      	b.n	80058e2 <HAL_TIM_PWM_Start+0xfe>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b0c      	cmp	r3, #12
 80058be:	d104      	bne.n	80058ca <HAL_TIM_PWM_Start+0xe6>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058c8:	e00b      	b.n	80058e2 <HAL_TIM_PWM_Start+0xfe>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Start+0xf6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d8:	e003      	b.n	80058e2 <HAL_TIM_PWM_Start+0xfe>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2202      	movs	r2, #2
 80058de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2201      	movs	r2, #1
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fdce 	bl	800648c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a30      	ldr	r2, [pc, #192]	; (80059b8 <HAL_TIM_PWM_Start+0x1d4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_TIM_PWM_Start+0x120>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a2f      	ldr	r2, [pc, #188]	; (80059bc <HAL_TIM_PWM_Start+0x1d8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d101      	bne.n	8005908 <HAL_TIM_PWM_Start+0x124>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <HAL_TIM_PWM_Start+0x126>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800591c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a25      	ldr	r2, [pc, #148]	; (80059b8 <HAL_TIM_PWM_Start+0x1d4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <HAL_TIM_PWM_Start+0x18a>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005930:	d01d      	beq.n	800596e <HAL_TIM_PWM_Start+0x18a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <HAL_TIM_PWM_Start+0x1dc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <HAL_TIM_PWM_Start+0x18a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a20      	ldr	r2, [pc, #128]	; (80059c4 <HAL_TIM_PWM_Start+0x1e0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_TIM_PWM_Start+0x18a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1f      	ldr	r2, [pc, #124]	; (80059c8 <HAL_TIM_PWM_Start+0x1e4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <HAL_TIM_PWM_Start+0x18a>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a19      	ldr	r2, [pc, #100]	; (80059bc <HAL_TIM_PWM_Start+0x1d8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_TIM_PWM_Start+0x18a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_TIM_PWM_Start+0x1e8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <HAL_TIM_PWM_Start+0x18a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a19      	ldr	r2, [pc, #100]	; (80059d0 <HAL_TIM_PWM_Start+0x1ec>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d115      	bne.n	800599a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	4b17      	ldr	r3, [pc, #92]	; (80059d4 <HAL_TIM_PWM_Start+0x1f0>)
 8005976:	4013      	ands	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b06      	cmp	r3, #6
 800597e:	d015      	beq.n	80059ac <HAL_TIM_PWM_Start+0x1c8>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005986:	d011      	beq.n	80059ac <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005998:	e008      	b.n	80059ac <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	e000      	b.n	80059ae <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40010400 	.word	0x40010400
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40001800 	.word	0x40001800
 80059d4:	00010007 	.word	0x00010007

080059d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d122      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d11b      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0202 	mvn.w	r2, #2
 8005a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fa1a 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa0c 	bl	8005e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fa1d 	bl	8005e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d122      	bne.n	8005a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d11b      	bne.n	8005a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0204 	mvn.w	r2, #4
 8005a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f9f0 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9e2 	bl	8005e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f9f3 	bl	8005e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d122      	bne.n	8005adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d11b      	bne.n	8005adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0208 	mvn.w	r2, #8
 8005aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9c6 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f9b8 	bl	8005e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f9c9 	bl	8005e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d122      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d11b      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0210 	mvn.w	r2, #16
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2208      	movs	r2, #8
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f99c 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f98e 	bl	8005e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f99f 	bl	8005e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d10e      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d107      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0201 	mvn.w	r2, #1
 8005b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fb fa3a 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b66:	2b80      	cmp	r3, #128	; 0x80
 8005b68:	d10e      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b74:	2b80      	cmp	r3, #128	; 0x80
 8005b76:	d107      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fcb1 	bl	80064ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b96:	d10e      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	2b80      	cmp	r3, #128	; 0x80
 8005ba4:	d107      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fca4 	bl	80064fe <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d10e      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	d107      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f94d 	bl	8005e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d10e      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d107      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f06f 0220 	mvn.w	r2, #32
 8005c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fc64 	bl	80064d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c0e:	bf00      	nop
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e0ff      	b.n	8005e36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b14      	cmp	r3, #20
 8005c42:	f200 80f0 	bhi.w	8005e26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005ca1 	.word	0x08005ca1
 8005c50:	08005e27 	.word	0x08005e27
 8005c54:	08005e27 	.word	0x08005e27
 8005c58:	08005e27 	.word	0x08005e27
 8005c5c:	08005ce1 	.word	0x08005ce1
 8005c60:	08005e27 	.word	0x08005e27
 8005c64:	08005e27 	.word	0x08005e27
 8005c68:	08005e27 	.word	0x08005e27
 8005c6c:	08005d23 	.word	0x08005d23
 8005c70:	08005e27 	.word	0x08005e27
 8005c74:	08005e27 	.word	0x08005e27
 8005c78:	08005e27 	.word	0x08005e27
 8005c7c:	08005d63 	.word	0x08005d63
 8005c80:	08005e27 	.word	0x08005e27
 8005c84:	08005e27 	.word	0x08005e27
 8005c88:	08005e27 	.word	0x08005e27
 8005c8c:	08005da5 	.word	0x08005da5
 8005c90:	08005e27 	.word	0x08005e27
 8005c94:	08005e27 	.word	0x08005e27
 8005c98:	08005e27 	.word	0x08005e27
 8005c9c:	08005de5 	.word	0x08005de5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f992 	bl	8005fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0208 	orr.w	r2, r2, #8
 8005cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0204 	bic.w	r2, r2, #4
 8005cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6999      	ldr	r1, [r3, #24]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	691a      	ldr	r2, [r3, #16]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	619a      	str	r2, [r3, #24]
      break;
 8005cde:	e0a5      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f9e4 	bl	80060b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6999      	ldr	r1, [r3, #24]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	021a      	lsls	r2, r3, #8
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	619a      	str	r2, [r3, #24]
      break;
 8005d20:	e084      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fa3b 	bl	80061a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0208 	orr.w	r2, r2, #8
 8005d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0204 	bic.w	r2, r2, #4
 8005d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69d9      	ldr	r1, [r3, #28]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	61da      	str	r2, [r3, #28]
      break;
 8005d60:	e064      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fa91 	bl	8006290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69da      	ldr	r2, [r3, #28]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69d9      	ldr	r1, [r3, #28]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	021a      	lsls	r2, r3, #8
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	61da      	str	r2, [r3, #28]
      break;
 8005da2:	e043      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fac8 	bl	8006340 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0208 	orr.w	r2, r2, #8
 8005dbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0204 	bic.w	r2, r2, #4
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005de2:	e023      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fafa 	bl	80063e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	021a      	lsls	r2, r3, #8
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e24:	e002      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
      break;
 8005e2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop

08005e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a40      	ldr	r2, [pc, #256]	; (8005fa4 <TIM_Base_SetConfig+0x114>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d013      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eae:	d00f      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3d      	ldr	r2, [pc, #244]	; (8005fa8 <TIM_Base_SetConfig+0x118>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00b      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a3c      	ldr	r2, [pc, #240]	; (8005fac <TIM_Base_SetConfig+0x11c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d007      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a3b      	ldr	r2, [pc, #236]	; (8005fb0 <TIM_Base_SetConfig+0x120>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a3a      	ldr	r2, [pc, #232]	; (8005fb4 <TIM_Base_SetConfig+0x124>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d108      	bne.n	8005ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <TIM_Base_SetConfig+0x114>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d02b      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef0:	d027      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2c      	ldr	r2, [pc, #176]	; (8005fa8 <TIM_Base_SetConfig+0x118>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d023      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a2b      	ldr	r2, [pc, #172]	; (8005fac <TIM_Base_SetConfig+0x11c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d01f      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a2a      	ldr	r2, [pc, #168]	; (8005fb0 <TIM_Base_SetConfig+0x120>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d01b      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a29      	ldr	r2, [pc, #164]	; (8005fb4 <TIM_Base_SetConfig+0x124>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d017      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a28      	ldr	r2, [pc, #160]	; (8005fb8 <TIM_Base_SetConfig+0x128>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d013      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a27      	ldr	r2, [pc, #156]	; (8005fbc <TIM_Base_SetConfig+0x12c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00f      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a26      	ldr	r2, [pc, #152]	; (8005fc0 <TIM_Base_SetConfig+0x130>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00b      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a25      	ldr	r2, [pc, #148]	; (8005fc4 <TIM_Base_SetConfig+0x134>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d007      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a24      	ldr	r2, [pc, #144]	; (8005fc8 <TIM_Base_SetConfig+0x138>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d003      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a23      	ldr	r2, [pc, #140]	; (8005fcc <TIM_Base_SetConfig+0x13c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d108      	bne.n	8005f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a0a      	ldr	r2, [pc, #40]	; (8005fa4 <TIM_Base_SetConfig+0x114>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_Base_SetConfig+0xf8>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a0c      	ldr	r2, [pc, #48]	; (8005fb4 <TIM_Base_SetConfig+0x124>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d103      	bne.n	8005f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	615a      	str	r2, [r3, #20]
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40010400 	.word	0x40010400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40014400 	.word	0x40014400
 8005fc0:	40014800 	.word	0x40014800
 8005fc4:	40001800 	.word	0x40001800
 8005fc8:	40001c00 	.word	0x40001c00
 8005fcc:	40002000 	.word	0x40002000

08005fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	f023 0201 	bic.w	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4b2b      	ldr	r3, [pc, #172]	; (80060a8 <TIM_OC1_SetConfig+0xd8>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0303 	bic.w	r3, r3, #3
 8006006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f023 0302 	bic.w	r3, r3, #2
 8006018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a21      	ldr	r2, [pc, #132]	; (80060ac <TIM_OC1_SetConfig+0xdc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_OC1_SetConfig+0x64>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a20      	ldr	r2, [pc, #128]	; (80060b0 <TIM_OC1_SetConfig+0xe0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d10c      	bne.n	800604e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f023 0308 	bic.w	r3, r3, #8
 800603a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f023 0304 	bic.w	r3, r3, #4
 800604c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a16      	ldr	r2, [pc, #88]	; (80060ac <TIM_OC1_SetConfig+0xdc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_OC1_SetConfig+0x8e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a15      	ldr	r2, [pc, #84]	; (80060b0 <TIM_OC1_SetConfig+0xe0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d111      	bne.n	8006082 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800606c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	621a      	str	r2, [r3, #32]
}
 800609c:	bf00      	nop
 800609e:	371c      	adds	r7, #28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	fffeff8f 	.word	0xfffeff8f
 80060ac:	40010000 	.word	0x40010000
 80060b0:	40010400 	.word	0x40010400

080060b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f023 0210 	bic.w	r2, r3, #16
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4b2e      	ldr	r3, [pc, #184]	; (8006198 <TIM_OC2_SetConfig+0xe4>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0320 	bic.w	r3, r3, #32
 80060fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a23      	ldr	r2, [pc, #140]	; (800619c <TIM_OC2_SetConfig+0xe8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_OC2_SetConfig+0x68>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a22      	ldr	r2, [pc, #136]	; (80061a0 <TIM_OC2_SetConfig+0xec>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d10d      	bne.n	8006138 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006136:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a18      	ldr	r2, [pc, #96]	; (800619c <TIM_OC2_SetConfig+0xe8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_OC2_SetConfig+0x94>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a17      	ldr	r2, [pc, #92]	; (80061a0 <TIM_OC2_SetConfig+0xec>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d113      	bne.n	8006170 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800614e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	feff8fff 	.word	0xfeff8fff
 800619c:	40010000 	.word	0x40010000
 80061a0:	40010400 	.word	0x40010400

080061a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <TIM_OC3_SetConfig+0xe0>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0303 	bic.w	r3, r3, #3
 80061da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a22      	ldr	r2, [pc, #136]	; (8006288 <TIM_OC3_SetConfig+0xe4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_OC3_SetConfig+0x66>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a21      	ldr	r2, [pc, #132]	; (800628c <TIM_OC3_SetConfig+0xe8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d10d      	bne.n	8006226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a17      	ldr	r2, [pc, #92]	; (8006288 <TIM_OC3_SetConfig+0xe4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_OC3_SetConfig+0x92>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a16      	ldr	r2, [pc, #88]	; (800628c <TIM_OC3_SetConfig+0xe8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d113      	bne.n	800625e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800623c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	621a      	str	r2, [r3, #32]
}
 8006278:	bf00      	nop
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	fffeff8f 	.word	0xfffeff8f
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400

08006290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <TIM_OC4_SetConfig+0xa4>)
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	031b      	lsls	r3, r3, #12
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a13      	ldr	r2, [pc, #76]	; (8006338 <TIM_OC4_SetConfig+0xa8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_OC4_SetConfig+0x68>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a12      	ldr	r2, [pc, #72]	; (800633c <TIM_OC4_SetConfig+0xac>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d109      	bne.n	800630c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	019b      	lsls	r3, r3, #6
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	621a      	str	r2, [r3, #32]
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	feff8fff 	.word	0xfeff8fff
 8006338:	40010000 	.word	0x40010000
 800633c:	40010400 	.word	0x40010400

08006340 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <TIM_OC5_SetConfig+0x98>)
 800636c:	4013      	ands	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006380:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	041b      	lsls	r3, r3, #16
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a12      	ldr	r2, [pc, #72]	; (80063dc <TIM_OC5_SetConfig+0x9c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_OC5_SetConfig+0x5e>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a11      	ldr	r2, [pc, #68]	; (80063e0 <TIM_OC5_SetConfig+0xa0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d109      	bne.n	80063b2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	621a      	str	r2, [r3, #32]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	fffeff8f 	.word	0xfffeff8f
 80063dc:	40010000 	.word	0x40010000
 80063e0:	40010400 	.word	0x40010400

080063e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4b1c      	ldr	r3, [pc, #112]	; (8006480 <TIM_OC6_SetConfig+0x9c>)
 8006410:	4013      	ands	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	051b      	lsls	r3, r3, #20
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a13      	ldr	r2, [pc, #76]	; (8006484 <TIM_OC6_SetConfig+0xa0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_OC6_SetConfig+0x60>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a12      	ldr	r2, [pc, #72]	; (8006488 <TIM_OC6_SetConfig+0xa4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d109      	bne.n	8006458 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	029b      	lsls	r3, r3, #10
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	feff8fff 	.word	0xfeff8fff
 8006484:	40010000 	.word	0x40010000
 8006488:	40010400 	.word	0x40010400

0800648c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	2201      	movs	r2, #1
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1a      	ldr	r2, [r3, #32]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	43db      	mvns	r3, r3
 80064ae:	401a      	ands	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1a      	ldr	r2, [r3, #32]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 031f 	and.w	r3, r3, #31
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	fa01 f303 	lsl.w	r3, r1, r3
 80064c4:	431a      	orrs	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e040      	b.n	80065a6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fa fe73 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2224      	movs	r2, #36	; 0x24
 800653e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f8af 	bl	80066b4 <UART_SetConfig>
 8006556:	4603      	mov	r3, r0
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e022      	b.n	80065a6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fb07 	bl	8006b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800657c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800658c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fb8e 	bl	8006cc0 <UART_CheckIdleState>
 80065a4:	4603      	mov	r3, r0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b08a      	sub	sp, #40	; 0x28
 80065b2:	af02      	add	r7, sp, #8
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d171      	bne.n	80066aa <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_UART_Transmit+0x24>
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e06a      	b.n	80066ac <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2221      	movs	r2, #33	; 0x21
 80065e2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065e4:	f7fc fef4 	bl	80033d0 <HAL_GetTick>
 80065e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	88fa      	ldrh	r2, [r7, #6]
 80065ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	88fa      	ldrh	r2, [r7, #6]
 80065f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006602:	d108      	bne.n	8006616 <HAL_UART_Transmit+0x68>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800660c:	2300      	movs	r3, #0
 800660e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	e003      	b.n	800661e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800661e:	e02c      	b.n	800667a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2200      	movs	r2, #0
 8006628:	2180      	movs	r1, #128	; 0x80
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 fb95 	bl	8006d5a <UART_WaitOnFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e038      	b.n	80066ac <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10b      	bne.n	8006658 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800664e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	3302      	adds	r3, #2
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e007      	b.n	8006668 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	3301      	adds	r3, #1
 8006666:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1cc      	bne.n	8006620 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2200      	movs	r2, #0
 800668e:	2140      	movs	r1, #64	; 0x40
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 fb62 	bl	8006d5a <UART_WaitOnFlagUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e005      	b.n	80066ac <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80066aa:	2302      	movs	r3, #2
  }
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3720      	adds	r7, #32
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	4ba6      	ldr	r3, [pc, #664]	; (8006978 <UART_SetConfig+0x2c4>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	6979      	ldr	r1, [r7, #20]
 80066e8:	430b      	orrs	r3, r1
 80066ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	430a      	orrs	r2, r1
 8006724:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a94      	ldr	r2, [pc, #592]	; (800697c <UART_SetConfig+0x2c8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d120      	bne.n	8006772 <UART_SetConfig+0xbe>
 8006730:	4b93      	ldr	r3, [pc, #588]	; (8006980 <UART_SetConfig+0x2cc>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b03      	cmp	r3, #3
 800673c:	d816      	bhi.n	800676c <UART_SetConfig+0xb8>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <UART_SetConfig+0x90>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006755 	.word	0x08006755
 8006748:	08006761 	.word	0x08006761
 800674c:	0800675b 	.word	0x0800675b
 8006750:	08006767 	.word	0x08006767
 8006754:	2301      	movs	r3, #1
 8006756:	77fb      	strb	r3, [r7, #31]
 8006758:	e150      	b.n	80069fc <UART_SetConfig+0x348>
 800675a:	2302      	movs	r3, #2
 800675c:	77fb      	strb	r3, [r7, #31]
 800675e:	e14d      	b.n	80069fc <UART_SetConfig+0x348>
 8006760:	2304      	movs	r3, #4
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	e14a      	b.n	80069fc <UART_SetConfig+0x348>
 8006766:	2308      	movs	r3, #8
 8006768:	77fb      	strb	r3, [r7, #31]
 800676a:	e147      	b.n	80069fc <UART_SetConfig+0x348>
 800676c:	2310      	movs	r3, #16
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e144      	b.n	80069fc <UART_SetConfig+0x348>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a83      	ldr	r2, [pc, #524]	; (8006984 <UART_SetConfig+0x2d0>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d132      	bne.n	80067e2 <UART_SetConfig+0x12e>
 800677c:	4b80      	ldr	r3, [pc, #512]	; (8006980 <UART_SetConfig+0x2cc>)
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006782:	f003 030c 	and.w	r3, r3, #12
 8006786:	2b0c      	cmp	r3, #12
 8006788:	d828      	bhi.n	80067dc <UART_SetConfig+0x128>
 800678a:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <UART_SetConfig+0xdc>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067c5 	.word	0x080067c5
 8006794:	080067dd 	.word	0x080067dd
 8006798:	080067dd 	.word	0x080067dd
 800679c:	080067dd 	.word	0x080067dd
 80067a0:	080067d1 	.word	0x080067d1
 80067a4:	080067dd 	.word	0x080067dd
 80067a8:	080067dd 	.word	0x080067dd
 80067ac:	080067dd 	.word	0x080067dd
 80067b0:	080067cb 	.word	0x080067cb
 80067b4:	080067dd 	.word	0x080067dd
 80067b8:	080067dd 	.word	0x080067dd
 80067bc:	080067dd 	.word	0x080067dd
 80067c0:	080067d7 	.word	0x080067d7
 80067c4:	2300      	movs	r3, #0
 80067c6:	77fb      	strb	r3, [r7, #31]
 80067c8:	e118      	b.n	80069fc <UART_SetConfig+0x348>
 80067ca:	2302      	movs	r3, #2
 80067cc:	77fb      	strb	r3, [r7, #31]
 80067ce:	e115      	b.n	80069fc <UART_SetConfig+0x348>
 80067d0:	2304      	movs	r3, #4
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e112      	b.n	80069fc <UART_SetConfig+0x348>
 80067d6:	2308      	movs	r3, #8
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e10f      	b.n	80069fc <UART_SetConfig+0x348>
 80067dc:	2310      	movs	r3, #16
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e10c      	b.n	80069fc <UART_SetConfig+0x348>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a68      	ldr	r2, [pc, #416]	; (8006988 <UART_SetConfig+0x2d4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d120      	bne.n	800682e <UART_SetConfig+0x17a>
 80067ec:	4b64      	ldr	r3, [pc, #400]	; (8006980 <UART_SetConfig+0x2cc>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067f6:	2b30      	cmp	r3, #48	; 0x30
 80067f8:	d013      	beq.n	8006822 <UART_SetConfig+0x16e>
 80067fa:	2b30      	cmp	r3, #48	; 0x30
 80067fc:	d814      	bhi.n	8006828 <UART_SetConfig+0x174>
 80067fe:	2b20      	cmp	r3, #32
 8006800:	d009      	beq.n	8006816 <UART_SetConfig+0x162>
 8006802:	2b20      	cmp	r3, #32
 8006804:	d810      	bhi.n	8006828 <UART_SetConfig+0x174>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <UART_SetConfig+0x15c>
 800680a:	2b10      	cmp	r3, #16
 800680c:	d006      	beq.n	800681c <UART_SetConfig+0x168>
 800680e:	e00b      	b.n	8006828 <UART_SetConfig+0x174>
 8006810:	2300      	movs	r3, #0
 8006812:	77fb      	strb	r3, [r7, #31]
 8006814:	e0f2      	b.n	80069fc <UART_SetConfig+0x348>
 8006816:	2302      	movs	r3, #2
 8006818:	77fb      	strb	r3, [r7, #31]
 800681a:	e0ef      	b.n	80069fc <UART_SetConfig+0x348>
 800681c:	2304      	movs	r3, #4
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e0ec      	b.n	80069fc <UART_SetConfig+0x348>
 8006822:	2308      	movs	r3, #8
 8006824:	77fb      	strb	r3, [r7, #31]
 8006826:	e0e9      	b.n	80069fc <UART_SetConfig+0x348>
 8006828:	2310      	movs	r3, #16
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e0e6      	b.n	80069fc <UART_SetConfig+0x348>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a56      	ldr	r2, [pc, #344]	; (800698c <UART_SetConfig+0x2d8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d120      	bne.n	800687a <UART_SetConfig+0x1c6>
 8006838:	4b51      	ldr	r3, [pc, #324]	; (8006980 <UART_SetConfig+0x2cc>)
 800683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006842:	2bc0      	cmp	r3, #192	; 0xc0
 8006844:	d013      	beq.n	800686e <UART_SetConfig+0x1ba>
 8006846:	2bc0      	cmp	r3, #192	; 0xc0
 8006848:	d814      	bhi.n	8006874 <UART_SetConfig+0x1c0>
 800684a:	2b80      	cmp	r3, #128	; 0x80
 800684c:	d009      	beq.n	8006862 <UART_SetConfig+0x1ae>
 800684e:	2b80      	cmp	r3, #128	; 0x80
 8006850:	d810      	bhi.n	8006874 <UART_SetConfig+0x1c0>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <UART_SetConfig+0x1a8>
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d006      	beq.n	8006868 <UART_SetConfig+0x1b4>
 800685a:	e00b      	b.n	8006874 <UART_SetConfig+0x1c0>
 800685c:	2300      	movs	r3, #0
 800685e:	77fb      	strb	r3, [r7, #31]
 8006860:	e0cc      	b.n	80069fc <UART_SetConfig+0x348>
 8006862:	2302      	movs	r3, #2
 8006864:	77fb      	strb	r3, [r7, #31]
 8006866:	e0c9      	b.n	80069fc <UART_SetConfig+0x348>
 8006868:	2304      	movs	r3, #4
 800686a:	77fb      	strb	r3, [r7, #31]
 800686c:	e0c6      	b.n	80069fc <UART_SetConfig+0x348>
 800686e:	2308      	movs	r3, #8
 8006870:	77fb      	strb	r3, [r7, #31]
 8006872:	e0c3      	b.n	80069fc <UART_SetConfig+0x348>
 8006874:	2310      	movs	r3, #16
 8006876:	77fb      	strb	r3, [r7, #31]
 8006878:	e0c0      	b.n	80069fc <UART_SetConfig+0x348>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a44      	ldr	r2, [pc, #272]	; (8006990 <UART_SetConfig+0x2dc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d125      	bne.n	80068d0 <UART_SetConfig+0x21c>
 8006884:	4b3e      	ldr	r3, [pc, #248]	; (8006980 <UART_SetConfig+0x2cc>)
 8006886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800688e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006892:	d017      	beq.n	80068c4 <UART_SetConfig+0x210>
 8006894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006898:	d817      	bhi.n	80068ca <UART_SetConfig+0x216>
 800689a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689e:	d00b      	beq.n	80068b8 <UART_SetConfig+0x204>
 80068a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a4:	d811      	bhi.n	80068ca <UART_SetConfig+0x216>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <UART_SetConfig+0x1fe>
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ae:	d006      	beq.n	80068be <UART_SetConfig+0x20a>
 80068b0:	e00b      	b.n	80068ca <UART_SetConfig+0x216>
 80068b2:	2300      	movs	r3, #0
 80068b4:	77fb      	strb	r3, [r7, #31]
 80068b6:	e0a1      	b.n	80069fc <UART_SetConfig+0x348>
 80068b8:	2302      	movs	r3, #2
 80068ba:	77fb      	strb	r3, [r7, #31]
 80068bc:	e09e      	b.n	80069fc <UART_SetConfig+0x348>
 80068be:	2304      	movs	r3, #4
 80068c0:	77fb      	strb	r3, [r7, #31]
 80068c2:	e09b      	b.n	80069fc <UART_SetConfig+0x348>
 80068c4:	2308      	movs	r3, #8
 80068c6:	77fb      	strb	r3, [r7, #31]
 80068c8:	e098      	b.n	80069fc <UART_SetConfig+0x348>
 80068ca:	2310      	movs	r3, #16
 80068cc:	77fb      	strb	r3, [r7, #31]
 80068ce:	e095      	b.n	80069fc <UART_SetConfig+0x348>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2f      	ldr	r2, [pc, #188]	; (8006994 <UART_SetConfig+0x2e0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d125      	bne.n	8006926 <UART_SetConfig+0x272>
 80068da:	4b29      	ldr	r3, [pc, #164]	; (8006980 <UART_SetConfig+0x2cc>)
 80068dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068e8:	d017      	beq.n	800691a <UART_SetConfig+0x266>
 80068ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ee:	d817      	bhi.n	8006920 <UART_SetConfig+0x26c>
 80068f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f4:	d00b      	beq.n	800690e <UART_SetConfig+0x25a>
 80068f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068fa:	d811      	bhi.n	8006920 <UART_SetConfig+0x26c>
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <UART_SetConfig+0x254>
 8006900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006904:	d006      	beq.n	8006914 <UART_SetConfig+0x260>
 8006906:	e00b      	b.n	8006920 <UART_SetConfig+0x26c>
 8006908:	2301      	movs	r3, #1
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e076      	b.n	80069fc <UART_SetConfig+0x348>
 800690e:	2302      	movs	r3, #2
 8006910:	77fb      	strb	r3, [r7, #31]
 8006912:	e073      	b.n	80069fc <UART_SetConfig+0x348>
 8006914:	2304      	movs	r3, #4
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	e070      	b.n	80069fc <UART_SetConfig+0x348>
 800691a:	2308      	movs	r3, #8
 800691c:	77fb      	strb	r3, [r7, #31]
 800691e:	e06d      	b.n	80069fc <UART_SetConfig+0x348>
 8006920:	2310      	movs	r3, #16
 8006922:	77fb      	strb	r3, [r7, #31]
 8006924:	e06a      	b.n	80069fc <UART_SetConfig+0x348>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1b      	ldr	r2, [pc, #108]	; (8006998 <UART_SetConfig+0x2e4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d138      	bne.n	80069a2 <UART_SetConfig+0x2ee>
 8006930:	4b13      	ldr	r3, [pc, #76]	; (8006980 <UART_SetConfig+0x2cc>)
 8006932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006936:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800693a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800693e:	d017      	beq.n	8006970 <UART_SetConfig+0x2bc>
 8006940:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006944:	d82a      	bhi.n	800699c <UART_SetConfig+0x2e8>
 8006946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694a:	d00b      	beq.n	8006964 <UART_SetConfig+0x2b0>
 800694c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006950:	d824      	bhi.n	800699c <UART_SetConfig+0x2e8>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <UART_SetConfig+0x2aa>
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	d006      	beq.n	800696a <UART_SetConfig+0x2b6>
 800695c:	e01e      	b.n	800699c <UART_SetConfig+0x2e8>
 800695e:	2300      	movs	r3, #0
 8006960:	77fb      	strb	r3, [r7, #31]
 8006962:	e04b      	b.n	80069fc <UART_SetConfig+0x348>
 8006964:	2302      	movs	r3, #2
 8006966:	77fb      	strb	r3, [r7, #31]
 8006968:	e048      	b.n	80069fc <UART_SetConfig+0x348>
 800696a:	2304      	movs	r3, #4
 800696c:	77fb      	strb	r3, [r7, #31]
 800696e:	e045      	b.n	80069fc <UART_SetConfig+0x348>
 8006970:	2308      	movs	r3, #8
 8006972:	77fb      	strb	r3, [r7, #31]
 8006974:	e042      	b.n	80069fc <UART_SetConfig+0x348>
 8006976:	bf00      	nop
 8006978:	efff69f3 	.word	0xefff69f3
 800697c:	40011000 	.word	0x40011000
 8006980:	40023800 	.word	0x40023800
 8006984:	40004400 	.word	0x40004400
 8006988:	40004800 	.word	0x40004800
 800698c:	40004c00 	.word	0x40004c00
 8006990:	40005000 	.word	0x40005000
 8006994:	40011400 	.word	0x40011400
 8006998:	40007800 	.word	0x40007800
 800699c:	2310      	movs	r3, #16
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e02c      	b.n	80069fc <UART_SetConfig+0x348>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a72      	ldr	r2, [pc, #456]	; (8006b70 <UART_SetConfig+0x4bc>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d125      	bne.n	80069f8 <UART_SetConfig+0x344>
 80069ac:	4b71      	ldr	r3, [pc, #452]	; (8006b74 <UART_SetConfig+0x4c0>)
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069ba:	d017      	beq.n	80069ec <UART_SetConfig+0x338>
 80069bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069c0:	d817      	bhi.n	80069f2 <UART_SetConfig+0x33e>
 80069c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c6:	d00b      	beq.n	80069e0 <UART_SetConfig+0x32c>
 80069c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069cc:	d811      	bhi.n	80069f2 <UART_SetConfig+0x33e>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <UART_SetConfig+0x326>
 80069d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d6:	d006      	beq.n	80069e6 <UART_SetConfig+0x332>
 80069d8:	e00b      	b.n	80069f2 <UART_SetConfig+0x33e>
 80069da:	2300      	movs	r3, #0
 80069dc:	77fb      	strb	r3, [r7, #31]
 80069de:	e00d      	b.n	80069fc <UART_SetConfig+0x348>
 80069e0:	2302      	movs	r3, #2
 80069e2:	77fb      	strb	r3, [r7, #31]
 80069e4:	e00a      	b.n	80069fc <UART_SetConfig+0x348>
 80069e6:	2304      	movs	r3, #4
 80069e8:	77fb      	strb	r3, [r7, #31]
 80069ea:	e007      	b.n	80069fc <UART_SetConfig+0x348>
 80069ec:	2308      	movs	r3, #8
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e004      	b.n	80069fc <UART_SetConfig+0x348>
 80069f2:	2310      	movs	r3, #16
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e001      	b.n	80069fc <UART_SetConfig+0x348>
 80069f8:	2310      	movs	r3, #16
 80069fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a04:	d15b      	bne.n	8006abe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006a06:	7ffb      	ldrb	r3, [r7, #31]
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d828      	bhi.n	8006a5e <UART_SetConfig+0x3aa>
 8006a0c:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <UART_SetConfig+0x360>)
 8006a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006a39 	.word	0x08006a39
 8006a18:	08006a41 	.word	0x08006a41
 8006a1c:	08006a49 	.word	0x08006a49
 8006a20:	08006a5f 	.word	0x08006a5f
 8006a24:	08006a4f 	.word	0x08006a4f
 8006a28:	08006a5f 	.word	0x08006a5f
 8006a2c:	08006a5f 	.word	0x08006a5f
 8006a30:	08006a5f 	.word	0x08006a5f
 8006a34:	08006a57 	.word	0x08006a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a38:	f7fe f920 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 8006a3c:	61b8      	str	r0, [r7, #24]
        break;
 8006a3e:	e013      	b.n	8006a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a40:	f7fe f930 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 8006a44:	61b8      	str	r0, [r7, #24]
        break;
 8006a46:	e00f      	b.n	8006a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a48:	4b4b      	ldr	r3, [pc, #300]	; (8006b78 <UART_SetConfig+0x4c4>)
 8006a4a:	61bb      	str	r3, [r7, #24]
        break;
 8006a4c:	e00c      	b.n	8006a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a4e:	f7fe f843 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8006a52:	61b8      	str	r0, [r7, #24]
        break;
 8006a54:	e008      	b.n	8006a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a5a:	61bb      	str	r3, [r7, #24]
        break;
 8006a5c:	e004      	b.n	8006a68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	77bb      	strb	r3, [r7, #30]
        break;
 8006a66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d074      	beq.n	8006b58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	005a      	lsls	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	441a      	add	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2b0f      	cmp	r3, #15
 8006a88:	d916      	bls.n	8006ab8 <UART_SetConfig+0x404>
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a90:	d212      	bcs.n	8006ab8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f023 030f 	bic.w	r3, r3, #15
 8006a9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	085b      	lsrs	r3, r3, #1
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	89fb      	ldrh	r3, [r7, #14]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	89fa      	ldrh	r2, [r7, #14]
 8006ab4:	60da      	str	r2, [r3, #12]
 8006ab6:	e04f      	b.n	8006b58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	77bb      	strb	r3, [r7, #30]
 8006abc:	e04c      	b.n	8006b58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006abe:	7ffb      	ldrb	r3, [r7, #31]
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d828      	bhi.n	8006b16 <UART_SetConfig+0x462>
 8006ac4:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <UART_SetConfig+0x418>)
 8006ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aca:	bf00      	nop
 8006acc:	08006af1 	.word	0x08006af1
 8006ad0:	08006af9 	.word	0x08006af9
 8006ad4:	08006b01 	.word	0x08006b01
 8006ad8:	08006b17 	.word	0x08006b17
 8006adc:	08006b07 	.word	0x08006b07
 8006ae0:	08006b17 	.word	0x08006b17
 8006ae4:	08006b17 	.word	0x08006b17
 8006ae8:	08006b17 	.word	0x08006b17
 8006aec:	08006b0f 	.word	0x08006b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af0:	f7fe f8c4 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 8006af4:	61b8      	str	r0, [r7, #24]
        break;
 8006af6:	e013      	b.n	8006b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af8:	f7fe f8d4 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 8006afc:	61b8      	str	r0, [r7, #24]
        break;
 8006afe:	e00f      	b.n	8006b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b00:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <UART_SetConfig+0x4c4>)
 8006b02:	61bb      	str	r3, [r7, #24]
        break;
 8006b04:	e00c      	b.n	8006b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b06:	f7fd ffe7 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8006b0a:	61b8      	str	r0, [r7, #24]
        break;
 8006b0c:	e008      	b.n	8006b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b12:	61bb      	str	r3, [r7, #24]
        break;
 8006b14:	e004      	b.n	8006b20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	77bb      	strb	r3, [r7, #30]
        break;
 8006b1e:	bf00      	nop
    }

    if (pclk != 0U)
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d018      	beq.n	8006b58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	085a      	lsrs	r2, r3, #1
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	441a      	add	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b0f      	cmp	r3, #15
 8006b3e:	d909      	bls.n	8006b54 <UART_SetConfig+0x4a0>
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b46:	d205      	bcs.n	8006b54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60da      	str	r2, [r3, #12]
 8006b52:	e001      	b.n	8006b58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b64:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	40007c00 	.word	0x40007c00
 8006b74:	40023800 	.word	0x40023800
 8006b78:	00f42400 	.word	0x00f42400

08006b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01a      	beq.n	8006c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c7a:	d10a      	bne.n	8006c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
  }
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af02      	add	r7, sp, #8
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cd0:	f7fc fb7e 	bl	80033d0 <HAL_GetTick>
 8006cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d10e      	bne.n	8006d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f831 	bl	8006d5a <UART_WaitOnFlagUntilTimeout>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e027      	b.n	8006d52 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d10e      	bne.n	8006d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f81b 	bl	8006d5a <UART_WaitOnFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e011      	b.n	8006d52 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b09c      	sub	sp, #112	; 0x70
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	603b      	str	r3, [r7, #0]
 8006d66:	4613      	mov	r3, r2
 8006d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d6a:	e0a7      	b.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d72:	f000 80a3 	beq.w	8006ebc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d76:	f7fc fb2b 	bl	80033d0 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x32>
 8006d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d13f      	bne.n	8006e0c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006da0:	667b      	str	r3, [r7, #100]	; 0x64
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006db0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e6      	bne.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	f023 0301 	bic.w	r3, r3, #1
 8006dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dde:	64ba      	str	r2, [r7, #72]	; 0x48
 8006de0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e5      	bne.n	8006dbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2220      	movs	r2, #32
 8006df6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e068      	b.n	8006ede <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d050      	beq.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e28:	d148      	bne.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e32:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
 8006e54:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e6      	bne.n	8006e34 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	613b      	str	r3, [r7, #16]
   return(result);
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3308      	adds	r3, #8
 8006e84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e86:	623a      	str	r2, [r7, #32]
 8006e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	69f9      	ldr	r1, [r7, #28]
 8006e8c:	6a3a      	ldr	r2, [r7, #32]
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e5      	bne.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e010      	b.n	8006ede <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69da      	ldr	r2, [r3, #28]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	bf0c      	ite	eq
 8006ecc:	2301      	moveq	r3, #1
 8006ece:	2300      	movne	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	f43f af48 	beq.w	8006d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3770      	adds	r7, #112	; 0x70
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ee8:	b084      	sub	sp, #16
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	f107 001c 	add.w	r0, r7, #28
 8006ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d120      	bne.n	8006f42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <USB_CoreInit+0xac>)
 8006f12:	4013      	ands	r3, r2
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d105      	bne.n	8006f36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fa96 	bl	8007468 <USB_CoreReset>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]
 8006f40:	e010      	b.n	8006f64 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fa8a 	bl	8007468 <USB_CoreReset>
 8006f54:	4603      	mov	r3, r0
 8006f56:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d10b      	bne.n	8006f82 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f043 0206 	orr.w	r2, r3, #6
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f043 0220 	orr.w	r2, r3, #32
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f8e:	b004      	add	sp, #16
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	ffbdffbf 	.word	0xffbdffbf

08006f98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f023 0201 	bic.w	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fd6:	78fb      	ldrb	r3, [r7, #3]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d115      	bne.n	8007008 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fe8:	2001      	movs	r0, #1
 8006fea:	f7fc f9fd 	bl	80033e8 <HAL_Delay>
      ms++;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fa29 	bl	800744c <USB_GetMode>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d01e      	beq.n	800703e <USB_SetCurrentMode+0x84>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b31      	cmp	r3, #49	; 0x31
 8007004:	d9f0      	bls.n	8006fe8 <USB_SetCurrentMode+0x2e>
 8007006:	e01a      	b.n	800703e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d115      	bne.n	800703a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800701a:	2001      	movs	r0, #1
 800701c:	f7fc f9e4 	bl	80033e8 <HAL_Delay>
      ms++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa10 	bl	800744c <USB_GetMode>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <USB_SetCurrentMode+0x84>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b31      	cmp	r3, #49	; 0x31
 8007036:	d9f0      	bls.n	800701a <USB_SetCurrentMode+0x60>
 8007038:	e001      	b.n	800703e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e005      	b.n	800704a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b32      	cmp	r3, #50	; 0x32
 8007042:	d101      	bne.n	8007048 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007054:	b084      	sub	sp, #16
 8007056:	b580      	push	{r7, lr}
 8007058:	b086      	sub	sp, #24
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800706e:	2300      	movs	r3, #0
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	e009      	b.n	8007088 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	3340      	adds	r3, #64	; 0x40
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	2200      	movs	r2, #0
 8007080:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	3301      	adds	r3, #1
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b0e      	cmp	r3, #14
 800708c:	d9f2      	bls.n	8007074 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800708e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d11c      	bne.n	80070ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070a2:	f043 0302 	orr.w	r3, r3, #2
 80070a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e005      	b.n	80070da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070e0:	461a      	mov	r2, r3
 80070e2:	2300      	movs	r3, #0
 80070e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ec:	4619      	mov	r1, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f4:	461a      	mov	r2, r3
 80070f6:	680b      	ldr	r3, [r1, #0]
 80070f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d10c      	bne.n	800711a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	2b00      	cmp	r3, #0
 8007104:	d104      	bne.n	8007110 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007106:	2100      	movs	r1, #0
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f965 	bl	80073d8 <USB_SetDevSpeed>
 800710e:	e008      	b.n	8007122 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007110:	2101      	movs	r1, #1
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f960 	bl	80073d8 <USB_SetDevSpeed>
 8007118:	e003      	b.n	8007122 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800711a:	2103      	movs	r1, #3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f95b 	bl	80073d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007122:	2110      	movs	r1, #16
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f8f3 	bl	8007310 <USB_FlushTxFifo>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f91f 	bl	8007378 <USB_FlushRxFifo>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	461a      	mov	r2, r3
 800714c:	2300      	movs	r3, #0
 800714e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007156:	461a      	mov	r2, r3
 8007158:	2300      	movs	r3, #0
 800715a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007162:	461a      	mov	r2, r3
 8007164:	2300      	movs	r3, #0
 8007166:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007168:	2300      	movs	r3, #0
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	e043      	b.n	80071f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007184:	d118      	bne.n	80071b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	461a      	mov	r2, r3
 800719a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	e013      	b.n	80071ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ae:	461a      	mov	r2, r3
 80071b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	e008      	b.n	80071ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c4:	461a      	mov	r2, r3
 80071c6:	2300      	movs	r3, #0
 80071c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d6:	461a      	mov	r2, r3
 80071d8:	2300      	movs	r3, #0
 80071da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e8:	461a      	mov	r2, r3
 80071ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	3301      	adds	r3, #1
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d3b7      	bcc.n	800716e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071fe:	2300      	movs	r3, #0
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	e043      	b.n	800728c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800721a:	d118      	bne.n	800724e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722e:	461a      	mov	r2, r3
 8007230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	e013      	b.n	8007260 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007244:	461a      	mov	r2, r3
 8007246:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	e008      	b.n	8007260 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725a:	461a      	mov	r2, r3
 800725c:	2300      	movs	r3, #0
 800725e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800726c:	461a      	mov	r2, r3
 800726e:	2300      	movs	r3, #0
 8007270:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727e:	461a      	mov	r2, r3
 8007280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007284:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	3301      	adds	r3, #1
 800728a:	613b      	str	r3, [r7, #16]
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	429a      	cmp	r2, r3
 8007292:	d3b7      	bcc.n	8007204 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80072b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d105      	bne.n	80072c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	f043 0210 	orr.w	r2, r3, #16
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <USB_DevInit+0x2b4>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	f043 0208 	orr.w	r2, r3, #8
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d105      	bne.n	80072f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699a      	ldr	r2, [r3, #24]
 80072f0:	4b06      	ldr	r3, [pc, #24]	; (800730c <USB_DevInit+0x2b8>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007304:	b004      	add	sp, #16
 8007306:	4770      	bx	lr
 8007308:	803c3800 	.word	0x803c3800
 800730c:	40000004 	.word	0x40000004

08007310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3301      	adds	r3, #1
 8007322:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4a13      	ldr	r2, [pc, #76]	; (8007374 <USB_FlushTxFifo+0x64>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d901      	bls.n	8007330 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e01b      	b.n	8007368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	daf2      	bge.n	800731e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	019b      	lsls	r3, r3, #6
 8007340:	f043 0220 	orr.w	r2, r3, #32
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3301      	adds	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4a08      	ldr	r2, [pc, #32]	; (8007374 <USB_FlushTxFifo+0x64>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d901      	bls.n	800735a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e006      	b.n	8007368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f003 0320 	and.w	r3, r3, #32
 8007362:	2b20      	cmp	r3, #32
 8007364:	d0f0      	beq.n	8007348 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	00030d40 	.word	0x00030d40

08007378 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3301      	adds	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a11      	ldr	r2, [pc, #68]	; (80073d4 <USB_FlushRxFifo+0x5c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d901      	bls.n	8007396 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e018      	b.n	80073c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	daf2      	bge.n	8007384 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2210      	movs	r2, #16
 80073a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3301      	adds	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <USB_FlushRxFifo+0x5c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d901      	bls.n	80073ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e006      	b.n	80073c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0310 	and.w	r3, r3, #16
 80073c2:	2b10      	cmp	r3, #16
 80073c4:	d0f0      	beq.n	80073a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	00030d40 	.word	0x00030d40

080073d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073f8:	4313      	orrs	r3, r2
 80073fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007424:	f023 0303 	bic.w	r3, r3, #3
 8007428:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007438:	f043 0302 	orr.w	r3, r3, #2
 800743c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	f003 0301 	and.w	r3, r3, #1
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a13      	ldr	r2, [pc, #76]	; (80074cc <USB_CoreReset+0x64>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d901      	bls.n	8007486 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e01b      	b.n	80074be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	daf2      	bge.n	8007474 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f043 0201 	orr.w	r2, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3301      	adds	r3, #1
 80074a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a09      	ldr	r2, [pc, #36]	; (80074cc <USB_CoreReset+0x64>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d901      	bls.n	80074b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e006      	b.n	80074be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d0f0      	beq.n	800749e <USB_CoreReset+0x36>

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	00030d40 	.word	0x00030d40

080074d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80074d4:	bf00      	nop
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074e6:	f3ef 8305 	mrs	r3, IPSR
 80074ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10f      	bne.n	8007512 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f2:	f3ef 8310 	mrs	r3, PRIMASK
 80074f6:	607b      	str	r3, [r7, #4]
  return(result);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d105      	bne.n	800750a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007502:	603b      	str	r3, [r7, #0]
  return(result);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <osKernelInitialize+0x3a>
 800750a:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <osKernelInitialize+0x64>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d103      	bne.n	800751a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007512:	f06f 0305 	mvn.w	r3, #5
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	e00c      	b.n	8007534 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800751a:	4b0a      	ldr	r3, [pc, #40]	; (8007544 <osKernelInitialize+0x64>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d105      	bne.n	800752e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007522:	4b08      	ldr	r3, [pc, #32]	; (8007544 <osKernelInitialize+0x64>)
 8007524:	2201      	movs	r2, #1
 8007526:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	e002      	b.n	8007534 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800752e:	f04f 33ff 	mov.w	r3, #4294967295
 8007532:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007534:	68fb      	ldr	r3, [r7, #12]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	2000abf4 	.word	0x2000abf4

08007548 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800754e:	f3ef 8305 	mrs	r3, IPSR
 8007552:	60bb      	str	r3, [r7, #8]
  return(result);
 8007554:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10f      	bne.n	800757a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800755a:	f3ef 8310 	mrs	r3, PRIMASK
 800755e:	607b      	str	r3, [r7, #4]
  return(result);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d105      	bne.n	8007572 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007566:	f3ef 8311 	mrs	r3, BASEPRI
 800756a:	603b      	str	r3, [r7, #0]
  return(result);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d007      	beq.n	8007582 <osKernelStart+0x3a>
 8007572:	4b0f      	ldr	r3, [pc, #60]	; (80075b0 <osKernelStart+0x68>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d103      	bne.n	8007582 <osKernelStart+0x3a>
    stat = osErrorISR;
 800757a:	f06f 0305 	mvn.w	r3, #5
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	e010      	b.n	80075a4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007582:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <osKernelStart+0x68>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d109      	bne.n	800759e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800758a:	f7ff ffa1 	bl	80074d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800758e:	4b08      	ldr	r3, [pc, #32]	; (80075b0 <osKernelStart+0x68>)
 8007590:	2202      	movs	r2, #2
 8007592:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007594:	f002 fc42 	bl	8009e1c <vTaskStartScheduler>
      stat = osOK;
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	e002      	b.n	80075a4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800759e:	f04f 33ff 	mov.w	r3, #4294967295
 80075a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80075a4:	68fb      	ldr	r3, [r7, #12]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	2000abf4 	.word	0x2000abf4

080075b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b090      	sub	sp, #64	; 0x40
 80075b8:	af04      	add	r7, sp, #16
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075c4:	f3ef 8305 	mrs	r3, IPSR
 80075c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80075ca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f040 808f 	bne.w	80076f0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d2:	f3ef 8310 	mrs	r3, PRIMASK
 80075d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d105      	bne.n	80075ea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075de:	f3ef 8311 	mrs	r3, BASEPRI
 80075e2:	617b      	str	r3, [r7, #20]
  return(result);
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <osThreadNew+0x3e>
 80075ea:	4b44      	ldr	r3, [pc, #272]	; (80076fc <osThreadNew+0x148>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d07e      	beq.n	80076f0 <osThreadNew+0x13c>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d07b      	beq.n	80076f0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80075f8:	2380      	movs	r3, #128	; 0x80
 80075fa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80075fc:	2318      	movs	r3, #24
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007604:	f04f 33ff 	mov.w	r3, #4294967295
 8007608:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d045      	beq.n	800769c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <osThreadNew+0x6a>
        name = attr->name;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	2b00      	cmp	r3, #0
 8007630:	d008      	beq.n	8007644 <osThreadNew+0x90>
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	2b38      	cmp	r3, #56	; 0x38
 8007636:	d805      	bhi.n	8007644 <osThreadNew+0x90>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <osThreadNew+0x94>
        return (NULL);
 8007644:	2300      	movs	r3, #0
 8007646:	e054      	b.n	80076f2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	089b      	lsrs	r3, r3, #2
 8007656:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00e      	beq.n	800767e <osThreadNew+0xca>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	2bbf      	cmp	r3, #191	; 0xbf
 8007666:	d90a      	bls.n	800767e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800766c:	2b00      	cmp	r3, #0
 800766e:	d006      	beq.n	800767e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <osThreadNew+0xca>
        mem = 1;
 8007678:	2301      	movs	r3, #1
 800767a:	623b      	str	r3, [r7, #32]
 800767c:	e010      	b.n	80076a0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10c      	bne.n	80076a0 <osThreadNew+0xec>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d108      	bne.n	80076a0 <osThreadNew+0xec>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d104      	bne.n	80076a0 <osThreadNew+0xec>
          mem = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	623b      	str	r3, [r7, #32]
 800769a:	e001      	b.n	80076a0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d110      	bne.n	80076c8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076ae:	9202      	str	r2, [sp, #8]
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f002 f92b 	bl	8009918 <xTaskCreateStatic>
 80076c2:	4603      	mov	r3, r0
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	e013      	b.n	80076f0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d110      	bne.n	80076f0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	f107 0310 	add.w	r3, r7, #16
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f002 f97c 	bl	80099de <xTaskCreate>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d001      	beq.n	80076f0 <osThreadNew+0x13c>
          hTask = NULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076f0:	693b      	ldr	r3, [r7, #16]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3730      	adds	r7, #48	; 0x30
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	2000abf4 	.word	0x2000abf4

08007700 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007708:	f3ef 8305 	mrs	r3, IPSR
 800770c:	613b      	str	r3, [r7, #16]
  return(result);
 800770e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10f      	bne.n	8007734 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007714:	f3ef 8310 	mrs	r3, PRIMASK
 8007718:	60fb      	str	r3, [r7, #12]
  return(result);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d105      	bne.n	800772c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007720:	f3ef 8311 	mrs	r3, BASEPRI
 8007724:	60bb      	str	r3, [r7, #8]
  return(result);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <osDelay+0x3c>
 800772c:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <osDelay+0x58>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d103      	bne.n	800773c <osDelay+0x3c>
    stat = osErrorISR;
 8007734:	f06f 0305 	mvn.w	r3, #5
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	e007      	b.n	800774c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800773c:	2300      	movs	r3, #0
 800773e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f002 fafa 	bl	8009d40 <vTaskDelay>
    }
  }

  return (stat);
 800774c:	697b      	ldr	r3, [r7, #20]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	2000abf4 	.word	0x2000abf4

0800775c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007768:	f3ef 8305 	mrs	r3, IPSR
 800776c:	617b      	str	r3, [r7, #20]
  return(result);
 800776e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8007770:	2b00      	cmp	r3, #0
 8007772:	d13d      	bne.n	80077f0 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007774:	f3ef 8310 	mrs	r3, PRIMASK
 8007778:	613b      	str	r3, [r7, #16]
  return(result);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d105      	bne.n	800778c <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007780:	f3ef 8311 	mrs	r3, BASEPRI
 8007784:	60fb      	str	r3, [r7, #12]
  return(result);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <osEventFlagsNew+0x38>
 800778c:	4b1b      	ldr	r3, [pc, #108]	; (80077fc <osEventFlagsNew+0xa0>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d02d      	beq.n	80077f0 <osEventFlagsNew+0x94>
    mem = -1;
 8007794:	f04f 33ff 	mov.w	r3, #4294967295
 8007798:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d015      	beq.n	80077cc <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d006      	beq.n	80077b6 <osEventFlagsNew+0x5a>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2b1f      	cmp	r3, #31
 80077ae:	d902      	bls.n	80077b6 <osEventFlagsNew+0x5a>
        mem = 1;
 80077b0:	2301      	movs	r3, #1
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	e00c      	b.n	80077d0 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d108      	bne.n	80077d0 <osEventFlagsNew+0x74>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d104      	bne.n	80077d0 <osEventFlagsNew+0x74>
          mem = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	e001      	b.n	80077d0 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d106      	bne.n	80077e4 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fa7e 	bl	8007cdc <xEventGroupCreateStatic>
 80077e0:	61f8      	str	r0, [r7, #28]
 80077e2:	e005      	b.n	80077f0 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80077ea:	f000 fb0f 	bl	8007e0c <xEventGroupCreate>
 80077ee:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80077f0:	69fb      	ldr	r3, [r7, #28]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	2000abf4 	.word	0x2000abf4

08007800 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d004      	beq.n	800781e <osEventFlagsSet+0x1e>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800781e:	f06f 0303 	mvn.w	r3, #3
 8007822:	61fb      	str	r3, [r7, #28]
 8007824:	e03a      	b.n	800789c <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007826:	f3ef 8305 	mrs	r3, IPSR
 800782a:	617b      	str	r3, [r7, #20]
  return(result);
 800782c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10f      	bne.n	8007852 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007832:	f3ef 8310 	mrs	r3, PRIMASK
 8007836:	613b      	str	r3, [r7, #16]
  return(result);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d105      	bne.n	800784a <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800783e:	f3ef 8311 	mrs	r3, BASEPRI
 8007842:	60fb      	str	r3, [r7, #12]
  return(result);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d021      	beq.n	800788e <osEventFlagsSet+0x8e>
 800784a:	4b17      	ldr	r3, [pc, #92]	; (80078a8 <osEventFlagsSet+0xa8>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d11d      	bne.n	800788e <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8007852:	2300      	movs	r3, #0
 8007854:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007856:	f107 0308 	add.w	r3, r7, #8
 800785a:	461a      	mov	r2, r3
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	69b8      	ldr	r0, [r7, #24]
 8007860:	f000 fd92 	bl	8008388 <xEventGroupSetBitsFromISR>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800786a:	f06f 0302 	mvn.w	r3, #2
 800786e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007870:	e013      	b.n	800789a <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00e      	beq.n	800789a <osEventFlagsSet+0x9a>
 800787c:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <osEventFlagsSet+0xac>)
 800787e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800788c:	e005      	b.n	800789a <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	69b8      	ldr	r0, [r7, #24]
 8007892:	f000 fc93 	bl	80081bc <xEventGroupSetBits>
 8007896:	61f8      	str	r0, [r7, #28]
 8007898:	e000      	b.n	800789c <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800789a:	bf00      	nop
  }

  return (rflags);
 800789c:	69fb      	ldr	r3, [r7, #28]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3720      	adds	r7, #32
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	2000abf4 	.word	0x2000abf4
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08e      	sub	sp, #56	; 0x38
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d004      	beq.n	80078d2 <osEventFlagsWait+0x22>
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80078d2:	f06f 0303 	mvn.w	r3, #3
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
 80078d8:	e059      	b.n	800798e <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078da:	f3ef 8305 	mrs	r3, IPSR
 80078de:	61fb      	str	r3, [r7, #28]
  return(result);
 80078e0:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10f      	bne.n	8007906 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e6:	f3ef 8310 	mrs	r3, PRIMASK
 80078ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d105      	bne.n	80078fe <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078f2:	f3ef 8311 	mrs	r3, BASEPRI
 80078f6:	617b      	str	r3, [r7, #20]
  return(result);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d007      	beq.n	800790e <osEventFlagsWait+0x5e>
 80078fe:	4b26      	ldr	r3, [pc, #152]	; (8007998 <osEventFlagsWait+0xe8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b02      	cmp	r3, #2
 8007904:	d103      	bne.n	800790e <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8007906:	f06f 0305 	mvn.w	r3, #5
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
 800790c:	e03f      	b.n	800798e <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8007918:	2301      	movs	r3, #1
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800791c:	e001      	b.n	8007922 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800791e:	2300      	movs	r3, #0
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 800792c:	2300      	movs	r3, #0
 800792e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007930:	e001      	b.n	8007936 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8007932:	2301      	movs	r3, #1
 8007934:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800793e:	68b9      	ldr	r1, [r7, #8]
 8007940:	6a38      	ldr	r0, [r7, #32]
 8007942:	f000 fad9 	bl	8007ef8 <xEventGroupWaitBits>
 8007946:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00e      	beq.n	8007970 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	429a      	cmp	r2, r3
 8007958:	d019      	beq.n	800798e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8007960:	f06f 0301 	mvn.w	r3, #1
 8007964:	627b      	str	r3, [r7, #36]	; 0x24
 8007966:	e012      	b.n	800798e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007968:	f06f 0302 	mvn.w	r3, #2
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
 800796e:	e00e      	b.n	800798e <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	4013      	ands	r3, r2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8007980:	f06f 0301 	mvn.w	r3, #1
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
 8007986:	e002      	b.n	800798e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007988:	f06f 0302 	mvn.w	r3, #2
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007990:	4618      	mov	r0, r3
 8007992:	3730      	adds	r7, #48	; 0x30
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	2000abf4 	.word	0x2000abf4

0800799c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800799c:	b580      	push	{r7, lr}
 800799e:	b08c      	sub	sp, #48	; 0x30
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80079a8:	2300      	movs	r3, #0
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079ac:	f3ef 8305 	mrs	r3, IPSR
 80079b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80079b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d16f      	bne.n	8007a98 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079b8:	f3ef 8310 	mrs	r3, PRIMASK
 80079bc:	617b      	str	r3, [r7, #20]
  return(result);
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079c4:	f3ef 8311 	mrs	r3, BASEPRI
 80079c8:	613b      	str	r3, [r7, #16]
  return(result);
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <osMessageQueueNew+0x3c>
 80079d0:	4b34      	ldr	r3, [pc, #208]	; (8007aa4 <osMessageQueueNew+0x108>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d05f      	beq.n	8007a98 <osMessageQueueNew+0xfc>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d05c      	beq.n	8007a98 <osMessageQueueNew+0xfc>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d059      	beq.n	8007a98 <osMessageQueueNew+0xfc>
    mem = -1;
 80079e4:	f04f 33ff 	mov.w	r3, #4294967295
 80079e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d029      	beq.n	8007a44 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d012      	beq.n	8007a1e <osMessageQueueNew+0x82>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	2b4f      	cmp	r3, #79	; 0x4f
 80079fe:	d90e      	bls.n	8007a1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695a      	ldr	r2, [r3, #20]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	fb01 f303 	mul.w	r3, r1, r3
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d302      	bcc.n	8007a1e <osMessageQueueNew+0x82>
        mem = 1;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	623b      	str	r3, [r7, #32]
 8007a1c:	e014      	b.n	8007a48 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d110      	bne.n	8007a48 <osMessageQueueNew+0xac>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10c      	bne.n	8007a48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d108      	bne.n	8007a48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <osMessageQueueNew+0xac>
          mem = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	623b      	str	r3, [r7, #32]
 8007a42:	e001      	b.n	8007a48 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d10b      	bne.n	8007a66 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	2100      	movs	r1, #0
 8007a58:	9100      	str	r1, [sp, #0]
 8007a5a:	68b9      	ldr	r1, [r7, #8]
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 fe07 	bl	8008670 <xQueueGenericCreateStatic>
 8007a62:	6278      	str	r0, [r7, #36]	; 0x24
 8007a64:	e008      	b.n	8007a78 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d105      	bne.n	8007a78 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fe9d 	bl	80087b0 <xQueueGenericCreate>
 8007a76:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00c      	beq.n	8007a98 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <osMessageQueueNew+0xf0>
        name = attr->name;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	e001      	b.n	8007a90 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007a90:	69f9      	ldr	r1, [r7, #28]
 8007a92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a94:	f001 fed2 	bl	800983c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3728      	adds	r7, #40	; 0x28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	2000abf4 	.word	0x2000abf4

08007aa8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08a      	sub	sp, #40	; 0x28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ac0:	f3ef 8305 	mrs	r3, IPSR
 8007ac4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ac6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10f      	bne.n	8007aec <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007acc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d105      	bne.n	8007ae4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8007adc:	617b      	str	r3, [r7, #20]
  return(result);
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d02c      	beq.n	8007b3e <osMessageQueuePut+0x96>
 8007ae4:	4b28      	ldr	r3, [pc, #160]	; (8007b88 <osMessageQueuePut+0xe0>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d128      	bne.n	8007b3e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <osMessageQueuePut+0x56>
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <osMessageQueuePut+0x56>
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007afe:	f06f 0303 	mvn.w	r3, #3
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b04:	e039      	b.n	8007b7a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007b06:	2300      	movs	r3, #0
 8007b08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007b0a:	f107 0210 	add.w	r2, r7, #16
 8007b0e:	2300      	movs	r3, #0
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	6a38      	ldr	r0, [r7, #32]
 8007b14:	f001 f954 	bl	8008dc0 <xQueueGenericSendFromISR>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d003      	beq.n	8007b26 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007b1e:	f06f 0302 	mvn.w	r3, #2
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b24:	e029      	b.n	8007b7a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d026      	beq.n	8007b7a <osMessageQueuePut+0xd2>
 8007b2c:	4b17      	ldr	r3, [pc, #92]	; (8007b8c <osMessageQueuePut+0xe4>)
 8007b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b3c:	e01d      	b.n	8007b7a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <osMessageQueuePut+0xa2>
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d103      	bne.n	8007b52 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007b4a:	f06f 0303 	mvn.w	r3, #3
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b50:	e014      	b.n	8007b7c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007b52:	2300      	movs	r3, #0
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	68b9      	ldr	r1, [r7, #8]
 8007b58:	6a38      	ldr	r0, [r7, #32]
 8007b5a:	f000 ff1b 	bl	8008994 <xQueueGenericSend>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d00b      	beq.n	8007b7c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007b6a:	f06f 0301 	mvn.w	r3, #1
 8007b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b70:	e004      	b.n	8007b7c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007b72:	f06f 0302 	mvn.w	r3, #2
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
 8007b78:	e000      	b.n	8007b7c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b7a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3728      	adds	r7, #40	; 0x28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	2000abf4 	.word	0x2000abf4
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	; 0x28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ba6:	f3ef 8305 	mrs	r3, IPSR
 8007baa:	61fb      	str	r3, [r7, #28]
  return(result);
 8007bac:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10f      	bne.n	8007bd2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8007bb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8007bc2:	617b      	str	r3, [r7, #20]
  return(result);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d02c      	beq.n	8007c24 <osMessageQueueGet+0x94>
 8007bca:	4b28      	ldr	r3, [pc, #160]	; (8007c6c <osMessageQueueGet+0xdc>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d128      	bne.n	8007c24 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <osMessageQueueGet+0x54>
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <osMessageQueueGet+0x54>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007be4:	f06f 0303 	mvn.w	r3, #3
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bea:	e038      	b.n	8007c5e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007bec:	2300      	movs	r3, #0
 8007bee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007bf0:	f107 0310 	add.w	r3, r7, #16
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	68b9      	ldr	r1, [r7, #8]
 8007bf8:	6a38      	ldr	r0, [r7, #32]
 8007bfa:	f001 fbfb 	bl	80093f4 <xQueueReceiveFromISR>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d003      	beq.n	8007c0c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007c04:	f06f 0302 	mvn.w	r3, #2
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c0a:	e028      	b.n	8007c5e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d025      	beq.n	8007c5e <osMessageQueueGet+0xce>
 8007c12:	4b17      	ldr	r3, [pc, #92]	; (8007c70 <osMessageQueueGet+0xe0>)
 8007c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c22:	e01c      	b.n	8007c5e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <osMessageQueueGet+0xa0>
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d103      	bne.n	8007c38 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007c30:	f06f 0303 	mvn.w	r3, #3
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
 8007c36:	e013      	b.n	8007c60 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	6a38      	ldr	r0, [r7, #32]
 8007c3e:	f001 f9cf 	bl	8008fe0 <xQueueReceive>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d00b      	beq.n	8007c60 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007c4e:	f06f 0301 	mvn.w	r3, #1
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
 8007c54:	e004      	b.n	8007c60 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007c56:	f06f 0302 	mvn.w	r3, #2
 8007c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5c:	e000      	b.n	8007c60 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c5e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3728      	adds	r7, #40	; 0x28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	2000abf4 	.word	0x2000abf4
 8007c70:	e000ed04 	.word	0xe000ed04

08007c74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4a07      	ldr	r2, [pc, #28]	; (8007ca0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	4a06      	ldr	r2, [pc, #24]	; (8007ca4 <vApplicationGetIdleTaskMemory+0x30>)
 8007c8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2280      	movs	r2, #128	; 0x80
 8007c90:	601a      	str	r2, [r3, #0]
}
 8007c92:	bf00      	nop
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	2000abf8 	.word	0x2000abf8
 8007ca4:	2000acb8 	.word	0x2000acb8

08007ca8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4a07      	ldr	r2, [pc, #28]	; (8007cd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007cb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	4a06      	ldr	r2, [pc, #24]	; (8007cd8 <vApplicationGetTimerTaskMemory+0x30>)
 8007cbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cc6:	601a      	str	r2, [r3, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	2000aeb8 	.word	0x2000aeb8
 8007cd8:	2000af78 	.word	0x2000af78

08007cdc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10c      	bne.n	8007d04 <xEventGroupCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	b672      	cpsid	i
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	b662      	cpsie	i
 8007cfe:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007d04:	2320      	movs	r3, #32
 8007d06:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d00c      	beq.n	8007d28 <xEventGroupCreateStatic+0x4c>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	b672      	cpsid	i
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	b662      	cpsie	i
 8007d22:	60fb      	str	r3, [r7, #12]
}
 8007d24:	bf00      	nop
 8007d26:	e7fe      	b.n	8007d26 <xEventGroupCreateStatic+0x4a>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d050      	beq.n	8007dd4 <xEventGroupCreateStatic+0xf8>
		{
			pxEventBits->uxEventBits = 0;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fb79 	bl	8008434 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2201      	movs	r2, #1
 8007d46:	771a      	strb	r2, [r3, #28]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			traceEVENT_GROUP_CREATE( pxEventBits );
 8007d48:	2006      	movs	r0, #6
 8007d4a:	f7fa fd81 	bl	8002850 <prvTraceGetObjectHandle>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	4619      	mov	r1, r3
 8007d54:	6978      	ldr	r0, [r7, #20]
 8007d56:	f7f9 fd07 	bl	8001768 <prvTraceSetEventGroupNumberLow16>
 8007d5a:	4b2a      	ldr	r3, [pc, #168]	; (8007e04 <xEventGroupCreateStatic+0x128>)
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6978      	ldr	r0, [r7, #20]
 8007d62:	f7f9 fd19 	bl	8001798 <prvTraceSetEventGroupNumberHigh16>
 8007d66:	6978      	ldr	r0, [r7, #20]
 8007d68:	f7f9 fce3 	bl	8001732 <prvTraceGetEventGroupNumberLow16>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	4619      	mov	r1, r3
 8007d72:	2006      	movs	r0, #6
 8007d74:	f7fa fe6a 	bl	8002a4c <prvMarkObjectAsUsed>
 8007d78:	f7f9 fd24 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7f9 fc36 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8007d84:	4603      	mov	r3, r0
 8007d86:	461a      	mov	r2, r3
 8007d88:	4b1f      	ldr	r3, [pc, #124]	; (8007e08 <xEventGroupCreateStatic+0x12c>)
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d014      	beq.n	8007dbe <xEventGroupCreateStatic+0xe2>
 8007d94:	6978      	ldr	r0, [r7, #20]
 8007d96:	f7f9 fcd9 	bl	800174c <prvTraceGetEventGroupNumberHigh16>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4b1a      	ldr	r3, [pc, #104]	; (8007e08 <xEventGroupCreateStatic+0x12c>)
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	4013      	ands	r3, r2
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <xEventGroupCreateStatic+0xe2>
 8007daa:	6978      	ldr	r0, [r7, #20]
 8007dac:	f7f9 fcc1 	bl	8001732 <prvTraceGetEventGroupNumberLow16>
 8007db0:	4603      	mov	r3, r0
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	461a      	mov	r2, r3
 8007db6:	2106      	movs	r1, #6
 8007db8:	20c2      	movs	r0, #194	; 0xc2
 8007dba:	f7f9 ffc7 	bl	8001d4c <prvTraceStoreKernelCall>
 8007dbe:	6978      	ldr	r0, [r7, #20]
 8007dc0:	f7f9 fcb7 	bl	8001732 <prvTraceGetEventGroupNumberLow16>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4619      	mov	r1, r3
 8007dcc:	2006      	movs	r0, #6
 8007dce:	f7fa fb0d 	bl	80023ec <prvTraceSetObjectState>
 8007dd2:	e011      	b.n	8007df8 <xEventGroupCreateStatic+0x11c>
		else
		{
			/* xEventGroupCreateStatic should only ever be called with
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
 8007dd4:	f7f9 fcf6 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7f9 fc08 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8007de0:	4603      	mov	r3, r0
 8007de2:	461a      	mov	r2, r3
 8007de4:	4b08      	ldr	r3, [pc, #32]	; (8007e08 <xEventGroupCreateStatic+0x12c>)
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	4013      	ands	r3, r2
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <xEventGroupCreateStatic+0x11c>
 8007df0:	2100      	movs	r1, #0
 8007df2:	20c3      	movs	r0, #195	; 0xc3
 8007df4:	f7fa f8ee 	bl	8001fd4 <prvTraceStoreKernelCallWithNumericParamOnly>
		}

		return pxEventBits;
 8007df8:	697b      	ldr	r3, [r7, #20]
	}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	2000000c 	.word	0x2000000c
 8007e08:	2000000a 	.word	0x2000000a

08007e0c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007e12:	2020      	movs	r0, #32
 8007e14:	f003 fe36 	bl	800ba84 <pvPortMalloc>
 8007e18:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d050      	beq.n	8007ec2 <xEventGroupCreate+0xb6>
		{
			pxEventBits->uxEventBits = 0;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fb02 	bl	8008434 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	771a      	strb	r2, [r3, #28]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			traceEVENT_GROUP_CREATE( pxEventBits );
 8007e36:	2006      	movs	r0, #6
 8007e38:	f7fa fd0a 	bl	8002850 <prvTraceGetObjectHandle>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7f9 fc90 	bl	8001768 <prvTraceSetEventGroupNumberLow16>
 8007e48:	4b29      	ldr	r3, [pc, #164]	; (8007ef0 <xEventGroupCreate+0xe4>)
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7f9 fca2 	bl	8001798 <prvTraceSetEventGroupNumberHigh16>
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7f9 fc6c 	bl	8001732 <prvTraceGetEventGroupNumberLow16>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	4619      	mov	r1, r3
 8007e60:	2006      	movs	r0, #6
 8007e62:	f7fa fdf3 	bl	8002a4c <prvMarkObjectAsUsed>
 8007e66:	f7f9 fcad 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7f9 fbbf 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8007e72:	4603      	mov	r3, r0
 8007e74:	461a      	mov	r2, r3
 8007e76:	4b1f      	ldr	r3, [pc, #124]	; (8007ef4 <xEventGroupCreate+0xe8>)
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d014      	beq.n	8007eac <xEventGroupCreate+0xa0>
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7f9 fc62 	bl	800174c <prvTraceGetEventGroupNumberHigh16>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4b19      	ldr	r3, [pc, #100]	; (8007ef4 <xEventGroupCreate+0xe8>)
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	4013      	ands	r3, r2
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d009      	beq.n	8007eac <xEventGroupCreate+0xa0>
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7f9 fc4a 	bl	8001732 <prvTraceGetEventGroupNumberLow16>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	2106      	movs	r1, #6
 8007ea6:	20c2      	movs	r0, #194	; 0xc2
 8007ea8:	f7f9 ff50 	bl	8001d4c <prvTraceStoreKernelCall>
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7f9 fc40 	bl	8001732 <prvTraceGetEventGroupNumberLow16>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	4619      	mov	r1, r3
 8007eba:	2006      	movs	r0, #6
 8007ebc:	f7fa fa96 	bl	80023ec <prvTraceSetObjectState>
 8007ec0:	e011      	b.n	8007ee6 <xEventGroupCreate+0xda>
		}
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
 8007ec2:	f7f9 fc7f 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7f9 fb91 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4b08      	ldr	r3, [pc, #32]	; (8007ef4 <xEventGroupCreate+0xe8>)
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <xEventGroupCreate+0xda>
 8007ede:	2100      	movs	r1, #0
 8007ee0:	20c3      	movs	r0, #195	; 0xc3
 8007ee2:	f7fa f877 	bl	8001fd4 <prvTraceStoreKernelCallWithNumericParamOnly>
		}

		return pxEventBits;
 8007ee6:	687b      	ldr	r3, [r7, #4]
	}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	2000000c 	.word	0x2000000c
 8007ef4:	2000000a 	.word	0x2000000a

08007ef8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b090      	sub	sp, #64	; 0x40
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	633b      	str	r3, [r7, #48]	; 0x30
EventBits_t uxReturn, uxControlBits = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10c      	bne.n	8007f32 <xEventGroupWaitBits+0x3a>
	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	b672      	cpsid	i
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	b662      	cpsie	i
 8007f2c:	623b      	str	r3, [r7, #32]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00c      	beq.n	8007f56 <xEventGroupWaitBits+0x5e>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f40:	b672      	cpsid	i
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	b662      	cpsie	i
 8007f50:	61fb      	str	r3, [r7, #28]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10c      	bne.n	8007f76 <xEventGroupWaitBits+0x7e>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	b672      	cpsid	i
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	b662      	cpsie	i
 8007f70:	61bb      	str	r3, [r7, #24]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xEventGroupWaitBits+0x7c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f76:	f002 fd45 	bl	800aa04 <xTaskGetSchedulerState>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <xEventGroupWaitBits+0x8e>
 8007f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <xEventGroupWaitBits+0x92>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <xEventGroupWaitBits+0x94>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10c      	bne.n	8007faa <xEventGroupWaitBits+0xb2>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	b672      	cpsid	i
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	b662      	cpsie	i
 8007fa4:	617b      	str	r3, [r7, #20]
}
 8007fa6:	bf00      	nop
 8007fa8:	e7fe      	b.n	8007fa8 <xEventGroupWaitBits+0xb0>
	}
	#endif

	vTaskSuspendAll();
 8007faa:	f001 ffc7 	bl	8009f3c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fba:	f000 f9c2 	bl	8008342 <prvTestWaitCondition>
 8007fbe:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00e      	beq.n	8007fe4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d065      	beq.n	80080a0 <xEventGroupWaitBits+0x1a8>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	401a      	ands	r2, r3
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e05d      	b.n	80080a0 <xEventGroupWaitBits+0x1a8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d104      	bne.n	8007ff4 <xEventGroupWaitBits+0xfc>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff2:	e055      	b.n	80080a0 <xEventGroupWaitBits+0x1a8>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <xEventGroupWaitBits+0x10a>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008000:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <xEventGroupWaitBits+0x118>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800800e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	1d18      	adds	r0, r3, #4
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	4313      	orrs	r3, r2
 800801a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800801c:	4619      	mov	r1, r3
 800801e:	f002 f9dd 	bl	800a3dc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 8008026:	f7f9 fbcd 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800802a:	4603      	mov	r3, r0
 800802c:	4618      	mov	r0, r3
 800802e:	f7f9 fadf 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8008032:	4603      	mov	r3, r0
 8008034:	461a      	mov	r2, r3
 8008036:	4b5f      	ldr	r3, [pc, #380]	; (80081b4 <xEventGroupWaitBits+0x2bc>)
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	4013      	ands	r3, r2
 800803c:	b29b      	uxth	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d015      	beq.n	800806e <xEventGroupWaitBits+0x176>
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7f9 fb82 	bl	800174c <prvTraceGetEventGroupNumberHigh16>
 8008048:	4603      	mov	r3, r0
 800804a:	461a      	mov	r2, r3
 800804c:	4b59      	ldr	r3, [pc, #356]	; (80081b4 <xEventGroupWaitBits+0x2bc>)
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	4013      	ands	r3, r2
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00a      	beq.n	800806e <xEventGroupWaitBits+0x176>
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f7f9 fb6a 	bl	8001732 <prvTraceGetEventGroupNumberLow16>
 800805e:	4603      	mov	r3, r0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2106      	movs	r1, #6
 8008068:	20c6      	movs	r0, #198	; 0xc6
 800806a:	f7f9 feed 	bl	8001e48 <prvTraceStoreKernelCallWithParam>
 800806e:	f7f9 fba9 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8008072:	4603      	mov	r3, r0
 8008074:	4618      	mov	r0, r3
 8008076:	f7f9 fabb 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800807a:	4603      	mov	r3, r0
 800807c:	461a      	mov	r2, r3
 800807e:	4b4d      	ldr	r3, [pc, #308]	; (80081b4 <xEventGroupWaitBits+0x2bc>)
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	4013      	ands	r3, r2
 8008084:	b29b      	uxth	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <xEventGroupWaitBits+0x1a8>
 800808a:	f7f9 fb9b 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800808e:	4603      	mov	r3, r0
 8008090:	4618      	mov	r0, r3
 8008092:	f7f9 faa0 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 8008096:	4603      	mov	r3, r0
 8008098:	b2db      	uxtb	r3, r3
 800809a:	4618      	mov	r0, r3
 800809c:	f7fa fa1e 	bl	80024dc <prvTraceSetTaskInstanceFinished>
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80080a0:	f001 ff5a 	bl	8009f58 <xTaskResumeAll>
 80080a4:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80080a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d031      	beq.n	8008110 <xEventGroupWaitBits+0x218>
	{
		if( xAlreadyYielded == pdFALSE )
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d107      	bne.n	80080c2 <xEventGroupWaitBits+0x1ca>
		{
			portYIELD_WITHIN_API();
 80080b2:	4b41      	ldr	r3, [pc, #260]	; (80081b8 <xEventGroupWaitBits+0x2c0>)
 80080b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80080c2:	f002 fd5d 	bl	800ab80 <uxTaskResetEventItemValue>
 80080c6:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80080c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d11a      	bne.n	8008108 <xEventGroupWaitBits+0x210>
		{
			taskENTER_CRITICAL();
 80080d2:	f003 fbad 	bl	800b830 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	68b9      	ldr	r1, [r7, #8]
 80080e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80080e2:	f000 f92e 	bl	8008342 <prvTestWaitCondition>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d009      	beq.n	8008100 <xEventGroupWaitBits+0x208>
				{
					if( xClearOnExit != pdFALSE )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d006      	beq.n	8008100 <xEventGroupWaitBits+0x208>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	43db      	mvns	r3, r3
 80080fa:	401a      	ands	r2, r3
 80080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fe:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
			}
			taskEXIT_CRITICAL();
 8008104:	f003 fbc8 	bl	800b898 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 8008110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008112:	2b00      	cmp	r3, #0
 8008114:	d024      	beq.n	8008160 <xEventGroupWaitBits+0x268>
 8008116:	f7f9 fb55 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800811a:	4603      	mov	r3, r0
 800811c:	4618      	mov	r0, r3
 800811e:	f7f9 fa67 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8008122:	4603      	mov	r3, r0
 8008124:	461a      	mov	r2, r3
 8008126:	4b23      	ldr	r3, [pc, #140]	; (80081b4 <xEventGroupWaitBits+0x2bc>)
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	4013      	ands	r3, r2
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d03a      	beq.n	80081a8 <xEventGroupWaitBits+0x2b0>
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7f9 fb0a 	bl	800174c <prvTraceGetEventGroupNumberHigh16>
 8008138:	4603      	mov	r3, r0
 800813a:	461a      	mov	r2, r3
 800813c:	4b1d      	ldr	r3, [pc, #116]	; (80081b4 <xEventGroupWaitBits+0x2bc>)
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	4013      	ands	r3, r2
 8008142:	b29b      	uxth	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d02f      	beq.n	80081a8 <xEventGroupWaitBits+0x2b0>
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7f9 faf2 	bl	8001732 <prvTraceGetEventGroupNumberLow16>
 800814e:	4603      	mov	r3, r0
 8008150:	b2db      	uxtb	r3, r3
 8008152:	461a      	mov	r2, r3
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2106      	movs	r1, #6
 8008158:	20cd      	movs	r0, #205	; 0xcd
 800815a:	f7f9 fe75 	bl	8001e48 <prvTraceStoreKernelCallWithParam>
 800815e:	e023      	b.n	80081a8 <xEventGroupWaitBits+0x2b0>
 8008160:	f7f9 fb30 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8008164:	4603      	mov	r3, r0
 8008166:	4618      	mov	r0, r3
 8008168:	f7f9 fa42 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800816c:	4603      	mov	r3, r0
 800816e:	461a      	mov	r2, r3
 8008170:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <xEventGroupWaitBits+0x2bc>)
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	4013      	ands	r3, r2
 8008176:	b29b      	uxth	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d015      	beq.n	80081a8 <xEventGroupWaitBits+0x2b0>
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7f9 fae5 	bl	800174c <prvTraceGetEventGroupNumberHigh16>
 8008182:	4603      	mov	r3, r0
 8008184:	461a      	mov	r2, r3
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <xEventGroupWaitBits+0x2bc>)
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	4013      	ands	r3, r2
 800818c:	b29b      	uxth	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <xEventGroupWaitBits+0x2b0>
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f7f9 facd 	bl	8001732 <prvTraceGetEventGroupNumberLow16>
 8008198:	4603      	mov	r3, r0
 800819a:	b2db      	uxtb	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2106      	movs	r1, #6
 80081a2:	20c7      	movs	r0, #199	; 0xc7
 80081a4:	f7f9 fe50 	bl	8001e48 <prvTraceStoreKernelCallWithParam>

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80081a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3740      	adds	r7, #64	; 0x40
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	2000000a 	.word	0x2000000a
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08e      	sub	sp, #56	; 0x38
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80081c6:	2300      	movs	r3, #0
 80081c8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80081ce:	2300      	movs	r3, #0
 80081d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10c      	bne.n	80081f2 <xEventGroupSetBits+0x36>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	b672      	cpsid	i
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	b662      	cpsie	i
 80081ec:	613b      	str	r3, [r7, #16]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00c      	beq.n	8008216 <xEventGroupSetBits+0x5a>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	b672      	cpsid	i
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	b662      	cpsie	i
 8008210:	60fb      	str	r3, [r7, #12]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	3304      	adds	r3, #4
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	3308      	adds	r3, #8
 8008220:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008222:	f001 fe8b 	bl	8009f3c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 8008226:	f7f9 facd 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800822a:	4603      	mov	r3, r0
 800822c:	4618      	mov	r0, r3
 800822e:	f7f9 f9df 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8008232:	4603      	mov	r3, r0
 8008234:	461a      	mov	r2, r3
 8008236:	4b3b      	ldr	r3, [pc, #236]	; (8008324 <xEventGroupSetBits+0x168>)
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	4013      	ands	r3, r2
 800823c:	b29b      	uxth	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d015      	beq.n	800826e <xEventGroupSetBits+0xb2>
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7f9 fa82 	bl	800174c <prvTraceGetEventGroupNumberHigh16>
 8008248:	4603      	mov	r3, r0
 800824a:	461a      	mov	r2, r3
 800824c:	4b35      	ldr	r3, [pc, #212]	; (8008324 <xEventGroupSetBits+0x168>)
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	4013      	ands	r3, r2
 8008252:	b29b      	uxth	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <xEventGroupSetBits+0xb2>
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7f9 fa6a 	bl	8001732 <prvTraceGetEventGroupNumberLow16>
 800825e:	4603      	mov	r3, r0
 8008260:	b2db      	uxtb	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2106      	movs	r1, #6
 8008268:	20ca      	movs	r0, #202	; 0xca
 800826a:	f7f9 fded 	bl	8001e48 <prvTraceStoreKernelCallWithParam>

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	431a      	orrs	r2, r3
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008280:	e03c      	b.n	80082fc <xEventGroupSetBits+0x140>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800828e:	2300      	movs	r3, #0
 8008290:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008298:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082a0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d108      	bne.n	80082be <xEventGroupSetBits+0x102>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80082ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	4013      	ands	r3, r2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <xEventGroupSetBits+0x114>
				{
					xMatchFound = pdTRUE;
 80082b8:	2301      	movs	r3, #1
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082bc:	e008      	b.n	80082d0 <xEventGroupSetBits+0x114>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	4013      	ands	r3, r2
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d101      	bne.n	80082d0 <xEventGroupSetBits+0x114>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80082cc:	2301      	movs	r3, #1
 80082ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d010      	beq.n	80082f8 <xEventGroupSetBits+0x13c>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <xEventGroupSetBits+0x12c>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80082e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082f0:	4619      	mov	r1, r3
 80082f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80082f4:	f002 f982 	bl	800a5fc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80082fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	429a      	cmp	r2, r3
 8008302:	d1be      	bne.n	8008282 <xEventGroupSetBits+0xc6>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	43db      	mvns	r3, r3
 800830c:	401a      	ands	r2, r3
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008312:	f001 fe21 	bl	8009f58 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	681b      	ldr	r3, [r3, #0]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3738      	adds	r7, #56	; 0x38
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	2000000a 	.word	0x2000000a

08008328 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff ff41 	bl	80081bc <xEventGroupSetBits>
}
 800833a:	bf00      	nop
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8008342:	b480      	push	{r7}
 8008344:	b087      	sub	sp, #28
 8008346:	af00      	add	r7, sp, #0
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800834e:	2300      	movs	r3, #0
 8008350:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d107      	bne.n	8008368 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	4013      	ands	r3, r2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008362:	2301      	movs	r3, #1
 8008364:	617b      	str	r3, [r7, #20]
 8008366:	e007      	b.n	8008378 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	4013      	ands	r3, r2
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	429a      	cmp	r2, r3
 8008372:	d101      	bne.n	8008378 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008374:	2301      	movs	r3, #1
 8008376:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008378:	697b      	ldr	r3, [r7, #20]
}
 800837a:	4618      	mov	r0, r3
 800837c:	371c      	adds	r7, #28
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
	...

08008388 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7f9 f9d9 	bl	800174c <prvTraceGetEventGroupNumberHigh16>
 800839a:	4603      	mov	r3, r0
 800839c:	461a      	mov	r2, r3
 800839e:	4b10      	ldr	r3, [pc, #64]	; (80083e0 <xEventGroupSetBitsFromISR+0x58>)
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	4013      	ands	r3, r2
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00a      	beq.n	80083c0 <xEventGroupSetBitsFromISR+0x38>
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7f9 f9c1 	bl	8001732 <prvTraceGetEventGroupNumberLow16>
 80083b0:	4603      	mov	r3, r0
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2106      	movs	r1, #6
 80083ba:	20ce      	movs	r0, #206	; 0xce
 80083bc:	f7f9 fd44 	bl	8001e48 <prvTraceStoreKernelCallWithParam>
 80083c0:	4b08      	ldr	r3, [pc, #32]	; (80083e4 <xEventGroupSetBitsFromISR+0x5c>)
 80083c2:	2201      	movs	r2, #1
 80083c4:	601a      	str	r2, [r3, #0]
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	68f9      	ldr	r1, [r7, #12]
 80083cc:	4806      	ldr	r0, [pc, #24]	; (80083e8 <xEventGroupSetBitsFromISR+0x60>)
 80083ce:	f003 f8e1 	bl	800b594 <xTimerPendFunctionCallFromISR>
 80083d2:	6178      	str	r0, [r7, #20]

		return xReturn;
 80083d4:	697b      	ldr	r3, [r7, #20]
	}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	2000000a 	.word	0x2000000a
 80083e4:	200024a0 	.word	0x200024a0
 80083e8:	08008329 	.word	0x08008329

080083ec <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if (configUSE_TRACE_FACILITY == 1)

	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	UBaseType_t xReturn;
	EventGroup_t const *pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	60bb      	str	r3, [r7, #8]

		if( xEventGroup == NULL )
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <uxEventGroupGetNumber+0x18>
		{
			xReturn = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	e002      	b.n	800840a <uxEventGroupGetNumber+0x1e>
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800840a:	68fb      	ldr	r3, [r7, #12]
	}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <vEventGroupSetNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
	{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	619a      	str	r2, [r3, #24]
	}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f103 0208 	add.w	r2, r3, #8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f103 0208 	add.w	r2, r3, #8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f103 0208 	add.w	r2, r3, #8
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	601a      	str	r2, [r3, #0]
}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ec:	d103      	bne.n	80084f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	e00c      	b.n	8008510 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3308      	adds	r3, #8
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e002      	b.n	8008504 <vListInsert+0x2e>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	429a      	cmp	r2, r3
 800850e:	d2f6      	bcs.n	80084fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	601a      	str	r2, [r3, #0]
}
 800853c:	bf00      	nop
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6892      	ldr	r2, [r2, #8]
 800855e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6852      	ldr	r2, [r2, #4]
 8008568:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d103      	bne.n	800857c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	1e5a      	subs	r2, r3, #1
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10c      	bne.n	80085ca <xQueueGenericReset+0x2e>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	b672      	cpsid	i
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	b662      	cpsie	i
 80085c4:	60bb      	str	r3, [r7, #8]
}
 80085c6:	bf00      	nop
 80085c8:	e7fe      	b.n	80085c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80085ca:	f003 f931 	bl	800b830 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085da:	fb01 f303 	mul.w	r3, r1, r3
 80085de:	441a      	add	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fa:	3b01      	subs	r3, #1
 80085fc:	68f9      	ldr	r1, [r7, #12]
 80085fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008600:	fb01 f303 	mul.w	r3, r1, r3
 8008604:	441a      	add	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	22ff      	movs	r2, #255	; 0xff
 800860e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	22ff      	movs	r2, #255	; 0xff
 8008616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d114      	bne.n	800864a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01a      	beq.n	800865e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3310      	adds	r3, #16
 800862c:	4618      	mov	r0, r3
 800862e:	f001 ff7f 	bl	800a530 <xTaskRemoveFromEventList>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d012      	beq.n	800865e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008638:	4b0c      	ldr	r3, [pc, #48]	; (800866c <xQueueGenericReset+0xd0>)
 800863a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	e009      	b.n	800865e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3310      	adds	r3, #16
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fef0 	bl	8008434 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3324      	adds	r3, #36	; 0x24
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff feeb 	bl	8008434 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800865e:	f003 f91b 	bl	800b898 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008662:	2301      	movs	r3, #1
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	e000ed04 	.word	0xe000ed04

08008670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08e      	sub	sp, #56	; 0x38
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10c      	bne.n	800869e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	b672      	cpsid	i
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	b662      	cpsie	i
 8008698:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10c      	bne.n	80086be <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	b672      	cpsid	i
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	b662      	cpsie	i
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <xQueueGenericCreateStatic+0x5a>
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <xQueueGenericCreateStatic+0x5e>
 80086ca:	2301      	movs	r3, #1
 80086cc:	e000      	b.n	80086d0 <xQueueGenericCreateStatic+0x60>
 80086ce:	2300      	movs	r3, #0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10c      	bne.n	80086ee <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	b672      	cpsid	i
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	b662      	cpsie	i
 80086e8:	623b      	str	r3, [r7, #32]
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d102      	bne.n	80086fa <xQueueGenericCreateStatic+0x8a>
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <xQueueGenericCreateStatic+0x8e>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e000      	b.n	8008700 <xQueueGenericCreateStatic+0x90>
 80086fe:	2300      	movs	r3, #0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10c      	bne.n	800871e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	b672      	cpsid	i
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	b662      	cpsie	i
 8008718:	61fb      	str	r3, [r7, #28]
}
 800871a:	bf00      	nop
 800871c:	e7fe      	b.n	800871c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800871e:	2350      	movs	r3, #80	; 0x50
 8008720:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b50      	cmp	r3, #80	; 0x50
 8008726:	d00c      	beq.n	8008742 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	b672      	cpsid	i
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	b662      	cpsie	i
 800873c:	61bb      	str	r3, [r7, #24]
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008742:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00e      	beq.n	800876c <xQueueGenericCreateStatic+0xfc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008756:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	4613      	mov	r3, r2
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 f881 	bl	800886c <prvInitialiseNewQueue>
 800876a:	e017      	b.n	800879c <xQueueGenericCreateStatic+0x12c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800876c:	f7f9 f82a 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8008770:	4603      	mov	r3, r0
 8008772:	4618      	mov	r0, r3
 8008774:	f7f8 ff3c 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8008778:	4603      	mov	r3, r0
 800877a:	461a      	mov	r2, r3
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <xQueueGenericCreateStatic+0x138>)
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	4013      	ands	r3, r2
 8008782:	b29b      	uxth	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d009      	beq.n	800879c <xQueueGenericCreateStatic+0x12c>
 8008788:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800878c:	4a07      	ldr	r2, [pc, #28]	; (80087ac <xQueueGenericCreateStatic+0x13c>)
 800878e:	5cd3      	ldrb	r3, [r2, r3]
 8008790:	3340      	adds	r3, #64	; 0x40
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2100      	movs	r1, #0
 8008796:	4618      	mov	r0, r3
 8008798:	f7f9 fc1c 	bl	8001fd4 <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800879e:	4618      	mov	r0, r3
 80087a0:	3730      	adds	r7, #48	; 0x30
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	2000000a 	.word	0x2000000a
 80087ac:	20000004 	.word	0x20000004

080087b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08a      	sub	sp, #40	; 0x28
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	4613      	mov	r3, r2
 80087bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10c      	bne.n	80087de <xQueueGenericCreate+0x2e>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	b672      	cpsid	i
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	b662      	cpsie	i
 80087d8:	613b      	str	r3, [r7, #16]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d102      	bne.n	80087ea <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	e004      	b.n	80087f4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	fb02 f303 	mul.w	r3, r2, r3
 80087f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	3350      	adds	r3, #80	; 0x50
 80087f8:	4618      	mov	r0, r3
 80087fa:	f003 f943 	bl	800ba84 <pvPortMalloc>
 80087fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d012      	beq.n	800882c <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	3350      	adds	r3, #80	; 0x50
 800880e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008818:	79fa      	ldrb	r2, [r7, #7]
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	4613      	mov	r3, r2
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f821 	bl	800886c <prvInitialiseNewQueue>
 800882a:	e016      	b.n	800885a <xQueueGenericCreate+0xaa>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800882c:	f7f8 ffca 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8008830:	4603      	mov	r3, r0
 8008832:	4618      	mov	r0, r3
 8008834:	f7f8 fedc 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8008838:	4603      	mov	r3, r0
 800883a:	461a      	mov	r2, r3
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <xQueueGenericCreate+0xb4>)
 800883e:	881b      	ldrh	r3, [r3, #0]
 8008840:	4013      	ands	r3, r2
 8008842:	b29b      	uxth	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d008      	beq.n	800885a <xQueueGenericCreate+0xaa>
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	4a07      	ldr	r2, [pc, #28]	; (8008868 <xQueueGenericCreate+0xb8>)
 800884c:	5cd3      	ldrb	r3, [r2, r3]
 800884e:	3340      	adds	r3, #64	; 0x40
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f7f9 fbbd 	bl	8001fd4 <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800885a:	69bb      	ldr	r3, [r7, #24]
	}
 800885c:	4618      	mov	r0, r3
 800885e:	3720      	adds	r7, #32
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	2000000a 	.word	0x2000000a
 8008868:	20000004 	.word	0x20000004

0800886c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800886c:	b5b0      	push	{r4, r5, r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d103      	bne.n	8008888 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	6a3a      	ldr	r2, [r7, #32]
 8008884:	601a      	str	r2, [r3, #0]
 8008886:	e002      	b.n	800888e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800889a:	2101      	movs	r1, #1
 800889c:	6a38      	ldr	r0, [r7, #32]
 800889e:	f7ff fe7d 	bl	800859c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	78fa      	ldrb	r2, [r7, #3]
 80088a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80088aa:	6a38      	ldr	r0, [r7, #32]
 80088ac:	f7f8 fe87 	bl	80015be <prvTraceGetQueueType>
 80088b0:	4603      	mov	r3, r0
 80088b2:	461a      	mov	r2, r3
 80088b4:	4b34      	ldr	r3, [pc, #208]	; (8008988 <prvInitialiseNewQueue+0x11c>)
 80088b6:	5c9b      	ldrb	r3, [r3, r2]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7f9 ffc9 	bl	8002850 <prvTraceGetObjectHandle>
 80088be:	4603      	mov	r3, r0
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	4619      	mov	r1, r3
 80088c4:	6a38      	ldr	r0, [r7, #32]
 80088c6:	f7f8 feeb 	bl	80016a0 <prvTraceSetQueueNumberLow16>
 80088ca:	4b30      	ldr	r3, [pc, #192]	; (800898c <prvInitialiseNewQueue+0x120>)
 80088cc:	881b      	ldrh	r3, [r3, #0]
 80088ce:	4619      	mov	r1, r3
 80088d0:	6a38      	ldr	r0, [r7, #32]
 80088d2:	f7f8 fefd 	bl	80016d0 <prvTraceSetQueueNumberHigh16>
 80088d6:	6a38      	ldr	r0, [r7, #32]
 80088d8:	f7f8 fe71 	bl	80015be <prvTraceGetQueueType>
 80088dc:	4603      	mov	r3, r0
 80088de:	461a      	mov	r2, r3
 80088e0:	4b29      	ldr	r3, [pc, #164]	; (8008988 <prvInitialiseNewQueue+0x11c>)
 80088e2:	5c9c      	ldrb	r4, [r3, r2]
 80088e4:	6a38      	ldr	r0, [r7, #32]
 80088e6:	f7f8 febf 	bl	8001668 <prvTraceGetQueueNumberLow16>
 80088ea:	4603      	mov	r3, r0
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	4619      	mov	r1, r3
 80088f0:	4620      	mov	r0, r4
 80088f2:	f7fa f8ab 	bl	8002a4c <prvMarkObjectAsUsed>
 80088f6:	f7f8 ff65 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 80088fa:	4603      	mov	r3, r0
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7f8 fe77 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8008902:	4603      	mov	r3, r0
 8008904:	461a      	mov	r2, r3
 8008906:	4b22      	ldr	r3, [pc, #136]	; (8008990 <prvInitialiseNewQueue+0x124>)
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	4013      	ands	r3, r2
 800890c:	b29b      	uxth	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d025      	beq.n	800895e <prvInitialiseNewQueue+0xf2>
 8008912:	6a38      	ldr	r0, [r7, #32]
 8008914:	f7f8 feb5 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 8008918:	4603      	mov	r3, r0
 800891a:	461a      	mov	r2, r3
 800891c:	4b1c      	ldr	r3, [pc, #112]	; (8008990 <prvInitialiseNewQueue+0x124>)
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	4013      	ands	r3, r2
 8008922:	b29b      	uxth	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d01a      	beq.n	800895e <prvInitialiseNewQueue+0xf2>
 8008928:	6a38      	ldr	r0, [r7, #32]
 800892a:	f7f8 fe48 	bl	80015be <prvTraceGetQueueType>
 800892e:	4603      	mov	r3, r0
 8008930:	461a      	mov	r2, r3
 8008932:	4b15      	ldr	r3, [pc, #84]	; (8008988 <prvInitialiseNewQueue+0x11c>)
 8008934:	5c9b      	ldrb	r3, [r3, r2]
 8008936:	3318      	adds	r3, #24
 8008938:	b2db      	uxtb	r3, r3
 800893a:	461d      	mov	r5, r3
 800893c:	6a38      	ldr	r0, [r7, #32]
 800893e:	f7f8 fe3e 	bl	80015be <prvTraceGetQueueType>
 8008942:	4603      	mov	r3, r0
 8008944:	461a      	mov	r2, r3
 8008946:	4b10      	ldr	r3, [pc, #64]	; (8008988 <prvInitialiseNewQueue+0x11c>)
 8008948:	5c9c      	ldrb	r4, [r3, r2]
 800894a:	6a38      	ldr	r0, [r7, #32]
 800894c:	f7f8 fe8c 	bl	8001668 <prvTraceGetQueueNumberLow16>
 8008950:	4603      	mov	r3, r0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	461a      	mov	r2, r3
 8008956:	4621      	mov	r1, r4
 8008958:	4628      	mov	r0, r5
 800895a:	f7f9 f9f7 	bl	8001d4c <prvTraceStoreKernelCall>
 800895e:	6a38      	ldr	r0, [r7, #32]
 8008960:	f7f8 fe2d 	bl	80015be <prvTraceGetQueueType>
 8008964:	4603      	mov	r3, r0
 8008966:	461a      	mov	r2, r3
 8008968:	4b07      	ldr	r3, [pc, #28]	; (8008988 <prvInitialiseNewQueue+0x11c>)
 800896a:	5c9c      	ldrb	r4, [r3, r2]
 800896c:	6a38      	ldr	r0, [r7, #32]
 800896e:	f7f8 fe7b 	bl	8001668 <prvTraceGetQueueNumberLow16>
 8008972:	4603      	mov	r3, r0
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2200      	movs	r2, #0
 8008978:	4619      	mov	r1, r3
 800897a:	4620      	mov	r0, r4
 800897c:	f7f9 fd36 	bl	80023ec <prvTraceSetObjectState>
}
 8008980:	bf00      	nop
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bdb0      	pop	{r4, r5, r7, pc}
 8008988:	20000004 	.word	0x20000004
 800898c:	2000000c 	.word	0x2000000c
 8008990:	2000000a 	.word	0x2000000a

08008994 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008994:	b5b0      	push	{r4, r5, r7, lr}
 8008996:	b08e      	sub	sp, #56	; 0x38
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089a2:	2300      	movs	r3, #0
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10c      	bne.n	80089ca <xQueueGenericSend+0x36>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	b672      	cpsid	i
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	b662      	cpsie	i
 80089c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d103      	bne.n	80089d8 <xQueueGenericSend+0x44>
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <xQueueGenericSend+0x48>
 80089d8:	2301      	movs	r3, #1
 80089da:	e000      	b.n	80089de <xQueueGenericSend+0x4a>
 80089dc:	2300      	movs	r3, #0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10c      	bne.n	80089fc <xQueueGenericSend+0x68>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	b672      	cpsid	i
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	b662      	cpsie	i
 80089f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089f8:	bf00      	nop
 80089fa:	e7fe      	b.n	80089fa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d103      	bne.n	8008a0a <xQueueGenericSend+0x76>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <xQueueGenericSend+0x7a>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <xQueueGenericSend+0x7c>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10c      	bne.n	8008a2e <xQueueGenericSend+0x9a>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a18:	b672      	cpsid	i
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	b662      	cpsie	i
 8008a28:	623b      	str	r3, [r7, #32]
}
 8008a2a:	bf00      	nop
 8008a2c:	e7fe      	b.n	8008a2c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a2e:	f001 ffe9 	bl	800aa04 <xTaskGetSchedulerState>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <xQueueGenericSend+0xaa>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <xQueueGenericSend+0xae>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e000      	b.n	8008a44 <xQueueGenericSend+0xb0>
 8008a42:	2300      	movs	r3, #0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10c      	bne.n	8008a62 <xQueueGenericSend+0xce>
	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	b672      	cpsid	i
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	b662      	cpsie	i
 8008a5c:	61fb      	str	r3, [r7, #28]
}
 8008a5e:	bf00      	nop
 8008a60:	e7fe      	b.n	8008a60 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a62:	f002 fee5 	bl	800b830 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d303      	bcc.n	8008a7a <xQueueGenericSend+0xe6>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	f040 8084 	bne.w	8008b82 <xQueueGenericSend+0x1ee>
			{
				traceQUEUE_SEND( pxQueue );
 8008a7a:	f7f8 fea3 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7f8 fdb5 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8008a86:	4603      	mov	r3, r0
 8008a88:	461a      	mov	r2, r3
 8008a8a:	4ba6      	ldr	r3, [pc, #664]	; (8008d24 <xQueueGenericSend+0x390>)
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d02a      	beq.n	8008aec <xQueueGenericSend+0x158>
 8008a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a98:	f7f8 fdf3 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	4ba0      	ldr	r3, [pc, #640]	; (8008d24 <xQueueGenericSend+0x390>)
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d01f      	beq.n	8008aec <xQueueGenericSend+0x158>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10a      	bne.n	8008ac8 <xQueueGenericSend+0x134>
 8008ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ab4:	f7f8 fd83 	bl	80015be <prvTraceGetQueueType>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	461a      	mov	r2, r3
 8008abc:	4b9a      	ldr	r3, [pc, #616]	; (8008d28 <xQueueGenericSend+0x394>)
 8008abe:	5c9b      	ldrb	r3, [r3, r2]
 8008ac0:	3320      	adds	r3, #32
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	461d      	mov	r5, r3
 8008ac6:	e000      	b.n	8008aca <xQueueGenericSend+0x136>
 8008ac8:	2525      	movs	r5, #37	; 0x25
 8008aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008acc:	f7f8 fd77 	bl	80015be <prvTraceGetQueueType>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	4b94      	ldr	r3, [pc, #592]	; (8008d28 <xQueueGenericSend+0x394>)
 8008ad6:	5c9c      	ldrb	r4, [r3, r2]
 8008ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ada:	f7f8 fdc5 	bl	8001668 <prvTraceGetQueueNumberLow16>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f7f9 f930 	bl	8001d4c <prvTraceStoreKernelCall>
 8008aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aee:	f7f8 fd66 	bl	80015be <prvTraceGetQueueType>
 8008af2:	4603      	mov	r3, r0
 8008af4:	461a      	mov	r2, r3
 8008af6:	4b8c      	ldr	r3, [pc, #560]	; (8008d28 <xQueueGenericSend+0x394>)
 8008af8:	5c9c      	ldrb	r4, [r3, r2]
 8008afa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008afc:	f7f8 fdb4 	bl	8001668 <prvTraceGetQueueNumberLow16>
 8008b00:	4603      	mov	r3, r0
 8008b02:	b2dd      	uxtb	r5, r3
 8008b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b06:	f7f8 fd5a 	bl	80015be <prvTraceGetQueueType>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	4b86      	ldr	r3, [pc, #536]	; (8008d28 <xQueueGenericSend+0x394>)
 8008b10:	5c9b      	ldrb	r3, [r3, r2]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d005      	beq.n	8008b22 <xQueueGenericSend+0x18e>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	e000      	b.n	8008b24 <xQueueGenericSend+0x190>
 8008b22:	2300      	movs	r3, #0
 8008b24:	461a      	mov	r2, r3
 8008b26:	4629      	mov	r1, r5
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f7f9 fc5f 	bl	80023ec <prvTraceSetObjectState>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	68b9      	ldr	r1, [r7, #8]
 8008b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b34:	f000 fd71 	bl	800961a <prvCopyDataToQueue>
 8008b38:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d010      	beq.n	8008b64 <xQueueGenericSend+0x1d0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	3324      	adds	r3, #36	; 0x24
 8008b46:	4618      	mov	r0, r3
 8008b48:	f001 fcf2 	bl	800a530 <xTaskRemoveFromEventList>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d013      	beq.n	8008b7a <xQueueGenericSend+0x1e6>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b52:	4b76      	ldr	r3, [pc, #472]	; (8008d2c <xQueueGenericSend+0x398>)
 8008b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	e00a      	b.n	8008b7a <xQueueGenericSend+0x1e6>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d007      	beq.n	8008b7a <xQueueGenericSend+0x1e6>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b6a:	4b70      	ldr	r3, [pc, #448]	; (8008d2c <xQueueGenericSend+0x398>)
 8008b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b7a:	f002 fe8d 	bl	800b898 <vPortExitCritical>
				return pdPASS;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e115      	b.n	8008dae <xQueueGenericSend+0x41a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d13c      	bne.n	8008c02 <xQueueGenericSend+0x26e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b88:	f002 fe86 	bl	800b898 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8008b8c:	f7f8 fe1a 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8008b90:	4603      	mov	r3, r0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7f8 fd2c 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	4b61      	ldr	r3, [pc, #388]	; (8008d24 <xQueueGenericSend+0x390>)
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d02a      	beq.n	8008bfe <xQueueGenericSend+0x26a>
 8008ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008baa:	f7f8 fd6a 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4b5c      	ldr	r3, [pc, #368]	; (8008d24 <xQueueGenericSend+0x390>)
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d01f      	beq.n	8008bfe <xQueueGenericSend+0x26a>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10a      	bne.n	8008bda <xQueueGenericSend+0x246>
 8008bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bc6:	f7f8 fcfa 	bl	80015be <prvTraceGetQueueType>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	461a      	mov	r2, r3
 8008bce:	4b56      	ldr	r3, [pc, #344]	; (8008d28 <xQueueGenericSend+0x394>)
 8008bd0:	5c9b      	ldrb	r3, [r3, r2]
 8008bd2:	3348      	adds	r3, #72	; 0x48
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	461d      	mov	r5, r3
 8008bd8:	e000      	b.n	8008bdc <xQueueGenericSend+0x248>
 8008bda:	254d      	movs	r5, #77	; 0x4d
 8008bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bde:	f7f8 fcee 	bl	80015be <prvTraceGetQueueType>
 8008be2:	4603      	mov	r3, r0
 8008be4:	461a      	mov	r2, r3
 8008be6:	4b50      	ldr	r3, [pc, #320]	; (8008d28 <xQueueGenericSend+0x394>)
 8008be8:	5c9c      	ldrb	r4, [r3, r2]
 8008bea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bec:	f7f8 fd3c 	bl	8001668 <prvTraceGetQueueNumberLow16>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f7f9 f8a7 	bl	8001d4c <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e0d5      	b.n	8008dae <xQueueGenericSend+0x41a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d106      	bne.n	8008c16 <xQueueGenericSend+0x282>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c08:	f107 0314 	add.w	r3, r7, #20
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f001 fd5b 	bl	800a6c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c12:	2301      	movs	r3, #1
 8008c14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c16:	f002 fe3f 	bl	800b898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c1a:	f001 f98f 	bl	8009f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c1e:	f002 fe07 	bl	800b830 <vPortEnterCritical>
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c28:	b25b      	sxtb	r3, r3
 8008c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2e:	d103      	bne.n	8008c38 <xQueueGenericSend+0x2a4>
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c3e:	b25b      	sxtb	r3, r3
 8008c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c44:	d103      	bne.n	8008c4e <xQueueGenericSend+0x2ba>
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c4e:	f002 fe23 	bl	800b898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c52:	1d3a      	adds	r2, r7, #4
 8008c54:	f107 0314 	add.w	r3, r7, #20
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 fd4a 	bl	800a6f4 <xTaskCheckForTimeOut>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d164      	bne.n	8008d30 <xQueueGenericSend+0x39c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c68:	f000 fdcf 	bl	800980a <prvIsQueueFull>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d051      	beq.n	8008d16 <xQueueGenericSend+0x382>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8008c72:	f7f8 fda7 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8008c76:	4603      	mov	r3, r0
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7f8 fcb9 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	461a      	mov	r2, r3
 8008c82:	4b28      	ldr	r3, [pc, #160]	; (8008d24 <xQueueGenericSend+0x390>)
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	4013      	ands	r3, r2
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d02a      	beq.n	8008ce4 <xQueueGenericSend+0x350>
 8008c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c90:	f7f8 fcf7 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 8008c94:	4603      	mov	r3, r0
 8008c96:	461a      	mov	r2, r3
 8008c98:	4b22      	ldr	r3, [pc, #136]	; (8008d24 <xQueueGenericSend+0x390>)
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d01f      	beq.n	8008ce4 <xQueueGenericSend+0x350>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10a      	bne.n	8008cc0 <xQueueGenericSend+0x32c>
 8008caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cac:	f7f8 fc87 	bl	80015be <prvTraceGetQueueType>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	4b1c      	ldr	r3, [pc, #112]	; (8008d28 <xQueueGenericSend+0x394>)
 8008cb6:	5c9b      	ldrb	r3, [r3, r2]
 8008cb8:	3370      	adds	r3, #112	; 0x70
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	461d      	mov	r5, r3
 8008cbe:	e000      	b.n	8008cc2 <xQueueGenericSend+0x32e>
 8008cc0:	2575      	movs	r5, #117	; 0x75
 8008cc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cc4:	f7f8 fc7b 	bl	80015be <prvTraceGetQueueType>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	4b16      	ldr	r3, [pc, #88]	; (8008d28 <xQueueGenericSend+0x394>)
 8008cce:	5c9c      	ldrb	r4, [r3, r2]
 8008cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cd2:	f7f8 fcc9 	bl	8001668 <prvTraceGetQueueNumberLow16>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4621      	mov	r1, r4
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f7f9 f834 	bl	8001d4c <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	3310      	adds	r3, #16
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	4611      	mov	r1, r2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 fb4f 	bl	800a390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008cf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cf4:	f000 fd21 	bl	800973a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008cf8:	f001 f92e 	bl	8009f58 <xTaskResumeAll>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f47f aeaf 	bne.w	8008a62 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008d04:	4b09      	ldr	r3, [pc, #36]	; (8008d2c <xQueueGenericSend+0x398>)
 8008d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	e6a5      	b.n	8008a62 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d18:	f000 fd0f 	bl	800973a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d1c:	f001 f91c 	bl	8009f58 <xTaskResumeAll>
 8008d20:	e69f      	b.n	8008a62 <xQueueGenericSend+0xce>
 8008d22:	bf00      	nop
 8008d24:	2000000a 	.word	0x2000000a
 8008d28:	20000004 	.word	0x20000004
 8008d2c:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d32:	f000 fd02 	bl	800973a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d36:	f001 f90f 	bl	8009f58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8008d3a:	f7f8 fd43 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7f8 fc55 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8008d46:	4603      	mov	r3, r0
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4b1b      	ldr	r3, [pc, #108]	; (8008db8 <xQueueGenericSend+0x424>)
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d02a      	beq.n	8008dac <xQueueGenericSend+0x418>
 8008d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d58:	f7f8 fc93 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	461a      	mov	r2, r3
 8008d60:	4b15      	ldr	r3, [pc, #84]	; (8008db8 <xQueueGenericSend+0x424>)
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	4013      	ands	r3, r2
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01f      	beq.n	8008dac <xQueueGenericSend+0x418>
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10a      	bne.n	8008d88 <xQueueGenericSend+0x3f4>
 8008d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d74:	f7f8 fc23 	bl	80015be <prvTraceGetQueueType>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4b0f      	ldr	r3, [pc, #60]	; (8008dbc <xQueueGenericSend+0x428>)
 8008d7e:	5c9b      	ldrb	r3, [r3, r2]
 8008d80:	3348      	adds	r3, #72	; 0x48
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	461d      	mov	r5, r3
 8008d86:	e000      	b.n	8008d8a <xQueueGenericSend+0x3f6>
 8008d88:	254d      	movs	r5, #77	; 0x4d
 8008d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d8c:	f7f8 fc17 	bl	80015be <prvTraceGetQueueType>
 8008d90:	4603      	mov	r3, r0
 8008d92:	461a      	mov	r2, r3
 8008d94:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <xQueueGenericSend+0x428>)
 8008d96:	5c9c      	ldrb	r4, [r3, r2]
 8008d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d9a:	f7f8 fc65 	bl	8001668 <prvTraceGetQueueNumberLow16>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	461a      	mov	r2, r3
 8008da4:	4621      	mov	r1, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	f7f8 ffd0 	bl	8001d4c <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 8008dac:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3738      	adds	r7, #56	; 0x38
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bdb0      	pop	{r4, r5, r7, pc}
 8008db6:	bf00      	nop
 8008db8:	2000000a 	.word	0x2000000a
 8008dbc:	20000004 	.word	0x20000004

08008dc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008dc0:	b5b0      	push	{r4, r5, r7, lr}
 8008dc2:	b08e      	sub	sp, #56	; 0x38
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10c      	bne.n	8008df2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	b672      	cpsid	i
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	b662      	cpsie	i
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dee:	bf00      	nop
 8008df0:	e7fe      	b.n	8008df0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d103      	bne.n	8008e00 <xQueueGenericSendFromISR+0x40>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <xQueueGenericSendFromISR+0x44>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e000      	b.n	8008e06 <xQueueGenericSendFromISR+0x46>
 8008e04:	2300      	movs	r3, #0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10c      	bne.n	8008e24 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	b672      	cpsid	i
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	b662      	cpsie	i
 8008e1e:	623b      	str	r3, [r7, #32]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d103      	bne.n	8008e32 <xQueueGenericSendFromISR+0x72>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d101      	bne.n	8008e36 <xQueueGenericSendFromISR+0x76>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e000      	b.n	8008e38 <xQueueGenericSendFromISR+0x78>
 8008e36:	2300      	movs	r3, #0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10c      	bne.n	8008e56 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	b672      	cpsid	i
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	b662      	cpsie	i
 8008e50:	61fb      	str	r3, [r7, #28]
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e56:	f002 fdd1 	bl	800b9fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e5a:	f3ef 8211 	mrs	r2, BASEPRI
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	b672      	cpsid	i
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	b662      	cpsie	i
 8008e72:	61ba      	str	r2, [r7, #24]
 8008e74:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e76:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d302      	bcc.n	8008e8c <xQueueGenericSendFromISR+0xcc>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d16c      	bne.n	8008f66 <xQueueGenericSendFromISR+0x1a6>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e98:	f7f8 fbf3 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	4b4d      	ldr	r3, [pc, #308]	; (8008fd8 <xQueueGenericSendFromISR+0x218>)
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01f      	beq.n	8008eec <xQueueGenericSendFromISR+0x12c>
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <xQueueGenericSendFromISR+0x108>
 8008eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eb4:	f7f8 fb83 	bl	80015be <prvTraceGetQueueType>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	461a      	mov	r2, r3
 8008ebc:	4b47      	ldr	r3, [pc, #284]	; (8008fdc <xQueueGenericSendFromISR+0x21c>)
 8008ebe:	5c9b      	ldrb	r3, [r3, r2]
 8008ec0:	3330      	adds	r3, #48	; 0x30
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	461d      	mov	r5, r3
 8008ec6:	e000      	b.n	8008eca <xQueueGenericSendFromISR+0x10a>
 8008ec8:	2535      	movs	r5, #53	; 0x35
 8008eca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ecc:	f7f8 fb77 	bl	80015be <prvTraceGetQueueType>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	4b41      	ldr	r3, [pc, #260]	; (8008fdc <xQueueGenericSendFromISR+0x21c>)
 8008ed6:	5c9c      	ldrb	r4, [r3, r2]
 8008ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eda:	f7f8 fbc5 	bl	8001668 <prvTraceGetQueueNumberLow16>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f7f8 ff30 	bl	8001d4c <prvTraceStoreKernelCall>
 8008eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eee:	f7f8 fb66 	bl	80015be <prvTraceGetQueueType>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	4b39      	ldr	r3, [pc, #228]	; (8008fdc <xQueueGenericSendFromISR+0x21c>)
 8008ef8:	5c9c      	ldrb	r4, [r3, r2]
 8008efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008efc:	f7f8 fbb4 	bl	8001668 <prvTraceGetQueueNumberLow16>
 8008f00:	4603      	mov	r3, r0
 8008f02:	b2d9      	uxtb	r1, r3
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	461a      	mov	r2, r3
 8008f10:	4620      	mov	r0, r4
 8008f12:	f7f9 fa6b 	bl	80023ec <prvTraceSetObjectState>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	68b9      	ldr	r1, [r7, #8]
 8008f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f1c:	f000 fb7d 	bl	800961a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f20:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d112      	bne.n	8008f50 <xQueueGenericSendFromISR+0x190>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d016      	beq.n	8008f60 <xQueueGenericSendFromISR+0x1a0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	3324      	adds	r3, #36	; 0x24
 8008f36:	4618      	mov	r0, r3
 8008f38:	f001 fafa 	bl	800a530 <xTaskRemoveFromEventList>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00e      	beq.n	8008f60 <xQueueGenericSendFromISR+0x1a0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00b      	beq.n	8008f60 <xQueueGenericSendFromISR+0x1a0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	e007      	b.n	8008f60 <xQueueGenericSendFromISR+0x1a0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f54:	3301      	adds	r3, #1
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	b25a      	sxtb	r2, r3
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f60:	2301      	movs	r3, #1
 8008f62:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008f64:	e02c      	b.n	8008fc0 <xQueueGenericSendFromISR+0x200>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f68:	f7f8 fb8b 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	461a      	mov	r2, r3
 8008f70:	4b19      	ldr	r3, [pc, #100]	; (8008fd8 <xQueueGenericSendFromISR+0x218>)
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	4013      	ands	r3, r2
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d01f      	beq.n	8008fbc <xQueueGenericSendFromISR+0x1fc>
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10a      	bne.n	8008f98 <xQueueGenericSendFromISR+0x1d8>
 8008f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f84:	f7f8 fb1b 	bl	80015be <prvTraceGetQueueType>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	4b13      	ldr	r3, [pc, #76]	; (8008fdc <xQueueGenericSendFromISR+0x21c>)
 8008f8e:	5c9b      	ldrb	r3, [r3, r2]
 8008f90:	3358      	adds	r3, #88	; 0x58
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	461d      	mov	r5, r3
 8008f96:	e000      	b.n	8008f9a <xQueueGenericSendFromISR+0x1da>
 8008f98:	255d      	movs	r5, #93	; 0x5d
 8008f9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f9c:	f7f8 fb0f 	bl	80015be <prvTraceGetQueueType>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <xQueueGenericSendFromISR+0x21c>)
 8008fa6:	5c9c      	ldrb	r4, [r3, r2]
 8008fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008faa:	f7f8 fb5d 	bl	8001668 <prvTraceGetQueueNumberLow16>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7f8 fec8 	bl	8001d4c <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8008fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008fca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3738      	adds	r7, #56	; 0x38
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	2000000a 	.word	0x2000000a
 8008fdc:	20000004 	.word	0x20000004

08008fe0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008fe0:	b5b0      	push	{r4, r5, r7, lr}
 8008fe2:	b08c      	sub	sp, #48	; 0x30
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fec:	2300      	movs	r3, #0
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10c      	bne.n	8009014 <xQueueReceive+0x34>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	b672      	cpsid	i
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	b662      	cpsie	i
 800900e:	623b      	str	r3, [r7, #32]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d103      	bne.n	8009022 <xQueueReceive+0x42>
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <xQueueReceive+0x46>
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <xQueueReceive+0x48>
 8009026:	2300      	movs	r3, #0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10c      	bne.n	8009046 <xQueueReceive+0x66>
	__asm volatile
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	b672      	cpsid	i
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	b662      	cpsie	i
 8009040:	61fb      	str	r3, [r7, #28]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009046:	f001 fcdd 	bl	800aa04 <xTaskGetSchedulerState>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d102      	bne.n	8009056 <xQueueReceive+0x76>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <xQueueReceive+0x7a>
 8009056:	2301      	movs	r3, #1
 8009058:	e000      	b.n	800905c <xQueueReceive+0x7c>
 800905a:	2300      	movs	r3, #0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10c      	bne.n	800907a <xQueueReceive+0x9a>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	b672      	cpsid	i
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	b662      	cpsie	i
 8009074:	61bb      	str	r3, [r7, #24]
}
 8009076:	bf00      	nop
 8009078:	e7fe      	b.n	8009078 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800907a:	f002 fbd9 	bl	800b830 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	2b00      	cmp	r3, #0
 8009088:	d07b      	beq.n	8009182 <xQueueReceive+0x1a2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800908a:	68b9      	ldr	r1, [r7, #8]
 800908c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800908e:	f000 fb2e 	bl	80096ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8009092:	f7f8 fb97 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8009096:	4603      	mov	r3, r0
 8009098:	4618      	mov	r0, r3
 800909a:	f7f8 faa9 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800909e:	4603      	mov	r3, r0
 80090a0:	461a      	mov	r2, r3
 80090a2:	4bac      	ldr	r3, [pc, #688]	; (8009354 <xQueueReceive+0x374>)
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	4013      	ands	r3, r2
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d025      	beq.n	80090fa <xQueueReceive+0x11a>
 80090ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090b0:	f7f8 fae7 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 80090b4:	4603      	mov	r3, r0
 80090b6:	461a      	mov	r2, r3
 80090b8:	4ba6      	ldr	r3, [pc, #664]	; (8009354 <xQueueReceive+0x374>)
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	4013      	ands	r3, r2
 80090be:	b29b      	uxth	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d01a      	beq.n	80090fa <xQueueReceive+0x11a>
 80090c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090c6:	f7f8 fa7a 	bl	80015be <prvTraceGetQueueType>
 80090ca:	4603      	mov	r3, r0
 80090cc:	461a      	mov	r2, r3
 80090ce:	4ba2      	ldr	r3, [pc, #648]	; (8009358 <xQueueReceive+0x378>)
 80090d0:	5c9b      	ldrb	r3, [r3, r2]
 80090d2:	3328      	adds	r3, #40	; 0x28
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	461d      	mov	r5, r3
 80090d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090da:	f7f8 fa70 	bl	80015be <prvTraceGetQueueType>
 80090de:	4603      	mov	r3, r0
 80090e0:	461a      	mov	r2, r3
 80090e2:	4b9d      	ldr	r3, [pc, #628]	; (8009358 <xQueueReceive+0x378>)
 80090e4:	5c9c      	ldrb	r4, [r3, r2]
 80090e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090e8:	f7f8 fabe 	bl	8001668 <prvTraceGetQueueNumberLow16>
 80090ec:	4603      	mov	r3, r0
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	461a      	mov	r2, r3
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7f8 fe29 	bl	8001d4c <prvTraceStoreKernelCall>
 80090fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090fc:	f7f8 fa5f 	bl	80015be <prvTraceGetQueueType>
 8009100:	4603      	mov	r3, r0
 8009102:	461a      	mov	r2, r3
 8009104:	4b94      	ldr	r3, [pc, #592]	; (8009358 <xQueueReceive+0x378>)
 8009106:	5c9c      	ldrb	r4, [r3, r2]
 8009108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800910a:	f7f8 faad 	bl	8001668 <prvTraceGetQueueNumberLow16>
 800910e:	4603      	mov	r3, r0
 8009110:	b2dd      	uxtb	r5, r3
 8009112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009114:	f7f8 fa53 	bl	80015be <prvTraceGetQueueType>
 8009118:	4603      	mov	r3, r0
 800911a:	461a      	mov	r2, r3
 800911c:	4b8e      	ldr	r3, [pc, #568]	; (8009358 <xQueueReceive+0x378>)
 800911e:	5c9b      	ldrb	r3, [r3, r2]
 8009120:	2b02      	cmp	r3, #2
 8009122:	d108      	bne.n	8009136 <xQueueReceive+0x156>
 8009124:	f7f8 fb4e 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8009128:	4603      	mov	r3, r0
 800912a:	4618      	mov	r0, r3
 800912c:	f7f8 fa53 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 8009130:	4603      	mov	r3, r0
 8009132:	b2db      	uxtb	r3, r3
 8009134:	e004      	b.n	8009140 <xQueueReceive+0x160>
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	b2db      	uxtb	r3, r3
 800913c:	3b01      	subs	r3, #1
 800913e:	b2db      	uxtb	r3, r3
 8009140:	461a      	mov	r2, r3
 8009142:	4629      	mov	r1, r5
 8009144:	4620      	mov	r0, r4
 8009146:	f7f9 f951 	bl	80023ec <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	1e5a      	subs	r2, r3, #1
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00f      	beq.n	800917a <xQueueReceive+0x19a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	3310      	adds	r3, #16
 800915e:	4618      	mov	r0, r3
 8009160:	f001 f9e6 	bl	800a530 <xTaskRemoveFromEventList>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d007      	beq.n	800917a <xQueueReceive+0x19a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800916a:	4b7c      	ldr	r3, [pc, #496]	; (800935c <xQueueReceive+0x37c>)
 800916c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800917a:	f002 fb8d 	bl	800b898 <vPortExitCritical>
				return pdPASS;
 800917e:	2301      	movs	r3, #1
 8009180:	e12f      	b.n	80093e2 <xQueueReceive+0x402>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d137      	bne.n	80091f8 <xQueueReceive+0x218>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009188:	f002 fb86 	bl	800b898 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800918c:	f7f8 fb1a 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8009190:	4603      	mov	r3, r0
 8009192:	4618      	mov	r0, r3
 8009194:	f7f8 fa2c 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8009198:	4603      	mov	r3, r0
 800919a:	461a      	mov	r2, r3
 800919c:	4b6d      	ldr	r3, [pc, #436]	; (8009354 <xQueueReceive+0x374>)
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	4013      	ands	r3, r2
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d025      	beq.n	80091f4 <xQueueReceive+0x214>
 80091a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091aa:	f7f8 fa6a 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 80091ae:	4603      	mov	r3, r0
 80091b0:	461a      	mov	r2, r3
 80091b2:	4b68      	ldr	r3, [pc, #416]	; (8009354 <xQueueReceive+0x374>)
 80091b4:	881b      	ldrh	r3, [r3, #0]
 80091b6:	4013      	ands	r3, r2
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d01a      	beq.n	80091f4 <xQueueReceive+0x214>
 80091be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091c0:	f7f8 f9fd 	bl	80015be <prvTraceGetQueueType>
 80091c4:	4603      	mov	r3, r0
 80091c6:	461a      	mov	r2, r3
 80091c8:	4b63      	ldr	r3, [pc, #396]	; (8009358 <xQueueReceive+0x378>)
 80091ca:	5c9b      	ldrb	r3, [r3, r2]
 80091cc:	3350      	adds	r3, #80	; 0x50
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	461d      	mov	r5, r3
 80091d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091d4:	f7f8 f9f3 	bl	80015be <prvTraceGetQueueType>
 80091d8:	4603      	mov	r3, r0
 80091da:	461a      	mov	r2, r3
 80091dc:	4b5e      	ldr	r3, [pc, #376]	; (8009358 <xQueueReceive+0x378>)
 80091de:	5c9c      	ldrb	r4, [r3, r2]
 80091e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091e2:	f7f8 fa41 	bl	8001668 <prvTraceGetQueueNumberLow16>
 80091e6:	4603      	mov	r3, r0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	461a      	mov	r2, r3
 80091ec:	4621      	mov	r1, r4
 80091ee:	4628      	mov	r0, r5
 80091f0:	f7f8 fdac 	bl	8001d4c <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 80091f4:	2300      	movs	r3, #0
 80091f6:	e0f4      	b.n	80093e2 <xQueueReceive+0x402>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d106      	bne.n	800920c <xQueueReceive+0x22c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091fe:	f107 0310 	add.w	r3, r7, #16
 8009202:	4618      	mov	r0, r3
 8009204:	f001 fa60 	bl	800a6c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009208:	2301      	movs	r3, #1
 800920a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800920c:	f002 fb44 	bl	800b898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009210:	f000 fe94 	bl	8009f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009214:	f002 fb0c 	bl	800b830 <vPortEnterCritical>
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800921e:	b25b      	sxtb	r3, r3
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009224:	d103      	bne.n	800922e <xQueueReceive+0x24e>
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009234:	b25b      	sxtb	r3, r3
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923a:	d103      	bne.n	8009244 <xQueueReceive+0x264>
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009244:	f002 fb28 	bl	800b898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009248:	1d3a      	adds	r2, r7, #4
 800924a:	f107 0310 	add.w	r3, r7, #16
 800924e:	4611      	mov	r1, r2
 8009250:	4618      	mov	r0, r3
 8009252:	f001 fa4f 	bl	800a6f4 <xTaskCheckForTimeOut>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	f040 8081 	bne.w	8009360 <xQueueReceive+0x380>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800925e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009260:	f000 fabd 	bl	80097de <prvIsQueueEmpty>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d06e      	beq.n	8009348 <xQueueReceive+0x368>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800926a:	f7f8 faab 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800926e:	4603      	mov	r3, r0
 8009270:	4618      	mov	r0, r3
 8009272:	f7f8 f9bd 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8009276:	4603      	mov	r3, r0
 8009278:	461a      	mov	r2, r3
 800927a:	4b36      	ldr	r3, [pc, #216]	; (8009354 <xQueueReceive+0x374>)
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	4013      	ands	r3, r2
 8009280:	b29b      	uxth	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d025      	beq.n	80092d2 <xQueueReceive+0x2f2>
 8009286:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009288:	f7f8 f9fb 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 800928c:	4603      	mov	r3, r0
 800928e:	461a      	mov	r2, r3
 8009290:	4b30      	ldr	r3, [pc, #192]	; (8009354 <xQueueReceive+0x374>)
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	4013      	ands	r3, r2
 8009296:	b29b      	uxth	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	d01a      	beq.n	80092d2 <xQueueReceive+0x2f2>
 800929c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800929e:	f7f8 f98e 	bl	80015be <prvTraceGetQueueType>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b2c      	ldr	r3, [pc, #176]	; (8009358 <xQueueReceive+0x378>)
 80092a8:	5c9b      	ldrb	r3, [r3, r2]
 80092aa:	3368      	adds	r3, #104	; 0x68
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	461d      	mov	r5, r3
 80092b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092b2:	f7f8 f984 	bl	80015be <prvTraceGetQueueType>
 80092b6:	4603      	mov	r3, r0
 80092b8:	461a      	mov	r2, r3
 80092ba:	4b27      	ldr	r3, [pc, #156]	; (8009358 <xQueueReceive+0x378>)
 80092bc:	5c9c      	ldrb	r4, [r3, r2]
 80092be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092c0:	f7f8 f9d2 	bl	8001668 <prvTraceGetQueueNumberLow16>
 80092c4:	4603      	mov	r3, r0
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	461a      	mov	r2, r3
 80092ca:	4621      	mov	r1, r4
 80092cc:	4628      	mov	r0, r5
 80092ce:	f7f8 fd3d 	bl	8001d4c <prvTraceStoreKernelCall>
 80092d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092d4:	f7f8 f973 	bl	80015be <prvTraceGetQueueType>
 80092d8:	4603      	mov	r3, r0
 80092da:	461a      	mov	r2, r3
 80092dc:	4b1e      	ldr	r3, [pc, #120]	; (8009358 <xQueueReceive+0x378>)
 80092de:	5c9b      	ldrb	r3, [r3, r2]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d018      	beq.n	8009316 <xQueueReceive+0x336>
 80092e4:	f7f8 fa6e 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 80092e8:	4603      	mov	r3, r0
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7f8 f980 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 80092f0:	4603      	mov	r3, r0
 80092f2:	461a      	mov	r2, r3
 80092f4:	4b17      	ldr	r3, [pc, #92]	; (8009354 <xQueueReceive+0x374>)
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	4013      	ands	r3, r2
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00a      	beq.n	8009316 <xQueueReceive+0x336>
 8009300:	f7f8 fa60 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8009304:	4603      	mov	r3, r0
 8009306:	4618      	mov	r0, r3
 8009308:	f7f8 f965 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 800930c:	4603      	mov	r3, r0
 800930e:	b2db      	uxtb	r3, r3
 8009310:	4618      	mov	r0, r3
 8009312:	f7f9 f8e3 	bl	80024dc <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	3324      	adds	r3, #36	; 0x24
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f001 f836 	bl	800a390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009326:	f000 fa08 	bl	800973a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800932a:	f000 fe15 	bl	8009f58 <xTaskResumeAll>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	f47f aea2 	bne.w	800907a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009336:	4b09      	ldr	r3, [pc, #36]	; (800935c <xQueueReceive+0x37c>)
 8009338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	e698      	b.n	800907a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800934a:	f000 f9f6 	bl	800973a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800934e:	f000 fe03 	bl	8009f58 <xTaskResumeAll>
 8009352:	e692      	b.n	800907a <xQueueReceive+0x9a>
 8009354:	2000000a 	.word	0x2000000a
 8009358:	20000004 	.word	0x20000004
 800935c:	e000ed04 	.word	0xe000ed04
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009362:	f000 f9ea 	bl	800973a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009366:	f000 fdf7 	bl	8009f58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800936a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800936c:	f000 fa37 	bl	80097de <prvIsQueueEmpty>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	f43f ae81 	beq.w	800907a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009378:	f7f8 fa24 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800937c:	4603      	mov	r3, r0
 800937e:	4618      	mov	r0, r3
 8009380:	f7f8 f936 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	4b18      	ldr	r3, [pc, #96]	; (80093ec <xQueueReceive+0x40c>)
 800938a:	881b      	ldrh	r3, [r3, #0]
 800938c:	4013      	ands	r3, r2
 800938e:	b29b      	uxth	r3, r3
 8009390:	2b00      	cmp	r3, #0
 8009392:	d025      	beq.n	80093e0 <xQueueReceive+0x400>
 8009394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009396:	f7f8 f974 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 800939a:	4603      	mov	r3, r0
 800939c:	461a      	mov	r2, r3
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <xQueueReceive+0x40c>)
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	4013      	ands	r3, r2
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d01a      	beq.n	80093e0 <xQueueReceive+0x400>
 80093aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093ac:	f7f8 f907 	bl	80015be <prvTraceGetQueueType>
 80093b0:	4603      	mov	r3, r0
 80093b2:	461a      	mov	r2, r3
 80093b4:	4b0e      	ldr	r3, [pc, #56]	; (80093f0 <xQueueReceive+0x410>)
 80093b6:	5c9b      	ldrb	r3, [r3, r2]
 80093b8:	3350      	adds	r3, #80	; 0x50
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	461d      	mov	r5, r3
 80093be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093c0:	f7f8 f8fd 	bl	80015be <prvTraceGetQueueType>
 80093c4:	4603      	mov	r3, r0
 80093c6:	461a      	mov	r2, r3
 80093c8:	4b09      	ldr	r3, [pc, #36]	; (80093f0 <xQueueReceive+0x410>)
 80093ca:	5c9c      	ldrb	r4, [r3, r2]
 80093cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093ce:	f7f8 f94b 	bl	8001668 <prvTraceGetQueueNumberLow16>
 80093d2:	4603      	mov	r3, r0
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	461a      	mov	r2, r3
 80093d8:	4621      	mov	r1, r4
 80093da:	4628      	mov	r0, r5
 80093dc:	f7f8 fcb6 	bl	8001d4c <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 80093e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3730      	adds	r7, #48	; 0x30
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bdb0      	pop	{r4, r5, r7, pc}
 80093ea:	bf00      	nop
 80093ec:	2000000a 	.word	0x2000000a
 80093f0:	20000004 	.word	0x20000004

080093f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093f4:	b5b0      	push	{r4, r5, r7, lr}
 80093f6:	b08e      	sub	sp, #56	; 0x38
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10c      	bne.n	8009424 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	b672      	cpsid	i
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	b662      	cpsie	i
 800941e:	623b      	str	r3, [r7, #32]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d103      	bne.n	8009432 <xQueueReceiveFromISR+0x3e>
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <xQueueReceiveFromISR+0x42>
 8009432:	2301      	movs	r3, #1
 8009434:	e000      	b.n	8009438 <xQueueReceiveFromISR+0x44>
 8009436:	2300      	movs	r3, #0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10c      	bne.n	8009456 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	b672      	cpsid	i
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	b662      	cpsie	i
 8009450:	61fb      	str	r3, [r7, #28]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009456:	f002 fad1 	bl	800b9fc <vPortValidateInterruptPriority>
	__asm volatile
 800945a:	f3ef 8211 	mrs	r2, BASEPRI
 800945e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009462:	b672      	cpsid	i
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	b662      	cpsie	i
 8009472:	61ba      	str	r2, [r7, #24]
 8009474:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009476:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009478:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	2b00      	cmp	r3, #0
 8009484:	d06a      	beq.n	800955c <xQueueReceiveFromISR+0x168>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800948c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8009490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009492:	f7f8 f8f6 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 8009496:	4603      	mov	r3, r0
 8009498:	461a      	mov	r2, r3
 800949a:	4b4a      	ldr	r3, [pc, #296]	; (80095c4 <xQueueReceiveFromISR+0x1d0>)
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	4013      	ands	r3, r2
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d01a      	beq.n	80094dc <xQueueReceiveFromISR+0xe8>
 80094a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094a8:	f7f8 f889 	bl	80015be <prvTraceGetQueueType>
 80094ac:	4603      	mov	r3, r0
 80094ae:	461a      	mov	r2, r3
 80094b0:	4b45      	ldr	r3, [pc, #276]	; (80095c8 <xQueueReceiveFromISR+0x1d4>)
 80094b2:	5c9b      	ldrb	r3, [r3, r2]
 80094b4:	3338      	adds	r3, #56	; 0x38
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	461d      	mov	r5, r3
 80094ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094bc:	f7f8 f87f 	bl	80015be <prvTraceGetQueueType>
 80094c0:	4603      	mov	r3, r0
 80094c2:	461a      	mov	r2, r3
 80094c4:	4b40      	ldr	r3, [pc, #256]	; (80095c8 <xQueueReceiveFromISR+0x1d4>)
 80094c6:	5c9c      	ldrb	r4, [r3, r2]
 80094c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ca:	f7f8 f8cd 	bl	8001668 <prvTraceGetQueueNumberLow16>
 80094ce:	4603      	mov	r3, r0
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	461a      	mov	r2, r3
 80094d4:	4621      	mov	r1, r4
 80094d6:	4628      	mov	r0, r5
 80094d8:	f7f8 fc38 	bl	8001d4c <prvTraceStoreKernelCall>
 80094dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094de:	f7f8 f86e 	bl	80015be <prvTraceGetQueueType>
 80094e2:	4603      	mov	r3, r0
 80094e4:	461a      	mov	r2, r3
 80094e6:	4b38      	ldr	r3, [pc, #224]	; (80095c8 <xQueueReceiveFromISR+0x1d4>)
 80094e8:	5c9c      	ldrb	r4, [r3, r2]
 80094ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ec:	f7f8 f8bc 	bl	8001668 <prvTraceGetQueueNumberLow16>
 80094f0:	4603      	mov	r3, r0
 80094f2:	b2d9      	uxtb	r1, r3
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	3b01      	subs	r3, #1
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	461a      	mov	r2, r3
 8009500:	4620      	mov	r0, r4
 8009502:	f7f8 ff73 	bl	80023ec <prvTraceSetObjectState>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800950a:	f000 f8f0 	bl	80096ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	1e5a      	subs	r2, r3, #1
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009516:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800951a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951e:	d112      	bne.n	8009546 <xQueueReceiveFromISR+0x152>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d016      	beq.n	8009556 <xQueueReceiveFromISR+0x162>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952a:	3310      	adds	r3, #16
 800952c:	4618      	mov	r0, r3
 800952e:	f000 ffff 	bl	800a530 <xTaskRemoveFromEventList>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00e      	beq.n	8009556 <xQueueReceiveFromISR+0x162>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00b      	beq.n	8009556 <xQueueReceiveFromISR+0x162>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	e007      	b.n	8009556 <xQueueReceiveFromISR+0x162>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800954a:	3301      	adds	r3, #1
 800954c:	b2db      	uxtb	r3, r3
 800954e:	b25a      	sxtb	r2, r3
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009556:	2301      	movs	r3, #1
 8009558:	637b      	str	r3, [r7, #52]	; 0x34
 800955a:	e027      	b.n	80095ac <xQueueReceiveFromISR+0x1b8>
		}
		else
		{
			xReturn = pdFAIL;
 800955c:	2300      	movs	r3, #0
 800955e:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8009560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009562:	f7f8 f88e 	bl	8001682 <prvTraceGetQueueNumberHigh16>
 8009566:	4603      	mov	r3, r0
 8009568:	461a      	mov	r2, r3
 800956a:	4b16      	ldr	r3, [pc, #88]	; (80095c4 <xQueueReceiveFromISR+0x1d0>)
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	4013      	ands	r3, r2
 8009570:	b29b      	uxth	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	d01a      	beq.n	80095ac <xQueueReceiveFromISR+0x1b8>
 8009576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009578:	f7f8 f821 	bl	80015be <prvTraceGetQueueType>
 800957c:	4603      	mov	r3, r0
 800957e:	461a      	mov	r2, r3
 8009580:	4b11      	ldr	r3, [pc, #68]	; (80095c8 <xQueueReceiveFromISR+0x1d4>)
 8009582:	5c9b      	ldrb	r3, [r3, r2]
 8009584:	3360      	adds	r3, #96	; 0x60
 8009586:	b2db      	uxtb	r3, r3
 8009588:	461d      	mov	r5, r3
 800958a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800958c:	f7f8 f817 	bl	80015be <prvTraceGetQueueType>
 8009590:	4603      	mov	r3, r0
 8009592:	461a      	mov	r2, r3
 8009594:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <xQueueReceiveFromISR+0x1d4>)
 8009596:	5c9c      	ldrb	r4, [r3, r2]
 8009598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800959a:	f7f8 f865 	bl	8001668 <prvTraceGetQueueNumberLow16>
 800959e:	4603      	mov	r3, r0
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	461a      	mov	r2, r3
 80095a4:	4621      	mov	r1, r4
 80095a6:	4628      	mov	r0, r5
 80095a8:	f7f8 fbd0 	bl	8001d4c <prvTraceStoreKernelCall>
 80095ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ae:	613b      	str	r3, [r7, #16]
	__asm volatile
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f383 8811 	msr	BASEPRI, r3
}
 80095b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3738      	adds	r7, #56	; 0x38
 80095be:	46bd      	mov	sp, r7
 80095c0:	bdb0      	pop	{r4, r5, r7, pc}
 80095c2:	bf00      	nop
 80095c4:	2000000a 	.word	0x2000000a
 80095c8:	20000004 	.word	0x20000004

080095cc <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 800960e:	4618      	mov	r0, r3
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b086      	sub	sp, #24
 800961e:	af00      	add	r7, sp, #0
 8009620:	60f8      	str	r0, [r7, #12]
 8009622:	60b9      	str	r1, [r7, #8]
 8009624:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009626:	2300      	movs	r3, #0
 8009628:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10d      	bne.n	8009654 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d14d      	bne.n	80096dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	4618      	mov	r0, r3
 8009646:	f001 f9fb 	bl	800aa40 <xTaskPriorityDisinherit>
 800964a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	609a      	str	r2, [r3, #8]
 8009652:	e043      	b.n	80096dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d119      	bne.n	800968e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6858      	ldr	r0, [r3, #4]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009662:	461a      	mov	r2, r3
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	f002 fc49 	bl	800befc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009672:	441a      	add	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	429a      	cmp	r2, r3
 8009682:	d32b      	bcc.n	80096dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	605a      	str	r2, [r3, #4]
 800968c:	e026      	b.n	80096dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	68d8      	ldr	r0, [r3, #12]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009696:	461a      	mov	r2, r3
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	f002 fc2f 	bl	800befc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	425b      	negs	r3, r3
 80096a8:	441a      	add	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	68da      	ldr	r2, [r3, #12]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d207      	bcs.n	80096ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	689a      	ldr	r2, [r3, #8]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c2:	425b      	negs	r3, r3
 80096c4:	441a      	add	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d105      	bne.n	80096dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d002      	beq.n	80096dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	3b01      	subs	r3, #1
 80096da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80096e4:	697b      	ldr	r3, [r7, #20]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d018      	beq.n	8009732 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	68da      	ldr	r2, [r3, #12]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	441a      	add	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	429a      	cmp	r2, r3
 8009718:	d303      	bcc.n	8009722 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68d9      	ldr	r1, [r3, #12]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972a:	461a      	mov	r2, r3
 800972c:	6838      	ldr	r0, [r7, #0]
 800972e:	f002 fbe5 	bl	800befc <memcpy>
	}
}
 8009732:	bf00      	nop
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009742:	f002 f875 	bl	800b830 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800974c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800974e:	e011      	b.n	8009774 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009754:	2b00      	cmp	r3, #0
 8009756:	d012      	beq.n	800977e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3324      	adds	r3, #36	; 0x24
 800975c:	4618      	mov	r0, r3
 800975e:	f000 fee7 	bl	800a530 <xTaskRemoveFromEventList>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009768:	f001 f82a 	bl	800a7c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	3b01      	subs	r3, #1
 8009770:	b2db      	uxtb	r3, r3
 8009772:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009778:	2b00      	cmp	r3, #0
 800977a:	dce9      	bgt.n	8009750 <prvUnlockQueue+0x16>
 800977c:	e000      	b.n	8009780 <prvUnlockQueue+0x46>
					break;
 800977e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	22ff      	movs	r2, #255	; 0xff
 8009784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009788:	f002 f886 	bl	800b898 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800978c:	f002 f850 	bl	800b830 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009796:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009798:	e011      	b.n	80097be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d012      	beq.n	80097c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3310      	adds	r3, #16
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fec2 	bl	800a530 <xTaskRemoveFromEventList>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80097b2:	f001 f805 	bl	800a7c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80097b6:	7bbb      	ldrb	r3, [r7, #14]
 80097b8:	3b01      	subs	r3, #1
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	dce9      	bgt.n	800979a <prvUnlockQueue+0x60>
 80097c6:	e000      	b.n	80097ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80097c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	22ff      	movs	r2, #255	; 0xff
 80097ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80097d2:	f002 f861 	bl	800b898 <vPortExitCritical>
}
 80097d6:	bf00      	nop
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097e6:	f002 f823 	bl	800b830 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d102      	bne.n	80097f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80097f2:	2301      	movs	r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	e001      	b.n	80097fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097fc:	f002 f84c 	bl	800b898 <vPortExitCritical>

	return xReturn;
 8009800:	68fb      	ldr	r3, [r7, #12]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009812:	f002 f80d 	bl	800b830 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981e:	429a      	cmp	r2, r3
 8009820:	d102      	bne.n	8009828 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009822:	2301      	movs	r3, #1
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	e001      	b.n	800982c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009828:	2300      	movs	r3, #0
 800982a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800982c:	f002 f834 	bl	800b898 <vPortExitCritical>

	return xReturn;
 8009830:	68fb      	ldr	r3, [r7, #12]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
	...

0800983c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800983c:	b590      	push	{r4, r7, lr}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009846:	2300      	movs	r3, #0
 8009848:	60fb      	str	r3, [r7, #12]
 800984a:	e025      	b.n	8009898 <vQueueAddToRegistry+0x5c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800984c:	4a16      	ldr	r2, [pc, #88]	; (80098a8 <vQueueAddToRegistry+0x6c>)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d11c      	bne.n	8009892 <vQueueAddToRegistry+0x56>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009858:	4913      	ldr	r1, [pc, #76]	; (80098a8 <vQueueAddToRegistry+0x6c>)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009862:	4a11      	ldr	r2, [pc, #68]	; (80098a8 <vQueueAddToRegistry+0x6c>)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	4413      	add	r3, r2
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7f7 fea5 	bl	80015be <prvTraceGetQueueType>
 8009874:	4603      	mov	r3, r0
 8009876:	461a      	mov	r2, r3
 8009878:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <vQueueAddToRegistry+0x70>)
 800987a:	5c9c      	ldrb	r4, [r3, r2]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7f7 fef3 	bl	8001668 <prvTraceGetQueueNumberLow16>
 8009882:	4603      	mov	r3, r0
 8009884:	b2db      	uxtb	r3, r3
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	4619      	mov	r1, r3
 800988a:	4620      	mov	r0, r4
 800988c:	f7f9 f922 	bl	8002ad4 <prvTraceSetObjectName>
				break;
 8009890:	e006      	b.n	80098a0 <vQueueAddToRegistry+0x64>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3301      	adds	r3, #1
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2b07      	cmp	r3, #7
 800989c:	d9d6      	bls.n	800984c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800989e:	bf00      	nop
 80098a0:	bf00      	nop
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd90      	pop	{r4, r7, pc}
 80098a8:	2000b378 	.word	0x2000b378
 80098ac:	20000004 	.word	0x20000004

080098b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80098c0:	f001 ffb6 	bl	800b830 <vPortEnterCritical>
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098ca:	b25b      	sxtb	r3, r3
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d0:	d103      	bne.n	80098da <vQueueWaitForMessageRestricted+0x2a>
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098e0:	b25b      	sxtb	r3, r3
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e6:	d103      	bne.n	80098f0 <vQueueWaitForMessageRestricted+0x40>
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098f0:	f001 ffd2 	bl	800b898 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d106      	bne.n	800990a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	3324      	adds	r3, #36	; 0x24
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	68b9      	ldr	r1, [r7, #8]
 8009904:	4618      	mov	r0, r3
 8009906:	f000 fda9 	bl	800a45c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800990a:	6978      	ldr	r0, [r7, #20]
 800990c:	f7ff ff15 	bl	800973a <prvUnlockQueue>
	}
 8009910:	bf00      	nop
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009918:	b580      	push	{r7, lr}
 800991a:	b08e      	sub	sp, #56	; 0x38
 800991c:	af04      	add	r7, sp, #16
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10c      	bne.n	8009946 <xTaskCreateStatic+0x2e>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	b672      	cpsid	i
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	b662      	cpsie	i
 8009940:	623b      	str	r3, [r7, #32]
}
 8009942:	bf00      	nop
 8009944:	e7fe      	b.n	8009944 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10c      	bne.n	8009966 <xTaskCreateStatic+0x4e>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	b672      	cpsid	i
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	b662      	cpsie	i
 8009960:	61fb      	str	r3, [r7, #28]
}
 8009962:	bf00      	nop
 8009964:	e7fe      	b.n	8009964 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009966:	23c0      	movs	r3, #192	; 0xc0
 8009968:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	2bc0      	cmp	r3, #192	; 0xc0
 800996e:	d00c      	beq.n	800998a <xTaskCreateStatic+0x72>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	b672      	cpsid	i
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	b662      	cpsie	i
 8009984:	61bb      	str	r3, [r7, #24]
}
 8009986:	bf00      	nop
 8009988:	e7fe      	b.n	8009988 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800998a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800998c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998e:	2b00      	cmp	r3, #0
 8009990:	d01e      	beq.n	80099d0 <xTaskCreateStatic+0xb8>
 8009992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009994:	2b00      	cmp	r3, #0
 8009996:	d01b      	beq.n	80099d0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099aa:	2300      	movs	r3, #0
 80099ac:	9303      	str	r3, [sp, #12]
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	9302      	str	r3, [sp, #8]
 80099b2:	f107 0314 	add.w	r3, r7, #20
 80099b6:	9301      	str	r3, [sp, #4]
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	68b9      	ldr	r1, [r7, #8]
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 f850 	bl	8009a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099ca:	f000 f8f9 	bl	8009bc0 <prvAddNewTaskToReadyList>
 80099ce:	e001      	b.n	80099d4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80099d0:	2300      	movs	r3, #0
 80099d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80099d4:	697b      	ldr	r3, [r7, #20]
	}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3728      	adds	r7, #40	; 0x28
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b08c      	sub	sp, #48	; 0x30
 80099e2:	af04      	add	r7, sp, #16
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	60b9      	str	r1, [r7, #8]
 80099e8:	603b      	str	r3, [r7, #0]
 80099ea:	4613      	mov	r3, r2
 80099ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80099ee:	88fb      	ldrh	r3, [r7, #6]
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f002 f846 	bl	800ba84 <pvPortMalloc>
 80099f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00e      	beq.n	8009a1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a00:	20c0      	movs	r0, #192	; 0xc0
 8009a02:	f002 f83f 	bl	800ba84 <pvPortMalloc>
 8009a06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	631a      	str	r2, [r3, #48]	; 0x30
 8009a14:	e005      	b.n	8009a22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a16:	6978      	ldr	r0, [r7, #20]
 8009a18:	f002 f90e 	bl	800bc38 <vPortFree>
 8009a1c:	e001      	b.n	8009a22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d017      	beq.n	8009a58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a30:	88fa      	ldrh	r2, [r7, #6]
 8009a32:	2300      	movs	r3, #0
 8009a34:	9303      	str	r3, [sp, #12]
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	9302      	str	r3, [sp, #8]
 8009a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	68b9      	ldr	r1, [r7, #8]
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 f80e 	bl	8009a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a4c:	69f8      	ldr	r0, [r7, #28]
 8009a4e:	f000 f8b7 	bl	8009bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a52:	2301      	movs	r3, #1
 8009a54:	61bb      	str	r3, [r7, #24]
 8009a56:	e002      	b.n	8009a5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a58:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a5e:	69bb      	ldr	r3, [r7, #24]
	}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3720      	adds	r7, #32
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b088      	sub	sp, #32
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	461a      	mov	r2, r3
 8009a80:	21a5      	movs	r1, #165	; 0xa5
 8009a82:	f002 fa49 	bl	800bf18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009a90:	440b      	add	r3, r1
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	f023 0307 	bic.w	r3, r3, #7
 8009a9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	f003 0307 	and.w	r3, r3, #7
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00c      	beq.n	8009ac4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	b672      	cpsid	i
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	b662      	cpsie	i
 8009abe:	617b      	str	r3, [r7, #20]
}
 8009ac0:	bf00      	nop
 8009ac2:	e7fe      	b.n	8009ac2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d01f      	beq.n	8009b0a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009aca:	2300      	movs	r3, #0
 8009acc:	61fb      	str	r3, [r7, #28]
 8009ace:	e012      	b.n	8009af6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	7819      	ldrb	r1, [r3, #0]
 8009ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	4413      	add	r3, r2
 8009ade:	3334      	adds	r3, #52	; 0x34
 8009ae0:	460a      	mov	r2, r1
 8009ae2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	4413      	add	r3, r2
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d006      	beq.n	8009afe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	3301      	adds	r3, #1
 8009af4:	61fb      	str	r3, [r7, #28]
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	2b0f      	cmp	r3, #15
 8009afa:	d9e9      	bls.n	8009ad0 <prvInitialiseNewTask+0x68>
 8009afc:	e000      	b.n	8009b00 <prvInitialiseNewTask+0x98>
			{
				break;
 8009afe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b08:	e003      	b.n	8009b12 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	2b37      	cmp	r3, #55	; 0x37
 8009b16:	d901      	bls.n	8009b1c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b18:	2337      	movs	r3, #55	; 0x37
 8009b1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	3304      	adds	r3, #4
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fc9e 	bl	8008474 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	3318      	adds	r3, #24
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe fc99 	bl	8008474 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	3358      	adds	r3, #88	; 0x58
 8009b72:	2260      	movs	r2, #96	; 0x60
 8009b74:	2100      	movs	r1, #0
 8009b76:	4618      	mov	r0, r3
 8009b78:	f002 f9ce 	bl	800bf18 <memset>
 8009b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7e:	4a0d      	ldr	r2, [pc, #52]	; (8009bb4 <prvInitialiseNewTask+0x14c>)
 8009b80:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	4a0c      	ldr	r2, [pc, #48]	; (8009bb8 <prvInitialiseNewTask+0x150>)
 8009b86:	661a      	str	r2, [r3, #96]	; 0x60
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	4a0c      	ldr	r2, [pc, #48]	; (8009bbc <prvInitialiseNewTask+0x154>)
 8009b8c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	68f9      	ldr	r1, [r7, #12]
 8009b92:	69b8      	ldr	r0, [r7, #24]
 8009b94:	f001 fd2a 	bl	800b5ec <pxPortInitialiseStack>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009baa:	bf00      	nop
 8009bac:	3720      	adds	r7, #32
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	0800d804 	.word	0x0800d804
 8009bb8:	0800d824 	.word	0x0800d824
 8009bbc:	0800d7e4 	.word	0x0800d7e4

08009bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bc8:	f001 fe32 	bl	800b830 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bcc:	4b53      	ldr	r3, [pc, #332]	; (8009d1c <prvAddNewTaskToReadyList+0x15c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	4a52      	ldr	r2, [pc, #328]	; (8009d1c <prvAddNewTaskToReadyList+0x15c>)
 8009bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bd6:	4b52      	ldr	r3, [pc, #328]	; (8009d20 <prvAddNewTaskToReadyList+0x160>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d109      	bne.n	8009bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009bde:	4a50      	ldr	r2, [pc, #320]	; (8009d20 <prvAddNewTaskToReadyList+0x160>)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009be4:	4b4d      	ldr	r3, [pc, #308]	; (8009d1c <prvAddNewTaskToReadyList+0x15c>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d110      	bne.n	8009c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009bec:	f000 fe36 	bl	800a85c <prvInitialiseTaskLists>
 8009bf0:	e00d      	b.n	8009c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009bf2:	4b4c      	ldr	r3, [pc, #304]	; (8009d24 <prvAddNewTaskToReadyList+0x164>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d109      	bne.n	8009c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009bfa:	4b49      	ldr	r3, [pc, #292]	; (8009d20 <prvAddNewTaskToReadyList+0x160>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d802      	bhi.n	8009c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c08:	4a45      	ldr	r2, [pc, #276]	; (8009d20 <prvAddNewTaskToReadyList+0x160>)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c0e:	4b46      	ldr	r3, [pc, #280]	; (8009d28 <prvAddNewTaskToReadyList+0x168>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3301      	adds	r3, #1
 8009c14:	4a44      	ldr	r2, [pc, #272]	; (8009d28 <prvAddNewTaskToReadyList+0x168>)
 8009c16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c18:	4b43      	ldr	r3, [pc, #268]	; (8009d28 <prvAddNewTaskToReadyList+0x168>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d048      	beq.n	8009cb8 <prvAddNewTaskToReadyList+0xf8>
 8009c26:	2003      	movs	r0, #3
 8009c28:	f7f8 fe12 	bl	8002850 <prvTraceGetObjectHandle>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7f7 fcea 	bl	800160c <prvTraceSetTaskNumberLow16>
 8009c38:	4b3c      	ldr	r3, [pc, #240]	; (8009d2c <prvAddNewTaskToReadyList+0x16c>)
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7f7 fcfc 	bl	800163c <prvTraceSetTaskNumberHigh16>
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7f7 fcc6 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	b2d9      	uxtb	r1, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	3334      	adds	r3, #52	; 0x34
 8009c52:	461a      	mov	r2, r3
 8009c54:	2003      	movs	r0, #3
 8009c56:	f7f8 ff3d 	bl	8002ad4 <prvTraceSetObjectName>
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7f7 fcbb 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 8009c60:	4603      	mov	r3, r0
 8009c62:	b2d9      	uxtb	r1, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	2003      	movs	r0, #3
 8009c6e:	f7f8 fb43 	bl	80022f8 <prvTraceSetPriorityProperty>
 8009c72:	f7f7 fda7 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8009c76:	4603      	mov	r3, r0
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f7 fcb9 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	461a      	mov	r2, r3
 8009c82:	4b2b      	ldr	r3, [pc, #172]	; (8009d30 <prvAddNewTaskToReadyList+0x170>)
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	4013      	ands	r3, r2
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d014      	beq.n	8009cb8 <prvAddNewTaskToReadyList+0xf8>
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7f7 fcae 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8009c94:	4603      	mov	r3, r0
 8009c96:	461a      	mov	r2, r3
 8009c98:	4b25      	ldr	r3, [pc, #148]	; (8009d30 <prvAddNewTaskToReadyList+0x170>)
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d009      	beq.n	8009cb8 <prvAddNewTaskToReadyList+0xf8>
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7f7 fc96 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 8009caa:	4603      	mov	r3, r0
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	461a      	mov	r2, r3
 8009cb0:	2103      	movs	r1, #3
 8009cb2:	201b      	movs	r0, #27
 8009cb4:	f7f8 f84a 	bl	8001d4c <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbc:	4b1d      	ldr	r3, [pc, #116]	; (8009d34 <prvAddNewTaskToReadyList+0x174>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d903      	bls.n	8009ccc <prvAddNewTaskToReadyList+0x10c>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc8:	4a1a      	ldr	r2, [pc, #104]	; (8009d34 <prvAddNewTaskToReadyList+0x174>)
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4a17      	ldr	r2, [pc, #92]	; (8009d38 <prvAddNewTaskToReadyList+0x178>)
 8009cda:	441a      	add	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	f7fe fbd3 	bl	800848e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ce8:	f001 fdd6 	bl	800b898 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009cec:	4b0d      	ldr	r3, [pc, #52]	; (8009d24 <prvAddNewTaskToReadyList+0x164>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00e      	beq.n	8009d12 <prvAddNewTaskToReadyList+0x152>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009cf4:	4b0a      	ldr	r3, [pc, #40]	; (8009d20 <prvAddNewTaskToReadyList+0x160>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d207      	bcs.n	8009d12 <prvAddNewTaskToReadyList+0x152>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d02:	4b0e      	ldr	r3, [pc, #56]	; (8009d3c <prvAddNewTaskToReadyList+0x17c>)
 8009d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	2000b88c 	.word	0x2000b88c
 8009d20:	2000b3b8 	.word	0x2000b3b8
 8009d24:	2000b898 	.word	0x2000b898
 8009d28:	2000b8a8 	.word	0x2000b8a8
 8009d2c:	2000000c 	.word	0x2000000c
 8009d30:	2000000a 	.word	0x2000000a
 8009d34:	2000b894 	.word	0x2000b894
 8009d38:	2000b3bc 	.word	0x2000b3bc
 8009d3c:	e000ed04 	.word	0xe000ed04

08009d40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d04d      	beq.n	8009dee <vTaskDelay+0xae>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d52:	4b2e      	ldr	r3, [pc, #184]	; (8009e0c <vTaskDelay+0xcc>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00c      	beq.n	8009d74 <vTaskDelay+0x34>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	b672      	cpsid	i
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	b662      	cpsie	i
 8009d6e:	60bb      	str	r3, [r7, #8]
}
 8009d70:	bf00      	nop
 8009d72:	e7fe      	b.n	8009d72 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009d74:	f000 f8e2 	bl	8009f3c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8009d78:	4b25      	ldr	r3, [pc, #148]	; (8009e10 <vTaskDelay+0xd0>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7f7 fc37 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8009d82:	4603      	mov	r3, r0
 8009d84:	461a      	mov	r2, r3
 8009d86:	4b23      	ldr	r3, [pc, #140]	; (8009e14 <vTaskDelay+0xd4>)
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00d      	beq.n	8009dae <vTaskDelay+0x6e>
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	2089      	movs	r0, #137	; 0x89
 8009d96:	f7f8 f91d 	bl	8001fd4 <prvTraceStoreKernelCallWithNumericParamOnly>
 8009d9a:	4b1d      	ldr	r3, [pc, #116]	; (8009e10 <vTaskDelay+0xd0>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7f7 fc19 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 8009da4:	4603      	mov	r3, r0
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7f8 fb97 	bl	80024dc <prvTraceSetTaskInstanceFinished>
 8009dae:	f7f7 fd09 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8009db2:	4603      	mov	r3, r0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7f7 fc1b 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4b15      	ldr	r3, [pc, #84]	; (8009e14 <vTaskDelay+0xd4>)
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00a      	beq.n	8009de0 <vTaskDelay+0xa0>
 8009dca:	f7f7 fcfb 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7f7 fc00 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7f8 fb7e 	bl	80024dc <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009de0:	2100      	movs	r1, #0
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fee4 	bl	800abb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009de8:	f000 f8b6 	bl	8009f58 <xTaskResumeAll>
 8009dec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d107      	bne.n	8009e04 <vTaskDelay+0xc4>
		{
			portYIELD_WITHIN_API();
 8009df4:	4b08      	ldr	r3, [pc, #32]	; (8009e18 <vTaskDelay+0xd8>)
 8009df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e04:	bf00      	nop
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	2000b8b4 	.word	0x2000b8b4
 8009e10:	2000b3b8 	.word	0x2000b3b8
 8009e14:	2000000a 	.word	0x2000000a
 8009e18:	e000ed04 	.word	0xe000ed04

08009e1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08a      	sub	sp, #40	; 0x28
 8009e20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e2a:	463a      	mov	r2, r7
 8009e2c:	1d39      	adds	r1, r7, #4
 8009e2e:	f107 0308 	add.w	r3, r7, #8
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fd ff1e 	bl	8007c74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	9202      	str	r2, [sp, #8]
 8009e40:	9301      	str	r3, [sp, #4]
 8009e42:	2300      	movs	r3, #0
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	2300      	movs	r3, #0
 8009e48:	460a      	mov	r2, r1
 8009e4a:	4933      	ldr	r1, [pc, #204]	; (8009f18 <vTaskStartScheduler+0xfc>)
 8009e4c:	4833      	ldr	r0, [pc, #204]	; (8009f1c <vTaskStartScheduler+0x100>)
 8009e4e:	f7ff fd63 	bl	8009918 <xTaskCreateStatic>
 8009e52:	4603      	mov	r3, r0
 8009e54:	4a32      	ldr	r2, [pc, #200]	; (8009f20 <vTaskStartScheduler+0x104>)
 8009e56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e58:	4b31      	ldr	r3, [pc, #196]	; (8009f20 <vTaskStartScheduler+0x104>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e60:	2301      	movs	r3, #1
 8009e62:	617b      	str	r3, [r7, #20]
 8009e64:	e001      	b.n	8009e6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e66:	2300      	movs	r3, #0
 8009e68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d102      	bne.n	8009e76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e70:	f000 fef2 	bl	800ac58 <xTimerCreateTimerTask>
 8009e74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d138      	bne.n	8009eee <vTaskStartScheduler+0xd2>
	__asm volatile
 8009e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e80:	b672      	cpsid	i
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	b662      	cpsie	i
 8009e90:	613b      	str	r3, [r7, #16]
}
 8009e92:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e94:	4b23      	ldr	r3, [pc, #140]	; (8009f24 <vTaskStartScheduler+0x108>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3358      	adds	r3, #88	; 0x58
 8009e9a:	4a23      	ldr	r2, [pc, #140]	; (8009f28 <vTaskStartScheduler+0x10c>)
 8009e9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e9e:	4b23      	ldr	r3, [pc, #140]	; (8009f2c <vTaskStartScheduler+0x110>)
 8009ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009ea6:	4b22      	ldr	r3, [pc, #136]	; (8009f30 <vTaskStartScheduler+0x114>)
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009eac:	4b21      	ldr	r3, [pc, #132]	; (8009f34 <vTaskStartScheduler+0x118>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009eb2:	f7f6 fed1 	bl	8000c58 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 8009eb6:	f7f7 fc85 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7f7 fb97 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	4b1c      	ldr	r3, [pc, #112]	; (8009f38 <vTaskStartScheduler+0x11c>)
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	4013      	ands	r3, r2
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00a      	beq.n	8009ee8 <vTaskStartScheduler+0xcc>
 8009ed2:	f7f7 fc77 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7f7 fb7c 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7f8 f8dc 	bl	80020a0 <prvTraceStoreTaskswitch>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ee8:	f001 fc12 	bl	800b710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009eec:	e010      	b.n	8009f10 <vTaskStartScheduler+0xf4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef4:	d10c      	bne.n	8009f10 <vTaskStartScheduler+0xf4>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	b672      	cpsid	i
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	b662      	cpsie	i
 8009f0a:	60fb      	str	r3, [r7, #12]
}
 8009f0c:	bf00      	nop
 8009f0e:	e7fe      	b.n	8009f0e <vTaskStartScheduler+0xf2>
}
 8009f10:	bf00      	nop
 8009f12:	3718      	adds	r7, #24
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	0800d668 	.word	0x0800d668
 8009f1c:	0800a82d 	.word	0x0800a82d
 8009f20:	2000b8b0 	.word	0x2000b8b0
 8009f24:	2000b3b8 	.word	0x2000b3b8
 8009f28:	2000001c 	.word	0x2000001c
 8009f2c:	2000b8ac 	.word	0x2000b8ac
 8009f30:	2000b898 	.word	0x2000b898
 8009f34:	2000b890 	.word	0x2000b890
 8009f38:	2000000a 	.word	0x2000000a

08009f3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009f40:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <vTaskSuspendAll+0x18>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3301      	adds	r3, #1
 8009f46:	4a03      	ldr	r2, [pc, #12]	; (8009f54 <vTaskSuspendAll+0x18>)
 8009f48:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009f4a:	bf00      	nop
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	2000b8b4 	.word	0x2000b8b4

08009f58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f66:	4b43      	ldr	r3, [pc, #268]	; (800a074 <xTaskResumeAll+0x11c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10c      	bne.n	8009f88 <xTaskResumeAll+0x30>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	b672      	cpsid	i
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	b662      	cpsie	i
 8009f82:	603b      	str	r3, [r7, #0]
}
 8009f84:	bf00      	nop
 8009f86:	e7fe      	b.n	8009f86 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f88:	f001 fc52 	bl	800b830 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f8c:	4b39      	ldr	r3, [pc, #228]	; (800a074 <xTaskResumeAll+0x11c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	4a38      	ldr	r2, [pc, #224]	; (800a074 <xTaskResumeAll+0x11c>)
 8009f94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f96:	4b37      	ldr	r3, [pc, #220]	; (800a074 <xTaskResumeAll+0x11c>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d162      	bne.n	800a064 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f9e:	4b36      	ldr	r3, [pc, #216]	; (800a078 <xTaskResumeAll+0x120>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d05e      	beq.n	800a064 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fa6:	e02f      	b.n	800a008 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fa8:	4b34      	ldr	r3, [pc, #208]	; (800a07c <xTaskResumeAll+0x124>)
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3318      	adds	r3, #24
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fe fac7 	bl	8008548 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fac2 	bl	8008548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc8:	4b2d      	ldr	r3, [pc, #180]	; (800a080 <xTaskResumeAll+0x128>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d903      	bls.n	8009fd8 <xTaskResumeAll+0x80>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	4a2a      	ldr	r2, [pc, #168]	; (800a080 <xTaskResumeAll+0x128>)
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fdc:	4613      	mov	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4a27      	ldr	r2, [pc, #156]	; (800a084 <xTaskResumeAll+0x12c>)
 8009fe6:	441a      	add	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3304      	adds	r3, #4
 8009fec:	4619      	mov	r1, r3
 8009fee:	4610      	mov	r0, r2
 8009ff0:	f7fe fa4d 	bl	800848e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff8:	4b23      	ldr	r3, [pc, #140]	; (800a088 <xTaskResumeAll+0x130>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d302      	bcc.n	800a008 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a002:	4b22      	ldr	r3, [pc, #136]	; (800a08c <xTaskResumeAll+0x134>)
 800a004:	2201      	movs	r2, #1
 800a006:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a008:	4b1c      	ldr	r3, [pc, #112]	; (800a07c <xTaskResumeAll+0x124>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1cb      	bne.n	8009fa8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a016:	f000 fcc5 	bl	800a9a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a01a:	4b1d      	ldr	r3, [pc, #116]	; (800a090 <xTaskResumeAll+0x138>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d010      	beq.n	800a048 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a026:	f000 f847 	bl	800a0b8 <xTaskIncrementTick>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a030:	4b16      	ldr	r3, [pc, #88]	; (800a08c <xTaskResumeAll+0x134>)
 800a032:	2201      	movs	r2, #1
 800a034:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	3b01      	subs	r3, #1
 800a03a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1f1      	bne.n	800a026 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a042:	4b13      	ldr	r3, [pc, #76]	; (800a090 <xTaskResumeAll+0x138>)
 800a044:	2200      	movs	r2, #0
 800a046:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a048:	4b10      	ldr	r3, [pc, #64]	; (800a08c <xTaskResumeAll+0x134>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d009      	beq.n	800a064 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a050:	2301      	movs	r3, #1
 800a052:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a054:	4b0f      	ldr	r3, [pc, #60]	; (800a094 <xTaskResumeAll+0x13c>)
 800a056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a064:	f001 fc18 	bl	800b898 <vPortExitCritical>

	return xAlreadyYielded;
 800a068:	68bb      	ldr	r3, [r7, #8]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	2000b8b4 	.word	0x2000b8b4
 800a078:	2000b88c 	.word	0x2000b88c
 800a07c:	2000b84c 	.word	0x2000b84c
 800a080:	2000b894 	.word	0x2000b894
 800a084:	2000b3bc 	.word	0x2000b3bc
 800a088:	2000b3b8 	.word	0x2000b3b8
 800a08c:	2000b8a0 	.word	0x2000b8a0
 800a090:	2000b89c 	.word	0x2000b89c
 800a094:	e000ed04 	.word	0xe000ed04

0800a098 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a09e:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <xTaskGetTickCount+0x1c>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a0a4:	687b      	ldr	r3, [r7, #4]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	2000b890 	.word	0x2000b890

0800a0b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800a0c2:	4b59      	ldr	r3, [pc, #356]	; (800a228 <xTaskIncrementTick+0x170>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d003      	beq.n	800a0d2 <xTaskIncrementTick+0x1a>
 800a0ca:	4b58      	ldr	r3, [pc, #352]	; (800a22c <xTaskIncrementTick+0x174>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d107      	bne.n	800a0e2 <xTaskIncrementTick+0x2a>
 800a0d2:	4b57      	ldr	r3, [pc, #348]	; (800a230 <xTaskIncrementTick+0x178>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	4a55      	ldr	r2, [pc, #340]	; (800a230 <xTaskIncrementTick+0x178>)
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	2000      	movs	r0, #0
 800a0de:	f7f9 f8df 	bl	80032a0 <prvTracePortGetTimeStamp>
 800a0e2:	4b51      	ldr	r3, [pc, #324]	; (800a228 <xTaskIncrementTick+0x170>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0e6:	4b50      	ldr	r3, [pc, #320]	; (800a228 <xTaskIncrementTick+0x170>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f040 808b 	bne.w	800a206 <xTaskIncrementTick+0x14e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0f0:	4b50      	ldr	r3, [pc, #320]	; (800a234 <xTaskIncrementTick+0x17c>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a0f8:	4a4e      	ldr	r2, [pc, #312]	; (800a234 <xTaskIncrementTick+0x17c>)
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d122      	bne.n	800a14a <xTaskIncrementTick+0x92>
		{
			taskSWITCH_DELAYED_LISTS();
 800a104:	4b4c      	ldr	r3, [pc, #304]	; (800a238 <xTaskIncrementTick+0x180>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00c      	beq.n	800a128 <xTaskIncrementTick+0x70>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	b672      	cpsid	i
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	b662      	cpsie	i
 800a122:	603b      	str	r3, [r7, #0]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <xTaskIncrementTick+0x6e>
 800a128:	4b43      	ldr	r3, [pc, #268]	; (800a238 <xTaskIncrementTick+0x180>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	60fb      	str	r3, [r7, #12]
 800a12e:	4b43      	ldr	r3, [pc, #268]	; (800a23c <xTaskIncrementTick+0x184>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a41      	ldr	r2, [pc, #260]	; (800a238 <xTaskIncrementTick+0x180>)
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	4a41      	ldr	r2, [pc, #260]	; (800a23c <xTaskIncrementTick+0x184>)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	4b40      	ldr	r3, [pc, #256]	; (800a240 <xTaskIncrementTick+0x188>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	3301      	adds	r3, #1
 800a142:	4a3f      	ldr	r2, [pc, #252]	; (800a240 <xTaskIncrementTick+0x188>)
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	f000 fc2d 	bl	800a9a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a14a:	4b3e      	ldr	r3, [pc, #248]	; (800a244 <xTaskIncrementTick+0x18c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	429a      	cmp	r2, r3
 800a152:	d349      	bcc.n	800a1e8 <xTaskIncrementTick+0x130>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a154:	4b38      	ldr	r3, [pc, #224]	; (800a238 <xTaskIncrementTick+0x180>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d104      	bne.n	800a168 <xTaskIncrementTick+0xb0>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a15e:	4b39      	ldr	r3, [pc, #228]	; (800a244 <xTaskIncrementTick+0x18c>)
 800a160:	f04f 32ff 	mov.w	r2, #4294967295
 800a164:	601a      	str	r2, [r3, #0]
					break;
 800a166:	e03f      	b.n	800a1e8 <xTaskIncrementTick+0x130>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a168:	4b33      	ldr	r3, [pc, #204]	; (800a238 <xTaskIncrementTick+0x180>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d203      	bcs.n	800a188 <xTaskIncrementTick+0xd0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a180:	4a30      	ldr	r2, [pc, #192]	; (800a244 <xTaskIncrementTick+0x18c>)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a186:	e02f      	b.n	800a1e8 <xTaskIncrementTick+0x130>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	3304      	adds	r3, #4
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe f9db 	bl	8008548 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a196:	2b00      	cmp	r3, #0
 800a198:	d004      	beq.n	800a1a4 <xTaskIncrementTick+0xec>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	3318      	adds	r3, #24
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fe f9d2 	bl	8008548 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a8:	4b27      	ldr	r3, [pc, #156]	; (800a248 <xTaskIncrementTick+0x190>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d903      	bls.n	800a1b8 <xTaskIncrementTick+0x100>
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b4:	4a24      	ldr	r2, [pc, #144]	; (800a248 <xTaskIncrementTick+0x190>)
 800a1b6:	6013      	str	r3, [r2, #0]
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1bc:	4613      	mov	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4a21      	ldr	r2, [pc, #132]	; (800a24c <xTaskIncrementTick+0x194>)
 800a1c6:	441a      	add	r2, r3
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	4610      	mov	r0, r2
 800a1d0:	f7fe f95d 	bl	800848e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d8:	4b1d      	ldr	r3, [pc, #116]	; (800a250 <xTaskIncrementTick+0x198>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d3b8      	bcc.n	800a154 <xTaskIncrementTick+0x9c>
						{
							xSwitchRequired = pdTRUE;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1e6:	e7b5      	b.n	800a154 <xTaskIncrementTick+0x9c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1e8:	4b19      	ldr	r3, [pc, #100]	; (800a250 <xTaskIncrementTick+0x198>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ee:	4917      	ldr	r1, [pc, #92]	; (800a24c <xTaskIncrementTick+0x194>)
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	440b      	add	r3, r1
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d907      	bls.n	800a210 <xTaskIncrementTick+0x158>
			{
				xSwitchRequired = pdTRUE;
 800a200:	2301      	movs	r3, #1
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	e004      	b.n	800a210 <xTaskIncrementTick+0x158>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a206:	4b09      	ldr	r3, [pc, #36]	; (800a22c <xTaskIncrementTick+0x174>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3301      	adds	r3, #1
 800a20c:	4a07      	ldr	r2, [pc, #28]	; (800a22c <xTaskIncrementTick+0x174>)
 800a20e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a210:	4b10      	ldr	r3, [pc, #64]	; (800a254 <xTaskIncrementTick+0x19c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <xTaskIncrementTick+0x164>
		{
			xSwitchRequired = pdTRUE;
 800a218:	2301      	movs	r3, #1
 800a21a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a21c:	697b      	ldr	r3, [r7, #20]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	2000b8b4 	.word	0x2000b8b4
 800a22c:	2000b89c 	.word	0x2000b89c
 800a230:	200024a8 	.word	0x200024a8
 800a234:	2000b890 	.word	0x2000b890
 800a238:	2000b844 	.word	0x2000b844
 800a23c:	2000b848 	.word	0x2000b848
 800a240:	2000b8a4 	.word	0x2000b8a4
 800a244:	2000b8ac 	.word	0x2000b8ac
 800a248:	2000b894 	.word	0x2000b894
 800a24c:	2000b3bc 	.word	0x2000b3bc
 800a250:	2000b3b8 	.word	0x2000b3b8
 800a254:	2000b8a0 	.word	0x2000b8a0

0800a258 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a25e:	4b43      	ldr	r3, [pc, #268]	; (800a36c <vTaskSwitchContext+0x114>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a266:	4b42      	ldr	r3, [pc, #264]	; (800a370 <vTaskSwitchContext+0x118>)
 800a268:	2201      	movs	r2, #1
 800a26a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a26c:	e07a      	b.n	800a364 <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 800a26e:	4b40      	ldr	r3, [pc, #256]	; (800a370 <vTaskSwitchContext+0x118>)
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a274:	f7f6 fcfe 	bl	8000c74 <getRunTimeCounterValue>
 800a278:	4603      	mov	r3, r0
 800a27a:	4a3e      	ldr	r2, [pc, #248]	; (800a374 <vTaskSwitchContext+0x11c>)
 800a27c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a27e:	4b3d      	ldr	r3, [pc, #244]	; (800a374 <vTaskSwitchContext+0x11c>)
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	4b3d      	ldr	r3, [pc, #244]	; (800a378 <vTaskSwitchContext+0x120>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	429a      	cmp	r2, r3
 800a288:	d909      	bls.n	800a29e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a28a:	4b3c      	ldr	r3, [pc, #240]	; (800a37c <vTaskSwitchContext+0x124>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a290:	4a38      	ldr	r2, [pc, #224]	; (800a374 <vTaskSwitchContext+0x11c>)
 800a292:	6810      	ldr	r0, [r2, #0]
 800a294:	4a38      	ldr	r2, [pc, #224]	; (800a378 <vTaskSwitchContext+0x120>)
 800a296:	6812      	ldr	r2, [r2, #0]
 800a298:	1a82      	subs	r2, r0, r2
 800a29a:	440a      	add	r2, r1
 800a29c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a29e:	4b35      	ldr	r3, [pc, #212]	; (800a374 <vTaskSwitchContext+0x11c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a35      	ldr	r2, [pc, #212]	; (800a378 <vTaskSwitchContext+0x120>)
 800a2a4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2a6:	4b36      	ldr	r3, [pc, #216]	; (800a380 <vTaskSwitchContext+0x128>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	e012      	b.n	800a2d4 <vTaskSwitchContext+0x7c>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10c      	bne.n	800a2ce <vTaskSwitchContext+0x76>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	b672      	cpsid	i
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	b662      	cpsie	i
 800a2c8:	607b      	str	r3, [r7, #4]
}
 800a2ca:	bf00      	nop
 800a2cc:	e7fe      	b.n	800a2cc <vTaskSwitchContext+0x74>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	492b      	ldr	r1, [pc, #172]	; (800a384 <vTaskSwitchContext+0x12c>)
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	440b      	add	r3, r1
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0e2      	beq.n	800a2ae <vTaskSwitchContext+0x56>
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4a24      	ldr	r2, [pc, #144]	; (800a384 <vTaskSwitchContext+0x12c>)
 800a2f4:	4413      	add	r3, r2
 800a2f6:	60bb      	str	r3, [r7, #8]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	605a      	str	r2, [r3, #4]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	3308      	adds	r3, #8
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d104      	bne.n	800a318 <vTaskSwitchContext+0xc0>
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	605a      	str	r2, [r3, #4]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	4a17      	ldr	r2, [pc, #92]	; (800a37c <vTaskSwitchContext+0x124>)
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	4a17      	ldr	r2, [pc, #92]	; (800a380 <vTaskSwitchContext+0x128>)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800a328:	f7f7 fa4c 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800a32c:	4603      	mov	r3, r0
 800a32e:	4618      	mov	r0, r3
 800a330:	f7f7 f95e 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800a334:	4603      	mov	r3, r0
 800a336:	461a      	mov	r2, r3
 800a338:	4b13      	ldr	r3, [pc, #76]	; (800a388 <vTaskSwitchContext+0x130>)
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	4013      	ands	r3, r2
 800a33e:	b29b      	uxth	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00a      	beq.n	800a35a <vTaskSwitchContext+0x102>
 800a344:	f7f7 fa3e 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800a348:	4603      	mov	r3, r0
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7f7 f943 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 800a350:	4603      	mov	r3, r0
 800a352:	b2db      	uxtb	r3, r3
 800a354:	4618      	mov	r0, r3
 800a356:	f7f7 fea3 	bl	80020a0 <prvTraceStoreTaskswitch>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a35a:	4b08      	ldr	r3, [pc, #32]	; (800a37c <vTaskSwitchContext+0x124>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3358      	adds	r3, #88	; 0x58
 800a360:	4a0a      	ldr	r2, [pc, #40]	; (800a38c <vTaskSwitchContext+0x134>)
 800a362:	6013      	str	r3, [r2, #0]
}
 800a364:	bf00      	nop
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	2000b8b4 	.word	0x2000b8b4
 800a370:	2000b8a0 	.word	0x2000b8a0
 800a374:	2000b8bc 	.word	0x2000b8bc
 800a378:	2000b8b8 	.word	0x2000b8b8
 800a37c:	2000b3b8 	.word	0x2000b3b8
 800a380:	2000b894 	.word	0x2000b894
 800a384:	2000b3bc 	.word	0x2000b3bc
 800a388:	2000000a 	.word	0x2000000a
 800a38c:	2000001c 	.word	0x2000001c

0800a390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10c      	bne.n	800a3ba <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	b672      	cpsid	i
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	b662      	cpsie	i
 800a3b4:	60fb      	str	r3, [r7, #12]
}
 800a3b6:	bf00      	nop
 800a3b8:	e7fe      	b.n	800a3b8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3ba:	4b07      	ldr	r3, [pc, #28]	; (800a3d8 <vTaskPlaceOnEventList+0x48>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3318      	adds	r3, #24
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7fe f887 	bl	80084d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a3c8:	2101      	movs	r1, #1
 800a3ca:	6838      	ldr	r0, [r7, #0]
 800a3cc:	f000 fbf0 	bl	800abb0 <prvAddCurrentTaskToDelayedList>
}
 800a3d0:	bf00      	nop
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	2000b3b8 	.word	0x2000b3b8

0800a3dc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b086      	sub	sp, #24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10c      	bne.n	800a408 <vTaskPlaceOnUnorderedEventList+0x2c>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	b672      	cpsid	i
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	b662      	cpsie	i
 800a402:	617b      	str	r3, [r7, #20]
}
 800a404:	bf00      	nop
 800a406:	e7fe      	b.n	800a406 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a408:	4b12      	ldr	r3, [pc, #72]	; (800a454 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10c      	bne.n	800a42a <vTaskPlaceOnUnorderedEventList+0x4e>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	b672      	cpsid	i
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	b662      	cpsie	i
 800a424:	613b      	str	r3, [r7, #16]
}
 800a426:	bf00      	nop
 800a428:	e7fe      	b.n	800a428 <vTaskPlaceOnUnorderedEventList+0x4c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a42a:	4b0b      	ldr	r3, [pc, #44]	; (800a458 <vTaskPlaceOnUnorderedEventList+0x7c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a434:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a436:	4b08      	ldr	r3, [pc, #32]	; (800a458 <vTaskPlaceOnUnorderedEventList+0x7c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	3318      	adds	r3, #24
 800a43c:	4619      	mov	r1, r3
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f7fe f825 	bl	800848e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a444:	2101      	movs	r1, #1
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fbb2 	bl	800abb0 <prvAddCurrentTaskToDelayedList>
}
 800a44c:	bf00      	nop
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	2000b8b4 	.word	0x2000b8b4
 800a458:	2000b3b8 	.word	0x2000b3b8

0800a45c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10c      	bne.n	800a488 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	b672      	cpsid	i
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	b662      	cpsie	i
 800a482:	617b      	str	r3, [r7, #20]
}
 800a484:	bf00      	nop
 800a486:	e7fe      	b.n	800a486 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a488:	4b26      	ldr	r3, [pc, #152]	; (800a524 <vTaskPlaceOnEventListRestricted+0xc8>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	3318      	adds	r3, #24
 800a48e:	4619      	mov	r1, r3
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f7fd fffc 	bl	800848e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a49c:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a4a2:	4b20      	ldr	r3, [pc, #128]	; (800a524 <vTaskPlaceOnEventListRestricted+0xc8>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7f7 f8a2 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	4b1d      	ldr	r3, [pc, #116]	; (800a528 <vTaskPlaceOnEventListRestricted+0xcc>)
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d011      	beq.n	800a4e0 <vTaskPlaceOnEventListRestricted+0x84>
 800a4bc:	4b1b      	ldr	r3, [pc, #108]	; (800a52c <vTaskPlaceOnEventListRestricted+0xd0>)
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	2088      	movs	r0, #136	; 0x88
 800a4c8:	f7f7 fd84 	bl	8001fd4 <prvTraceStoreKernelCallWithNumericParamOnly>
 800a4cc:	4b15      	ldr	r3, [pc, #84]	; (800a524 <vTaskPlaceOnEventListRestricted+0xc8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7f7 f880 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7f7 fffe 	bl	80024dc <prvTraceSetTaskInstanceFinished>
 800a4e0:	f7f7 f970 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7f7 f882 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	4b0d      	ldr	r3, [pc, #52]	; (800a528 <vTaskPlaceOnEventListRestricted+0xcc>)
 800a4f2:	881b      	ldrh	r3, [r3, #0]
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00a      	beq.n	800a512 <vTaskPlaceOnEventListRestricted+0xb6>
 800a4fc:	f7f7 f962 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800a500:	4603      	mov	r3, r0
 800a502:	4618      	mov	r0, r3
 800a504:	f7f7 f867 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 800a508:	4603      	mov	r3, r0
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7f7 ffe5 	bl	80024dc <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	68b8      	ldr	r0, [r7, #8]
 800a516:	f000 fb4b 	bl	800abb0 <prvAddCurrentTaskToDelayedList>
	}
 800a51a:	bf00      	nop
 800a51c:	3718      	adds	r7, #24
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	2000b3b8 	.word	0x2000b3b8
 800a528:	2000000a 	.word	0x2000000a
 800a52c:	2000b890 	.word	0x2000b890

0800a530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10c      	bne.n	800a560 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	b672      	cpsid	i
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	f3bf 8f6f 	isb	sy
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	b662      	cpsie	i
 800a55a:	60fb      	str	r3, [r7, #12]
}
 800a55c:	bf00      	nop
 800a55e:	e7fe      	b.n	800a55e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	3318      	adds	r3, #24
 800a564:	4618      	mov	r0, r3
 800a566:	f7fd ffef 	bl	8008548 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a56a:	4b1e      	ldr	r3, [pc, #120]	; (800a5e4 <xTaskRemoveFromEventList+0xb4>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d11d      	bne.n	800a5ae <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	3304      	adds	r3, #4
 800a576:	4618      	mov	r0, r3
 800a578:	f7fd ffe6 	bl	8008548 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a580:	4b19      	ldr	r3, [pc, #100]	; (800a5e8 <xTaskRemoveFromEventList+0xb8>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d903      	bls.n	800a590 <xTaskRemoveFromEventList+0x60>
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58c:	4a16      	ldr	r2, [pc, #88]	; (800a5e8 <xTaskRemoveFromEventList+0xb8>)
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a594:	4613      	mov	r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4413      	add	r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4a13      	ldr	r2, [pc, #76]	; (800a5ec <xTaskRemoveFromEventList+0xbc>)
 800a59e:	441a      	add	r2, r3
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4610      	mov	r0, r2
 800a5a8:	f7fd ff71 	bl	800848e <vListInsertEnd>
 800a5ac:	e005      	b.n	800a5ba <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	3318      	adds	r3, #24
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	480e      	ldr	r0, [pc, #56]	; (800a5f0 <xTaskRemoveFromEventList+0xc0>)
 800a5b6:	f7fd ff6a 	bl	800848e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5be:	4b0d      	ldr	r3, [pc, #52]	; (800a5f4 <xTaskRemoveFromEventList+0xc4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d905      	bls.n	800a5d4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5cc:	4b0a      	ldr	r3, [pc, #40]	; (800a5f8 <xTaskRemoveFromEventList+0xc8>)
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	e001      	b.n	800a5d8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5d8:	697b      	ldr	r3, [r7, #20]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	2000b8b4 	.word	0x2000b8b4
 800a5e8:	2000b894 	.word	0x2000b894
 800a5ec:	2000b3bc 	.word	0x2000b3bc
 800a5f0:	2000b84c 	.word	0x2000b84c
 800a5f4:	2000b3b8 	.word	0x2000b3b8
 800a5f8:	2000b8a0 	.word	0x2000b8a0

0800a5fc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a606:	4b2b      	ldr	r3, [pc, #172]	; (800a6b4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10c      	bne.n	800a628 <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a612:	b672      	cpsid	i
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	b662      	cpsie	i
 800a622:	613b      	str	r3, [r7, #16]
}
 800a624:	bf00      	nop
 800a626:	e7fe      	b.n	800a626 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10c      	bne.n	800a658 <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	b672      	cpsid	i
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	b662      	cpsie	i
 800a652:	60fb      	str	r3, [r7, #12]
}
 800a654:	bf00      	nop
 800a656:	e7fe      	b.n	800a656 <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7fd ff75 	bl	8008548 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	3304      	adds	r3, #4
 800a662:	4618      	mov	r0, r3
 800a664:	f7fd ff70 	bl	8008548 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66c:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	429a      	cmp	r2, r3
 800a672:	d903      	bls.n	800a67c <vTaskRemoveFromUnorderedEventList+0x80>
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a678:	4a0f      	ldr	r2, [pc, #60]	; (800a6b8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a67a:	6013      	str	r3, [r2, #0]
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a680:	4613      	mov	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4413      	add	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4a0c      	ldr	r2, [pc, #48]	; (800a6bc <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a68a:	441a      	add	r2, r3
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	3304      	adds	r3, #4
 800a690:	4619      	mov	r1, r3
 800a692:	4610      	mov	r0, r2
 800a694:	f7fd fefb 	bl	800848e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a69c:	4b08      	ldr	r3, [pc, #32]	; (800a6c0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d902      	bls.n	800a6ac <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a6a6:	4b07      	ldr	r3, [pc, #28]	; (800a6c4 <vTaskRemoveFromUnorderedEventList+0xc8>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]
	}
}
 800a6ac:	bf00      	nop
 800a6ae:	3718      	adds	r7, #24
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	2000b8b4 	.word	0x2000b8b4
 800a6b8:	2000b894 	.word	0x2000b894
 800a6bc:	2000b3bc 	.word	0x2000b3bc
 800a6c0:	2000b3b8 	.word	0x2000b3b8
 800a6c4:	2000b8a0 	.word	0x2000b8a0

0800a6c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6d0:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <vTaskInternalSetTimeOutState+0x24>)
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6d8:	4b05      	ldr	r3, [pc, #20]	; (800a6f0 <vTaskInternalSetTimeOutState+0x28>)
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	605a      	str	r2, [r3, #4]
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	2000b8a4 	.word	0x2000b8a4
 800a6f0:	2000b890 	.word	0x2000b890

0800a6f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10c      	bne.n	800a71e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a708:	b672      	cpsid	i
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	b662      	cpsie	i
 800a718:	613b      	str	r3, [r7, #16]
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10c      	bne.n	800a73e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a728:	b672      	cpsid	i
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	b662      	cpsie	i
 800a738:	60fb      	str	r3, [r7, #12]
}
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a73e:	f001 f877 	bl	800b830 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a742:	4b1d      	ldr	r3, [pc, #116]	; (800a7b8 <xTaskCheckForTimeOut+0xc4>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	69ba      	ldr	r2, [r7, #24]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75a:	d102      	bne.n	800a762 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a75c:	2300      	movs	r3, #0
 800a75e:	61fb      	str	r3, [r7, #28]
 800a760:	e023      	b.n	800a7aa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	4b15      	ldr	r3, [pc, #84]	; (800a7bc <xTaskCheckForTimeOut+0xc8>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d007      	beq.n	800a77e <xTaskCheckForTimeOut+0x8a>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	69ba      	ldr	r2, [r7, #24]
 800a774:	429a      	cmp	r2, r3
 800a776:	d302      	bcc.n	800a77e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a778:	2301      	movs	r3, #1
 800a77a:	61fb      	str	r3, [r7, #28]
 800a77c:	e015      	b.n	800a7aa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	697a      	ldr	r2, [r7, #20]
 800a784:	429a      	cmp	r2, r3
 800a786:	d20b      	bcs.n	800a7a0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff ff97 	bl	800a6c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a79a:	2300      	movs	r3, #0
 800a79c:	61fb      	str	r3, [r7, #28]
 800a79e:	e004      	b.n	800a7aa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7aa:	f001 f875 	bl	800b898 <vPortExitCritical>

	return xReturn;
 800a7ae:	69fb      	ldr	r3, [r7, #28]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3720      	adds	r7, #32
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	2000b890 	.word	0x2000b890
 800a7bc:	2000b8a4 	.word	0x2000b8a4

0800a7c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7c4:	4b03      	ldr	r3, [pc, #12]	; (800a7d4 <vTaskMissedYield+0x14>)
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]
}
 800a7ca:	bf00      	nop
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	2000b8a0 	.word	0x2000b8a0

0800a7d8 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d005      	beq.n	800a7f2 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	e001      	b.n	800a7f6 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
	}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d004      	beq.n	800a81e <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 800a81e:	bf00      	nop
 800a820:	3714      	adds	r7, #20
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
	...

0800a82c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a834:	f000 f852 	bl	800a8dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a838:	4b06      	ldr	r3, [pc, #24]	; (800a854 <prvIdleTask+0x28>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d9f9      	bls.n	800a834 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a840:	4b05      	ldr	r3, [pc, #20]	; (800a858 <prvIdleTask+0x2c>)
 800a842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a850:	e7f0      	b.n	800a834 <prvIdleTask+0x8>
 800a852:	bf00      	nop
 800a854:	2000b3bc 	.word	0x2000b3bc
 800a858:	e000ed04 	.word	0xe000ed04

0800a85c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a862:	2300      	movs	r3, #0
 800a864:	607b      	str	r3, [r7, #4]
 800a866:	e00c      	b.n	800a882 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	4613      	mov	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4a12      	ldr	r2, [pc, #72]	; (800a8bc <prvInitialiseTaskLists+0x60>)
 800a874:	4413      	add	r3, r2
 800a876:	4618      	mov	r0, r3
 800a878:	f7fd fddc 	bl	8008434 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	3301      	adds	r3, #1
 800a880:	607b      	str	r3, [r7, #4]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b37      	cmp	r3, #55	; 0x37
 800a886:	d9ef      	bls.n	800a868 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a888:	480d      	ldr	r0, [pc, #52]	; (800a8c0 <prvInitialiseTaskLists+0x64>)
 800a88a:	f7fd fdd3 	bl	8008434 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a88e:	480d      	ldr	r0, [pc, #52]	; (800a8c4 <prvInitialiseTaskLists+0x68>)
 800a890:	f7fd fdd0 	bl	8008434 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a894:	480c      	ldr	r0, [pc, #48]	; (800a8c8 <prvInitialiseTaskLists+0x6c>)
 800a896:	f7fd fdcd 	bl	8008434 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a89a:	480c      	ldr	r0, [pc, #48]	; (800a8cc <prvInitialiseTaskLists+0x70>)
 800a89c:	f7fd fdca 	bl	8008434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a8a0:	480b      	ldr	r0, [pc, #44]	; (800a8d0 <prvInitialiseTaskLists+0x74>)
 800a8a2:	f7fd fdc7 	bl	8008434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a8a6:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <prvInitialiseTaskLists+0x78>)
 800a8a8:	4a05      	ldr	r2, [pc, #20]	; (800a8c0 <prvInitialiseTaskLists+0x64>)
 800a8aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a8ac:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <prvInitialiseTaskLists+0x7c>)
 800a8ae:	4a05      	ldr	r2, [pc, #20]	; (800a8c4 <prvInitialiseTaskLists+0x68>)
 800a8b0:	601a      	str	r2, [r3, #0]
}
 800a8b2:	bf00      	nop
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	2000b3bc 	.word	0x2000b3bc
 800a8c0:	2000b81c 	.word	0x2000b81c
 800a8c4:	2000b830 	.word	0x2000b830
 800a8c8:	2000b84c 	.word	0x2000b84c
 800a8cc:	2000b860 	.word	0x2000b860
 800a8d0:	2000b878 	.word	0x2000b878
 800a8d4:	2000b844 	.word	0x2000b844
 800a8d8:	2000b848 	.word	0x2000b848

0800a8dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8e2:	e019      	b.n	800a918 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a8e4:	f000 ffa4 	bl	800b830 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8e8:	4b10      	ldr	r3, [pc, #64]	; (800a92c <prvCheckTasksWaitingTermination+0x50>)
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fd fe27 	bl	8008548 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8fa:	4b0d      	ldr	r3, [pc, #52]	; (800a930 <prvCheckTasksWaitingTermination+0x54>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	4a0b      	ldr	r2, [pc, #44]	; (800a930 <prvCheckTasksWaitingTermination+0x54>)
 800a902:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a904:	4b0b      	ldr	r3, [pc, #44]	; (800a934 <prvCheckTasksWaitingTermination+0x58>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	3b01      	subs	r3, #1
 800a90a:	4a0a      	ldr	r2, [pc, #40]	; (800a934 <prvCheckTasksWaitingTermination+0x58>)
 800a90c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a90e:	f000 ffc3 	bl	800b898 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f810 	bl	800a938 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a918:	4b06      	ldr	r3, [pc, #24]	; (800a934 <prvCheckTasksWaitingTermination+0x58>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e1      	bne.n	800a8e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a920:	bf00      	nop
 800a922:	bf00      	nop
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	2000b860 	.word	0x2000b860
 800a930:	2000b88c 	.word	0x2000b88c
 800a934:	2000b874 	.word	0x2000b874

0800a938 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	3358      	adds	r3, #88	; 0x58
 800a944:	4618      	mov	r0, r3
 800a946:	f001 fafd 	bl	800bf44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a950:	2b00      	cmp	r3, #0
 800a952:	d108      	bne.n	800a966 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a958:	4618      	mov	r0, r3
 800a95a:	f001 f96d 	bl	800bc38 <vPortFree>
				vPortFree( pxTCB );
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f001 f96a 	bl	800bc38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a964:	e01a      	b.n	800a99c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d103      	bne.n	800a978 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 f961 	bl	800bc38 <vPortFree>
	}
 800a976:	e011      	b.n	800a99c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d00c      	beq.n	800a99c <prvDeleteTCB+0x64>
	__asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a986:	b672      	cpsid	i
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	b662      	cpsie	i
 800a996:	60fb      	str	r3, [r7, #12]
}
 800a998:	bf00      	nop
 800a99a:	e7fe      	b.n	800a99a <prvDeleteTCB+0x62>
	}
 800a99c:	bf00      	nop
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9aa:	4b0c      	ldr	r3, [pc, #48]	; (800a9dc <prvResetNextTaskUnblockTime+0x38>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d104      	bne.n	800a9be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9b4:	4b0a      	ldr	r3, [pc, #40]	; (800a9e0 <prvResetNextTaskUnblockTime+0x3c>)
 800a9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a9bc:	e008      	b.n	800a9d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9be:	4b07      	ldr	r3, [pc, #28]	; (800a9dc <prvResetNextTaskUnblockTime+0x38>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	4a04      	ldr	r2, [pc, #16]	; (800a9e0 <prvResetNextTaskUnblockTime+0x3c>)
 800a9ce:	6013      	str	r3, [r2, #0]
}
 800a9d0:	bf00      	nop
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	2000b844 	.word	0x2000b844
 800a9e0:	2000b8ac 	.word	0x2000b8ac

0800a9e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a9ea:	4b05      	ldr	r3, [pc, #20]	; (800aa00 <xTaskGetCurrentTaskHandle+0x1c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a9f0:	687b      	ldr	r3, [r7, #4]
	}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	2000b3b8 	.word	0x2000b3b8

0800aa04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa0a:	4b0b      	ldr	r3, [pc, #44]	; (800aa38 <xTaskGetSchedulerState+0x34>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d102      	bne.n	800aa18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa12:	2301      	movs	r3, #1
 800aa14:	607b      	str	r3, [r7, #4]
 800aa16:	e008      	b.n	800aa2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa18:	4b08      	ldr	r3, [pc, #32]	; (800aa3c <xTaskGetSchedulerState+0x38>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d102      	bne.n	800aa26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa20:	2302      	movs	r3, #2
 800aa22:	607b      	str	r3, [r7, #4]
 800aa24:	e001      	b.n	800aa2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa26:	2300      	movs	r3, #0
 800aa28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa2a:	687b      	ldr	r3, [r7, #4]
	}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	2000b898 	.word	0x2000b898
 800aa3c:	2000b8b4 	.word	0x2000b8b4

0800aa40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa40:	b590      	push	{r4, r7, lr}
 800aa42:	b087      	sub	sp, #28
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 8087 	beq.w	800ab66 <xTaskPriorityDisinherit+0x126>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa58:	4b45      	ldr	r3, [pc, #276]	; (800ab70 <xTaskPriorityDisinherit+0x130>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d00c      	beq.n	800aa7c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	b672      	cpsid	i
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	b662      	cpsie	i
 800aa76:	60fb      	str	r3, [r7, #12]
}
 800aa78:	bf00      	nop
 800aa7a:	e7fe      	b.n	800aa7a <xTaskPriorityDisinherit+0x3a>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10c      	bne.n	800aa9e <xTaskPriorityDisinherit+0x5e>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	b672      	cpsid	i
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	b662      	cpsie	i
 800aa98:	60bb      	str	r3, [r7, #8]
}
 800aa9a:	bf00      	nop
 800aa9c:	e7fe      	b.n	800aa9c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa2:	1e5a      	subs	r2, r3, #1
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d058      	beq.n	800ab66 <xTaskPriorityDisinherit+0x126>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d154      	bne.n	800ab66 <xTaskPriorityDisinherit+0x126>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fd fd41 	bl	8008548 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800aac6:	6938      	ldr	r0, [r7, #16]
 800aac8:	f7f6 fd92 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800aacc:	4603      	mov	r3, r0
 800aace:	461a      	mov	r2, r3
 800aad0:	4b28      	ldr	r3, [pc, #160]	; (800ab74 <xTaskPriorityDisinherit+0x134>)
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	4013      	ands	r3, r2
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d020      	beq.n	800ab1e <xTaskPriorityDisinherit+0xde>
 800aadc:	6938      	ldr	r0, [r7, #16]
 800aade:	f7f6 fd7a 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 800aae2:	4603      	mov	r3, r0
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	461c      	mov	r4, r3
 800aae8:	6938      	ldr	r0, [r7, #16]
 800aaea:	f7f6 fd74 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	2003      	movs	r0, #3
 800aaf6:	f7f7 fc3b 	bl	8002370 <prvTraceGetPriorityProperty>
 800aafa:	4603      	mov	r3, r0
 800aafc:	4622      	mov	r2, r4
 800aafe:	2103      	movs	r1, #3
 800ab00:	208f      	movs	r0, #143	; 0x8f
 800ab02:	f7f7 f9a1 	bl	8001e48 <prvTraceStoreKernelCallWithParam>
 800ab06:	6938      	ldr	r0, [r7, #16]
 800ab08:	f7f6 fd65 	bl	80015d6 <prvTraceGetTaskNumberLow16>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	b2d9      	uxtb	r1, r3
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	461a      	mov	r2, r3
 800ab18:	2003      	movs	r0, #3
 800ab1a:	f7f7 fbed 	bl	80022f8 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab36:	4b10      	ldr	r3, [pc, #64]	; (800ab78 <xTaskPriorityDisinherit+0x138>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d903      	bls.n	800ab46 <xTaskPriorityDisinherit+0x106>
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	4a0d      	ldr	r2, [pc, #52]	; (800ab78 <xTaskPriorityDisinherit+0x138>)
 800ab44:	6013      	str	r3, [r2, #0]
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4a0a      	ldr	r2, [pc, #40]	; (800ab7c <xTaskPriorityDisinherit+0x13c>)
 800ab54:	441a      	add	r2, r3
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	3304      	adds	r3, #4
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	f7fd fc96 	bl	800848e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab62:	2301      	movs	r3, #1
 800ab64:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab66:	697b      	ldr	r3, [r7, #20]
	}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	371c      	adds	r7, #28
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd90      	pop	{r4, r7, pc}
 800ab70:	2000b3b8 	.word	0x2000b3b8
 800ab74:	2000000a 	.word	0x2000000a
 800ab78:	2000b894 	.word	0x2000b894
 800ab7c:	2000b3bc 	.word	0x2000b3bc

0800ab80 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ab86:	4b09      	ldr	r3, [pc, #36]	; (800abac <uxTaskResetEventItemValue+0x2c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab8e:	4b07      	ldr	r3, [pc, #28]	; (800abac <uxTaskResetEventItemValue+0x2c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <uxTaskResetEventItemValue+0x2c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ab9c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ab9e:	687b      	ldr	r3, [r7, #4]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	2000b3b8 	.word	0x2000b3b8

0800abb0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abba:	4b21      	ldr	r3, [pc, #132]	; (800ac40 <prvAddCurrentTaskToDelayedList+0x90>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abc0:	4b20      	ldr	r3, [pc, #128]	; (800ac44 <prvAddCurrentTaskToDelayedList+0x94>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3304      	adds	r3, #4
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fd fcbe 	bl	8008548 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd2:	d10a      	bne.n	800abea <prvAddCurrentTaskToDelayedList+0x3a>
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d007      	beq.n	800abea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abda:	4b1a      	ldr	r3, [pc, #104]	; (800ac44 <prvAddCurrentTaskToDelayedList+0x94>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3304      	adds	r3, #4
 800abe0:	4619      	mov	r1, r3
 800abe2:	4819      	ldr	r0, [pc, #100]	; (800ac48 <prvAddCurrentTaskToDelayedList+0x98>)
 800abe4:	f7fd fc53 	bl	800848e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abe8:	e026      	b.n	800ac38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4413      	add	r3, r2
 800abf0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abf2:	4b14      	ldr	r3, [pc, #80]	; (800ac44 <prvAddCurrentTaskToDelayedList+0x94>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d209      	bcs.n	800ac16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac02:	4b12      	ldr	r3, [pc, #72]	; (800ac4c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	4b0f      	ldr	r3, [pc, #60]	; (800ac44 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4610      	mov	r0, r2
 800ac10:	f7fd fc61 	bl	80084d6 <vListInsert>
}
 800ac14:	e010      	b.n	800ac38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac16:	4b0e      	ldr	r3, [pc, #56]	; (800ac50 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f7fd fc57 	bl	80084d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac28:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d202      	bcs.n	800ac38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac32:	4a08      	ldr	r2, [pc, #32]	; (800ac54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	6013      	str	r3, [r2, #0]
}
 800ac38:	bf00      	nop
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	2000b890 	.word	0x2000b890
 800ac44:	2000b3b8 	.word	0x2000b3b8
 800ac48:	2000b878 	.word	0x2000b878
 800ac4c:	2000b848 	.word	0x2000b848
 800ac50:	2000b844 	.word	0x2000b844
 800ac54:	2000b8ac 	.word	0x2000b8ac

0800ac58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08a      	sub	sp, #40	; 0x28
 800ac5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac62:	f000 fc57 	bl	800b514 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac66:	4b1d      	ldr	r3, [pc, #116]	; (800acdc <xTimerCreateTimerTask+0x84>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d021      	beq.n	800acb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac76:	1d3a      	adds	r2, r7, #4
 800ac78:	f107 0108 	add.w	r1, r7, #8
 800ac7c:	f107 030c 	add.w	r3, r7, #12
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fd f811 	bl	8007ca8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	9202      	str	r2, [sp, #8]
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	2302      	movs	r3, #2
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	2300      	movs	r3, #0
 800ac96:	460a      	mov	r2, r1
 800ac98:	4911      	ldr	r1, [pc, #68]	; (800ace0 <xTimerCreateTimerTask+0x88>)
 800ac9a:	4812      	ldr	r0, [pc, #72]	; (800ace4 <xTimerCreateTimerTask+0x8c>)
 800ac9c:	f7fe fe3c 	bl	8009918 <xTaskCreateStatic>
 800aca0:	4603      	mov	r3, r0
 800aca2:	4a11      	ldr	r2, [pc, #68]	; (800ace8 <xTimerCreateTimerTask+0x90>)
 800aca4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aca6:	4b10      	ldr	r3, [pc, #64]	; (800ace8 <xTimerCreateTimerTask+0x90>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d001      	beq.n	800acb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800acae:	2301      	movs	r3, #1
 800acb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10c      	bne.n	800acd2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800acb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbc:	b672      	cpsid	i
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	b662      	cpsie	i
 800accc:	613b      	str	r3, [r7, #16]
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800acd2:	697b      	ldr	r3, [r7, #20]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3718      	adds	r7, #24
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	2000b8f0 	.word	0x2000b8f0
 800ace0:	0800d698 	.word	0x0800d698
 800ace4:	0800b015 	.word	0x0800b015
 800ace8:	2000b8f4 	.word	0x2000b8f4

0800acec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acec:	b590      	push	{r4, r7, lr}
 800acee:	b08b      	sub	sp, #44	; 0x2c
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10c      	bne.n	800ad1e <xTimerGenericCommand+0x32>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad08:	b672      	cpsid	i
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	b662      	cpsie	i
 800ad18:	623b      	str	r3, [r7, #32]
}
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad1e:	4b81      	ldr	r3, [pc, #516]	; (800af24 <xTimerGenericCommand+0x238>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 80f8 	beq.w	800af18 <xTimerGenericCommand+0x22c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b05      	cmp	r3, #5
 800ad38:	dc18      	bgt.n	800ad6c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad3a:	f7ff fe63 	bl	800aa04 <xTaskGetSchedulerState>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d109      	bne.n	800ad58 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad44:	4b77      	ldr	r3, [pc, #476]	; (800af24 <xTimerGenericCommand+0x238>)
 800ad46:	6818      	ldr	r0, [r3, #0]
 800ad48:	f107 0110 	add.w	r1, r7, #16
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad50:	f7fd fe20 	bl	8008994 <xQueueGenericSend>
 800ad54:	6278      	str	r0, [r7, #36]	; 0x24
 800ad56:	e012      	b.n	800ad7e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad58:	4b72      	ldr	r3, [pc, #456]	; (800af24 <xTimerGenericCommand+0x238>)
 800ad5a:	6818      	ldr	r0, [r3, #0]
 800ad5c:	f107 0110 	add.w	r1, r7, #16
 800ad60:	2300      	movs	r3, #0
 800ad62:	2200      	movs	r2, #0
 800ad64:	f7fd fe16 	bl	8008994 <xQueueGenericSend>
 800ad68:	6278      	str	r0, [r7, #36]	; 0x24
 800ad6a:	e008      	b.n	800ad7e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad6c:	4b6d      	ldr	r3, [pc, #436]	; (800af24 <xTimerGenericCommand+0x238>)
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	f107 0110 	add.w	r1, r7, #16
 800ad74:	2300      	movs	r3, #0
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	f7fe f822 	bl	8008dc0 <xQueueGenericSendFromISR>
 800ad7c:	6278      	str	r0, [r7, #36]	; 0x24
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f340 80c9 	ble.w	800af18 <xTimerGenericCommand+0x22c>
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b04      	cmp	r3, #4
 800ad8a:	d150      	bne.n	800ae2e <xTimerGenericCommand+0x142>
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d126      	bne.n	800ade0 <xTimerGenericCommand+0xf4>
 800ad92:	f7f6 fd17 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800ad96:	4603      	mov	r3, r0
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7f6 fc29 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	461a      	mov	r2, r3
 800ada2:	4b61      	ldr	r3, [pc, #388]	; (800af28 <xTimerGenericCommand+0x23c>)
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	4013      	ands	r3, r2
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 80b4 	beq.w	800af18 <xTimerGenericCommand+0x22c>
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f7f6 fcb0 	bl	8001716 <prvTraceGetTimerNumberHigh16>
 800adb6:	4603      	mov	r3, r0
 800adb8:	461a      	mov	r2, r3
 800adba:	4b5b      	ldr	r3, [pc, #364]	; (800af28 <xTimerGenericCommand+0x23c>)
 800adbc:	881b      	ldrh	r3, [r3, #0]
 800adbe:	4013      	ands	r3, r2
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 80a8 	beq.w	800af18 <xTimerGenericCommand+0x22c>
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f7f6 fc97 	bl	80016fc <prvTraceGetTimerNumberLow16>
 800adce:	4603      	mov	r3, r0
 800add0:	b2db      	uxtb	r3, r3
 800add2:	461a      	mov	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2105      	movs	r1, #5
 800add8:	20b4      	movs	r0, #180	; 0xb4
 800adda:	f7f7 f835 	bl	8001e48 <prvTraceStoreKernelCallWithParam>
 800adde:	e09b      	b.n	800af18 <xTimerGenericCommand+0x22c>
 800ade0:	f7f6 fcf0 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800ade4:	4603      	mov	r3, r0
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f6 fc02 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800adec:	4603      	mov	r3, r0
 800adee:	461a      	mov	r2, r3
 800adf0:	4b4d      	ldr	r3, [pc, #308]	; (800af28 <xTimerGenericCommand+0x23c>)
 800adf2:	881b      	ldrh	r3, [r3, #0]
 800adf4:	4013      	ands	r3, r2
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 808d 	beq.w	800af18 <xTimerGenericCommand+0x22c>
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f7f6 fc89 	bl	8001716 <prvTraceGetTimerNumberHigh16>
 800ae04:	4603      	mov	r3, r0
 800ae06:	461a      	mov	r2, r3
 800ae08:	4b47      	ldr	r3, [pc, #284]	; (800af28 <xTimerGenericCommand+0x23c>)
 800ae0a:	881b      	ldrh	r3, [r3, #0]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 8081 	beq.w	800af18 <xTimerGenericCommand+0x22c>
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f7f6 fc70 	bl	80016fc <prvTraceGetTimerNumberLow16>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2105      	movs	r1, #5
 800ae26:	20bd      	movs	r0, #189	; 0xbd
 800ae28:	f7f7 f80e 	bl	8001e48 <prvTraceStoreKernelCallWithParam>
 800ae2c:	e074      	b.n	800af18 <xTimerGenericCommand+0x22c>
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	2b05      	cmp	r3, #5
 800ae32:	d143      	bne.n	800aebc <xTimerGenericCommand+0x1d0>
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d140      	bne.n	800aebc <xTimerGenericCommand+0x1d0>
 800ae3a:	f7f6 fcc3 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7f6 fbd5 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800ae46:	4603      	mov	r3, r0
 800ae48:	461a      	mov	r2, r3
 800ae4a:	4b37      	ldr	r3, [pc, #220]	; (800af28 <xTimerGenericCommand+0x23c>)
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	4013      	ands	r3, r2
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d014      	beq.n	800ae80 <xTimerGenericCommand+0x194>
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f7f6 fc5d 	bl	8001716 <prvTraceGetTimerNumberHigh16>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	461a      	mov	r2, r3
 800ae60:	4b31      	ldr	r3, [pc, #196]	; (800af28 <xTimerGenericCommand+0x23c>)
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	4013      	ands	r3, r2
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d009      	beq.n	800ae80 <xTimerGenericCommand+0x194>
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f7f6 fc45 	bl	80016fc <prvTraceGetTimerNumberLow16>
 800ae72:	4603      	mov	r3, r0
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	461a      	mov	r2, r3
 800ae78:	2105      	movs	r1, #5
 800ae7a:	20b5      	movs	r0, #181	; 0xb5
 800ae7c:	f7f6 ff66 	bl	8001d4c <prvTraceStoreKernelCall>
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f7f6 fc3b 	bl	80016fc <prvTraceGetTimerNumberLow16>
 800ae86:	4603      	mov	r3, r0
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2205      	movs	r2, #5
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	200d      	movs	r0, #13
 800ae90:	f7f7 f978 	bl	8002184 <prvTraceStoreObjectNameOnCloseEvent>
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f7f6 fc31 	bl	80016fc <prvTraceGetTimerNumberLow16>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2205      	movs	r2, #5
 800aea0:	4619      	mov	r1, r3
 800aea2:	2015      	movs	r0, #21
 800aea4:	f7f7 f9c0 	bl	8002228 <prvTraceStoreObjectPropertiesOnCloseEvent>
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f7f6 fc27 	bl	80016fc <prvTraceGetTimerNumberLow16>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	2005      	movs	r0, #5
 800aeb6:	f7f7 fd79 	bl	80029ac <prvTraceFreeObjectHandle>
 800aeba:	e02d      	b.n	800af18 <xTimerGenericCommand+0x22c>
 800aebc:	f7f6 fc82 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800aec0:	4603      	mov	r3, r0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7f6 fb94 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800aec8:	4603      	mov	r3, r0
 800aeca:	461a      	mov	r2, r3
 800aecc:	4b16      	ldr	r3, [pc, #88]	; (800af28 <xTimerGenericCommand+0x23c>)
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	4013      	ands	r3, r2
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d01f      	beq.n	800af18 <xTimerGenericCommand+0x22c>
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f7f6 fc1c 	bl	8001716 <prvTraceGetTimerNumberHigh16>
 800aede:	4603      	mov	r3, r0
 800aee0:	461a      	mov	r2, r3
 800aee2:	4b11      	ldr	r3, [pc, #68]	; (800af28 <xTimerGenericCommand+0x23c>)
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	4013      	ands	r3, r2
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d014      	beq.n	800af18 <xTimerGenericCommand+0x22c>
 800aeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d101      	bne.n	800aef8 <xTimerGenericCommand+0x20c>
 800aef4:	2200      	movs	r2, #0
 800aef6:	e000      	b.n	800aefa <xTimerGenericCommand+0x20e>
 800aef8:	2209      	movs	r2, #9
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	4413      	add	r3, r2
 800aefe:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7f6 fbfa 	bl	80016fc <prvTraceGetTimerNumberLow16>
 800af08:	4603      	mov	r3, r0
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	461a      	mov	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2105      	movs	r1, #5
 800af12:	4620      	mov	r0, r4
 800af14:	f7f6 ff98 	bl	8001e48 <prvTraceStoreKernelCallWithParam>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	372c      	adds	r7, #44	; 0x2c
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd90      	pop	{r4, r7, pc}
 800af22:	bf00      	nop
 800af24:	2000b8f0 	.word	0x2000b8f0
 800af28:	2000000a 	.word	0x2000000a

0800af2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b088      	sub	sp, #32
 800af30:	af02      	add	r7, sp, #8
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af36:	4b35      	ldr	r3, [pc, #212]	; (800b00c <prvProcessExpiredTimer+0xe0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	3304      	adds	r3, #4
 800af44:	4618      	mov	r0, r3
 800af46:	f7fd faff 	bl	8008548 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );
 800af4a:	f7f6 fc3b 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800af4e:	4603      	mov	r3, r0
 800af50:	4618      	mov	r0, r3
 800af52:	f7f6 fb4d 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800af56:	4603      	mov	r3, r0
 800af58:	461a      	mov	r2, r3
 800af5a:	4b2d      	ldr	r3, [pc, #180]	; (800b010 <prvProcessExpiredTimer+0xe4>)
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	4013      	ands	r3, r2
 800af60:	b29b      	uxth	r3, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	d014      	beq.n	800af90 <prvProcessExpiredTimer+0x64>
 800af66:	6978      	ldr	r0, [r7, #20]
 800af68:	f7f6 fbd5 	bl	8001716 <prvTraceGetTimerNumberHigh16>
 800af6c:	4603      	mov	r3, r0
 800af6e:	461a      	mov	r2, r3
 800af70:	4b27      	ldr	r3, [pc, #156]	; (800b010 <prvProcessExpiredTimer+0xe4>)
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	4013      	ands	r3, r2
 800af76:	b29b      	uxth	r3, r3
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d009      	beq.n	800af90 <prvProcessExpiredTimer+0x64>
 800af7c:	6978      	ldr	r0, [r7, #20]
 800af7e:	f7f6 fbbd 	bl	80016fc <prvTraceGetTimerNumberLow16>
 800af82:	4603      	mov	r3, r0
 800af84:	b2db      	uxtb	r3, r3
 800af86:	461a      	mov	r2, r3
 800af88:	2105      	movs	r1, #5
 800af8a:	20db      	movs	r0, #219	; 0xdb
 800af8c:	f7f6 fede 	bl	8001d4c <prvTraceStoreKernelCall>

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af96:	f003 0304 	and.w	r3, r3, #4
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d024      	beq.n	800afe8 <prvProcessExpiredTimer+0xbc>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	699a      	ldr	r2, [r3, #24]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	18d1      	adds	r1, r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	6978      	ldr	r0, [r7, #20]
 800afac:	f000 f8d6 	bl	800b15c <prvInsertTimerInActiveList>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d021      	beq.n	800affa <prvProcessExpiredTimer+0xce>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afb6:	2300      	movs	r3, #0
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	2300      	movs	r3, #0
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	2100      	movs	r1, #0
 800afc0:	6978      	ldr	r0, [r7, #20]
 800afc2:	f7ff fe93 	bl	800acec <xTimerGenericCommand>
 800afc6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d115      	bne.n	800affa <prvProcessExpiredTimer+0xce>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	b672      	cpsid	i
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	b662      	cpsie	i
 800afe2:	60fb      	str	r3, [r7, #12]
}
 800afe4:	bf00      	nop
 800afe6:	e7fe      	b.n	800afe6 <prvProcessExpiredTimer+0xba>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afee:	f023 0301 	bic.w	r3, r3, #1
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	6978      	ldr	r0, [r7, #20]
 800b000:	4798      	blx	r3
}
 800b002:	bf00      	nop
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	2000b8e8 	.word	0x2000b8e8
 800b010:	2000000a 	.word	0x2000000a

0800b014 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b01c:	f107 0308 	add.w	r3, r7, #8
 800b020:	4618      	mov	r0, r3
 800b022:	f000 f857 	bl	800b0d4 <prvGetNextExpireTime>
 800b026:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	4619      	mov	r1, r3
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 f803 	bl	800b038 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b032:	f000 f8d5 	bl	800b1e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b036:	e7f1      	b.n	800b01c <prvTimerTask+0x8>

0800b038 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b042:	f7fe ff7b 	bl	8009f3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b046:	f107 0308 	add.w	r3, r7, #8
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 f866 	bl	800b11c <prvSampleTimeNow>
 800b050:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d130      	bne.n	800b0ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10a      	bne.n	800b074 <prvProcessTimerOrBlockTask+0x3c>
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	429a      	cmp	r2, r3
 800b064:	d806      	bhi.n	800b074 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b066:	f7fe ff77 	bl	8009f58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b06a:	68f9      	ldr	r1, [r7, #12]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7ff ff5d 	bl	800af2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b072:	e024      	b.n	800b0be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d008      	beq.n	800b08c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b07a:	4b13      	ldr	r3, [pc, #76]	; (800b0c8 <prvProcessTimerOrBlockTask+0x90>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <prvProcessTimerOrBlockTask+0x50>
 800b084:	2301      	movs	r3, #1
 800b086:	e000      	b.n	800b08a <prvProcessTimerOrBlockTask+0x52>
 800b088:	2300      	movs	r3, #0
 800b08a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b08c:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <prvProcessTimerOrBlockTask+0x94>)
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	4619      	mov	r1, r3
 800b09a:	f7fe fc09 	bl	80098b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b09e:	f7fe ff5b 	bl	8009f58 <xTaskResumeAll>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b0a8:	4b09      	ldr	r3, [pc, #36]	; (800b0d0 <prvProcessTimerOrBlockTask+0x98>)
 800b0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	f3bf 8f6f 	isb	sy
}
 800b0b8:	e001      	b.n	800b0be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b0ba:	f7fe ff4d 	bl	8009f58 <xTaskResumeAll>
}
 800b0be:	bf00      	nop
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	2000b8ec 	.word	0x2000b8ec
 800b0cc:	2000b8f0 	.word	0x2000b8f0
 800b0d0:	e000ed04 	.word	0xe000ed04

0800b0d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0dc:	4b0e      	ldr	r3, [pc, #56]	; (800b118 <prvGetNextExpireTime+0x44>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <prvGetNextExpireTime+0x16>
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	e000      	b.n	800b0ec <prvGetNextExpireTime+0x18>
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d105      	bne.n	800b104 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0f8:	4b07      	ldr	r3, [pc, #28]	; (800b118 <prvGetNextExpireTime+0x44>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	60fb      	str	r3, [r7, #12]
 800b102:	e001      	b.n	800b108 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b104:	2300      	movs	r3, #0
 800b106:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b108:	68fb      	ldr	r3, [r7, #12]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	2000b8e8 	.word	0x2000b8e8

0800b11c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b124:	f7fe ffb8 	bl	800a098 <xTaskGetTickCount>
 800b128:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b12a:	4b0b      	ldr	r3, [pc, #44]	; (800b158 <prvSampleTimeNow+0x3c>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	429a      	cmp	r2, r3
 800b132:	d205      	bcs.n	800b140 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b134:	f000 f962 	bl	800b3fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	e002      	b.n	800b146 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b146:	4a04      	ldr	r2, [pc, #16]	; (800b158 <prvSampleTimeNow+0x3c>)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b14c:	68fb      	ldr	r3, [r7, #12]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	2000b8f8 	.word	0x2000b8f8

0800b15c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d812      	bhi.n	800b1a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	1ad2      	subs	r2, r2, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d302      	bcc.n	800b196 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b190:	2301      	movs	r3, #1
 800b192:	617b      	str	r3, [r7, #20]
 800b194:	e01b      	b.n	800b1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b196:	4b10      	ldr	r3, [pc, #64]	; (800b1d8 <prvInsertTimerInActiveList+0x7c>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3304      	adds	r3, #4
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	f7fd f998 	bl	80084d6 <vListInsert>
 800b1a6:	e012      	b.n	800b1ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d206      	bcs.n	800b1be <prvInsertTimerInActiveList+0x62>
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d302      	bcc.n	800b1be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	617b      	str	r3, [r7, #20]
 800b1bc:	e007      	b.n	800b1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1be:	4b07      	ldr	r3, [pc, #28]	; (800b1dc <prvInsertTimerInActiveList+0x80>)
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	f7fd f984 	bl	80084d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b1ce:	697b      	ldr	r3, [r7, #20]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	2000b8ec 	.word	0x2000b8ec
 800b1dc:	2000b8e8 	.word	0x2000b8e8

0800b1e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b08e      	sub	sp, #56	; 0x38
 800b1e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1e6:	e0f4      	b.n	800b3d2 <prvProcessReceivedCommands+0x1f2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	da1a      	bge.n	800b224 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1ee:	1d3b      	adds	r3, r7, #4
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10c      	bne.n	800b214 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	b672      	cpsid	i
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	b662      	cpsie	i
 800b20e:	61fb      	str	r3, [r7, #28]
}
 800b210:	bf00      	nop
 800b212:	e7fe      	b.n	800b212 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b21a:	6850      	ldr	r0, [r2, #4]
 800b21c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b21e:	6892      	ldr	r2, [r2, #8]
 800b220:	4611      	mov	r1, r2
 800b222:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	f2c0 80d2 	blt.w	800b3d0 <prvProcessReceivedCommands+0x1f0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	695b      	ldr	r3, [r3, #20]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d004      	beq.n	800b242 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23a:	3304      	adds	r3, #4
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fd f983 	bl	8008548 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b242:	463b      	mov	r3, r7
 800b244:	4618      	mov	r0, r3
 800b246:	f7ff ff69 	bl	800b11c <prvSampleTimeNow>
 800b24a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b09      	cmp	r3, #9
 800b250:	f200 80bf 	bhi.w	800b3d2 <prvProcessReceivedCommands+0x1f2>
 800b254:	a201      	add	r2, pc, #4	; (adr r2, 800b25c <prvProcessReceivedCommands+0x7c>)
 800b256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25a:	bf00      	nop
 800b25c:	0800b285 	.word	0x0800b285
 800b260:	0800b285 	.word	0x0800b285
 800b264:	0800b285 	.word	0x0800b285
 800b268:	0800b345 	.word	0x0800b345
 800b26c:	0800b359 	.word	0x0800b359
 800b270:	0800b3a7 	.word	0x0800b3a7
 800b274:	0800b285 	.word	0x0800b285
 800b278:	0800b285 	.word	0x0800b285
 800b27c:	0800b345 	.word	0x0800b345
 800b280:	0800b359 	.word	0x0800b359
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b28a:	f043 0301 	orr.w	r3, r3, #1
 800b28e:	b2da      	uxtb	r2, r3
 800b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	699b      	ldr	r3, [r3, #24]
 800b29c:	18d1      	adds	r1, r2, r3
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2a4:	f7ff ff5a 	bl	800b15c <prvInsertTimerInActiveList>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 8091 	beq.w	800b3d2 <prvProcessReceivedCommands+0x1f2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b2:	6a1b      	ldr	r3, [r3, #32]
 800b2b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );
 800b2b8:	f7f6 fa84 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7f6 f996 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	4b4a      	ldr	r3, [pc, #296]	; (800b3f4 <prvProcessReceivedCommands+0x214>)
 800b2ca:	881b      	ldrh	r3, [r3, #0]
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d014      	beq.n	800b2fe <prvProcessReceivedCommands+0x11e>
 800b2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2d6:	f7f6 fa1e 	bl	8001716 <prvTraceGetTimerNumberHigh16>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	461a      	mov	r2, r3
 800b2de:	4b45      	ldr	r3, [pc, #276]	; (800b3f4 <prvProcessReceivedCommands+0x214>)
 800b2e0:	881b      	ldrh	r3, [r3, #0]
 800b2e2:	4013      	ands	r3, r2
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d009      	beq.n	800b2fe <prvProcessReceivedCommands+0x11e>
 800b2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ec:	f7f6 fa06 	bl	80016fc <prvTraceGetTimerNumberLow16>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	2105      	movs	r1, #5
 800b2f8:	20db      	movs	r0, #219	; 0xdb
 800b2fa:	f7f6 fd27 	bl	8001d4c <prvTraceStoreKernelCall>

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b304:	f003 0304 	and.w	r3, r3, #4
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d062      	beq.n	800b3d2 <prvProcessReceivedCommands+0x1f2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	441a      	add	r2, r3
 800b314:	2300      	movs	r3, #0
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	2300      	movs	r3, #0
 800b31a:	2100      	movs	r1, #0
 800b31c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b31e:	f7ff fce5 	bl	800acec <xTimerGenericCommand>
 800b322:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b324:	6a3b      	ldr	r3, [r7, #32]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d153      	bne.n	800b3d2 <prvProcessReceivedCommands+0x1f2>
	__asm volatile
 800b32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32e:	b672      	cpsid	i
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	b662      	cpsie	i
 800b33e:	61bb      	str	r3, [r7, #24]
}
 800b340:	bf00      	nop
 800b342:	e7fe      	b.n	800b342 <prvProcessReceivedCommands+0x162>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b34a:	f023 0301 	bic.w	r3, r3, #1
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b356:	e03c      	b.n	800b3d2 <prvProcessReceivedCommands+0x1f2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b35e:	f043 0301 	orr.w	r3, r3, #1
 800b362:	b2da      	uxtb	r2, r3
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10c      	bne.n	800b392 <prvProcessReceivedCommands+0x1b2>
	__asm volatile
 800b378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37c:	b672      	cpsid	i
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	b662      	cpsie	i
 800b38c:	617b      	str	r3, [r7, #20]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <prvProcessReceivedCommands+0x1b0>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	699a      	ldr	r2, [r3, #24]
 800b396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b398:	18d1      	adds	r1, r2, r3
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b39e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3a0:	f7ff fedc 	bl	800b15c <prvInsertTimerInActiveList>
					break;
 800b3a4:	e015      	b.n	800b3d2 <prvProcessReceivedCommands+0x1f2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3ac:	f003 0302 	and.w	r3, r3, #2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d103      	bne.n	800b3bc <prvProcessReceivedCommands+0x1dc>
						{
							vPortFree( pxTimer );
 800b3b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3b6:	f000 fc3f 	bl	800bc38 <vPortFree>
 800b3ba:	e00a      	b.n	800b3d2 <prvProcessReceivedCommands+0x1f2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3c2:	f023 0301 	bic.w	r3, r3, #1
 800b3c6:	b2da      	uxtb	r2, r3
 800b3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b3ce:	e000      	b.n	800b3d2 <prvProcessReceivedCommands+0x1f2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b3d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b3d2:	4b09      	ldr	r3, [pc, #36]	; (800b3f8 <prvProcessReceivedCommands+0x218>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	1d39      	adds	r1, r7, #4
 800b3d8:	2200      	movs	r2, #0
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fd fe00 	bl	8008fe0 <xQueueReceive>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f47f af00 	bne.w	800b1e8 <prvProcessReceivedCommands+0x8>
	}
}
 800b3e8:	bf00      	nop
 800b3ea:	bf00      	nop
 800b3ec:	3730      	adds	r7, #48	; 0x30
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	2000000a 	.word	0x2000000a
 800b3f8:	2000b8f0 	.word	0x2000b8f0

0800b3fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b088      	sub	sp, #32
 800b400:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b402:	e06d      	b.n	800b4e0 <prvSwitchTimerLists+0xe4>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b404:	4b40      	ldr	r3, [pc, #256]	; (800b508 <prvSwitchTimerLists+0x10c>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b40e:	4b3e      	ldr	r3, [pc, #248]	; (800b508 <prvSwitchTimerLists+0x10c>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	3304      	adds	r3, #4
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fd f893 	bl	8008548 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );
 800b422:	f7f6 f9cf 	bl	80017c4 <prvTraceGetCurrentTaskHandle>
 800b426:	4603      	mov	r3, r0
 800b428:	4618      	mov	r0, r3
 800b42a:	f7f6 f8e1 	bl	80015f0 <prvTraceGetTaskNumberHigh16>
 800b42e:	4603      	mov	r3, r0
 800b430:	461a      	mov	r2, r3
 800b432:	4b36      	ldr	r3, [pc, #216]	; (800b50c <prvSwitchTimerLists+0x110>)
 800b434:	881b      	ldrh	r3, [r3, #0]
 800b436:	4013      	ands	r3, r2
 800b438:	b29b      	uxth	r3, r3
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d014      	beq.n	800b468 <prvSwitchTimerLists+0x6c>
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f7f6 f969 	bl	8001716 <prvTraceGetTimerNumberHigh16>
 800b444:	4603      	mov	r3, r0
 800b446:	461a      	mov	r2, r3
 800b448:	4b30      	ldr	r3, [pc, #192]	; (800b50c <prvSwitchTimerLists+0x110>)
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	4013      	ands	r3, r2
 800b44e:	b29b      	uxth	r3, r3
 800b450:	2b00      	cmp	r3, #0
 800b452:	d009      	beq.n	800b468 <prvSwitchTimerLists+0x6c>
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f7f6 f951 	bl	80016fc <prvTraceGetTimerNumberLow16>
 800b45a:	4603      	mov	r3, r0
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	461a      	mov	r2, r3
 800b460:	2105      	movs	r1, #5
 800b462:	20db      	movs	r0, #219	; 0xdb
 800b464:	f7f6 fc72 	bl	8001d4c <prvTraceStoreKernelCall>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6a1b      	ldr	r3, [r3, #32]
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b476:	f003 0304 	and.w	r3, r3, #4
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d030      	beq.n	800b4e0 <prvSwitchTimerLists+0xe4>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	4413      	add	r3, r2
 800b486:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d90e      	bls.n	800b4ae <prvSwitchTimerLists+0xb2>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b49c:	4b1a      	ldr	r3, [pc, #104]	; (800b508 <prvSwitchTimerLists+0x10c>)
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	f7fd f815 	bl	80084d6 <vListInsert>
 800b4ac:	e018      	b.n	800b4e0 <prvSwitchTimerLists+0xe4>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f7ff fc17 	bl	800acec <xTimerGenericCommand>
 800b4be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10c      	bne.n	800b4e0 <prvSwitchTimerLists+0xe4>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	b672      	cpsid	i
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	b662      	cpsie	i
 800b4da:	603b      	str	r3, [r7, #0]
}
 800b4dc:	bf00      	nop
 800b4de:	e7fe      	b.n	800b4de <prvSwitchTimerLists+0xe2>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4e0:	4b09      	ldr	r3, [pc, #36]	; (800b508 <prvSwitchTimerLists+0x10c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d18c      	bne.n	800b404 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b4ea:	4b07      	ldr	r3, [pc, #28]	; (800b508 <prvSwitchTimerLists+0x10c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b4f0:	4b07      	ldr	r3, [pc, #28]	; (800b510 <prvSwitchTimerLists+0x114>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a04      	ldr	r2, [pc, #16]	; (800b508 <prvSwitchTimerLists+0x10c>)
 800b4f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b4f8:	4a05      	ldr	r2, [pc, #20]	; (800b510 <prvSwitchTimerLists+0x114>)
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	6013      	str	r3, [r2, #0]
}
 800b4fe:	bf00      	nop
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	2000b8e8 	.word	0x2000b8e8
 800b50c:	2000000a 	.word	0x2000000a
 800b510:	2000b8ec 	.word	0x2000b8ec

0800b514 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b51a:	f000 f989 	bl	800b830 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b51e:	4b15      	ldr	r3, [pc, #84]	; (800b574 <prvCheckForValidListAndQueue+0x60>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d120      	bne.n	800b568 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b526:	4814      	ldr	r0, [pc, #80]	; (800b578 <prvCheckForValidListAndQueue+0x64>)
 800b528:	f7fc ff84 	bl	8008434 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b52c:	4813      	ldr	r0, [pc, #76]	; (800b57c <prvCheckForValidListAndQueue+0x68>)
 800b52e:	f7fc ff81 	bl	8008434 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b532:	4b13      	ldr	r3, [pc, #76]	; (800b580 <prvCheckForValidListAndQueue+0x6c>)
 800b534:	4a10      	ldr	r2, [pc, #64]	; (800b578 <prvCheckForValidListAndQueue+0x64>)
 800b536:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b538:	4b12      	ldr	r3, [pc, #72]	; (800b584 <prvCheckForValidListAndQueue+0x70>)
 800b53a:	4a10      	ldr	r2, [pc, #64]	; (800b57c <prvCheckForValidListAndQueue+0x68>)
 800b53c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b53e:	2300      	movs	r3, #0
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	4b11      	ldr	r3, [pc, #68]	; (800b588 <prvCheckForValidListAndQueue+0x74>)
 800b544:	4a11      	ldr	r2, [pc, #68]	; (800b58c <prvCheckForValidListAndQueue+0x78>)
 800b546:	2110      	movs	r1, #16
 800b548:	200a      	movs	r0, #10
 800b54a:	f7fd f891 	bl	8008670 <xQueueGenericCreateStatic>
 800b54e:	4603      	mov	r3, r0
 800b550:	4a08      	ldr	r2, [pc, #32]	; (800b574 <prvCheckForValidListAndQueue+0x60>)
 800b552:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b554:	4b07      	ldr	r3, [pc, #28]	; (800b574 <prvCheckForValidListAndQueue+0x60>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d005      	beq.n	800b568 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b55c:	4b05      	ldr	r3, [pc, #20]	; (800b574 <prvCheckForValidListAndQueue+0x60>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	490b      	ldr	r1, [pc, #44]	; (800b590 <prvCheckForValidListAndQueue+0x7c>)
 800b562:	4618      	mov	r0, r3
 800b564:	f7fe f96a 	bl	800983c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b568:	f000 f996 	bl	800b898 <vPortExitCritical>
}
 800b56c:	bf00      	nop
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	2000b8f0 	.word	0x2000b8f0
 800b578:	2000b8c0 	.word	0x2000b8c0
 800b57c:	2000b8d4 	.word	0x2000b8d4
 800b580:	2000b8e8 	.word	0x2000b8e8
 800b584:	2000b8ec 	.word	0x2000b8ec
 800b588:	2000b99c 	.word	0x2000b99c
 800b58c:	2000b8fc 	.word	0x2000b8fc
 800b590:	0800d6a0 	.word	0x0800d6a0

0800b594 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b594:	b580      	push	{r7, lr}
 800b596:	b08a      	sub	sp, #40	; 0x28
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b5a2:	f06f 0301 	mvn.w	r3, #1
 800b5a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b5b4:	4b06      	ldr	r3, [pc, #24]	; (800b5d0 <xTimerPendFunctionCallFromISR+0x3c>)
 800b5b6:	6818      	ldr	r0, [r3, #0]
 800b5b8:	f107 0114 	add.w	r1, r7, #20
 800b5bc:	2300      	movs	r3, #0
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	f7fd fbfe 	bl	8008dc0 <xQueueGenericSendFromISR>
 800b5c4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3728      	adds	r7, #40	; 0x28
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	2000b8f0 	.word	0x2000b8f0

0800b5d4 <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
	{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	3b04      	subs	r3, #4
 800b5fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3b04      	subs	r3, #4
 800b60a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f023 0201 	bic.w	r2, r3, #1
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	3b04      	subs	r3, #4
 800b61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b61c:	4a0c      	ldr	r2, [pc, #48]	; (800b650 <pxPortInitialiseStack+0x64>)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3b14      	subs	r3, #20
 800b626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3b04      	subs	r3, #4
 800b632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f06f 0202 	mvn.w	r2, #2
 800b63a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	3b20      	subs	r3, #32
 800b640:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b642:	68fb      	ldr	r3, [r7, #12]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr
 800b650:	0800b655 	.word	0x0800b655

0800b654 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b65e:	4b14      	ldr	r3, [pc, #80]	; (800b6b0 <prvTaskExitError+0x5c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b666:	d00c      	beq.n	800b682 <prvTaskExitError+0x2e>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66c:	b672      	cpsid	i
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	b662      	cpsie	i
 800b67c:	60fb      	str	r3, [r7, #12]
}
 800b67e:	bf00      	nop
 800b680:	e7fe      	b.n	800b680 <prvTaskExitError+0x2c>
	__asm volatile
 800b682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b686:	b672      	cpsid	i
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	b662      	cpsie	i
 800b696:	60bb      	str	r3, [r7, #8]
}
 800b698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b69a:	bf00      	nop
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d0fc      	beq.n	800b69c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6a2:	bf00      	nop
 800b6a4:	bf00      	nop
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	20000018 	.word	0x20000018
	...

0800b6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6c0:	4b07      	ldr	r3, [pc, #28]	; (800b6e0 <pxCurrentTCBConst2>)
 800b6c2:	6819      	ldr	r1, [r3, #0]
 800b6c4:	6808      	ldr	r0, [r1, #0]
 800b6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ca:	f380 8809 	msr	PSP, r0
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f04f 0000 	mov.w	r0, #0
 800b6d6:	f380 8811 	msr	BASEPRI, r0
 800b6da:	4770      	bx	lr
 800b6dc:	f3af 8000 	nop.w

0800b6e0 <pxCurrentTCBConst2>:
 800b6e0:	2000b3b8 	.word	0x2000b3b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6e4:	bf00      	nop
 800b6e6:	bf00      	nop

0800b6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6e8:	4808      	ldr	r0, [pc, #32]	; (800b70c <prvPortStartFirstTask+0x24>)
 800b6ea:	6800      	ldr	r0, [r0, #0]
 800b6ec:	6800      	ldr	r0, [r0, #0]
 800b6ee:	f380 8808 	msr	MSP, r0
 800b6f2:	f04f 0000 	mov.w	r0, #0
 800b6f6:	f380 8814 	msr	CONTROL, r0
 800b6fa:	b662      	cpsie	i
 800b6fc:	b661      	cpsie	f
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	df00      	svc	0
 800b708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b70a:	bf00      	nop
 800b70c:	e000ed08 	.word	0xe000ed08

0800b710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b716:	4b40      	ldr	r3, [pc, #256]	; (800b818 <xPortStartScheduler+0x108>)
 800b718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	22ff      	movs	r2, #255	; 0xff
 800b726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b730:	79fb      	ldrb	r3, [r7, #7]
 800b732:	b2db      	uxtb	r3, r3
 800b734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	4b38      	ldr	r3, [pc, #224]	; (800b81c <xPortStartScheduler+0x10c>)
 800b73c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b73e:	4b38      	ldr	r3, [pc, #224]	; (800b820 <xPortStartScheduler+0x110>)
 800b740:	2207      	movs	r2, #7
 800b742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b744:	e009      	b.n	800b75a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b746:	4b36      	ldr	r3, [pc, #216]	; (800b820 <xPortStartScheduler+0x110>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3b01      	subs	r3, #1
 800b74c:	4a34      	ldr	r2, [pc, #208]	; (800b820 <xPortStartScheduler+0x110>)
 800b74e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b750:	79fb      	ldrb	r3, [r7, #7]
 800b752:	b2db      	uxtb	r3, r3
 800b754:	005b      	lsls	r3, r3, #1
 800b756:	b2db      	uxtb	r3, r3
 800b758:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b75a:	79fb      	ldrb	r3, [r7, #7]
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b762:	2b80      	cmp	r3, #128	; 0x80
 800b764:	d0ef      	beq.n	800b746 <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800b766:	4b2e      	ldr	r3, [pc, #184]	; (800b820 <xPortStartScheduler+0x110>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f1c3 0307 	rsb	r3, r3, #7
 800b76e:	2b04      	cmp	r3, #4
 800b770:	d00c      	beq.n	800b78c <xPortStartScheduler+0x7c>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	b672      	cpsid	i
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	b662      	cpsie	i
 800b786:	613b      	str	r3, [r7, #16]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b78c:	4b24      	ldr	r3, [pc, #144]	; (800b820 <xPortStartScheduler+0x110>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f1c3 0307 	rsb	r3, r3, #7
 800b794:	2b04      	cmp	r3, #4
 800b796:	d00c      	beq.n	800b7b2 <xPortStartScheduler+0xa2>
	__asm volatile
 800b798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79c:	b672      	cpsid	i
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	b662      	cpsie	i
 800b7ac:	60fb      	str	r3, [r7, #12]
}
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <xPortStartScheduler+0xa0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b7b2:	4b1b      	ldr	r3, [pc, #108]	; (800b820 <xPortStartScheduler+0x110>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	021b      	lsls	r3, r3, #8
 800b7b8:	4a19      	ldr	r2, [pc, #100]	; (800b820 <xPortStartScheduler+0x110>)
 800b7ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7bc:	4b18      	ldr	r3, [pc, #96]	; (800b820 <xPortStartScheduler+0x110>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b7c4:	4a16      	ldr	r2, [pc, #88]	; (800b820 <xPortStartScheduler+0x110>)
 800b7c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	b2da      	uxtb	r2, r3
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7d0:	4b14      	ldr	r3, [pc, #80]	; (800b824 <xPortStartScheduler+0x114>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a13      	ldr	r2, [pc, #76]	; (800b824 <xPortStartScheduler+0x114>)
 800b7d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7dc:	4b11      	ldr	r3, [pc, #68]	; (800b824 <xPortStartScheduler+0x114>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a10      	ldr	r2, [pc, #64]	; (800b824 <xPortStartScheduler+0x114>)
 800b7e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b7e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7e8:	f000 f8da 	bl	800b9a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7ec:	4b0e      	ldr	r3, [pc, #56]	; (800b828 <xPortStartScheduler+0x118>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7f2:	f000 f8f9 	bl	800b9e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7f6:	4b0d      	ldr	r3, [pc, #52]	; (800b82c <xPortStartScheduler+0x11c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a0c      	ldr	r2, [pc, #48]	; (800b82c <xPortStartScheduler+0x11c>)
 800b7fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b800:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b802:	f7ff ff71 	bl	800b6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b806:	f7fe fd27 	bl	800a258 <vTaskSwitchContext>
	prvTaskExitError();
 800b80a:	f7ff ff23 	bl	800b654 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3718      	adds	r7, #24
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	e000e400 	.word	0xe000e400
 800b81c:	2000b9ec 	.word	0x2000b9ec
 800b820:	2000b9f0 	.word	0x2000b9f0
 800b824:	e000ed20 	.word	0xe000ed20
 800b828:	20000018 	.word	0x20000018
 800b82c:	e000ef34 	.word	0xe000ef34

0800b830 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
	__asm volatile
 800b836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83a:	b672      	cpsid	i
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	b662      	cpsie	i
 800b84a:	607b      	str	r3, [r7, #4]
}
 800b84c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b84e:	4b10      	ldr	r3, [pc, #64]	; (800b890 <vPortEnterCritical+0x60>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	3301      	adds	r3, #1
 800b854:	4a0e      	ldr	r2, [pc, #56]	; (800b890 <vPortEnterCritical+0x60>)
 800b856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b858:	4b0d      	ldr	r3, [pc, #52]	; (800b890 <vPortEnterCritical+0x60>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d111      	bne.n	800b884 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b860:	4b0c      	ldr	r3, [pc, #48]	; (800b894 <vPortEnterCritical+0x64>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00c      	beq.n	800b884 <vPortEnterCritical+0x54>
	__asm volatile
 800b86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86e:	b672      	cpsid	i
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	b662      	cpsie	i
 800b87e:	603b      	str	r3, [r7, #0]
}
 800b880:	bf00      	nop
 800b882:	e7fe      	b.n	800b882 <vPortEnterCritical+0x52>
	}
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	20000018 	.word	0x20000018
 800b894:	e000ed04 	.word	0xe000ed04

0800b898 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b89e:	4b13      	ldr	r3, [pc, #76]	; (800b8ec <vPortExitCritical+0x54>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10c      	bne.n	800b8c0 <vPortExitCritical+0x28>
	__asm volatile
 800b8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8aa:	b672      	cpsid	i
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	b662      	cpsie	i
 800b8ba:	607b      	str	r3, [r7, #4]
}
 800b8bc:	bf00      	nop
 800b8be:	e7fe      	b.n	800b8be <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b8c0:	4b0a      	ldr	r3, [pc, #40]	; (800b8ec <vPortExitCritical+0x54>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	4a09      	ldr	r2, [pc, #36]	; (800b8ec <vPortExitCritical+0x54>)
 800b8c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8ca:	4b08      	ldr	r3, [pc, #32]	; (800b8ec <vPortExitCritical+0x54>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d105      	bne.n	800b8de <vPortExitCritical+0x46>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	f383 8811 	msr	BASEPRI, r3
}
 800b8dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8de:	bf00      	nop
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	20000018 	.word	0x20000018

0800b8f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8f0:	f3ef 8009 	mrs	r0, PSP
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	4b15      	ldr	r3, [pc, #84]	; (800b950 <pxCurrentTCBConst>)
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	f01e 0f10 	tst.w	lr, #16
 800b900:	bf08      	it	eq
 800b902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90a:	6010      	str	r0, [r2, #0]
 800b90c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b910:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b914:	b672      	cpsid	i
 800b916:	f380 8811 	msr	BASEPRI, r0
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	b662      	cpsie	i
 800b924:	f7fe fc98 	bl	800a258 <vTaskSwitchContext>
 800b928:	f04f 0000 	mov.w	r0, #0
 800b92c:	f380 8811 	msr	BASEPRI, r0
 800b930:	bc09      	pop	{r0, r3}
 800b932:	6819      	ldr	r1, [r3, #0]
 800b934:	6808      	ldr	r0, [r1, #0]
 800b936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93a:	f01e 0f10 	tst.w	lr, #16
 800b93e:	bf08      	it	eq
 800b940:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b944:	f380 8809 	msr	PSP, r0
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop

0800b950 <pxCurrentTCBConst>:
 800b950:	2000b3b8 	.word	0x2000b3b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b954:	bf00      	nop
 800b956:	bf00      	nop

0800b958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	b672      	cpsid	i
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	b662      	cpsie	i
 800b972:	607b      	str	r3, [r7, #4]
}
 800b974:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b976:	f7fe fb9f 	bl	800a0b8 <xTaskIncrementTick>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d003      	beq.n	800b988 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b980:	4b06      	ldr	r3, [pc, #24]	; (800b99c <SysTick_Handler+0x44>)
 800b982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b986:	601a      	str	r2, [r3, #0]
 800b988:	2300      	movs	r3, #0
 800b98a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	f383 8811 	msr	BASEPRI, r3
}
 800b992:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b994:	bf00      	nop
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	e000ed04 	.word	0xe000ed04

0800b9a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9a4:	4b0b      	ldr	r3, [pc, #44]	; (800b9d4 <vPortSetupTimerInterrupt+0x34>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9aa:	4b0b      	ldr	r3, [pc, #44]	; (800b9d8 <vPortSetupTimerInterrupt+0x38>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9b0:	4b0a      	ldr	r3, [pc, #40]	; (800b9dc <vPortSetupTimerInterrupt+0x3c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a0a      	ldr	r2, [pc, #40]	; (800b9e0 <vPortSetupTimerInterrupt+0x40>)
 800b9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ba:	099b      	lsrs	r3, r3, #6
 800b9bc:	4a09      	ldr	r2, [pc, #36]	; (800b9e4 <vPortSetupTimerInterrupt+0x44>)
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9c2:	4b04      	ldr	r3, [pc, #16]	; (800b9d4 <vPortSetupTimerInterrupt+0x34>)
 800b9c4:	2207      	movs	r2, #7
 800b9c6:	601a      	str	r2, [r3, #0]
}
 800b9c8:	bf00      	nop
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	e000e010 	.word	0xe000e010
 800b9d8:	e000e018 	.word	0xe000e018
 800b9dc:	20000000 	.word	0x20000000
 800b9e0:	10624dd3 	.word	0x10624dd3
 800b9e4:	e000e014 	.word	0xe000e014

0800b9e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b9f8 <vPortEnableVFP+0x10>
 800b9ec:	6801      	ldr	r1, [r0, #0]
 800b9ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b9f2:	6001      	str	r1, [r0, #0]
 800b9f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9f6:	bf00      	nop
 800b9f8:	e000ed88 	.word	0xe000ed88

0800b9fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba02:	f3ef 8305 	mrs	r3, IPSR
 800ba06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2b0f      	cmp	r3, #15
 800ba0c:	d916      	bls.n	800ba3c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba0e:	4a19      	ldr	r2, [pc, #100]	; (800ba74 <vPortValidateInterruptPriority+0x78>)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	4413      	add	r3, r2
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba18:	4b17      	ldr	r3, [pc, #92]	; (800ba78 <vPortValidateInterruptPriority+0x7c>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	7afa      	ldrb	r2, [r7, #11]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d20c      	bcs.n	800ba3c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ba22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba26:	b672      	cpsid	i
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	b662      	cpsie	i
 800ba36:	607b      	str	r3, [r7, #4]
}
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba3c:	4b0f      	ldr	r3, [pc, #60]	; (800ba7c <vPortValidateInterruptPriority+0x80>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba44:	4b0e      	ldr	r3, [pc, #56]	; (800ba80 <vPortValidateInterruptPriority+0x84>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d90c      	bls.n	800ba66 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	b672      	cpsid	i
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	b662      	cpsie	i
 800ba60:	603b      	str	r3, [r7, #0]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <vPortValidateInterruptPriority+0x68>
	}
 800ba66:	bf00      	nop
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	e000e3f0 	.word	0xe000e3f0
 800ba78:	2000b9ec 	.word	0x2000b9ec
 800ba7c:	e000ed0c 	.word	0xe000ed0c
 800ba80:	2000b9f0 	.word	0x2000b9f0

0800ba84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08a      	sub	sp, #40	; 0x28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba90:	f7fe fa54 	bl	8009f3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba94:	4b63      	ldr	r3, [pc, #396]	; (800bc24 <pvPortMalloc+0x1a0>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d101      	bne.n	800baa0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba9c:	f000 f932 	bl	800bd04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800baa0:	4b61      	ldr	r3, [pc, #388]	; (800bc28 <pvPortMalloc+0x1a4>)
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4013      	ands	r3, r2
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f040 8092 	bne.w	800bbd2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d01f      	beq.n	800baf4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800bab4:	2208      	movs	r2, #8
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4413      	add	r3, r2
 800baba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f003 0307 	and.w	r3, r3, #7
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d016      	beq.n	800baf4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f023 0307 	bic.w	r3, r3, #7
 800bacc:	3308      	adds	r3, #8
 800bace:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f003 0307 	and.w	r3, r3, #7
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00c      	beq.n	800baf4 <pvPortMalloc+0x70>
	__asm volatile
 800bada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bade:	b672      	cpsid	i
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	b662      	cpsie	i
 800baee:	617b      	str	r3, [r7, #20]
}
 800baf0:	bf00      	nop
 800baf2:	e7fe      	b.n	800baf2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d06b      	beq.n	800bbd2 <pvPortMalloc+0x14e>
 800bafa:	4b4c      	ldr	r3, [pc, #304]	; (800bc2c <pvPortMalloc+0x1a8>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d866      	bhi.n	800bbd2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb04:	4b4a      	ldr	r3, [pc, #296]	; (800bc30 <pvPortMalloc+0x1ac>)
 800bb06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb08:	4b49      	ldr	r3, [pc, #292]	; (800bc30 <pvPortMalloc+0x1ac>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb0e:	e004      	b.n	800bb1a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d903      	bls.n	800bb2c <pvPortMalloc+0xa8>
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1f1      	bne.n	800bb10 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb2c:	4b3d      	ldr	r3, [pc, #244]	; (800bc24 <pvPortMalloc+0x1a0>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d04d      	beq.n	800bbd2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2208      	movs	r2, #8
 800bb3c:	4413      	add	r3, r2
 800bb3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	6a3b      	ldr	r3, [r7, #32]
 800bb46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	1ad2      	subs	r2, r2, r3
 800bb50:	2308      	movs	r3, #8
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d921      	bls.n	800bb9c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	f003 0307 	and.w	r3, r3, #7
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00c      	beq.n	800bb84 <pvPortMalloc+0x100>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	b672      	cpsid	i
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	b662      	cpsie	i
 800bb7e:	613b      	str	r3, [r7, #16]
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	685a      	ldr	r2, [r3, #4]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	1ad2      	subs	r2, r2, r3
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb96:	69b8      	ldr	r0, [r7, #24]
 800bb98:	f000 f916 	bl	800bdc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb9c:	4b23      	ldr	r3, [pc, #140]	; (800bc2c <pvPortMalloc+0x1a8>)
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	4a21      	ldr	r2, [pc, #132]	; (800bc2c <pvPortMalloc+0x1a8>)
 800bba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bbaa:	4b20      	ldr	r3, [pc, #128]	; (800bc2c <pvPortMalloc+0x1a8>)
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	4b21      	ldr	r3, [pc, #132]	; (800bc34 <pvPortMalloc+0x1b0>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d203      	bcs.n	800bbbe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbb6:	4b1d      	ldr	r3, [pc, #116]	; (800bc2c <pvPortMalloc+0x1a8>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a1e      	ldr	r2, [pc, #120]	; (800bc34 <pvPortMalloc+0x1b0>)
 800bbbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc0:	685a      	ldr	r2, [r3, #4]
 800bbc2:	4b19      	ldr	r3, [pc, #100]	; (800bc28 <pvPortMalloc+0x1a4>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	431a      	orrs	r2, r3
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	2200      	movs	r2, #0
 800bbd0:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d006      	beq.n	800bbe6 <pvPortMalloc+0x162>
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	2094      	movs	r0, #148	; 0x94
 800bbe0:	f7f6 f826 	bl	8001c30 <vTraceStoreMemMangEvent>
 800bbe4:	e005      	b.n	800bbf2 <pvPortMalloc+0x16e>
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	4619      	mov	r1, r3
 800bbec:	20e8      	movs	r0, #232	; 0xe8
 800bbee:	f7f6 f81f 	bl	8001c30 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 800bbf2:	f7fe f9b1 	bl	8009f58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	f003 0307 	and.w	r3, r3, #7
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00c      	beq.n	800bc1a <pvPortMalloc+0x196>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	b672      	cpsid	i
 800bc06:	f383 8811 	msr	BASEPRI, r3
 800bc0a:	f3bf 8f6f 	isb	sy
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	b662      	cpsie	i
 800bc14:	60fb      	str	r3, [r7, #12]
}
 800bc16:	bf00      	nop
 800bc18:	e7fe      	b.n	800bc18 <pvPortMalloc+0x194>
	return pvReturn;
 800bc1a:	69fb      	ldr	r3, [r7, #28]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3728      	adds	r7, #40	; 0x28
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	2000f5fc 	.word	0x2000f5fc
 800bc28:	2000f608 	.word	0x2000f608
 800bc2c:	2000f600 	.word	0x2000f600
 800bc30:	2000f5f4 	.word	0x2000f5f4
 800bc34:	2000f604 	.word	0x2000f604

0800bc38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d054      	beq.n	800bcf4 <vPortFree+0xbc>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc4a:	2308      	movs	r3, #8
 800bc4c:	425b      	negs	r3, r3
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	4413      	add	r3, r2
 800bc52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	4b27      	ldr	r3, [pc, #156]	; (800bcfc <vPortFree+0xc4>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4013      	ands	r3, r2
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10c      	bne.n	800bc80 <vPortFree+0x48>
	__asm volatile
 800bc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6a:	b672      	cpsid	i
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	b662      	cpsie	i
 800bc7a:	60fb      	str	r3, [r7, #12]
}
 800bc7c:	bf00      	nop
 800bc7e:	e7fe      	b.n	800bc7e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00c      	beq.n	800bca2 <vPortFree+0x6a>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	b672      	cpsid	i
 800bc8e:	f383 8811 	msr	BASEPRI, r3
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	b662      	cpsie	i
 800bc9c:	60bb      	str	r3, [r7, #8]
}
 800bc9e:	bf00      	nop
 800bca0:	e7fe      	b.n	800bca0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	4b15      	ldr	r3, [pc, #84]	; (800bcfc <vPortFree+0xc4>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4013      	ands	r3, r2
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d021      	beq.n	800bcf4 <vPortFree+0xbc>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d11d      	bne.n	800bcf4 <vPortFree+0xbc>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	4b0f      	ldr	r3, [pc, #60]	; (800bcfc <vPortFree+0xc4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	43db      	mvns	r3, r3
 800bcc2:	401a      	ands	r2, r3
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bcc8:	f7fe f938 	bl	8009f3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <vPortFree+0xc8>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	4a0a      	ldr	r2, [pc, #40]	; (800bd00 <vPortFree+0xc8>)
 800bcd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800bcda:	6879      	ldr	r1, [r7, #4]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	425b      	negs	r3, r3
 800bce2:	461a      	mov	r2, r3
 800bce4:	2096      	movs	r0, #150	; 0x96
 800bce6:	f7f5 ffa3 	bl	8001c30 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bcea:	6938      	ldr	r0, [r7, #16]
 800bcec:	f000 f86c 	bl	800bdc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bcf0:	f7fe f932 	bl	8009f58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bcf4:	bf00      	nop
 800bcf6:	3718      	adds	r7, #24
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	2000f608 	.word	0x2000f608
 800bd00:	2000f600 	.word	0x2000f600

0800bd04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bd0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd10:	4b27      	ldr	r3, [pc, #156]	; (800bdb0 <prvHeapInit+0xac>)
 800bd12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f003 0307 	and.w	r3, r3, #7
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00c      	beq.n	800bd38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	3307      	adds	r3, #7
 800bd22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f023 0307 	bic.w	r3, r3, #7
 800bd2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	4a1f      	ldr	r2, [pc, #124]	; (800bdb0 <prvHeapInit+0xac>)
 800bd34:	4413      	add	r3, r2
 800bd36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd3c:	4a1d      	ldr	r2, [pc, #116]	; (800bdb4 <prvHeapInit+0xb0>)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd42:	4b1c      	ldr	r3, [pc, #112]	; (800bdb4 <prvHeapInit+0xb0>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd50:	2208      	movs	r2, #8
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	1a9b      	subs	r3, r3, r2
 800bd56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f023 0307 	bic.w	r3, r3, #7
 800bd5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	4a15      	ldr	r2, [pc, #84]	; (800bdb8 <prvHeapInit+0xb4>)
 800bd64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd66:	4b14      	ldr	r3, [pc, #80]	; (800bdb8 <prvHeapInit+0xb4>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd6e:	4b12      	ldr	r3, [pc, #72]	; (800bdb8 <prvHeapInit+0xb4>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2200      	movs	r2, #0
 800bd74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	1ad2      	subs	r2, r2, r3
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd84:	4b0c      	ldr	r3, [pc, #48]	; (800bdb8 <prvHeapInit+0xb4>)
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	4a0a      	ldr	r2, [pc, #40]	; (800bdbc <prvHeapInit+0xb8>)
 800bd92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	4a09      	ldr	r2, [pc, #36]	; (800bdc0 <prvHeapInit+0xbc>)
 800bd9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd9c:	4b09      	ldr	r3, [pc, #36]	; (800bdc4 <prvHeapInit+0xc0>)
 800bd9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bda2:	601a      	str	r2, [r3, #0]
}
 800bda4:	bf00      	nop
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	2000b9f4 	.word	0x2000b9f4
 800bdb4:	2000f5f4 	.word	0x2000f5f4
 800bdb8:	2000f5fc 	.word	0x2000f5fc
 800bdbc:	2000f604 	.word	0x2000f604
 800bdc0:	2000f600 	.word	0x2000f600
 800bdc4:	2000f608 	.word	0x2000f608

0800bdc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bdd0:	4b28      	ldr	r3, [pc, #160]	; (800be74 <prvInsertBlockIntoFreeList+0xac>)
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	e002      	b.n	800bddc <prvInsertBlockIntoFreeList+0x14>
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d8f7      	bhi.n	800bdd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d108      	bne.n	800be0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	441a      	add	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	441a      	add	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d118      	bne.n	800be50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	4b15      	ldr	r3, [pc, #84]	; (800be78 <prvInsertBlockIntoFreeList+0xb0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	429a      	cmp	r2, r3
 800be28:	d00d      	beq.n	800be46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	441a      	add	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	601a      	str	r2, [r3, #0]
 800be44:	e008      	b.n	800be58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be46:	4b0c      	ldr	r3, [pc, #48]	; (800be78 <prvInsertBlockIntoFreeList+0xb0>)
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	e003      	b.n	800be58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d002      	beq.n	800be66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be66:	bf00      	nop
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	2000f5f4 	.word	0x2000f5f4
 800be78:	2000f5fc 	.word	0x2000f5fc

0800be7c <__libc_init_array>:
 800be7c:	b570      	push	{r4, r5, r6, lr}
 800be7e:	4d0d      	ldr	r5, [pc, #52]	; (800beb4 <__libc_init_array+0x38>)
 800be80:	4c0d      	ldr	r4, [pc, #52]	; (800beb8 <__libc_init_array+0x3c>)
 800be82:	1b64      	subs	r4, r4, r5
 800be84:	10a4      	asrs	r4, r4, #2
 800be86:	2600      	movs	r6, #0
 800be88:	42a6      	cmp	r6, r4
 800be8a:	d109      	bne.n	800bea0 <__libc_init_array+0x24>
 800be8c:	4d0b      	ldr	r5, [pc, #44]	; (800bebc <__libc_init_array+0x40>)
 800be8e:	4c0c      	ldr	r4, [pc, #48]	; (800bec0 <__libc_init_array+0x44>)
 800be90:	f000 f96a 	bl	800c168 <_init>
 800be94:	1b64      	subs	r4, r4, r5
 800be96:	10a4      	asrs	r4, r4, #2
 800be98:	2600      	movs	r6, #0
 800be9a:	42a6      	cmp	r6, r4
 800be9c:	d105      	bne.n	800beaa <__libc_init_array+0x2e>
 800be9e:	bd70      	pop	{r4, r5, r6, pc}
 800bea0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bea4:	4798      	blx	r3
 800bea6:	3601      	adds	r6, #1
 800bea8:	e7ee      	b.n	800be88 <__libc_init_array+0xc>
 800beaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800beae:	4798      	blx	r3
 800beb0:	3601      	adds	r6, #1
 800beb2:	e7f2      	b.n	800be9a <__libc_init_array+0x1e>
 800beb4:	0800d874 	.word	0x0800d874
 800beb8:	0800d874 	.word	0x0800d874
 800bebc:	0800d874 	.word	0x0800d874
 800bec0:	0800d878 	.word	0x0800d878

0800bec4 <__itoa>:
 800bec4:	1e93      	subs	r3, r2, #2
 800bec6:	2b22      	cmp	r3, #34	; 0x22
 800bec8:	b510      	push	{r4, lr}
 800beca:	460c      	mov	r4, r1
 800becc:	d904      	bls.n	800bed8 <__itoa+0x14>
 800bece:	2300      	movs	r3, #0
 800bed0:	700b      	strb	r3, [r1, #0]
 800bed2:	461c      	mov	r4, r3
 800bed4:	4620      	mov	r0, r4
 800bed6:	bd10      	pop	{r4, pc}
 800bed8:	2a0a      	cmp	r2, #10
 800beda:	d109      	bne.n	800bef0 <__itoa+0x2c>
 800bedc:	2800      	cmp	r0, #0
 800bede:	da07      	bge.n	800bef0 <__itoa+0x2c>
 800bee0:	232d      	movs	r3, #45	; 0x2d
 800bee2:	700b      	strb	r3, [r1, #0]
 800bee4:	4240      	negs	r0, r0
 800bee6:	2101      	movs	r1, #1
 800bee8:	4421      	add	r1, r4
 800beea:	f000 f8a3 	bl	800c034 <__utoa>
 800beee:	e7f1      	b.n	800bed4 <__itoa+0x10>
 800bef0:	2100      	movs	r1, #0
 800bef2:	e7f9      	b.n	800bee8 <__itoa+0x24>

0800bef4 <itoa>:
 800bef4:	f7ff bfe6 	b.w	800bec4 <__itoa>

0800bef8 <__retarget_lock_acquire_recursive>:
 800bef8:	4770      	bx	lr

0800befa <__retarget_lock_release_recursive>:
 800befa:	4770      	bx	lr

0800befc <memcpy>:
 800befc:	440a      	add	r2, r1
 800befe:	4291      	cmp	r1, r2
 800bf00:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf04:	d100      	bne.n	800bf08 <memcpy+0xc>
 800bf06:	4770      	bx	lr
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf12:	4291      	cmp	r1, r2
 800bf14:	d1f9      	bne.n	800bf0a <memcpy+0xe>
 800bf16:	bd10      	pop	{r4, pc}

0800bf18 <memset>:
 800bf18:	4402      	add	r2, r0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d100      	bne.n	800bf22 <memset+0xa>
 800bf20:	4770      	bx	lr
 800bf22:	f803 1b01 	strb.w	r1, [r3], #1
 800bf26:	e7f9      	b.n	800bf1c <memset+0x4>

0800bf28 <cleanup_glue>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	6809      	ldr	r1, [r1, #0]
 800bf2e:	4605      	mov	r5, r0
 800bf30:	b109      	cbz	r1, 800bf36 <cleanup_glue+0xe>
 800bf32:	f7ff fff9 	bl	800bf28 <cleanup_glue>
 800bf36:	4621      	mov	r1, r4
 800bf38:	4628      	mov	r0, r5
 800bf3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf3e:	f000 b8c7 	b.w	800c0d0 <_free_r>
	...

0800bf44 <_reclaim_reent>:
 800bf44:	4b2c      	ldr	r3, [pc, #176]	; (800bff8 <_reclaim_reent+0xb4>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4283      	cmp	r3, r0
 800bf4a:	b570      	push	{r4, r5, r6, lr}
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	d051      	beq.n	800bff4 <_reclaim_reent+0xb0>
 800bf50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bf52:	b143      	cbz	r3, 800bf66 <_reclaim_reent+0x22>
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d14a      	bne.n	800bff0 <_reclaim_reent+0xac>
 800bf5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf5c:	6819      	ldr	r1, [r3, #0]
 800bf5e:	b111      	cbz	r1, 800bf66 <_reclaim_reent+0x22>
 800bf60:	4620      	mov	r0, r4
 800bf62:	f000 f8b5 	bl	800c0d0 <_free_r>
 800bf66:	6961      	ldr	r1, [r4, #20]
 800bf68:	b111      	cbz	r1, 800bf70 <_reclaim_reent+0x2c>
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 f8b0 	bl	800c0d0 <_free_r>
 800bf70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bf72:	b111      	cbz	r1, 800bf7a <_reclaim_reent+0x36>
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 f8ab 	bl	800c0d0 <_free_r>
 800bf7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf7c:	b111      	cbz	r1, 800bf84 <_reclaim_reent+0x40>
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f000 f8a6 	bl	800c0d0 <_free_r>
 800bf84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bf86:	b111      	cbz	r1, 800bf8e <_reclaim_reent+0x4a>
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f000 f8a1 	bl	800c0d0 <_free_r>
 800bf8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bf90:	b111      	cbz	r1, 800bf98 <_reclaim_reent+0x54>
 800bf92:	4620      	mov	r0, r4
 800bf94:	f000 f89c 	bl	800c0d0 <_free_r>
 800bf98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bf9a:	b111      	cbz	r1, 800bfa2 <_reclaim_reent+0x5e>
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f000 f897 	bl	800c0d0 <_free_r>
 800bfa2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bfa4:	b111      	cbz	r1, 800bfac <_reclaim_reent+0x68>
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f000 f892 	bl	800c0d0 <_free_r>
 800bfac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfae:	b111      	cbz	r1, 800bfb6 <_reclaim_reent+0x72>
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f000 f88d 	bl	800c0d0 <_free_r>
 800bfb6:	69a3      	ldr	r3, [r4, #24]
 800bfb8:	b1e3      	cbz	r3, 800bff4 <_reclaim_reent+0xb0>
 800bfba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	4798      	blx	r3
 800bfc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bfc2:	b1b9      	cbz	r1, 800bff4 <_reclaim_reent+0xb0>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfca:	f7ff bfad 	b.w	800bf28 <cleanup_glue>
 800bfce:	5949      	ldr	r1, [r1, r5]
 800bfd0:	b941      	cbnz	r1, 800bfe4 <_reclaim_reent+0xa0>
 800bfd2:	3504      	adds	r5, #4
 800bfd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfd6:	2d80      	cmp	r5, #128	; 0x80
 800bfd8:	68d9      	ldr	r1, [r3, #12]
 800bfda:	d1f8      	bne.n	800bfce <_reclaim_reent+0x8a>
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f000 f877 	bl	800c0d0 <_free_r>
 800bfe2:	e7ba      	b.n	800bf5a <_reclaim_reent+0x16>
 800bfe4:	680e      	ldr	r6, [r1, #0]
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f000 f872 	bl	800c0d0 <_free_r>
 800bfec:	4631      	mov	r1, r6
 800bfee:	e7ef      	b.n	800bfd0 <_reclaim_reent+0x8c>
 800bff0:	2500      	movs	r5, #0
 800bff2:	e7ef      	b.n	800bfd4 <_reclaim_reent+0x90>
 800bff4:	bd70      	pop	{r4, r5, r6, pc}
 800bff6:	bf00      	nop
 800bff8:	2000001c 	.word	0x2000001c

0800bffc <strcpy>:
 800bffc:	4603      	mov	r3, r0
 800bffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c002:	f803 2b01 	strb.w	r2, [r3], #1
 800c006:	2a00      	cmp	r2, #0
 800c008:	d1f9      	bne.n	800bffe <strcpy+0x2>
 800c00a:	4770      	bx	lr

0800c00c <strncmp>:
 800c00c:	b510      	push	{r4, lr}
 800c00e:	b17a      	cbz	r2, 800c030 <strncmp+0x24>
 800c010:	4603      	mov	r3, r0
 800c012:	3901      	subs	r1, #1
 800c014:	1884      	adds	r4, r0, r2
 800c016:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c01a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c01e:	4290      	cmp	r0, r2
 800c020:	d101      	bne.n	800c026 <strncmp+0x1a>
 800c022:	42a3      	cmp	r3, r4
 800c024:	d101      	bne.n	800c02a <strncmp+0x1e>
 800c026:	1a80      	subs	r0, r0, r2
 800c028:	bd10      	pop	{r4, pc}
 800c02a:	2800      	cmp	r0, #0
 800c02c:	d1f3      	bne.n	800c016 <strncmp+0xa>
 800c02e:	e7fa      	b.n	800c026 <strncmp+0x1a>
 800c030:	4610      	mov	r0, r2
 800c032:	e7f9      	b.n	800c028 <strncmp+0x1c>

0800c034 <__utoa>:
 800c034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c036:	4c1f      	ldr	r4, [pc, #124]	; (800c0b4 <__utoa+0x80>)
 800c038:	b08b      	sub	sp, #44	; 0x2c
 800c03a:	4605      	mov	r5, r0
 800c03c:	460b      	mov	r3, r1
 800c03e:	466e      	mov	r6, sp
 800c040:	f104 0c20 	add.w	ip, r4, #32
 800c044:	6820      	ldr	r0, [r4, #0]
 800c046:	6861      	ldr	r1, [r4, #4]
 800c048:	4637      	mov	r7, r6
 800c04a:	c703      	stmia	r7!, {r0, r1}
 800c04c:	3408      	adds	r4, #8
 800c04e:	4564      	cmp	r4, ip
 800c050:	463e      	mov	r6, r7
 800c052:	d1f7      	bne.n	800c044 <__utoa+0x10>
 800c054:	7921      	ldrb	r1, [r4, #4]
 800c056:	7139      	strb	r1, [r7, #4]
 800c058:	1e91      	subs	r1, r2, #2
 800c05a:	6820      	ldr	r0, [r4, #0]
 800c05c:	6038      	str	r0, [r7, #0]
 800c05e:	2922      	cmp	r1, #34	; 0x22
 800c060:	f04f 0100 	mov.w	r1, #0
 800c064:	d904      	bls.n	800c070 <__utoa+0x3c>
 800c066:	7019      	strb	r1, [r3, #0]
 800c068:	460b      	mov	r3, r1
 800c06a:	4618      	mov	r0, r3
 800c06c:	b00b      	add	sp, #44	; 0x2c
 800c06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c070:	1e58      	subs	r0, r3, #1
 800c072:	4684      	mov	ip, r0
 800c074:	fbb5 f7f2 	udiv	r7, r5, r2
 800c078:	fb02 5617 	mls	r6, r2, r7, r5
 800c07c:	3628      	adds	r6, #40	; 0x28
 800c07e:	446e      	add	r6, sp
 800c080:	460c      	mov	r4, r1
 800c082:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c086:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c08a:	462e      	mov	r6, r5
 800c08c:	42b2      	cmp	r2, r6
 800c08e:	f101 0101 	add.w	r1, r1, #1
 800c092:	463d      	mov	r5, r7
 800c094:	d9ee      	bls.n	800c074 <__utoa+0x40>
 800c096:	2200      	movs	r2, #0
 800c098:	545a      	strb	r2, [r3, r1]
 800c09a:	1919      	adds	r1, r3, r4
 800c09c:	1aa5      	subs	r5, r4, r2
 800c09e:	42aa      	cmp	r2, r5
 800c0a0:	dae3      	bge.n	800c06a <__utoa+0x36>
 800c0a2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c0a6:	780e      	ldrb	r6, [r1, #0]
 800c0a8:	7006      	strb	r6, [r0, #0]
 800c0aa:	3201      	adds	r2, #1
 800c0ac:	f801 5901 	strb.w	r5, [r1], #-1
 800c0b0:	e7f4      	b.n	800c09c <__utoa+0x68>
 800c0b2:	bf00      	nop
 800c0b4:	0800d844 	.word	0x0800d844

0800c0b8 <__malloc_lock>:
 800c0b8:	4801      	ldr	r0, [pc, #4]	; (800c0c0 <__malloc_lock+0x8>)
 800c0ba:	f7ff bf1d 	b.w	800bef8 <__retarget_lock_acquire_recursive>
 800c0be:	bf00      	nop
 800c0c0:	2000f60c 	.word	0x2000f60c

0800c0c4 <__malloc_unlock>:
 800c0c4:	4801      	ldr	r0, [pc, #4]	; (800c0cc <__malloc_unlock+0x8>)
 800c0c6:	f7ff bf18 	b.w	800befa <__retarget_lock_release_recursive>
 800c0ca:	bf00      	nop
 800c0cc:	2000f60c 	.word	0x2000f60c

0800c0d0 <_free_r>:
 800c0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0d2:	2900      	cmp	r1, #0
 800c0d4:	d044      	beq.n	800c160 <_free_r+0x90>
 800c0d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0da:	9001      	str	r0, [sp, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f1a1 0404 	sub.w	r4, r1, #4
 800c0e2:	bfb8      	it	lt
 800c0e4:	18e4      	addlt	r4, r4, r3
 800c0e6:	f7ff ffe7 	bl	800c0b8 <__malloc_lock>
 800c0ea:	4a1e      	ldr	r2, [pc, #120]	; (800c164 <_free_r+0x94>)
 800c0ec:	9801      	ldr	r0, [sp, #4]
 800c0ee:	6813      	ldr	r3, [r2, #0]
 800c0f0:	b933      	cbnz	r3, 800c100 <_free_r+0x30>
 800c0f2:	6063      	str	r3, [r4, #4]
 800c0f4:	6014      	str	r4, [r2, #0]
 800c0f6:	b003      	add	sp, #12
 800c0f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0fc:	f7ff bfe2 	b.w	800c0c4 <__malloc_unlock>
 800c100:	42a3      	cmp	r3, r4
 800c102:	d908      	bls.n	800c116 <_free_r+0x46>
 800c104:	6825      	ldr	r5, [r4, #0]
 800c106:	1961      	adds	r1, r4, r5
 800c108:	428b      	cmp	r3, r1
 800c10a:	bf01      	itttt	eq
 800c10c:	6819      	ldreq	r1, [r3, #0]
 800c10e:	685b      	ldreq	r3, [r3, #4]
 800c110:	1949      	addeq	r1, r1, r5
 800c112:	6021      	streq	r1, [r4, #0]
 800c114:	e7ed      	b.n	800c0f2 <_free_r+0x22>
 800c116:	461a      	mov	r2, r3
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	b10b      	cbz	r3, 800c120 <_free_r+0x50>
 800c11c:	42a3      	cmp	r3, r4
 800c11e:	d9fa      	bls.n	800c116 <_free_r+0x46>
 800c120:	6811      	ldr	r1, [r2, #0]
 800c122:	1855      	adds	r5, r2, r1
 800c124:	42a5      	cmp	r5, r4
 800c126:	d10b      	bne.n	800c140 <_free_r+0x70>
 800c128:	6824      	ldr	r4, [r4, #0]
 800c12a:	4421      	add	r1, r4
 800c12c:	1854      	adds	r4, r2, r1
 800c12e:	42a3      	cmp	r3, r4
 800c130:	6011      	str	r1, [r2, #0]
 800c132:	d1e0      	bne.n	800c0f6 <_free_r+0x26>
 800c134:	681c      	ldr	r4, [r3, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	6053      	str	r3, [r2, #4]
 800c13a:	4421      	add	r1, r4
 800c13c:	6011      	str	r1, [r2, #0]
 800c13e:	e7da      	b.n	800c0f6 <_free_r+0x26>
 800c140:	d902      	bls.n	800c148 <_free_r+0x78>
 800c142:	230c      	movs	r3, #12
 800c144:	6003      	str	r3, [r0, #0]
 800c146:	e7d6      	b.n	800c0f6 <_free_r+0x26>
 800c148:	6825      	ldr	r5, [r4, #0]
 800c14a:	1961      	adds	r1, r4, r5
 800c14c:	428b      	cmp	r3, r1
 800c14e:	bf04      	itt	eq
 800c150:	6819      	ldreq	r1, [r3, #0]
 800c152:	685b      	ldreq	r3, [r3, #4]
 800c154:	6063      	str	r3, [r4, #4]
 800c156:	bf04      	itt	eq
 800c158:	1949      	addeq	r1, r1, r5
 800c15a:	6021      	streq	r1, [r4, #0]
 800c15c:	6054      	str	r4, [r2, #4]
 800c15e:	e7ca      	b.n	800c0f6 <_free_r+0x26>
 800c160:	b003      	add	sp, #12
 800c162:	bd30      	pop	{r4, r5, pc}
 800c164:	2000f610 	.word	0x2000f610

0800c168 <_init>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	bf00      	nop
 800c16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16e:	bc08      	pop	{r3}
 800c170:	469e      	mov	lr, r3
 800c172:	4770      	bx	lr

0800c174 <_fini>:
 800c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c176:	bf00      	nop
 800c178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c17a:	bc08      	pop	{r3}
 800c17c:	469e      	mov	lr, r3
 800c17e:	4770      	bx	lr
