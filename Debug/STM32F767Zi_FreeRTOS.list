
STM32F767Zi_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a70  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d84  08006d84  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d8c  08006d8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d8c  08006d8c  00016d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050e0  20000074  08006e08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005154  08006e08  00025154  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fcd6  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b08  00000000  00000000  0003fd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  00043880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  00045038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e42  00000000  00000000  00046698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b695  00000000  00000000  0004a4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010725a  00000000  00000000  00065b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016cdc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006800  00000000  00000000  0016ce1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08006c58 	.word	0x08006c58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08006c58 	.word	0x08006c58

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 fc05 	bl	8000d66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f84a 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f938 	bl	80007d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000564:	f000 f8d8 	bl	8000718 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000568:	f000 f906 	bl	8000778 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM10_Init();
 800056c:	f000 f8b0 	bl	80006d0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim10);
 8000570:	4816      	ldr	r0, [pc, #88]	; (80005cc <main+0x78>)
 8000572:	f002 f9a9 	bl	80028c8 <HAL_TIM_Base_Start>

  strcpy(buf, "stm32 FreeRTOS blinky project\r\n\0");
 8000576:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <main+0x7c>)
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <main+0x80>)
 800057a:	4614      	mov	r4, r2
 800057c:	461d      	mov	r5, r3
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000582:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  HAL_UART_Transmit(
        &huart3,
        (uint8_t*)buf,
        strlen(buf),
 800058a:	4811      	ldr	r0, [pc, #68]	; (80005d0 <main+0x7c>)
 800058c:	f7ff fe58 	bl	8000240 <strlen>
 8000590:	4603      	mov	r3, r0
  HAL_UART_Transmit(
 8000592:	b29a      	uxth	r2, r3
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	490d      	ldr	r1, [pc, #52]	; (80005d0 <main+0x7c>)
 800059a:	480f      	ldr	r0, [pc, #60]	; (80005d8 <main+0x84>)
 800059c:	f002 fcd0 	bl	8002f40 <HAL_UART_Transmit>
  );

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a0:	f003 fc68 	bl	8003e74 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <main+0x88>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	480d      	ldr	r0, [pc, #52]	; (80005e0 <main+0x8c>)
 80005aa:	f003 fccd 	bl	8003f48 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <main+0x90>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of BlinkyTask */
  BlinkyTaskHandle = osThreadNew(StartBlinkyTask, NULL, &BlinkyTask_attributes);
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <main+0x94>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <main+0x98>)
 80005ba:	f003 fcc5 	bl	8003f48 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <main+0x9c>)
 80005c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c4:	f003 fc8a 	bl	8003edc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <main+0x74>
 80005ca:	bf00      	nop
 80005cc:	20000090 	.word	0x20000090
 80005d0:	20000674 	.word	0x20000674
 80005d4:	08006c88 	.word	0x08006c88
 80005d8:	200000dc 	.word	0x200000dc
 80005dc:	08006cc4 	.word	0x08006cc4
 80005e0:	08000919 	.word	0x08000919
 80005e4:	2000066c 	.word	0x2000066c
 80005e8:	08006ce8 	.word	0x08006ce8
 80005ec:	08000929 	.word	0x08000929
 80005f0:	20000670 	.word	0x20000670

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2234      	movs	r2, #52	; 0x34
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f006 fa5e 	bl	8006ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000618:	f001 f800 	bl	800161c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <SystemClock_Config+0xd4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a29      	ldr	r2, [pc, #164]	; (80006c8 <SystemClock_Config+0xd4>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <SystemClock_Config+0xd4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <SystemClock_Config+0xd8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	4a23      	ldr	r2, [pc, #140]	; (80006cc <SystemClock_Config+0xd8>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <SystemClock_Config+0xd8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000650:	2303      	movs	r3, #3
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000654:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000658:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065a:	2301      	movs	r3, #1
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065e:	2310      	movs	r3, #16
 8000660:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800066c:	2319      	movs	r3, #25
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000670:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800067a:	2309      	movs	r3, #9
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4618      	mov	r0, r3
 8000688:	f000 ffd8 	bl	800163c <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000692:	f000 f96b 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fa71 	bl	8001b98 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006bc:	f000 f956 	bl	800096c <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_TIM10_Init+0x40>)
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <MX_TIM10_Init+0x44>)
 80006d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000;
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MX_TIM10_Init+0x40>)
 80006dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80006e0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_TIM10_Init+0x40>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_TIM10_Init+0x40>)
 80006ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ee:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_TIM10_Init+0x40>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_TIM10_Init+0x40>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_TIM10_Init+0x40>)
 80006fe:	f002 f88b 	bl	8002818 <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000708:	f000 f930 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000090 	.word	0x20000090
 8000714:	40014400 	.word	0x40014400

08000718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART3_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800075c:	f002 fba2 	bl	8002ea4 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f901 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000dc 	.word	0x200000dc
 8000774:	40004800 	.word	0x40004800

08000778 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000782:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2206      	movs	r2, #6
 8000788:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2202      	movs	r2, #2
 800078e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2202      	movs	r2, #2
 800079a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2201      	movs	r2, #1
 80007a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	f000 fde5 	bl	800138a <HAL_PCD_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f8d1 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000164 	.word	0x20000164

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b47      	ldr	r3, [pc, #284]	; (8000908 <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a46      	ldr	r2, [pc, #280]	; (8000908 <MX_GPIO_Init+0x134>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b44      	ldr	r3, [pc, #272]	; (8000908 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	4b41      	ldr	r3, [pc, #260]	; (8000908 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a40      	ldr	r2, [pc, #256]	; (8000908 <MX_GPIO_Init+0x134>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a3a      	ldr	r2, [pc, #232]	; (8000908 <MX_GPIO_Init+0x134>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b38      	ldr	r3, [pc, #224]	; (8000908 <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	4b35      	ldr	r3, [pc, #212]	; (8000908 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a34      	ldr	r2, [pc, #208]	; (8000908 <MX_GPIO_Init+0x134>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2e      	ldr	r2, [pc, #184]	; (8000908 <MX_GPIO_Init+0x134>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a28      	ldr	r2, [pc, #160]	; (8000908 <MX_GPIO_Init+0x134>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000880:	4822      	ldr	r0, [pc, #136]	; (800090c <MX_GPIO_Init+0x138>)
 8000882:	f000 fd4f 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	4821      	ldr	r0, [pc, #132]	; (8000910 <MX_GPIO_Init+0x13c>)
 800088c:	f000 fd4a 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	481b      	ldr	r0, [pc, #108]	; (8000914 <MX_GPIO_Init+0x140>)
 80008a8:	f000 fb90 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_GPIO_Init+0x138>)
 80008c6:	f000 fb81 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_GPIO_Init+0x13c>)
 80008e2:	f000 fb73 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_GPIO_Init+0x13c>)
 80008fa:	f000 fb67 	bl	8000fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020800 	.word	0x40020800

08000918 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1); // 10000 ticks == 1 sec
 8000920:	2001      	movs	r0, #1
 8000922:	f003 fbb7 	bl	8004094 <osDelay>
 8000926:	e7fb      	b.n	8000920 <StartDefaultTask+0x8>

08000928 <StartBlinkyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask */
void StartBlinkyTask(void *argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000930:	2101      	movs	r1, #1
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <StartBlinkyTask+0x1c>)
 8000934:	f000 fd0f 	bl	8001356 <HAL_GPIO_TogglePin>
	osDelay(1000); // 1000 ticks == 1 sec
 8000938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093c:	f003 fbaa 	bl	8004094 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000940:	e7f6      	b.n	8000930 <StartBlinkyTask+0x8>
 8000942:	bf00      	nop
 8000944:	40020400 	.word	0x40020400

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f000 fa11 	bl	8000d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40000400 	.word	0x40000400

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	210f      	movs	r1, #15
 80009b2:	f06f 0001 	mvn.w	r0, #1
 80009b6:	f000 fadf 	bl	8000f78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_TIM_Base_MspInit+0x38>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d10b      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_TIM_Base_MspInit+0x3c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <HAL_TIM_Base_MspInit+0x3c>)
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <HAL_TIM_Base_MspInit+0x3c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40014400 	.word	0x40014400
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0ae      	sub	sp, #184	; 0xb8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2290      	movs	r2, #144	; 0x90
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f006 f84b 	bl	8006ac4 <memset>
  if(huart->Instance==USART3)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a22      	ldr	r2, [pc, #136]	; (8000abc <HAL_UART_MspInit+0xb4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d13c      	bne.n	8000ab2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fabe 	bl	8001fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a52:	f7ff ff8b 	bl	800096c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_UART_MspInit+0xb8>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a19      	ldr	r2, [pc, #100]	; (8000ac0 <HAL_UART_MspInit+0xb8>)
 8000a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0xb8>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_UART_MspInit+0xb8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <HAL_UART_MspInit+0xb8>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0xb8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_UART_MspInit+0xbc>)
 8000aae:	f000 fa8d 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	37b8      	adds	r7, #184	; 0xb8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004800 	.word	0x40004800
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020c00 	.word	0x40020c00

08000ac8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0ae      	sub	sp, #184	; 0xb8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2290      	movs	r2, #144	; 0x90
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f005 ffeb 	bl	8006ac4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000af6:	d159      	bne.n	8000bac <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000af8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000afc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fa5d 	bl	8001fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000b14:	f7ff ff2a 	bl	800096c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <HAL_PCD_MspInit+0xec>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <HAL_PCD_MspInit+0xec>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <HAL_PCD_MspInit+0xec>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b30:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000b34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b54:	4619      	mov	r1, r3
 8000b56:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <HAL_PCD_MspInit+0xf0>)
 8000b58:	f000 fa38 	bl	8000fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b74:	4619      	mov	r1, r3
 8000b76:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <HAL_PCD_MspInit+0xf0>)
 8000b78:	f000 fa28 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_PCD_MspInit+0xec>)
 8000b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b80:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <HAL_PCD_MspInit+0xec>)
 8000b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b86:	6353      	str	r3, [r2, #52]	; 0x34
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_PCD_MspInit+0xec>)
 8000b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <HAL_PCD_MspInit+0xec>)
 8000b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_PCD_MspInit+0xec>)
 8000b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <HAL_PCD_MspInit+0xec>)
 8000ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bac:	bf00      	nop
 8000bae:	37b8      	adds	r7, #184	; 0xb8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000bcc:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <HAL_InitTick+0xe0>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a32      	ldr	r2, [pc, #200]	; (8000c9c <HAL_InitTick+0xe0>)
 8000bd2:	f043 0302 	orr.w	r3, r3, #2
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <HAL_InitTick+0xe0>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be4:	f107 0210 	add.w	r2, r7, #16
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 f9b8 	bl	8001f64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d103      	bne.n	8000c06 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bfe:	f001 f989 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 8000c02:	6378      	str	r0, [r7, #52]	; 0x34
 8000c04:	e004      	b.n	8000c10 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c06:	f001 f985 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c12:	4a23      	ldr	r2, [pc, #140]	; (8000ca0 <HAL_InitTick+0xe4>)
 8000c14:	fba2 2303 	umull	r2, r3, r2, r3
 8000c18:	0c9b      	lsrs	r3, r3, #18
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <HAL_InitTick+0xe8>)
 8000c20:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <HAL_InitTick+0xec>)
 8000c22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <HAL_InitTick+0xe8>)
 8000c26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_InitTick+0xe8>)
 8000c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c30:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <HAL_InitTick+0xe8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <HAL_InitTick+0xe8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <HAL_InitTick+0xe8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <HAL_InitTick+0xe8>)
 8000c46:	f001 fde7 	bl	8002818 <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d11b      	bne.n	8000c90 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000c58:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <HAL_InitTick+0xe8>)
 8000c5a:	f001 fea5 	bl	80029a8 <HAL_TIM_Base_Start_IT>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d111      	bne.n	8000c90 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c6c:	201d      	movs	r0, #29
 8000c6e:	f000 f99f 	bl	8000fb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d808      	bhi.n	8000c8a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	201d      	movs	r0, #29
 8000c7e:	f000 f97b 	bl	8000f78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_InitTick+0xf0>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	e002      	b.n	8000c90 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3738      	adds	r7, #56	; 0x38
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	431bde83 	.word	0x431bde83
 8000ca4:	200006f4 	.word	0x200006f4
 8000ca8:	40000400 	.word	0x40000400
 8000cac:	20000004 	.word	0x20000004

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <TIM3_IRQHandler+0x10>)
 8000ce2:	f001 fed9 	bl	8002a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200006f4 	.word	0x200006f4

08000cf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d1a:	490e      	ldr	r1, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d30:	4c0b      	ldr	r4, [pc, #44]	; (8000d60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3e:	f7ff ffd7 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d42:	f005 fe8b 	bl	8006a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fc05 	bl	8000554 <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d58:	08006d94 	.word	0x08006d94
  ldr r2, =_sbss
 8000d5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d60:	20005154 	.word	0x20005154

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>

08000d66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f8f9 	bl	8000f62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d70:	200f      	movs	r0, #15
 8000d72:	f7ff ff23 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d76:	f7ff fdff 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000740 	.word	0x20000740

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000740 	.word	0x20000740

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_Delay+0x44>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <__NVIC_SetPriorityGrouping+0x40>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x40>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	05fa0000 	.word	0x05fa0000

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff4c 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8a:	f7ff ff61 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff ffb1 	bl	8000efc <NVIC_EncodePriority>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff80 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff54 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e175      	b.n	80012d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 8164 	bne.w	80012d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_GPIO_Init+0x56>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d130      	bne.n	8001084 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	f003 0201 	and.w	r2, r3, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b03      	cmp	r3, #3
 800108e:	d017      	beq.n	80010c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80be 	beq.w	80012d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <HAL_GPIO_Init+0x324>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a65      	ldr	r2, [pc, #404]	; (80012f0 <HAL_GPIO_Init+0x324>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <HAL_GPIO_Init+0x324>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800116e:	4a61      	ldr	r2, [pc, #388]	; (80012f4 <HAL_GPIO_Init+0x328>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a58      	ldr	r2, [pc, #352]	; (80012f8 <HAL_GPIO_Init+0x32c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d037      	beq.n	800120a <HAL_GPIO_Init+0x23e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a57      	ldr	r2, [pc, #348]	; (80012fc <HAL_GPIO_Init+0x330>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d031      	beq.n	8001206 <HAL_GPIO_Init+0x23a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a56      	ldr	r2, [pc, #344]	; (8001300 <HAL_GPIO_Init+0x334>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d02b      	beq.n	8001202 <HAL_GPIO_Init+0x236>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a55      	ldr	r2, [pc, #340]	; (8001304 <HAL_GPIO_Init+0x338>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x232>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a54      	ldr	r2, [pc, #336]	; (8001308 <HAL_GPIO_Init+0x33c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x22e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a53      	ldr	r2, [pc, #332]	; (800130c <HAL_GPIO_Init+0x340>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x22a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a52      	ldr	r2, [pc, #328]	; (8001310 <HAL_GPIO_Init+0x344>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a51      	ldr	r2, [pc, #324]	; (8001314 <HAL_GPIO_Init+0x348>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x222>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a50      	ldr	r2, [pc, #320]	; (8001318 <HAL_GPIO_Init+0x34c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x21e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	; (800131c <HAL_GPIO_Init+0x350>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x21a>
 80011e2:	2309      	movs	r3, #9
 80011e4:	e012      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011e6:	230a      	movs	r3, #10
 80011e8:	e010      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011ea:	2308      	movs	r3, #8
 80011ec:	e00e      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e00c      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011f2:	2306      	movs	r3, #6
 80011f4:	e00a      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011f6:	2305      	movs	r3, #5
 80011f8:	e008      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011fe:	2303      	movs	r3, #3
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x240>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x240>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x240>
 800120a:	2300      	movs	r3, #0
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800121c:	4935      	ldr	r1, [pc, #212]	; (80012f4 <HAL_GPIO_Init+0x328>)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122a:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <HAL_GPIO_Init+0x354>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124e:	4a34      	ldr	r2, [pc, #208]	; (8001320 <HAL_GPIO_Init+0x354>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <HAL_GPIO_Init+0x354>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001278:	4a29      	ldr	r2, [pc, #164]	; (8001320 <HAL_GPIO_Init+0x354>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <HAL_GPIO_Init+0x354>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a2:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <HAL_GPIO_Init+0x354>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_GPIO_Init+0x354>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012cc:	4a14      	ldr	r2, [pc, #80]	; (8001320 <HAL_GPIO_Init+0x354>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	2b0f      	cmp	r3, #15
 80012dc:	f67f ae86 	bls.w	8000fec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40013800 	.word	0x40013800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020800 	.word	0x40020800
 8001304:	40020c00 	.word	0x40020c00
 8001308:	40021000 	.word	0x40021000
 800130c:	40021400 	.word	0x40021400
 8001310:	40021800 	.word	0x40021800
 8001314:	40021c00 	.word	0x40021c00
 8001318:	40022000 	.word	0x40022000
 800131c:	40022400 	.word	0x40022400
 8001320:	40013c00 	.word	0x40013c00

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001340:	e003      	b.n	800134a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001368:	887a      	ldrh	r2, [r7, #2]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4013      	ands	r3, r2
 800136e:	041a      	lsls	r2, r3, #16
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43d9      	mvns	r1, r3
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	400b      	ands	r3, r1
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	619a      	str	r2, [r3, #24]
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800138a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138c:	b08f      	sub	sp, #60	; 0x3c
 800138e:	af0a      	add	r7, sp, #40	; 0x28
 8001390:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e116      	b.n	80015ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fb86 	bl	8000ac8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 faa6 	bl	800392c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	687e      	ldr	r6, [r7, #4]
 80013e8:	466d      	mov	r5, sp
 80013ea:	f106 0410 	add.w	r4, r6, #16
 80013ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80013fe:	1d33      	adds	r3, r6, #4
 8001400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001402:	6838      	ldr	r0, [r7, #0]
 8001404:	f002 fa3a 	bl	800387c <USB_CoreInit>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2202      	movs	r2, #2
 8001412:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0d7      	b.n	80015ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f002 fa94 	bl	800394e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	e04a      	b.n	80014c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	333d      	adds	r3, #61	; 0x3d
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	333c      	adds	r3, #60	; 0x3c
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	b298      	uxth	r0, r3
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	3344      	adds	r3, #68	; 0x44
 8001468:	4602      	mov	r2, r0
 800146a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	3340      	adds	r3, #64	; 0x40
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	3348      	adds	r3, #72	; 0x48
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	334c      	adds	r3, #76	; 0x4c
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	3354      	adds	r3, #84	; 0x54
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	3301      	adds	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d3af      	bcc.n	800142c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e044      	b.n	800155c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	3301      	adds	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	429a      	cmp	r2, r3
 8001564:	d3b5      	bcc.n	80014d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	687e      	ldr	r6, [r7, #4]
 800156e:	466d      	mov	r5, sp
 8001570:	f106 0410 	add.w	r4, r6, #16
 8001574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001580:	e885 0003 	stmia.w	r5, {r0, r1}
 8001584:	1d33      	adds	r3, r6, #4
 8001586:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f002 fa2d 	bl	80039e8 <USB_DevInit>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e014      	b.n	80015ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d102      	bne.n	80015be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f80b 	bl	80015d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 fbeb 	bl	8003d9e <USB_DevDisconnect>

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080015d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_PCDEx_ActivateLPM+0x44>)
 8001604:	4313      	orrs	r3, r2
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	10000003 	.word	0x10000003

0800161c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40007000 	.word	0x40007000

0800163c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e29b      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8087 	beq.w	800176e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001660:	4b96      	ldr	r3, [pc, #600]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b04      	cmp	r3, #4
 800166a:	d00c      	beq.n	8001686 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166c:	4b93      	ldr	r3, [pc, #588]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d112      	bne.n	800169e <HAL_RCC_OscConfig+0x62>
 8001678:	4b90      	ldr	r3, [pc, #576]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001684:	d10b      	bne.n	800169e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001686:	4b8d      	ldr	r3, [pc, #564]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d06c      	beq.n	800176c <HAL_RCC_OscConfig+0x130>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d168      	bne.n	800176c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e275      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x7a>
 80016a8:	4b84      	ldr	r3, [pc, #528]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a83      	ldr	r2, [pc, #524]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e02e      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x9c>
 80016be:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7e      	ldr	r2, [pc, #504]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7b      	ldr	r2, [pc, #492]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e01d      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0xc0>
 80016e2:	4b76      	ldr	r3, [pc, #472]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a75      	ldr	r2, [pc, #468]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b73      	ldr	r3, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a72      	ldr	r2, [pc, #456]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016fc:	4b6f      	ldr	r3, [pc, #444]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6e      	ldr	r2, [pc, #440]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b6c      	ldr	r3, [pc, #432]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a6b      	ldr	r2, [pc, #428]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800170e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fb44 	bl	8000da8 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff fb40 	bl	8000da8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e229      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b61      	ldr	r3, [pc, #388]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0xe8>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fb30 	bl	8000da8 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fb2c 	bl	8000da8 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e215      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	4b57      	ldr	r3, [pc, #348]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x110>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d069      	beq.n	800184e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800177a:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001786:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d11c      	bne.n	80017cc <HAL_RCC_OscConfig+0x190>
 8001792:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d116      	bne.n	80017cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179e:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <HAL_RCC_OscConfig+0x17a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d001      	beq.n	80017b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e1e9      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	493d      	ldr	r1, [pc, #244]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	e040      	b.n	800184e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d023      	beq.n	800181c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d4:	4b39      	ldr	r3, [pc, #228]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a38      	ldr	r2, [pc, #224]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fae2 	bl	8000da8 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff fade 	bl	8000da8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1c7      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b30      	ldr	r3, [pc, #192]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4929      	ldr	r1, [pc, #164]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
 800181a:	e018      	b.n	800184e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a26      	ldr	r2, [pc, #152]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fabe 	bl	8000da8 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff faba 	bl	8000da8 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1a3      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d038      	beq.n	80018cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d019      	beq.n	8001896 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff fa9b 	bl	8000da8 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001876:	f7ff fa97 	bl	8000da8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e180      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800188a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x23a>
 8001894:	e01a      	b.n	80018cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 8001898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_RCC_OscConfig+0x280>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff fa81 	bl	8000da8 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff fa7d 	bl	8000da8 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d903      	bls.n	80018c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e166      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
 80018bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	4b92      	ldr	r3, [pc, #584]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 80018c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1ee      	bne.n	80018aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a4 	beq.w	8001a22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018da:	4b8c      	ldr	r3, [pc, #560]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b89      	ldr	r3, [pc, #548]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a88      	ldr	r2, [pc, #544]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b86      	ldr	r3, [pc, #536]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001902:	4b83      	ldr	r3, [pc, #524]	; (8001b10 <HAL_RCC_OscConfig+0x4d4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800190e:	4b80      	ldr	r3, [pc, #512]	; (8001b10 <HAL_RCC_OscConfig+0x4d4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7f      	ldr	r2, [pc, #508]	; (8001b10 <HAL_RCC_OscConfig+0x4d4>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff fa45 	bl	8000da8 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff fa41 	bl	8000da8 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	; 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e12a      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001934:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0x4d4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x31a>
 8001948:	4b70      	ldr	r3, [pc, #448]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a6f      	ldr	r2, [pc, #444]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
 8001954:	e02d      	b.n	80019b2 <HAL_RCC_OscConfig+0x376>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x33c>
 800195e:	4b6b      	ldr	r3, [pc, #428]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a6a      	ldr	r2, [pc, #424]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	4b68      	ldr	r3, [pc, #416]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a67      	ldr	r2, [pc, #412]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
 8001976:	e01c      	b.n	80019b2 <HAL_RCC_OscConfig+0x376>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x35e>
 8001980:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a61      	ldr	r2, [pc, #388]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	4b5f      	ldr	r3, [pc, #380]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	4a5e      	ldr	r2, [pc, #376]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6713      	str	r3, [r2, #112]	; 0x70
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0x376>
 800199a:	4b5c      	ldr	r3, [pc, #368]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	4a5b      	ldr	r2, [pc, #364]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
 80019a6:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ba:	f7ff f9f5 	bl	8000da8 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff f9f1 	bl	8000da8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0d8      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ee      	beq.n	80019c2 <HAL_RCC_OscConfig+0x386>
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff f9df 	bl	8000da8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff f9db 	bl	8000da8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e0c2      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ee      	bne.n	80019ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d105      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a3c      	ldr	r2, [pc, #240]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 80ae 	beq.w	8001b88 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2c:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d06d      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d14b      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a31      	ldr	r2, [pc, #196]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f9ac 	bl	8000da8 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f9a8 	bl	8000da8 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e091      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	019b      	lsls	r3, r3, #6
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	085b      	lsrs	r3, r3, #1
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	041b      	lsls	r3, r3, #16
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	061b      	lsls	r3, r3, #24
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	071b      	lsls	r3, r3, #28
 8001a9e:	491b      	ldr	r1, [pc, #108]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f97a 	bl	8000da8 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff f976 	bl	8000da8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e05f      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x47c>
 8001ad6:	e057      	b.n	8001b88 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f960 	bl	8000da8 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff f95c 	bl	8000da8 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e045      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_RCC_OscConfig+0x4d0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x4b0>
 8001b0a:	e03d      	b.n	8001b88 <HAL_RCC_OscConfig+0x54c>
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <HAL_RCC_OscConfig+0x558>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d030      	beq.n	8001b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d129      	bne.n	8001b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d122      	bne.n	8001b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d119      	bne.n	8001b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d10f      	bne.n	8001b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0d0      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b6a      	ldr	r3, [pc, #424]	; (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d910      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b67      	ldr	r3, [pc, #412]	; (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 020f 	bic.w	r2, r3, #15
 8001bc6:	4965      	ldr	r1, [pc, #404]	; (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b8      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	494d      	ldr	r1, [pc, #308]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d040      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d115      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5a:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e073      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06b      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f023 0203 	bic.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4936      	ldr	r1, [pc, #216]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c8c:	f7ff f88c 	bl	8000da8 <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7ff f888 	bl	8000da8 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e053      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 020c 	and.w	r2, r3, #12
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1eb      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d210      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 020f 	bic.w	r2, r3, #15
 8001cd2:	4922      	ldr	r1, [pc, #136]	; (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e032      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4916      	ldr	r1, [pc, #88]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	490e      	ldr	r1, [pc, #56]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d2a:	f000 f821 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	490a      	ldr	r1, [pc, #40]	; (8001d64 <HAL_RCC_ClockConfig+0x1cc>)
 8001d3c:	5ccb      	ldrb	r3, [r1, r3]
 8001d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1d0>)
 8001d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1d4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe ff36 	bl	8000bbc <HAL_InitTick>

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00
 8001d60:	40023800 	.word	0x40023800
 8001d64:	08006d0c 	.word	0x08006d0c
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d74:	b090      	sub	sp, #64	; 0x40
 8001d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d80:	2300      	movs	r3, #0
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d88:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d00d      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x40>
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	f200 80a1 	bhi.w	8001edc <HAL_RCC_GetSysClockFreq+0x16c>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x34>
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d003      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0x3a>
 8001da2:	e09b      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001da4:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001da6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001da8:	e09b      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001daa:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dae:	e098      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db0:	4b4f      	ldr	r3, [pc, #316]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001dba:	4b4d      	ldr	r3, [pc, #308]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d028      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	2200      	movs	r2, #0
 8001dce:	623b      	str	r3, [r7, #32]
 8001dd0:	627a      	str	r2, [r7, #36]	; 0x24
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ddc:	fb03 f201 	mul.w	r2, r3, r1
 8001de0:	2300      	movs	r3, #0
 8001de2:	fb00 f303 	mul.w	r3, r0, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	4a43      	ldr	r2, [pc, #268]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dea:	fba0 1202 	umull	r1, r2, r0, r2
 8001dee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001df0:	460a      	mov	r2, r1
 8001df2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df6:	4413      	add	r3, r2
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	61fa      	str	r2, [r7, #28]
 8001e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e0a:	f7fe fa21 	bl	8000250 <__aeabi_uldivmod>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4613      	mov	r3, r2
 8001e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e16:	e053      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e18:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	2200      	movs	r2, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	617a      	str	r2, [r7, #20]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e2a:	f04f 0b00 	mov.w	fp, #0
 8001e2e:	4652      	mov	r2, sl
 8001e30:	465b      	mov	r3, fp
 8001e32:	f04f 0000 	mov.w	r0, #0
 8001e36:	f04f 0100 	mov.w	r1, #0
 8001e3a:	0159      	lsls	r1, r3, #5
 8001e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e40:	0150      	lsls	r0, r2, #5
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	ebb2 080a 	subs.w	r8, r2, sl
 8001e4a:	eb63 090b 	sbc.w	r9, r3, fp
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e62:	ebb2 0408 	subs.w	r4, r2, r8
 8001e66:	eb63 0509 	sbc.w	r5, r3, r9
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	00eb      	lsls	r3, r5, #3
 8001e74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e78:	00e2      	lsls	r2, r4, #3
 8001e7a:	4614      	mov	r4, r2
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	eb14 030a 	adds.w	r3, r4, sl
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	eb45 030b 	adc.w	r3, r5, fp
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e96:	4629      	mov	r1, r5
 8001e98:	028b      	lsls	r3, r1, #10
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	028a      	lsls	r2, r1, #10
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	60fa      	str	r2, [r7, #12]
 8001eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eb4:	f7fe f9cc 	bl	8000250 <__aeabi_uldivmod>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	0c1b      	lsrs	r3, r3, #16
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001ed0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eda:	e002      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3740      	adds	r7, #64	; 0x40
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	00f42400 	.word	0x00f42400
 8001ef8:	017d7840 	.word	0x017d7840

08001efc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000000 	.word	0x20000000

08001f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f18:	f7ff fff0 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0a9b      	lsrs	r3, r3, #10
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4903      	ldr	r1, [pc, #12]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	08006d1c 	.word	0x08006d1c

08001f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f40:	f7ff ffdc 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	0b5b      	lsrs	r3, r3, #13
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4903      	ldr	r1, [pc, #12]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	08006d1c 	.word	0x08006d1c

08001f64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	220f      	movs	r2, #15
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0203 	and.w	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	08db      	lsrs	r3, r3, #3
 8001f9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_RCC_GetClockConfig+0x60>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 020f 	and.w	r2, r3, #15
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	601a      	str	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40023c00 	.word	0x40023c00

08001fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d012      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ff0:	4b69      	ldr	r3, [pc, #420]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a68      	ldr	r2, [pc, #416]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ffa:	6093      	str	r3, [r2, #8]
 8001ffc:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002004:	4964      	ldr	r1, [pc, #400]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d017      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002022:	4b5d      	ldr	r3, [pc, #372]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	4959      	ldr	r1, [pc, #356]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002040:	d101      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800204e:	2301      	movs	r3, #1
 8002050:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d017      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800205e:	4b4e      	ldr	r3, [pc, #312]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002064:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	494a      	ldr	r1, [pc, #296]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207c:	d101      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800208a:	2301      	movs	r3, #1
 800208c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800209a:	2301      	movs	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 808b 	beq.w	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	4a39      	ldr	r2, [pc, #228]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b6:	6413      	str	r3, [r2, #64]	; 0x40
 80020b8:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a34      	ldr	r2, [pc, #208]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d0:	f7fe fe6a 	bl	8000da8 <HAL_GetTick>
 80020d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d8:	f7fe fe66 	bl	8000da8 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e38f      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d035      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d02e      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800211c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	4a1a      	ldr	r2, [pc, #104]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002134:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002136:	4a18      	ldr	r2, [pc, #96]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d114      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe fe2e 	bl	8000da8 <HAL_GetTick>
 800214c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7fe fe2a 	bl	8000da8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e351      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0ee      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800217e:	d111      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800218e:	400b      	ands	r3, r1
 8002190:	4901      	ldr	r1, [pc, #4]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
 8002196:	e00b      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000
 80021a0:	0ffffcff 	.word	0x0ffffcff
 80021a4:	4bac      	ldr	r3, [pc, #688]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4aab      	ldr	r2, [pc, #684]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021ae:	6093      	str	r3, [r2, #8]
 80021b0:	4ba9      	ldr	r3, [pc, #676]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021bc:	49a6      	ldr	r1, [pc, #664]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d010      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021ce:	4ba2      	ldr	r3, [pc, #648]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d4:	4aa0      	ldr	r2, [pc, #640]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021de:	4b9e      	ldr	r3, [pc, #632]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	499b      	ldr	r1, [pc, #620]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021fc:	4b96      	ldr	r3, [pc, #600]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800220a:	4993      	ldr	r1, [pc, #588]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800221e:	4b8e      	ldr	r3, [pc, #568]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800222c:	498a      	ldr	r1, [pc, #552]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002240:	4b85      	ldr	r3, [pc, #532]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224e:	4982      	ldr	r1, [pc, #520]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002262:	4b7d      	ldr	r3, [pc, #500]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4979      	ldr	r1, [pc, #484]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002284:	4b74      	ldr	r3, [pc, #464]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	f023 0203 	bic.w	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4971      	ldr	r1, [pc, #452]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022a6:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	f023 020c 	bic.w	r2, r3, #12
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b4:	4968      	ldr	r1, [pc, #416]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022c8:	4b63      	ldr	r3, [pc, #396]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	4960      	ldr	r1, [pc, #384]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ea:	4b5b      	ldr	r3, [pc, #364]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f8:	4957      	ldr	r1, [pc, #348]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800230c:	4b52      	ldr	r3, [pc, #328]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	494f      	ldr	r1, [pc, #316]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800232e:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002334:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	4946      	ldr	r1, [pc, #280]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	493e      	ldr	r1, [pc, #248]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002372:	4b39      	ldr	r3, [pc, #228]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002380:	4935      	ldr	r1, [pc, #212]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002394:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023a2:	492d      	ldr	r1, [pc, #180]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d011      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c4:	4924      	ldr	r1, [pc, #144]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d4:	d101      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002404:	4914      	ldr	r1, [pc, #80]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002428:	490b      	ldr	r1, [pc, #44]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00f      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244c:	4902      	ldr	r1, [pc, #8]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002454:	e002      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002468:	4b8a      	ldr	r3, [pc, #552]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800246e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002478:	4986      	ldr	r1, [pc, #536]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800248c:	4b81      	ldr	r3, [pc, #516]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002492:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800249c:	497d      	ldr	r1, [pc, #500]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d006      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80d6 	beq.w	8002664 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024b8:	4b76      	ldr	r3, [pc, #472]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a75      	ldr	r2, [pc, #468]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c4:	f7fe fc70 	bl	8000da8 <HAL_GetTick>
 80024c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024cc:	f7fe fc6c 	bl	8000da8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e195      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d021      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d11d      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024fe:	4b65      	ldr	r3, [pc, #404]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800250c:	4b61      	ldr	r3, [pc, #388]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800250e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002512:	0e1b      	lsrs	r3, r3, #24
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	019a      	lsls	r2, r3, #6
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	041b      	lsls	r3, r3, #16
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	071b      	lsls	r3, r3, #28
 8002532:	4958      	ldr	r1, [pc, #352]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002558:	2b00      	cmp	r3, #0
 800255a:	d02e      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002564:	d129      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002566:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002574:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257a:	0f1b      	lsrs	r3, r3, #28
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	019a      	lsls	r2, r3, #6
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	071b      	lsls	r3, r3, #28
 800259a:	493e      	ldr	r1, [pc, #248]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025a2:	4b3c      	ldr	r3, [pc, #240]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a8:	f023 021f 	bic.w	r2, r3, #31
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	3b01      	subs	r3, #1
 80025b2:	4938      	ldr	r1, [pc, #224]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01d      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025c6:	4b33      	ldr	r3, [pc, #204]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025cc:	0e1b      	lsrs	r3, r3, #24
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025da:	0f1b      	lsrs	r3, r3, #28
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	019a      	lsls	r2, r3, #6
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	431a      	orrs	r2, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	431a      	orrs	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	071b      	lsls	r3, r3, #28
 80025fa:	4926      	ldr	r1, [pc, #152]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d011      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	019a      	lsls	r2, r3, #6
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	071b      	lsls	r3, r3, #28
 800262a:	491a      	ldr	r1, [pc, #104]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a17      	ldr	r2, [pc, #92]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800263c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263e:	f7fe fbb3 	bl	8000da8 <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002646:	f7fe fbaf 	bl	8000da8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b64      	cmp	r3, #100	; 0x64
 8002652:	d901      	bls.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0d8      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b01      	cmp	r3, #1
 8002668:	f040 80ce 	bne.w	8002808 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a08      	ldr	r2, [pc, #32]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002678:	f7fe fb96 	bl	8000da8 <HAL_GetTick>
 800267c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800267e:	e00b      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002680:	f7fe fb92 	bl	8000da8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d904      	bls.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0bb      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002698:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a4:	d0ec      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02e      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12a      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026ce:	4b51      	ldr	r3, [pc, #324]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026dc:	4b4d      	ldr	r3, [pc, #308]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	0f1b      	lsrs	r3, r3, #28
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	019a      	lsls	r2, r3, #6
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	061b      	lsls	r3, r3, #24
 80026fc:	431a      	orrs	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	071b      	lsls	r3, r3, #28
 8002702:	4944      	ldr	r1, [pc, #272]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800270a:	4b42      	ldr	r3, [pc, #264]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002710:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	3b01      	subs	r3, #1
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	493d      	ldr	r1, [pc, #244]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d022      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002738:	d11d      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002740:	0e1b      	lsrs	r3, r3, #24
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	0f1b      	lsrs	r3, r3, #28
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	019a      	lsls	r2, r3, #6
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	431a      	orrs	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	431a      	orrs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	071b      	lsls	r3, r3, #28
 800276e:	4929      	ldr	r1, [pc, #164]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d028      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002788:	0e1b      	lsrs	r3, r3, #24
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	019a      	lsls	r2, r3, #6
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	431a      	orrs	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	071b      	lsls	r3, r3, #28
 80027b6:	4917      	ldr	r1, [pc, #92]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	4911      	ldr	r1, [pc, #68]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e0:	f7fe fae2 	bl	8000da8 <HAL_GetTick>
 80027e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027e8:	f7fe fade 	bl	8000da8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e007      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002806:	d1ef      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3720      	adds	r7, #32
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e049      	b.n	80028be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe f8c2 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3304      	adds	r3, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f000 fa66 	bl	8002d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d001      	beq.n	80028e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e04c      	b.n	800297a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a26      	ldr	r2, [pc, #152]	; (8002988 <HAL_TIM_Base_Start+0xc0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d022      	beq.n	8002938 <HAL_TIM_Base_Start+0x70>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fa:	d01d      	beq.n	8002938 <HAL_TIM_Base_Start+0x70>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a22      	ldr	r2, [pc, #136]	; (800298c <HAL_TIM_Base_Start+0xc4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d018      	beq.n	8002938 <HAL_TIM_Base_Start+0x70>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a21      	ldr	r2, [pc, #132]	; (8002990 <HAL_TIM_Base_Start+0xc8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_TIM_Base_Start+0x70>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_TIM_Base_Start+0xcc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00e      	beq.n	8002938 <HAL_TIM_Base_Start+0x70>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <HAL_TIM_Base_Start+0xd0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d009      	beq.n	8002938 <HAL_TIM_Base_Start+0x70>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1c      	ldr	r2, [pc, #112]	; (800299c <HAL_TIM_Base_Start+0xd4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d004      	beq.n	8002938 <HAL_TIM_Base_Start+0x70>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <HAL_TIM_Base_Start+0xd8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d115      	bne.n	8002964 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_TIM_Base_Start+0xdc>)
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b06      	cmp	r3, #6
 8002948:	d015      	beq.n	8002976 <HAL_TIM_Base_Start+0xae>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002950:	d011      	beq.n	8002976 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002962:	e008      	b.n	8002976 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e000      	b.n	8002978 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40010000 	.word	0x40010000
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800
 8002994:	40000c00 	.word	0x40000c00
 8002998:	40010400 	.word	0x40010400
 800299c:	40014000 	.word	0x40014000
 80029a0:	40001800 	.word	0x40001800
 80029a4:	00010007 	.word	0x00010007

080029a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d001      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e054      	b.n	8002a6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a26      	ldr	r2, [pc, #152]	; (8002a78 <HAL_TIM_Base_Start_IT+0xd0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d022      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x80>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ea:	d01d      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x80>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_TIM_Base_Start_IT+0xd4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d018      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x80>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a21      	ldr	r2, [pc, #132]	; (8002a80 <HAL_TIM_Base_Start_IT+0xd8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x80>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00e      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x80>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <HAL_TIM_Base_Start_IT+0xe0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d009      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x80>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_TIM_Base_Start_IT+0xe4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x80>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_TIM_Base_Start_IT+0xe8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d115      	bne.n	8002a54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_TIM_Base_Start_IT+0xec>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d015      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0xbe>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a40:	d011      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a52:	e008      	b.n	8002a66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e000      	b.n	8002a68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800
 8002a84:	40000c00 	.word	0x40000c00
 8002a88:	40010400 	.word	0x40010400
 8002a8c:	40014000 	.word	0x40014000
 8002a90:	40001800 	.word	0x40001800
 8002a94:	00010007 	.word	0x00010007

08002a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0202 	mvn.w	r2, #2
 8002ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f905 	bl	8002cea <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8f7 	bl	8002cd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f908 	bl	8002cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0204 	mvn.w	r2, #4
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8db 	bl	8002cea <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f8cd 	bl	8002cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f8de 	bl	8002cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0208 	mvn.w	r2, #8
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2204      	movs	r2, #4
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f8b1 	bl	8002cea <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f8a3 	bl	8002cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f8b4 	bl	8002cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d122      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0210 	mvn.w	r2, #16
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f887 	bl	8002cea <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f879 	bl	8002cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f88a 	bl	8002cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0201 	mvn.w	r2, #1
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fd fe96 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d107      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f91a 	bl	8002e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c56:	d10e      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	2b80      	cmp	r3, #128	; 0x80
 8002c64:	d107      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f90d 	bl	8002e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d10e      	bne.n	8002ca2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d107      	bne.n	8002ca2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f838 	bl	8002d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d10e      	bne.n	8002cce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d107      	bne.n	8002cce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f06f 0220 	mvn.w	r2, #32
 8002cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f8cd 	bl	8002e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a40      	ldr	r2, [pc, #256]	; (8002e3c <TIM_Base_SetConfig+0x114>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d013      	beq.n	8002d68 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d46:	d00f      	beq.n	8002d68 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3d      	ldr	r2, [pc, #244]	; (8002e40 <TIM_Base_SetConfig+0x118>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00b      	beq.n	8002d68 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3c      	ldr	r2, [pc, #240]	; (8002e44 <TIM_Base_SetConfig+0x11c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d007      	beq.n	8002d68 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3b      	ldr	r2, [pc, #236]	; (8002e48 <TIM_Base_SetConfig+0x120>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d003      	beq.n	8002d68 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3a      	ldr	r2, [pc, #232]	; (8002e4c <TIM_Base_SetConfig+0x124>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d108      	bne.n	8002d7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <TIM_Base_SetConfig+0x114>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d02b      	beq.n	8002dda <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d88:	d027      	beq.n	8002dda <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2c      	ldr	r2, [pc, #176]	; (8002e40 <TIM_Base_SetConfig+0x118>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d023      	beq.n	8002dda <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2b      	ldr	r2, [pc, #172]	; (8002e44 <TIM_Base_SetConfig+0x11c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01f      	beq.n	8002dda <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2a      	ldr	r2, [pc, #168]	; (8002e48 <TIM_Base_SetConfig+0x120>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01b      	beq.n	8002dda <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a29      	ldr	r2, [pc, #164]	; (8002e4c <TIM_Base_SetConfig+0x124>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d017      	beq.n	8002dda <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a28      	ldr	r2, [pc, #160]	; (8002e50 <TIM_Base_SetConfig+0x128>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <TIM_Base_SetConfig+0x12c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00f      	beq.n	8002dda <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a26      	ldr	r2, [pc, #152]	; (8002e58 <TIM_Base_SetConfig+0x130>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a25      	ldr	r2, [pc, #148]	; (8002e5c <TIM_Base_SetConfig+0x134>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <TIM_Base_SetConfig+0x138>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a23      	ldr	r2, [pc, #140]	; (8002e64 <TIM_Base_SetConfig+0x13c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <TIM_Base_SetConfig+0x114>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d003      	beq.n	8002e20 <TIM_Base_SetConfig+0xf8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <TIM_Base_SetConfig+0x124>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d103      	bne.n	8002e28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40010000 	.word	0x40010000
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800
 8002e48:	40000c00 	.word	0x40000c00
 8002e4c:	40010400 	.word	0x40010400
 8002e50:	40014000 	.word	0x40014000
 8002e54:	40014400 	.word	0x40014400
 8002e58:	40014800 	.word	0x40014800
 8002e5c:	40001800 	.word	0x40001800
 8002e60:	40001c00 	.word	0x40001c00
 8002e64:	40002000 	.word	0x40002000

08002e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e040      	b.n	8002f38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fd9e 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f8b0 	bl	8003048 <UART_SetConfig>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e022      	b.n	8002f38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fb08 	bl	8003510 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fb8f 	bl	8003654 <UART_CheckIdleState>
 8002f36:	4603      	mov	r3, r0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d171      	bne.n	800303c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_UART_Transmit+0x24>
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e06a      	b.n	800303e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2221      	movs	r2, #33	; 0x21
 8002f74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f76:	f7fd ff17 	bl	8000da8 <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f94:	d108      	bne.n	8002fa8 <HAL_UART_Transmit+0x68>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d104      	bne.n	8002fa8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	e003      	b.n	8002fb0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fb0:	e02c      	b.n	800300c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2180      	movs	r1, #128	; 0x80
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fb96 	bl	80036ee <UART_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e038      	b.n	800303e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e007      	b.n	8002ffa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	781a      	ldrb	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1cc      	bne.n	8002fb2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2200      	movs	r2, #0
 8003020:	2140      	movs	r1, #64	; 0x40
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fb63 	bl	80036ee <UART_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e005      	b.n	800303e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4ba6      	ldr	r3, [pc, #664]	; (800330c <UART_SetConfig+0x2c4>)
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	6979      	ldr	r1, [r7, #20]
 800307c:	430b      	orrs	r3, r1
 800307e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a94      	ldr	r2, [pc, #592]	; (8003310 <UART_SetConfig+0x2c8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d120      	bne.n	8003106 <UART_SetConfig+0xbe>
 80030c4:	4b93      	ldr	r3, [pc, #588]	; (8003314 <UART_SetConfig+0x2cc>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d816      	bhi.n	8003100 <UART_SetConfig+0xb8>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <UART_SetConfig+0x90>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030f5 	.word	0x080030f5
 80030e0:	080030ef 	.word	0x080030ef
 80030e4:	080030fb 	.word	0x080030fb
 80030e8:	2301      	movs	r3, #1
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e150      	b.n	8003390 <UART_SetConfig+0x348>
 80030ee:	2302      	movs	r3, #2
 80030f0:	77fb      	strb	r3, [r7, #31]
 80030f2:	e14d      	b.n	8003390 <UART_SetConfig+0x348>
 80030f4:	2304      	movs	r3, #4
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e14a      	b.n	8003390 <UART_SetConfig+0x348>
 80030fa:	2308      	movs	r3, #8
 80030fc:	77fb      	strb	r3, [r7, #31]
 80030fe:	e147      	b.n	8003390 <UART_SetConfig+0x348>
 8003100:	2310      	movs	r3, #16
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e144      	b.n	8003390 <UART_SetConfig+0x348>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a83      	ldr	r2, [pc, #524]	; (8003318 <UART_SetConfig+0x2d0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d132      	bne.n	8003176 <UART_SetConfig+0x12e>
 8003110:	4b80      	ldr	r3, [pc, #512]	; (8003314 <UART_SetConfig+0x2cc>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d828      	bhi.n	8003170 <UART_SetConfig+0x128>
 800311e:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <UART_SetConfig+0xdc>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	08003159 	.word	0x08003159
 8003128:	08003171 	.word	0x08003171
 800312c:	08003171 	.word	0x08003171
 8003130:	08003171 	.word	0x08003171
 8003134:	08003165 	.word	0x08003165
 8003138:	08003171 	.word	0x08003171
 800313c:	08003171 	.word	0x08003171
 8003140:	08003171 	.word	0x08003171
 8003144:	0800315f 	.word	0x0800315f
 8003148:	08003171 	.word	0x08003171
 800314c:	08003171 	.word	0x08003171
 8003150:	08003171 	.word	0x08003171
 8003154:	0800316b 	.word	0x0800316b
 8003158:	2300      	movs	r3, #0
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e118      	b.n	8003390 <UART_SetConfig+0x348>
 800315e:	2302      	movs	r3, #2
 8003160:	77fb      	strb	r3, [r7, #31]
 8003162:	e115      	b.n	8003390 <UART_SetConfig+0x348>
 8003164:	2304      	movs	r3, #4
 8003166:	77fb      	strb	r3, [r7, #31]
 8003168:	e112      	b.n	8003390 <UART_SetConfig+0x348>
 800316a:	2308      	movs	r3, #8
 800316c:	77fb      	strb	r3, [r7, #31]
 800316e:	e10f      	b.n	8003390 <UART_SetConfig+0x348>
 8003170:	2310      	movs	r3, #16
 8003172:	77fb      	strb	r3, [r7, #31]
 8003174:	e10c      	b.n	8003390 <UART_SetConfig+0x348>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a68      	ldr	r2, [pc, #416]	; (800331c <UART_SetConfig+0x2d4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d120      	bne.n	80031c2 <UART_SetConfig+0x17a>
 8003180:	4b64      	ldr	r3, [pc, #400]	; (8003314 <UART_SetConfig+0x2cc>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800318a:	2b30      	cmp	r3, #48	; 0x30
 800318c:	d013      	beq.n	80031b6 <UART_SetConfig+0x16e>
 800318e:	2b30      	cmp	r3, #48	; 0x30
 8003190:	d814      	bhi.n	80031bc <UART_SetConfig+0x174>
 8003192:	2b20      	cmp	r3, #32
 8003194:	d009      	beq.n	80031aa <UART_SetConfig+0x162>
 8003196:	2b20      	cmp	r3, #32
 8003198:	d810      	bhi.n	80031bc <UART_SetConfig+0x174>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <UART_SetConfig+0x15c>
 800319e:	2b10      	cmp	r3, #16
 80031a0:	d006      	beq.n	80031b0 <UART_SetConfig+0x168>
 80031a2:	e00b      	b.n	80031bc <UART_SetConfig+0x174>
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e0f2      	b.n	8003390 <UART_SetConfig+0x348>
 80031aa:	2302      	movs	r3, #2
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e0ef      	b.n	8003390 <UART_SetConfig+0x348>
 80031b0:	2304      	movs	r3, #4
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e0ec      	b.n	8003390 <UART_SetConfig+0x348>
 80031b6:	2308      	movs	r3, #8
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e0e9      	b.n	8003390 <UART_SetConfig+0x348>
 80031bc:	2310      	movs	r3, #16
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e0e6      	b.n	8003390 <UART_SetConfig+0x348>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a56      	ldr	r2, [pc, #344]	; (8003320 <UART_SetConfig+0x2d8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d120      	bne.n	800320e <UART_SetConfig+0x1c6>
 80031cc:	4b51      	ldr	r3, [pc, #324]	; (8003314 <UART_SetConfig+0x2cc>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031d6:	2bc0      	cmp	r3, #192	; 0xc0
 80031d8:	d013      	beq.n	8003202 <UART_SetConfig+0x1ba>
 80031da:	2bc0      	cmp	r3, #192	; 0xc0
 80031dc:	d814      	bhi.n	8003208 <UART_SetConfig+0x1c0>
 80031de:	2b80      	cmp	r3, #128	; 0x80
 80031e0:	d009      	beq.n	80031f6 <UART_SetConfig+0x1ae>
 80031e2:	2b80      	cmp	r3, #128	; 0x80
 80031e4:	d810      	bhi.n	8003208 <UART_SetConfig+0x1c0>
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <UART_SetConfig+0x1a8>
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d006      	beq.n	80031fc <UART_SetConfig+0x1b4>
 80031ee:	e00b      	b.n	8003208 <UART_SetConfig+0x1c0>
 80031f0:	2300      	movs	r3, #0
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e0cc      	b.n	8003390 <UART_SetConfig+0x348>
 80031f6:	2302      	movs	r3, #2
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e0c9      	b.n	8003390 <UART_SetConfig+0x348>
 80031fc:	2304      	movs	r3, #4
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e0c6      	b.n	8003390 <UART_SetConfig+0x348>
 8003202:	2308      	movs	r3, #8
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e0c3      	b.n	8003390 <UART_SetConfig+0x348>
 8003208:	2310      	movs	r3, #16
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e0c0      	b.n	8003390 <UART_SetConfig+0x348>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a44      	ldr	r2, [pc, #272]	; (8003324 <UART_SetConfig+0x2dc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d125      	bne.n	8003264 <UART_SetConfig+0x21c>
 8003218:	4b3e      	ldr	r3, [pc, #248]	; (8003314 <UART_SetConfig+0x2cc>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003226:	d017      	beq.n	8003258 <UART_SetConfig+0x210>
 8003228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800322c:	d817      	bhi.n	800325e <UART_SetConfig+0x216>
 800322e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003232:	d00b      	beq.n	800324c <UART_SetConfig+0x204>
 8003234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003238:	d811      	bhi.n	800325e <UART_SetConfig+0x216>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <UART_SetConfig+0x1fe>
 800323e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003242:	d006      	beq.n	8003252 <UART_SetConfig+0x20a>
 8003244:	e00b      	b.n	800325e <UART_SetConfig+0x216>
 8003246:	2300      	movs	r3, #0
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e0a1      	b.n	8003390 <UART_SetConfig+0x348>
 800324c:	2302      	movs	r3, #2
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e09e      	b.n	8003390 <UART_SetConfig+0x348>
 8003252:	2304      	movs	r3, #4
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e09b      	b.n	8003390 <UART_SetConfig+0x348>
 8003258:	2308      	movs	r3, #8
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e098      	b.n	8003390 <UART_SetConfig+0x348>
 800325e:	2310      	movs	r3, #16
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e095      	b.n	8003390 <UART_SetConfig+0x348>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2f      	ldr	r2, [pc, #188]	; (8003328 <UART_SetConfig+0x2e0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d125      	bne.n	80032ba <UART_SetConfig+0x272>
 800326e:	4b29      	ldr	r3, [pc, #164]	; (8003314 <UART_SetConfig+0x2cc>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800327c:	d017      	beq.n	80032ae <UART_SetConfig+0x266>
 800327e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003282:	d817      	bhi.n	80032b4 <UART_SetConfig+0x26c>
 8003284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003288:	d00b      	beq.n	80032a2 <UART_SetConfig+0x25a>
 800328a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328e:	d811      	bhi.n	80032b4 <UART_SetConfig+0x26c>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <UART_SetConfig+0x254>
 8003294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003298:	d006      	beq.n	80032a8 <UART_SetConfig+0x260>
 800329a:	e00b      	b.n	80032b4 <UART_SetConfig+0x26c>
 800329c:	2301      	movs	r3, #1
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e076      	b.n	8003390 <UART_SetConfig+0x348>
 80032a2:	2302      	movs	r3, #2
 80032a4:	77fb      	strb	r3, [r7, #31]
 80032a6:	e073      	b.n	8003390 <UART_SetConfig+0x348>
 80032a8:	2304      	movs	r3, #4
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e070      	b.n	8003390 <UART_SetConfig+0x348>
 80032ae:	2308      	movs	r3, #8
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e06d      	b.n	8003390 <UART_SetConfig+0x348>
 80032b4:	2310      	movs	r3, #16
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e06a      	b.n	8003390 <UART_SetConfig+0x348>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1b      	ldr	r2, [pc, #108]	; (800332c <UART_SetConfig+0x2e4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d138      	bne.n	8003336 <UART_SetConfig+0x2ee>
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <UART_SetConfig+0x2cc>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032d2:	d017      	beq.n	8003304 <UART_SetConfig+0x2bc>
 80032d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032d8:	d82a      	bhi.n	8003330 <UART_SetConfig+0x2e8>
 80032da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032de:	d00b      	beq.n	80032f8 <UART_SetConfig+0x2b0>
 80032e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e4:	d824      	bhi.n	8003330 <UART_SetConfig+0x2e8>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <UART_SetConfig+0x2aa>
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ee:	d006      	beq.n	80032fe <UART_SetConfig+0x2b6>
 80032f0:	e01e      	b.n	8003330 <UART_SetConfig+0x2e8>
 80032f2:	2300      	movs	r3, #0
 80032f4:	77fb      	strb	r3, [r7, #31]
 80032f6:	e04b      	b.n	8003390 <UART_SetConfig+0x348>
 80032f8:	2302      	movs	r3, #2
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e048      	b.n	8003390 <UART_SetConfig+0x348>
 80032fe:	2304      	movs	r3, #4
 8003300:	77fb      	strb	r3, [r7, #31]
 8003302:	e045      	b.n	8003390 <UART_SetConfig+0x348>
 8003304:	2308      	movs	r3, #8
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	e042      	b.n	8003390 <UART_SetConfig+0x348>
 800330a:	bf00      	nop
 800330c:	efff69f3 	.word	0xefff69f3
 8003310:	40011000 	.word	0x40011000
 8003314:	40023800 	.word	0x40023800
 8003318:	40004400 	.word	0x40004400
 800331c:	40004800 	.word	0x40004800
 8003320:	40004c00 	.word	0x40004c00
 8003324:	40005000 	.word	0x40005000
 8003328:	40011400 	.word	0x40011400
 800332c:	40007800 	.word	0x40007800
 8003330:	2310      	movs	r3, #16
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e02c      	b.n	8003390 <UART_SetConfig+0x348>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a72      	ldr	r2, [pc, #456]	; (8003504 <UART_SetConfig+0x4bc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d125      	bne.n	800338c <UART_SetConfig+0x344>
 8003340:	4b71      	ldr	r3, [pc, #452]	; (8003508 <UART_SetConfig+0x4c0>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800334a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800334e:	d017      	beq.n	8003380 <UART_SetConfig+0x338>
 8003350:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003354:	d817      	bhi.n	8003386 <UART_SetConfig+0x33e>
 8003356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800335a:	d00b      	beq.n	8003374 <UART_SetConfig+0x32c>
 800335c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003360:	d811      	bhi.n	8003386 <UART_SetConfig+0x33e>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <UART_SetConfig+0x326>
 8003366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800336a:	d006      	beq.n	800337a <UART_SetConfig+0x332>
 800336c:	e00b      	b.n	8003386 <UART_SetConfig+0x33e>
 800336e:	2300      	movs	r3, #0
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e00d      	b.n	8003390 <UART_SetConfig+0x348>
 8003374:	2302      	movs	r3, #2
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e00a      	b.n	8003390 <UART_SetConfig+0x348>
 800337a:	2304      	movs	r3, #4
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e007      	b.n	8003390 <UART_SetConfig+0x348>
 8003380:	2308      	movs	r3, #8
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e004      	b.n	8003390 <UART_SetConfig+0x348>
 8003386:	2310      	movs	r3, #16
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e001      	b.n	8003390 <UART_SetConfig+0x348>
 800338c:	2310      	movs	r3, #16
 800338e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003398:	d15b      	bne.n	8003452 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800339a:	7ffb      	ldrb	r3, [r7, #31]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d828      	bhi.n	80033f2 <UART_SetConfig+0x3aa>
 80033a0:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <UART_SetConfig+0x360>)
 80033a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	080033cd 	.word	0x080033cd
 80033ac:	080033d5 	.word	0x080033d5
 80033b0:	080033dd 	.word	0x080033dd
 80033b4:	080033f3 	.word	0x080033f3
 80033b8:	080033e3 	.word	0x080033e3
 80033bc:	080033f3 	.word	0x080033f3
 80033c0:	080033f3 	.word	0x080033f3
 80033c4:	080033f3 	.word	0x080033f3
 80033c8:	080033eb 	.word	0x080033eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033cc:	f7fe fda2 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 80033d0:	61b8      	str	r0, [r7, #24]
        break;
 80033d2:	e013      	b.n	80033fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d4:	f7fe fdb2 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 80033d8:	61b8      	str	r0, [r7, #24]
        break;
 80033da:	e00f      	b.n	80033fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033dc:	4b4b      	ldr	r3, [pc, #300]	; (800350c <UART_SetConfig+0x4c4>)
 80033de:	61bb      	str	r3, [r7, #24]
        break;
 80033e0:	e00c      	b.n	80033fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e2:	f7fe fcc5 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 80033e6:	61b8      	str	r0, [r7, #24]
        break;
 80033e8:	e008      	b.n	80033fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ee:	61bb      	str	r3, [r7, #24]
        break;
 80033f0:	e004      	b.n	80033fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	77bb      	strb	r3, [r7, #30]
        break;
 80033fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d074      	beq.n	80034ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	005a      	lsls	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	441a      	add	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	d916      	bls.n	800344c <UART_SetConfig+0x404>
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003424:	d212      	bcs.n	800344c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f023 030f 	bic.w	r3, r3, #15
 800342e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	b29b      	uxth	r3, r3
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	b29a      	uxth	r2, r3
 800343c:	89fb      	ldrh	r3, [r7, #14]
 800343e:	4313      	orrs	r3, r2
 8003440:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	89fa      	ldrh	r2, [r7, #14]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	e04f      	b.n	80034ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	77bb      	strb	r3, [r7, #30]
 8003450:	e04c      	b.n	80034ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003452:	7ffb      	ldrb	r3, [r7, #31]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d828      	bhi.n	80034aa <UART_SetConfig+0x462>
 8003458:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <UART_SetConfig+0x418>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003485 	.word	0x08003485
 8003464:	0800348d 	.word	0x0800348d
 8003468:	08003495 	.word	0x08003495
 800346c:	080034ab 	.word	0x080034ab
 8003470:	0800349b 	.word	0x0800349b
 8003474:	080034ab 	.word	0x080034ab
 8003478:	080034ab 	.word	0x080034ab
 800347c:	080034ab 	.word	0x080034ab
 8003480:	080034a3 	.word	0x080034a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003484:	f7fe fd46 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 8003488:	61b8      	str	r0, [r7, #24]
        break;
 800348a:	e013      	b.n	80034b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800348c:	f7fe fd56 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8003490:	61b8      	str	r0, [r7, #24]
        break;
 8003492:	e00f      	b.n	80034b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003494:	4b1d      	ldr	r3, [pc, #116]	; (800350c <UART_SetConfig+0x4c4>)
 8003496:	61bb      	str	r3, [r7, #24]
        break;
 8003498:	e00c      	b.n	80034b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349a:	f7fe fc69 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 800349e:	61b8      	str	r0, [r7, #24]
        break;
 80034a0:	e008      	b.n	80034b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a6:	61bb      	str	r3, [r7, #24]
        break;
 80034a8:	e004      	b.n	80034b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	77bb      	strb	r3, [r7, #30]
        break;
 80034b2:	bf00      	nop
    }

    if (pclk != 0U)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d018      	beq.n	80034ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	085a      	lsrs	r2, r3, #1
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	441a      	add	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b0f      	cmp	r3, #15
 80034d2:	d909      	bls.n	80034e8 <UART_SetConfig+0x4a0>
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034da:	d205      	bcs.n	80034e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	b29a      	uxth	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	e001      	b.n	80034ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80034f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40007c00 	.word	0x40007c00
 8003508:	40023800 	.word	0x40023800
 800350c:	00f42400 	.word	0x00f42400

08003510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01a      	beq.n	8003626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800360e:	d10a      	bne.n	8003626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af02      	add	r7, sp, #8
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003664:	f7fd fba0 	bl	8000da8 <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d10e      	bne.n	8003696 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f831 	bl	80036ee <UART_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e027      	b.n	80036e6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d10e      	bne.n	80036c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f81b 	bl	80036ee <UART_WaitOnFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e011      	b.n	80036e6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b09c      	sub	sp, #112	; 0x70
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	4613      	mov	r3, r2
 80036fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fe:	e0a7      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	f000 80a3 	beq.w	8003850 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fd fb4d 	bl	8000da8 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <UART_WaitOnFlagUntilTimeout+0x32>
 800371a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800371c:	2b00      	cmp	r3, #0
 800371e:	d13f      	bne.n	80037a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800372e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003730:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003734:	667b      	str	r3, [r7, #100]	; 0x64
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800373e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003740:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003744:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800374c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e6      	bne.n	8003720 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3308      	adds	r3, #8
 8003758:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	663b      	str	r3, [r7, #96]	; 0x60
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3308      	adds	r3, #8
 8003770:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003772:	64ba      	str	r2, [r7, #72]	; 0x48
 8003774:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e5      	bne.n	8003752 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e068      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d050      	beq.n	8003850 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037bc:	d148      	bne.n	8003850 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e6:	637b      	str	r3, [r7, #52]	; 0x34
 80037e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e6      	bne.n	80037c8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3308      	adds	r3, #8
 8003800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	613b      	str	r3, [r7, #16]
   return(result);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	66bb      	str	r3, [r7, #104]	; 0x68
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3308      	adds	r3, #8
 8003818:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800381a:	623a      	str	r2, [r7, #32]
 800381c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	69f9      	ldr	r1, [r7, #28]
 8003820:	6a3a      	ldr	r2, [r7, #32]
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	61bb      	str	r3, [r7, #24]
   return(result);
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e5      	bne.n	80037fa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e010      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	429a      	cmp	r2, r3
 800386c:	f43f af48 	beq.w	8003700 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3770      	adds	r7, #112	; 0x70
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800387c:	b084      	sub	sp, #16
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	f107 001c 	add.w	r0, r7, #28
 800388a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	2b01      	cmp	r3, #1
 8003892:	d120      	bne.n	80038d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	4b20      	ldr	r3, [pc, #128]	; (8003928 <USB_CoreInit+0xac>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d105      	bne.n	80038ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa96 	bl	8003dfc <USB_CoreReset>
 80038d0:	4603      	mov	r3, r0
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	e010      	b.n	80038f8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fa8a 	bl	8003dfc <USB_CoreReset>
 80038e8:	4603      	mov	r3, r0
 80038ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d10b      	bne.n	8003916 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f043 0206 	orr.w	r2, r3, #6
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003922:	b004      	add	sp, #16
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	ffbdffbf 	.word	0xffbdffbf

0800392c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 0201 	bic.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d115      	bne.n	800399c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800397c:	2001      	movs	r0, #1
 800397e:	f7fd fa1f 	bl	8000dc0 <HAL_Delay>
      ms++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3301      	adds	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fa29 	bl	8003de0 <USB_GetMode>
 800398e:	4603      	mov	r3, r0
 8003990:	2b01      	cmp	r3, #1
 8003992:	d01e      	beq.n	80039d2 <USB_SetCurrentMode+0x84>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b31      	cmp	r3, #49	; 0x31
 8003998:	d9f0      	bls.n	800397c <USB_SetCurrentMode+0x2e>
 800399a:	e01a      	b.n	80039d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d115      	bne.n	80039ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039ae:	2001      	movs	r0, #1
 80039b0:	f7fd fa06 	bl	8000dc0 <HAL_Delay>
      ms++;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa10 	bl	8003de0 <USB_GetMode>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <USB_SetCurrentMode+0x84>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b31      	cmp	r3, #49	; 0x31
 80039ca:	d9f0      	bls.n	80039ae <USB_SetCurrentMode+0x60>
 80039cc:	e001      	b.n	80039d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e005      	b.n	80039de <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b32      	cmp	r3, #50	; 0x32
 80039d6:	d101      	bne.n	80039dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039e8:	b084      	sub	sp, #16
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b086      	sub	sp, #24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	e009      	b.n	8003a1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	3340      	adds	r3, #64	; 0x40
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	2200      	movs	r2, #0
 8003a14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b0e      	cmp	r3, #14
 8003a20:	d9f2      	bls.n	8003a08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11c      	bne.n	8003a62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e005      	b.n	8003a6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a74:	461a      	mov	r2, r3
 8003a76:	2300      	movs	r3, #0
 8003a78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a80:	4619      	mov	r1, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a88:	461a      	mov	r2, r3
 8003a8a:	680b      	ldr	r3, [r1, #0]
 8003a8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10c      	bne.n	8003aae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d104      	bne.n	8003aa4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f965 	bl	8003d6c <USB_SetDevSpeed>
 8003aa2:	e008      	b.n	8003ab6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f960 	bl	8003d6c <USB_SetDevSpeed>
 8003aac:	e003      	b.n	8003ab6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003aae:	2103      	movs	r1, #3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f95b 	bl	8003d6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ab6:	2110      	movs	r1, #16
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f8f3 	bl	8003ca4 <USB_FlushTxFifo>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f91f 	bl	8003d0c <USB_FlushRxFifo>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af6:	461a      	mov	r2, r3
 8003af8:	2300      	movs	r3, #0
 8003afa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	e043      	b.n	8003b8a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b18:	d118      	bne.n	8003b4c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	e013      	b.n	8003b5e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b42:	461a      	mov	r2, r3
 8003b44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e008      	b.n	8003b5e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	3301      	adds	r3, #1
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d3b7      	bcc.n	8003b02 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	e043      	b.n	8003c20 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bae:	d118      	bne.n	8003be2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e013      	b.n	8003bf4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	e008      	b.n	8003bf4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	461a      	mov	r2, r3
 8003c02:	2300      	movs	r3, #0
 8003c04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c12:	461a      	mov	r2, r3
 8003c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d3b7      	bcc.n	8003b98 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d105      	bne.n	8003c5c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f043 0210 	orr.w	r2, r3, #16
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <USB_DevInit+0x2b4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f043 0208 	orr.w	r2, r3, #8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d105      	bne.n	8003c8c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <USB_DevInit+0x2b8>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c98:	b004      	add	sp, #16
 8003c9a:	4770      	bx	lr
 8003c9c:	803c3800 	.word	0x803c3800
 8003ca0:	40000004 	.word	0x40000004

08003ca4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <USB_FlushTxFifo+0x64>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e01b      	b.n	8003cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	daf2      	bge.n	8003cb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	019b      	lsls	r3, r3, #6
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <USB_FlushTxFifo+0x64>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e006      	b.n	8003cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d0f0      	beq.n	8003cdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	00030d40 	.word	0x00030d40

08003d0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4a11      	ldr	r2, [pc, #68]	; (8003d68 <USB_FlushRxFifo+0x5c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e018      	b.n	8003d5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	daf2      	bge.n	8003d18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <USB_FlushRxFifo+0x5c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e006      	b.n	8003d5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b10      	cmp	r3, #16
 8003d58:	d0f0      	beq.n	8003d3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	00030d40 	.word	0x00030d40

08003d6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	68f9      	ldr	r1, [r7, #12]
 8003d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003db8:	f023 0303 	bic.w	r3, r3, #3
 8003dbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0301 	and.w	r3, r3, #1
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <USB_CoreReset+0x64>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e01b      	b.n	8003e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	daf2      	bge.n	8003e08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f043 0201 	orr.w	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3301      	adds	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <USB_CoreReset+0x64>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e006      	b.n	8003e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d0f0      	beq.n	8003e32 <USB_CoreReset+0x36>

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	00030d40 	.word	0x00030d40

08003e64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e7a:	f3ef 8305 	mrs	r3, IPSR
 8003e7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e86:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8a:	607b      	str	r3, [r7, #4]
  return(result);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e92:	f3ef 8311 	mrs	r3, BASEPRI
 8003e96:	603b      	str	r3, [r7, #0]
  return(result);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <osKernelInitialize+0x3a>
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <osKernelInitialize+0x64>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d103      	bne.n	8003eae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003ea6:	f06f 0305 	mvn.w	r3, #5
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e00c      	b.n	8003ec8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <osKernelInitialize+0x64>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d105      	bne.n	8003ec2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <osKernelInitialize+0x64>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e002      	b.n	8003ec8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000744 	.word	0x20000744

08003edc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee2:	f3ef 8305 	mrs	r3, IPSR
 8003ee6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10f      	bne.n	8003f0e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eee:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef2:	607b      	str	r3, [r7, #4]
  return(result);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003efa:	f3ef 8311 	mrs	r3, BASEPRI
 8003efe:	603b      	str	r3, [r7, #0]
  return(result);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <osKernelStart+0x3a>
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <osKernelStart+0x68>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d103      	bne.n	8003f16 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f0e:	f06f 0305 	mvn.w	r3, #5
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e010      	b.n	8003f38 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <osKernelStart+0x68>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d109      	bne.n	8003f32 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f1e:	f7ff ffa1 	bl	8003e64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <osKernelStart+0x68>)
 8003f24:	2202      	movs	r2, #2
 8003f26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f28:	f001 f8ca 	bl	80050c0 <vTaskStartScheduler>
      stat = osOK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e002      	b.n	8003f38 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295
 8003f36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f38:	68fb      	ldr	r3, [r7, #12]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000744 	.word	0x20000744

08003f48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b090      	sub	sp, #64	; 0x40
 8003f4c:	af04      	add	r7, sp, #16
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f58:	f3ef 8305 	mrs	r3, IPSR
 8003f5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f5e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 808f 	bne.w	8004084 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f66:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f72:	f3ef 8311 	mrs	r3, BASEPRI
 8003f76:	617b      	str	r3, [r7, #20]
  return(result);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <osThreadNew+0x3e>
 8003f7e:	4b44      	ldr	r3, [pc, #272]	; (8004090 <osThreadNew+0x148>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d07e      	beq.n	8004084 <osThreadNew+0x13c>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d07b      	beq.n	8004084 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003f90:	2318      	movs	r3, #24
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d045      	beq.n	8004030 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <osThreadNew+0x6a>
        name = attr->name;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <osThreadNew+0x90>
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	2b38      	cmp	r3, #56	; 0x38
 8003fca:	d805      	bhi.n	8003fd8 <osThreadNew+0x90>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <osThreadNew+0x94>
        return (NULL);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e054      	b.n	8004086 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00e      	beq.n	8004012 <osThreadNew+0xca>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2bbb      	cmp	r3, #187	; 0xbb
 8003ffa:	d90a      	bls.n	8004012 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004000:	2b00      	cmp	r3, #0
 8004002:	d006      	beq.n	8004012 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <osThreadNew+0xca>
        mem = 1;
 800400c:	2301      	movs	r3, #1
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	e010      	b.n	8004034 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10c      	bne.n	8004034 <osThreadNew+0xec>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d108      	bne.n	8004034 <osThreadNew+0xec>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d104      	bne.n	8004034 <osThreadNew+0xec>
          mem = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
 800402e:	e001      	b.n	8004034 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d110      	bne.n	800405c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004042:	9202      	str	r2, [sp, #8]
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fe3f 	bl	8004cd4 <xTaskCreateStatic>
 8004056:	4603      	mov	r3, r0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	e013      	b.n	8004084 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d110      	bne.n	8004084 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	b29a      	uxth	r2, r3
 8004066:	f107 0310 	add.w	r3, r7, #16
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fe90 	bl	8004d9a <xTaskCreate>
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d001      	beq.n	8004084 <osThreadNew+0x13c>
          hTask = NULL;
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004084:	693b      	ldr	r3, [r7, #16]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3730      	adds	r7, #48	; 0x30
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000744 	.word	0x20000744

08004094 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800409c:	f3ef 8305 	mrs	r3, IPSR
 80040a0:	613b      	str	r3, [r7, #16]
  return(result);
 80040a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10f      	bne.n	80040c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040b4:	f3ef 8311 	mrs	r3, BASEPRI
 80040b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <osDelay+0x3c>
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <osDelay+0x58>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d103      	bne.n	80040d0 <osDelay+0x3c>
    stat = osErrorISR;
 80040c8:	f06f 0305 	mvn.w	r3, #5
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e007      	b.n	80040e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 ffba 	bl	8005054 <vTaskDelay>
    }
  }

  return (stat);
 80040e0:	697b      	ldr	r3, [r7, #20]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000744 	.word	0x20000744

080040f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a07      	ldr	r2, [pc, #28]	; (800411c <vApplicationGetIdleTaskMemory+0x2c>)
 8004100:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4a06      	ldr	r2, [pc, #24]	; (8004120 <vApplicationGetIdleTaskMemory+0x30>)
 8004106:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2280      	movs	r2, #128	; 0x80
 800410c:	601a      	str	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000748 	.word	0x20000748
 8004120:	20000804 	.word	0x20000804

08004124 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a07      	ldr	r2, [pc, #28]	; (8004150 <vApplicationGetTimerTaskMemory+0x2c>)
 8004134:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a06      	ldr	r2, [pc, #24]	; (8004154 <vApplicationGetTimerTaskMemory+0x30>)
 800413a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004142:	601a      	str	r2, [r3, #0]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000a04 	.word	0x20000a04
 8004154:	20000ac0 	.word	0x20000ac0

08004158 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f103 0208 	add.w	r2, r3, #8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f04f 32ff 	mov.w	r2, #4294967295
 8004170:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f103 0208 	add.w	r2, r3, #8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f103 0208 	add.w	r2, r3, #8
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	601a      	str	r2, [r3, #0]
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041fa:	b480      	push	{r7}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d103      	bne.n	800421a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e00c      	b.n	8004234 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3308      	adds	r3, #8
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e002      	b.n	8004228 <vListInsert+0x2e>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	429a      	cmp	r2, r3
 8004232:	d2f6      	bcs.n	8004222 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	601a      	str	r2, [r3, #0]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6892      	ldr	r2, [r2, #8]
 8004282:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6852      	ldr	r2, [r2, #4]
 800428c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d103      	bne.n	80042a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10c      	bne.n	80042ee <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	b672      	cpsid	i
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	b662      	cpsie	i
 80042e8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80042ee:	f002 f8a5 	bl	800643c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	441a      	add	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	3b01      	subs	r3, #1
 8004320:	68f9      	ldr	r1, [r7, #12]
 8004322:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	441a      	add	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	22ff      	movs	r2, #255	; 0xff
 8004332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	22ff      	movs	r2, #255	; 0xff
 800433a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d114      	bne.n	800436e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01a      	beq.n	8004382 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3310      	adds	r3, #16
 8004350:	4618      	mov	r0, r3
 8004352:	f001 f95d 	bl	8005610 <xTaskRemoveFromEventList>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d012      	beq.n	8004382 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <xQueueGenericReset+0xd0>)
 800435e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	e009      	b.n	8004382 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3310      	adds	r3, #16
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fef0 	bl	8004158 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3324      	adds	r3, #36	; 0x24
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff feeb 	bl	8004158 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004382:	f002 f88f 	bl	80064a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004386:	2301      	movs	r3, #1
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	e000ed04 	.word	0xe000ed04

08004394 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08e      	sub	sp, #56	; 0x38
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10c      	bne.n	80043c2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	b672      	cpsid	i
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	b662      	cpsie	i
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10c      	bne.n	80043e2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	b672      	cpsid	i
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	b662      	cpsie	i
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <xQueueGenericCreateStatic+0x5a>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <xQueueGenericCreateStatic+0x5e>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <xQueueGenericCreateStatic+0x60>
 80043f2:	2300      	movs	r3, #0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10c      	bne.n	8004412 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	b672      	cpsid	i
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	b662      	cpsie	i
 800440c:	623b      	str	r3, [r7, #32]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <xQueueGenericCreateStatic+0x8a>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <xQueueGenericCreateStatic+0x8e>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <xQueueGenericCreateStatic+0x90>
 8004422:	2300      	movs	r3, #0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10c      	bne.n	8004442 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	b672      	cpsid	i
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	b662      	cpsie	i
 800443c:	61fb      	str	r3, [r7, #28]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004442:	2350      	movs	r3, #80	; 0x50
 8004444:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b50      	cmp	r3, #80	; 0x50
 800444a:	d00c      	beq.n	8004466 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	b672      	cpsid	i
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	b662      	cpsie	i
 8004460:	61bb      	str	r3, [r7, #24]
}
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004466:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00d      	beq.n	800448e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800447a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	4613      	mov	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f805 	bl	8004498 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004490:	4618      	mov	r0, r3
 8004492:	3730      	adds	r7, #48	; 0x30
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d103      	bne.n	80044b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	e002      	b.n	80044ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044c6:	2101      	movs	r1, #1
 80044c8:	69b8      	ldr	r0, [r7, #24]
 80044ca:	f7ff fef9 	bl	80042c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08e      	sub	sp, #56	; 0x38
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044ee:	2300      	movs	r3, #0
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10c      	bne.n	8004516 <xQueueGenericSend+0x36>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	b672      	cpsid	i
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	b662      	cpsie	i
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d103      	bne.n	8004524 <xQueueGenericSend+0x44>
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <xQueueGenericSend+0x48>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <xQueueGenericSend+0x4a>
 8004528:	2300      	movs	r3, #0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <xQueueGenericSend+0x68>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	b672      	cpsid	i
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	b662      	cpsie	i
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d103      	bne.n	8004556 <xQueueGenericSend+0x76>
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <xQueueGenericSend+0x7a>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <xQueueGenericSend+0x7c>
 800455a:	2300      	movs	r3, #0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10c      	bne.n	800457a <xQueueGenericSend+0x9a>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	b672      	cpsid	i
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	b662      	cpsie	i
 8004574:	623b      	str	r3, [r7, #32]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800457a:	f001 fa13 	bl	80059a4 <xTaskGetSchedulerState>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <xQueueGenericSend+0xaa>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <xQueueGenericSend+0xae>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <xQueueGenericSend+0xb0>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10c      	bne.n	80045ae <xQueueGenericSend+0xce>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	b672      	cpsid	i
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	b662      	cpsie	i
 80045a8:	61fb      	str	r3, [r7, #28]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045ae:	f001 ff45 	bl	800643c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <xQueueGenericSend+0xe4>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d129      	bne.n	8004618 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ca:	f000 fa15 	bl	80049f8 <prvCopyDataToQueue>
 80045ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d010      	beq.n	80045fa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	3324      	adds	r3, #36	; 0x24
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 f817 	bl	8005610 <xTaskRemoveFromEventList>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d013      	beq.n	8004610 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045e8:	4b3f      	ldr	r3, [pc, #252]	; (80046e8 <xQueueGenericSend+0x208>)
 80045ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	e00a      	b.n	8004610 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004600:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <xQueueGenericSend+0x208>)
 8004602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004610:	f001 ff48 	bl	80064a4 <vPortExitCritical>
				return pdPASS;
 8004614:	2301      	movs	r3, #1
 8004616:	e063      	b.n	80046e0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800461e:	f001 ff41 	bl	80064a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004622:	2300      	movs	r3, #0
 8004624:	e05c      	b.n	80046e0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800462c:	f107 0314 	add.w	r3, r7, #20
 8004630:	4618      	mov	r0, r3
 8004632:	f001 f853 	bl	80056dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004636:	2301      	movs	r3, #1
 8004638:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800463a:	f001 ff33 	bl	80064a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800463e:	f000 fdb3 	bl	80051a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004642:	f001 fefb 	bl	800643c <vPortEnterCritical>
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800464c:	b25b      	sxtb	r3, r3
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004652:	d103      	bne.n	800465c <xQueueGenericSend+0x17c>
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004662:	b25b      	sxtb	r3, r3
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d103      	bne.n	8004672 <xQueueGenericSend+0x192>
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004672:	f001 ff17 	bl	80064a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004676:	1d3a      	adds	r2, r7, #4
 8004678:	f107 0314 	add.w	r3, r7, #20
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f001 f842 	bl	8005708 <xTaskCheckForTimeOut>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d124      	bne.n	80046d4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800468a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800468c:	f000 faac 	bl	8004be8 <prvIsQueueFull>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d018      	beq.n	80046c8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	3310      	adds	r3, #16
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 ff62 	bl	8005568 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a6:	f000 fa37 	bl	8004b18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046aa:	f000 fd8b 	bl	80051c4 <xTaskResumeAll>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f47f af7c 	bne.w	80045ae <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80046b6:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <xQueueGenericSend+0x208>)
 80046b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	e772      	b.n	80045ae <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ca:	f000 fa25 	bl	8004b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046ce:	f000 fd79 	bl	80051c4 <xTaskResumeAll>
 80046d2:	e76c      	b.n	80045ae <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d6:	f000 fa1f 	bl	8004b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046da:	f000 fd73 	bl	80051c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3738      	adds	r7, #56	; 0x38
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08e      	sub	sp, #56	; 0x38
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10c      	bne.n	800471e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	b672      	cpsid	i
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	b662      	cpsie	i
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
}
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <xQueueGenericSendFromISR+0x40>
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <xQueueGenericSendFromISR+0x44>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <xQueueGenericSendFromISR+0x46>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10c      	bne.n	8004750 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	b672      	cpsid	i
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	b662      	cpsie	i
 800474a:	623b      	str	r3, [r7, #32]
}
 800474c:	bf00      	nop
 800474e:	e7fe      	b.n	800474e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d103      	bne.n	800475e <xQueueGenericSendFromISR+0x72>
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <xQueueGenericSendFromISR+0x76>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <xQueueGenericSendFromISR+0x78>
 8004762:	2300      	movs	r3, #0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10c      	bne.n	8004782 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	b672      	cpsid	i
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	b662      	cpsie	i
 800477c:	61fb      	str	r3, [r7, #28]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004782:	f001 ff43 	bl	800660c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004786:	f3ef 8211 	mrs	r2, BASEPRI
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	b672      	cpsid	i
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	b662      	cpsie	i
 800479e:	61ba      	str	r2, [r7, #24]
 80047a0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047a2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d302      	bcc.n	80047b8 <xQueueGenericSendFromISR+0xcc>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d12c      	bne.n	8004812 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047c8:	f000 f916 	bl	80049f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d112      	bne.n	80047fc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d016      	beq.n	800480c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	3324      	adds	r3, #36	; 0x24
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 ff14 	bl	8005610 <xTaskRemoveFromEventList>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00e      	beq.n	800480c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e007      	b.n	800480c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004800:	3301      	adds	r3, #1
 8004802:	b2db      	uxtb	r3, r3
 8004804:	b25a      	sxtb	r2, r3
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800480c:	2301      	movs	r3, #1
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004810:	e001      	b.n	8004816 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004812:	2300      	movs	r3, #0
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004820:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004824:	4618      	mov	r0, r3
 8004826:	3738      	adds	r7, #56	; 0x38
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08c      	sub	sp, #48	; 0x30
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004838:	2300      	movs	r3, #0
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10c      	bne.n	8004860 <xQueueReceive+0x34>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	b672      	cpsid	i
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	b662      	cpsie	i
 800485a:	623b      	str	r3, [r7, #32]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <xQueueReceive+0x42>
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <xQueueReceive+0x46>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <xQueueReceive+0x48>
 8004872:	2300      	movs	r3, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10c      	bne.n	8004892 <xQueueReceive+0x66>
	__asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	b672      	cpsid	i
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	b662      	cpsie	i
 800488c:	61fb      	str	r3, [r7, #28]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004892:	f001 f887 	bl	80059a4 <xTaskGetSchedulerState>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <xQueueReceive+0x76>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <xQueueReceive+0x7a>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <xQueueReceive+0x7c>
 80048a6:	2300      	movs	r3, #0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10c      	bne.n	80048c6 <xQueueReceive+0x9a>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	b672      	cpsid	i
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	b662      	cpsie	i
 80048c0:	61bb      	str	r3, [r7, #24]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048c6:	f001 fdb9 	bl	800643c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01f      	beq.n	8004916 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048da:	f000 f8f7 	bl	8004acc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	1e5a      	subs	r2, r3, #1
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00f      	beq.n	800490e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	3310      	adds	r3, #16
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fe8c 	bl	8005610 <xTaskRemoveFromEventList>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048fe:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <xQueueReceive+0x1c8>)
 8004900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800490e:	f001 fdc9 	bl	80064a4 <vPortExitCritical>
				return pdPASS;
 8004912:	2301      	movs	r3, #1
 8004914:	e069      	b.n	80049ea <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800491c:	f001 fdc2 	bl	80064a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004920:	2300      	movs	r3, #0
 8004922:	e062      	b.n	80049ea <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800492a:	f107 0310 	add.w	r3, r7, #16
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fed4 	bl	80056dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004934:	2301      	movs	r3, #1
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004938:	f001 fdb4 	bl	80064a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800493c:	f000 fc34 	bl	80051a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004940:	f001 fd7c 	bl	800643c <vPortEnterCritical>
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800494a:	b25b      	sxtb	r3, r3
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d103      	bne.n	800495a <xQueueReceive+0x12e>
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004960:	b25b      	sxtb	r3, r3
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d103      	bne.n	8004970 <xQueueReceive+0x144>
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004970:	f001 fd98 	bl	80064a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004974:	1d3a      	adds	r2, r7, #4
 8004976:	f107 0310 	add.w	r3, r7, #16
 800497a:	4611      	mov	r1, r2
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fec3 	bl	8005708 <xTaskCheckForTimeOut>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d123      	bne.n	80049d0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800498a:	f000 f917 	bl	8004bbc <prvIsQueueEmpty>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d017      	beq.n	80049c4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	3324      	adds	r3, #36	; 0x24
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fde3 	bl	8005568 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a4:	f000 f8b8 	bl	8004b18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049a8:	f000 fc0c 	bl	80051c4 <xTaskResumeAll>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d189      	bne.n	80048c6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80049b2:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <xQueueReceive+0x1c8>)
 80049b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	e780      	b.n	80048c6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c6:	f000 f8a7 	bl	8004b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049ca:	f000 fbfb 	bl	80051c4 <xTaskResumeAll>
 80049ce:	e77a      	b.n	80048c6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d2:	f000 f8a1 	bl	8004b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049d6:	f000 fbf5 	bl	80051c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049dc:	f000 f8ee 	bl	8004bbc <prvIsQueueEmpty>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f43f af6f 	beq.w	80048c6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3730      	adds	r7, #48	; 0x30
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	e000ed04 	.word	0xe000ed04

080049f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10d      	bne.n	8004a32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d14d      	bne.n	8004aba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 ffdc 	bl	80059e0 <xTaskPriorityDisinherit>
 8004a28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	e043      	b.n	8004aba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d119      	bne.n	8004a6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6858      	ldr	r0, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	461a      	mov	r2, r3
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	f002 f830 	bl	8006aa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	441a      	add	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d32b      	bcc.n	8004aba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	e026      	b.n	8004aba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68d8      	ldr	r0, [r3, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	461a      	mov	r2, r3
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	f002 f816 	bl	8006aa8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	425b      	negs	r3, r3
 8004a86:	441a      	add	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d207      	bcs.n	8004aa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	425b      	negs	r3, r3
 8004aa2:	441a      	add	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d105      	bne.n	8004aba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ac2:	697b      	ldr	r3, [r7, #20]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d018      	beq.n	8004b10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	441a      	add	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d303      	bcc.n	8004b00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68d9      	ldr	r1, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6838      	ldr	r0, [r7, #0]
 8004b0c:	f001 ffcc 	bl	8006aa8 <memcpy>
	}
}
 8004b10:	bf00      	nop
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b20:	f001 fc8c 	bl	800643c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b2c:	e011      	b.n	8004b52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d012      	beq.n	8004b5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3324      	adds	r3, #36	; 0x24
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fd68 	bl	8005610 <xTaskRemoveFromEventList>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b46:	f000 fe45 	bl	80057d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	dce9      	bgt.n	8004b2e <prvUnlockQueue+0x16>
 8004b5a:	e000      	b.n	8004b5e <prvUnlockQueue+0x46>
					break;
 8004b5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	22ff      	movs	r2, #255	; 0xff
 8004b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b66:	f001 fc9d 	bl	80064a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b6a:	f001 fc67 	bl	800643c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b76:	e011      	b.n	8004b9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d012      	beq.n	8004ba6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3310      	adds	r3, #16
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fd43 	bl	8005610 <xTaskRemoveFromEventList>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b90:	f000 fe20 	bl	80057d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b94:	7bbb      	ldrb	r3, [r7, #14]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	dce9      	bgt.n	8004b78 <prvUnlockQueue+0x60>
 8004ba4:	e000      	b.n	8004ba8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ba6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	22ff      	movs	r2, #255	; 0xff
 8004bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bb0:	f001 fc78 	bl	80064a4 <vPortExitCritical>
}
 8004bb4:	bf00      	nop
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bc4:	f001 fc3a 	bl	800643c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e001      	b.n	8004bda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bda:	f001 fc63 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 8004bde:	68fb      	ldr	r3, [r7, #12]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bf0:	f001 fc24 	bl	800643c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d102      	bne.n	8004c06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c00:	2301      	movs	r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e001      	b.n	8004c0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c0a:	f001 fc4b 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e014      	b.n	8004c52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c28:	4a0f      	ldr	r2, [pc, #60]	; (8004c68 <vQueueAddToRegistry+0x50>)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10b      	bne.n	8004c4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c34:	490c      	ldr	r1, [pc, #48]	; (8004c68 <vQueueAddToRegistry+0x50>)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c3e:	4a0a      	ldr	r2, [pc, #40]	; (8004c68 <vQueueAddToRegistry+0x50>)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c4a:	e006      	b.n	8004c5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b07      	cmp	r3, #7
 8004c56:	d9e7      	bls.n	8004c28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	20000ec0 	.word	0x20000ec0

08004c6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c7c:	f001 fbde 	bl	800643c <vPortEnterCritical>
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c86:	b25b      	sxtb	r3, r3
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d103      	bne.n	8004c96 <vQueueWaitForMessageRestricted+0x2a>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c9c:	b25b      	sxtb	r3, r3
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d103      	bne.n	8004cac <vQueueWaitForMessageRestricted+0x40>
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cac:	f001 fbfa 	bl	80064a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	3324      	adds	r3, #36	; 0x24
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fc77 	bl	80055b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004cc6:	6978      	ldr	r0, [r7, #20]
 8004cc8:	f7ff ff26 	bl	8004b18 <prvUnlockQueue>
	}
 8004ccc:	bf00      	nop
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08e      	sub	sp, #56	; 0x38
 8004cd8:	af04      	add	r7, sp, #16
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10c      	bne.n	8004d02 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	b672      	cpsid	i
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	b662      	cpsie	i
 8004cfc:	623b      	str	r3, [r7, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10c      	bne.n	8004d22 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	b672      	cpsid	i
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	b662      	cpsie	i
 8004d1c:	61fb      	str	r3, [r7, #28]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d22:	23bc      	movs	r3, #188	; 0xbc
 8004d24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2bbc      	cmp	r3, #188	; 0xbc
 8004d2a:	d00c      	beq.n	8004d46 <xTaskCreateStatic+0x72>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	b672      	cpsid	i
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	b662      	cpsie	i
 8004d40:	61bb      	str	r3, [r7, #24]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01e      	beq.n	8004d8c <xTaskCreateStatic+0xb8>
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	2202      	movs	r2, #2
 8004d62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d66:	2300      	movs	r3, #0
 8004d68:	9303      	str	r3, [sp, #12]
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	9302      	str	r3, [sp, #8]
 8004d6e:	f107 0314 	add.w	r3, r7, #20
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f850 	bl	8004e24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d86:	f000 f8f5 	bl	8004f74 <prvAddNewTaskToReadyList>
 8004d8a:	e001      	b.n	8004d90 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d90:	697b      	ldr	r3, [r7, #20]
	}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3728      	adds	r7, #40	; 0x28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b08c      	sub	sp, #48	; 0x30
 8004d9e:	af04      	add	r7, sp, #16
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4613      	mov	r3, r2
 8004da8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 fc70 	bl	8006694 <pvPortMalloc>
 8004db4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00e      	beq.n	8004dda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dbc:	20bc      	movs	r0, #188	; 0xbc
 8004dbe:	f001 fc69 	bl	8006694 <pvPortMalloc>
 8004dc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
 8004dd0:	e005      	b.n	8004dde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004dd2:	6978      	ldr	r0, [r7, #20]
 8004dd4:	f001 fd28 	bl	8006828 <vPortFree>
 8004dd8:	e001      	b.n	8004dde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d017      	beq.n	8004e14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dec:	88fa      	ldrh	r2, [r7, #6]
 8004dee:	2300      	movs	r3, #0
 8004df0:	9303      	str	r3, [sp, #12]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	9302      	str	r3, [sp, #8]
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f80e 	bl	8004e24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e08:	69f8      	ldr	r0, [r7, #28]
 8004e0a:	f000 f8b3 	bl	8004f74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	e002      	b.n	8004e1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e14:	f04f 33ff 	mov.w	r3, #4294967295
 8004e18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
	}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3720      	adds	r7, #32
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	21a5      	movs	r1, #165	; 0xa5
 8004e3e:	f001 fe41 	bl	8006ac4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004e4c:	440b      	add	r3, r1
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f023 0307 	bic.w	r3, r3, #7
 8004e5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00c      	beq.n	8004e80 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	b672      	cpsid	i
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	b662      	cpsie	i
 8004e7a:	617b      	str	r3, [r7, #20]
}
 8004e7c:	bf00      	nop
 8004e7e:	e7fe      	b.n	8004e7e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01f      	beq.n	8004ec6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	e012      	b.n	8004eb2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	7819      	ldrb	r1, [r3, #0]
 8004e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4413      	add	r3, r2
 8004e9a:	3334      	adds	r3, #52	; 0x34
 8004e9c:	460a      	mov	r2, r1
 8004e9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d006      	beq.n	8004eba <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	2b0f      	cmp	r3, #15
 8004eb6:	d9e9      	bls.n	8004e8c <prvInitialiseNewTask+0x68>
 8004eb8:	e000      	b.n	8004ebc <prvInitialiseNewTask+0x98>
			{
				break;
 8004eba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ec4:	e003      	b.n	8004ece <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	2b37      	cmp	r3, #55	; 0x37
 8004ed2:	d901      	bls.n	8004ed8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ed4:	2337      	movs	r3, #55	; 0x37
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004edc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	3304      	adds	r3, #4
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff f952 	bl	8004198 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	3318      	adds	r3, #24
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff f94d 	bl	8004198 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	3354      	adds	r3, #84	; 0x54
 8004f28:	2260      	movs	r2, #96	; 0x60
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 fdc9 	bl	8006ac4 <memset>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <prvInitialiseNewTask+0x144>)
 8004f36:	659a      	str	r2, [r3, #88]	; 0x58
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	4a0c      	ldr	r2, [pc, #48]	; (8004f6c <prvInitialiseNewTask+0x148>)
 8004f3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	4a0b      	ldr	r2, [pc, #44]	; (8004f70 <prvInitialiseNewTask+0x14c>)
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	68f9      	ldr	r1, [r7, #12]
 8004f48:	69b8      	ldr	r0, [r7, #24]
 8004f4a:	f001 f96b 	bl	8006224 <pxPortInitialiseStack>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f60:	bf00      	nop
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	08006d44 	.word	0x08006d44
 8004f6c:	08006d64 	.word	0x08006d64
 8004f70:	08006d24 	.word	0x08006d24

08004f74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f7c:	f001 fa5e 	bl	800643c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f80:	4b2d      	ldr	r3, [pc, #180]	; (8005038 <prvAddNewTaskToReadyList+0xc4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3301      	adds	r3, #1
 8004f86:	4a2c      	ldr	r2, [pc, #176]	; (8005038 <prvAddNewTaskToReadyList+0xc4>)
 8004f88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f8a:	4b2c      	ldr	r3, [pc, #176]	; (800503c <prvAddNewTaskToReadyList+0xc8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f92:	4a2a      	ldr	r2, [pc, #168]	; (800503c <prvAddNewTaskToReadyList+0xc8>)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f98:	4b27      	ldr	r3, [pc, #156]	; (8005038 <prvAddNewTaskToReadyList+0xc4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d110      	bne.n	8004fc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fa0:	f000 fc3c 	bl	800581c <prvInitialiseTaskLists>
 8004fa4:	e00d      	b.n	8004fc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fa6:	4b26      	ldr	r3, [pc, #152]	; (8005040 <prvAddNewTaskToReadyList+0xcc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d109      	bne.n	8004fc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fae:	4b23      	ldr	r3, [pc, #140]	; (800503c <prvAddNewTaskToReadyList+0xc8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d802      	bhi.n	8004fc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fbc:	4a1f      	ldr	r2, [pc, #124]	; (800503c <prvAddNewTaskToReadyList+0xc8>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fc2:	4b20      	ldr	r3, [pc, #128]	; (8005044 <prvAddNewTaskToReadyList+0xd0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <prvAddNewTaskToReadyList+0xd0>)
 8004fca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fcc:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <prvAddNewTaskToReadyList+0xd0>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <prvAddNewTaskToReadyList+0xd4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d903      	bls.n	8004fe8 <prvAddNewTaskToReadyList+0x74>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	4a18      	ldr	r2, [pc, #96]	; (8005048 <prvAddNewTaskToReadyList+0xd4>)
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4a15      	ldr	r2, [pc, #84]	; (800504c <prvAddNewTaskToReadyList+0xd8>)
 8004ff6:	441a      	add	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f7ff f8d7 	bl	80041b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005004:	f001 fa4e 	bl	80064a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005008:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <prvAddNewTaskToReadyList+0xcc>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00e      	beq.n	800502e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <prvAddNewTaskToReadyList+0xc8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	429a      	cmp	r2, r3
 800501c:	d207      	bcs.n	800502e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800501e:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <prvAddNewTaskToReadyList+0xdc>)
 8005020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	200013d4 	.word	0x200013d4
 800503c:	20000f00 	.word	0x20000f00
 8005040:	200013e0 	.word	0x200013e0
 8005044:	200013f0 	.word	0x200013f0
 8005048:	200013dc 	.word	0x200013dc
 800504c:	20000f04 	.word	0x20000f04
 8005050:	e000ed04 	.word	0xe000ed04

08005054 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d019      	beq.n	800509a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005066:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <vTaskDelay+0x64>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00c      	beq.n	8005088 <vTaskDelay+0x34>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	b672      	cpsid	i
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	b662      	cpsie	i
 8005082:	60bb      	str	r3, [r7, #8]
}
 8005084:	bf00      	nop
 8005086:	e7fe      	b.n	8005086 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005088:	f000 f88e 	bl	80051a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800508c:	2100      	movs	r1, #0
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fd18 	bl	8005ac4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005094:	f000 f896 	bl	80051c4 <xTaskResumeAll>
 8005098:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d107      	bne.n	80050b0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80050a0:	4b06      	ldr	r3, [pc, #24]	; (80050bc <vTaskDelay+0x68>)
 80050a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	200013fc 	.word	0x200013fc
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050ce:	463a      	mov	r2, r7
 80050d0:	1d39      	adds	r1, r7, #4
 80050d2:	f107 0308 	add.w	r3, r7, #8
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff f80a 	bl	80040f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	9202      	str	r2, [sp, #8]
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	2300      	movs	r3, #0
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	2300      	movs	r3, #0
 80050ec:	460a      	mov	r2, r1
 80050ee:	4926      	ldr	r1, [pc, #152]	; (8005188 <vTaskStartScheduler+0xc8>)
 80050f0:	4826      	ldr	r0, [pc, #152]	; (800518c <vTaskStartScheduler+0xcc>)
 80050f2:	f7ff fdef 	bl	8004cd4 <xTaskCreateStatic>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4a25      	ldr	r2, [pc, #148]	; (8005190 <vTaskStartScheduler+0xd0>)
 80050fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050fc:	4b24      	ldr	r3, [pc, #144]	; (8005190 <vTaskStartScheduler+0xd0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005104:	2301      	movs	r3, #1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e001      	b.n	800510e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d102      	bne.n	800511a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005114:	f000 fd2a 	bl	8005b6c <xTimerCreateTimerTask>
 8005118:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d11d      	bne.n	800515c <vTaskStartScheduler+0x9c>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	b672      	cpsid	i
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	b662      	cpsie	i
 8005134:	613b      	str	r3, [r7, #16]
}
 8005136:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005138:	4b16      	ldr	r3, [pc, #88]	; (8005194 <vTaskStartScheduler+0xd4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3354      	adds	r3, #84	; 0x54
 800513e:	4a16      	ldr	r2, [pc, #88]	; (8005198 <vTaskStartScheduler+0xd8>)
 8005140:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005142:	4b16      	ldr	r3, [pc, #88]	; (800519c <vTaskStartScheduler+0xdc>)
 8005144:	f04f 32ff 	mov.w	r2, #4294967295
 8005148:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <vTaskStartScheduler+0xe0>)
 800514c:	2201      	movs	r2, #1
 800514e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005150:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <vTaskStartScheduler+0xe4>)
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005156:	f001 f8f3 	bl	8006340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800515a:	e010      	b.n	800517e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d10c      	bne.n	800517e <vTaskStartScheduler+0xbe>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	b672      	cpsid	i
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	b662      	cpsie	i
 8005178:	60fb      	str	r3, [r7, #12]
}
 800517a:	bf00      	nop
 800517c:	e7fe      	b.n	800517c <vTaskStartScheduler+0xbc>
}
 800517e:	bf00      	nop
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	08006cac 	.word	0x08006cac
 800518c:	080057ed 	.word	0x080057ed
 8005190:	200013f8 	.word	0x200013f8
 8005194:	20000f00 	.word	0x20000f00
 8005198:	20000010 	.word	0x20000010
 800519c:	200013f4 	.word	0x200013f4
 80051a0:	200013e0 	.word	0x200013e0
 80051a4:	200013d8 	.word	0x200013d8

080051a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <vTaskSuspendAll+0x18>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3301      	adds	r3, #1
 80051b2:	4a03      	ldr	r2, [pc, #12]	; (80051c0 <vTaskSuspendAll+0x18>)
 80051b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80051b6:	bf00      	nop
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	200013fc 	.word	0x200013fc

080051c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051d2:	4b43      	ldr	r3, [pc, #268]	; (80052e0 <xTaskResumeAll+0x11c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10c      	bne.n	80051f4 <xTaskResumeAll+0x30>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	b672      	cpsid	i
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	b662      	cpsie	i
 80051ee:	603b      	str	r3, [r7, #0]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051f4:	f001 f922 	bl	800643c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051f8:	4b39      	ldr	r3, [pc, #228]	; (80052e0 <xTaskResumeAll+0x11c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <xTaskResumeAll+0x11c>)
 8005200:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005202:	4b37      	ldr	r3, [pc, #220]	; (80052e0 <xTaskResumeAll+0x11c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d162      	bne.n	80052d0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800520a:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <xTaskResumeAll+0x120>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d05e      	beq.n	80052d0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005212:	e02f      	b.n	8005274 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005214:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <xTaskResumeAll+0x124>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3318      	adds	r3, #24
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff f823 	bl	800426c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3304      	adds	r3, #4
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff f81e 	bl	800426c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005234:	4b2d      	ldr	r3, [pc, #180]	; (80052ec <xTaskResumeAll+0x128>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d903      	bls.n	8005244 <xTaskResumeAll+0x80>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	4a2a      	ldr	r2, [pc, #168]	; (80052ec <xTaskResumeAll+0x128>)
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4a27      	ldr	r2, [pc, #156]	; (80052f0 <xTaskResumeAll+0x12c>)
 8005252:	441a      	add	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f7fe ffa9 	bl	80041b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005264:	4b23      	ldr	r3, [pc, #140]	; (80052f4 <xTaskResumeAll+0x130>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	429a      	cmp	r2, r3
 800526c:	d302      	bcc.n	8005274 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <xTaskResumeAll+0x134>)
 8005270:	2201      	movs	r2, #1
 8005272:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005274:	4b1c      	ldr	r3, [pc, #112]	; (80052e8 <xTaskResumeAll+0x124>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1cb      	bne.n	8005214 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005282:	f000 fb6f 	bl	8005964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005286:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <xTaskResumeAll+0x138>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d010      	beq.n	80052b4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005292:	f000 f847 	bl	8005324 <xTaskIncrementTick>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800529c:	4b16      	ldr	r3, [pc, #88]	; (80052f8 <xTaskResumeAll+0x134>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f1      	bne.n	8005292 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <xTaskResumeAll+0x138>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052b4:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <xTaskResumeAll+0x134>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d009      	beq.n	80052d0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052bc:	2301      	movs	r3, #1
 80052be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052c0:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <xTaskResumeAll+0x13c>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052d0:	f001 f8e8 	bl	80064a4 <vPortExitCritical>

	return xAlreadyYielded;
 80052d4:	68bb      	ldr	r3, [r7, #8]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	200013fc 	.word	0x200013fc
 80052e4:	200013d4 	.word	0x200013d4
 80052e8:	20001394 	.word	0x20001394
 80052ec:	200013dc 	.word	0x200013dc
 80052f0:	20000f04 	.word	0x20000f04
 80052f4:	20000f00 	.word	0x20000f00
 80052f8:	200013e8 	.word	0x200013e8
 80052fc:	200013e4 	.word	0x200013e4
 8005300:	e000ed04 	.word	0xe000ed04

08005304 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <xTaskGetTickCount+0x1c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005310:	687b      	ldr	r3, [r7, #4]
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	200013d8 	.word	0x200013d8

08005324 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800532e:	4b50      	ldr	r3, [pc, #320]	; (8005470 <xTaskIncrementTick+0x14c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 808b 	bne.w	800544e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005338:	4b4e      	ldr	r3, [pc, #312]	; (8005474 <xTaskIncrementTick+0x150>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3301      	adds	r3, #1
 800533e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005340:	4a4c      	ldr	r2, [pc, #304]	; (8005474 <xTaskIncrementTick+0x150>)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d122      	bne.n	8005392 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800534c:	4b4a      	ldr	r3, [pc, #296]	; (8005478 <xTaskIncrementTick+0x154>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00c      	beq.n	8005370 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	b672      	cpsid	i
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	b662      	cpsie	i
 800536a:	603b      	str	r3, [r7, #0]
}
 800536c:	bf00      	nop
 800536e:	e7fe      	b.n	800536e <xTaskIncrementTick+0x4a>
 8005370:	4b41      	ldr	r3, [pc, #260]	; (8005478 <xTaskIncrementTick+0x154>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	4b41      	ldr	r3, [pc, #260]	; (800547c <xTaskIncrementTick+0x158>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a3f      	ldr	r2, [pc, #252]	; (8005478 <xTaskIncrementTick+0x154>)
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	4a3f      	ldr	r2, [pc, #252]	; (800547c <xTaskIncrementTick+0x158>)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	4b3e      	ldr	r3, [pc, #248]	; (8005480 <xTaskIncrementTick+0x15c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3301      	adds	r3, #1
 800538a:	4a3d      	ldr	r2, [pc, #244]	; (8005480 <xTaskIncrementTick+0x15c>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	f000 fae9 	bl	8005964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005392:	4b3c      	ldr	r3, [pc, #240]	; (8005484 <xTaskIncrementTick+0x160>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	429a      	cmp	r2, r3
 800539a:	d349      	bcc.n	8005430 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800539c:	4b36      	ldr	r3, [pc, #216]	; (8005478 <xTaskIncrementTick+0x154>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d104      	bne.n	80053b0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a6:	4b37      	ldr	r3, [pc, #220]	; (8005484 <xTaskIncrementTick+0x160>)
 80053a8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ac:	601a      	str	r2, [r3, #0]
					break;
 80053ae:	e03f      	b.n	8005430 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b0:	4b31      	ldr	r3, [pc, #196]	; (8005478 <xTaskIncrementTick+0x154>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d203      	bcs.n	80053d0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053c8:	4a2e      	ldr	r2, [pc, #184]	; (8005484 <xTaskIncrementTick+0x160>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053ce:	e02f      	b.n	8005430 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fe ff49 	bl	800426c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	3318      	adds	r3, #24
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe ff40 	bl	800426c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	4b25      	ldr	r3, [pc, #148]	; (8005488 <xTaskIncrementTick+0x164>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d903      	bls.n	8005400 <xTaskIncrementTick+0xdc>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	4a22      	ldr	r2, [pc, #136]	; (8005488 <xTaskIncrementTick+0x164>)
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4a1f      	ldr	r2, [pc, #124]	; (800548c <xTaskIncrementTick+0x168>)
 800540e:	441a      	add	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	3304      	adds	r3, #4
 8005414:	4619      	mov	r1, r3
 8005416:	4610      	mov	r0, r2
 8005418:	f7fe fecb 	bl	80041b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <xTaskIncrementTick+0x16c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	429a      	cmp	r2, r3
 8005428:	d3b8      	bcc.n	800539c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800542a:	2301      	movs	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800542e:	e7b5      	b.n	800539c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005430:	4b17      	ldr	r3, [pc, #92]	; (8005490 <xTaskIncrementTick+0x16c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005436:	4915      	ldr	r1, [pc, #84]	; (800548c <xTaskIncrementTick+0x168>)
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d907      	bls.n	8005458 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005448:	2301      	movs	r3, #1
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e004      	b.n	8005458 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800544e:	4b11      	ldr	r3, [pc, #68]	; (8005494 <xTaskIncrementTick+0x170>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	4a0f      	ldr	r2, [pc, #60]	; (8005494 <xTaskIncrementTick+0x170>)
 8005456:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005458:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <xTaskIncrementTick+0x174>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005464:	697b      	ldr	r3, [r7, #20]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	200013fc 	.word	0x200013fc
 8005474:	200013d8 	.word	0x200013d8
 8005478:	2000138c 	.word	0x2000138c
 800547c:	20001390 	.word	0x20001390
 8005480:	200013ec 	.word	0x200013ec
 8005484:	200013f4 	.word	0x200013f4
 8005488:	200013dc 	.word	0x200013dc
 800548c:	20000f04 	.word	0x20000f04
 8005490:	20000f00 	.word	0x20000f00
 8005494:	200013e4 	.word	0x200013e4
 8005498:	200013e8 	.word	0x200013e8

0800549c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054a2:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <vTaskSwitchContext+0xb4>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054aa:	4b2a      	ldr	r3, [pc, #168]	; (8005554 <vTaskSwitchContext+0xb8>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054b0:	e048      	b.n	8005544 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80054b2:	4b28      	ldr	r3, [pc, #160]	; (8005554 <vTaskSwitchContext+0xb8>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b8:	4b27      	ldr	r3, [pc, #156]	; (8005558 <vTaskSwitchContext+0xbc>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	e012      	b.n	80054e6 <vTaskSwitchContext+0x4a>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10c      	bne.n	80054e0 <vTaskSwitchContext+0x44>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	b672      	cpsid	i
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	b662      	cpsie	i
 80054da:	607b      	str	r3, [r7, #4]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <vTaskSwitchContext+0x42>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	491d      	ldr	r1, [pc, #116]	; (800555c <vTaskSwitchContext+0xc0>)
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0e2      	beq.n	80054c0 <vTaskSwitchContext+0x24>
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4a15      	ldr	r2, [pc, #84]	; (800555c <vTaskSwitchContext+0xc0>)
 8005506:	4413      	add	r3, r2
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	605a      	str	r2, [r3, #4]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	3308      	adds	r3, #8
 800551c:	429a      	cmp	r2, r3
 800551e:	d104      	bne.n	800552a <vTaskSwitchContext+0x8e>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a0b      	ldr	r2, [pc, #44]	; (8005560 <vTaskSwitchContext+0xc4>)
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	4a08      	ldr	r2, [pc, #32]	; (8005558 <vTaskSwitchContext+0xbc>)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <vTaskSwitchContext+0xc4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3354      	adds	r3, #84	; 0x54
 8005540:	4a08      	ldr	r2, [pc, #32]	; (8005564 <vTaskSwitchContext+0xc8>)
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	200013fc 	.word	0x200013fc
 8005554:	200013e8 	.word	0x200013e8
 8005558:	200013dc 	.word	0x200013dc
 800555c:	20000f04 	.word	0x20000f04
 8005560:	20000f00 	.word	0x20000f00
 8005564:	20000010 	.word	0x20000010

08005568 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10c      	bne.n	8005592 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	b672      	cpsid	i
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	b662      	cpsie	i
 800558c:	60fb      	str	r3, [r7, #12]
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <vTaskPlaceOnEventList+0x48>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3318      	adds	r3, #24
 8005598:	4619      	mov	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fe fe2d 	bl	80041fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055a0:	2101      	movs	r1, #1
 80055a2:	6838      	ldr	r0, [r7, #0]
 80055a4:	f000 fa8e 	bl	8005ac4 <prvAddCurrentTaskToDelayedList>
}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000f00 	.word	0x20000f00

080055b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10c      	bne.n	80055e0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	b672      	cpsid	i
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	b662      	cpsie	i
 80055da:	617b      	str	r3, [r7, #20]
}
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <vTaskPlaceOnEventListRestricted+0x58>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3318      	adds	r3, #24
 80055e6:	4619      	mov	r1, r3
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7fe fde2 	bl	80041b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	68b8      	ldr	r0, [r7, #8]
 80055fe:	f000 fa61 	bl	8005ac4 <prvAddCurrentTaskToDelayedList>
	}
 8005602:	bf00      	nop
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000f00 	.word	0x20000f00

08005610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10c      	bne.n	8005640 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	b672      	cpsid	i
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	b662      	cpsie	i
 800563a:	60fb      	str	r3, [r7, #12]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	3318      	adds	r3, #24
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe fe11 	bl	800426c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564a:	4b1e      	ldr	r3, [pc, #120]	; (80056c4 <xTaskRemoveFromEventList+0xb4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d11d      	bne.n	800568e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	3304      	adds	r3, #4
 8005656:	4618      	mov	r0, r3
 8005658:	f7fe fe08 	bl	800426c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005660:	4b19      	ldr	r3, [pc, #100]	; (80056c8 <xTaskRemoveFromEventList+0xb8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d903      	bls.n	8005670 <xTaskRemoveFromEventList+0x60>
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	4a16      	ldr	r2, [pc, #88]	; (80056c8 <xTaskRemoveFromEventList+0xb8>)
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4a13      	ldr	r2, [pc, #76]	; (80056cc <xTaskRemoveFromEventList+0xbc>)
 800567e:	441a      	add	r2, r3
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	3304      	adds	r3, #4
 8005684:	4619      	mov	r1, r3
 8005686:	4610      	mov	r0, r2
 8005688:	f7fe fd93 	bl	80041b2 <vListInsertEnd>
 800568c:	e005      	b.n	800569a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	3318      	adds	r3, #24
 8005692:	4619      	mov	r1, r3
 8005694:	480e      	ldr	r0, [pc, #56]	; (80056d0 <xTaskRemoveFromEventList+0xc0>)
 8005696:	f7fe fd8c 	bl	80041b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569e:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <xTaskRemoveFromEventList+0xc4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d905      	bls.n	80056b4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <xTaskRemoveFromEventList+0xc8>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e001      	b.n	80056b8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056b8:	697b      	ldr	r3, [r7, #20]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	200013fc 	.word	0x200013fc
 80056c8:	200013dc 	.word	0x200013dc
 80056cc:	20000f04 	.word	0x20000f04
 80056d0:	20001394 	.word	0x20001394
 80056d4:	20000f00 	.word	0x20000f00
 80056d8:	200013e8 	.word	0x200013e8

080056dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056e4:	4b06      	ldr	r3, [pc, #24]	; (8005700 <vTaskInternalSetTimeOutState+0x24>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <vTaskInternalSetTimeOutState+0x28>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	605a      	str	r2, [r3, #4]
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	200013ec 	.word	0x200013ec
 8005704:	200013d8 	.word	0x200013d8

08005708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10c      	bne.n	8005732 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	b672      	cpsid	i
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	b662      	cpsie	i
 800572c:	613b      	str	r3, [r7, #16]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10c      	bne.n	8005752 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	b672      	cpsid	i
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	b662      	cpsie	i
 800574c:	60fb      	str	r3, [r7, #12]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005752:	f000 fe73 	bl	800643c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005756:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <xTaskCheckForTimeOut+0xc4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d102      	bne.n	8005776 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005770:	2300      	movs	r3, #0
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	e023      	b.n	80057be <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <xTaskCheckForTimeOut+0xc8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d007      	beq.n	8005792 <xTaskCheckForTimeOut+0x8a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	429a      	cmp	r2, r3
 800578a:	d302      	bcc.n	8005792 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800578c:	2301      	movs	r3, #1
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	e015      	b.n	80057be <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	429a      	cmp	r2, r3
 800579a:	d20b      	bcs.n	80057b4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	1ad2      	subs	r2, r2, r3
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ff97 	bl	80056dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	e004      	b.n	80057be <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057ba:	2301      	movs	r3, #1
 80057bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057be:	f000 fe71 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 80057c2:	69fb      	ldr	r3, [r7, #28]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	200013d8 	.word	0x200013d8
 80057d0:	200013ec 	.word	0x200013ec

080057d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057d8:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <vTaskMissedYield+0x14>)
 80057da:	2201      	movs	r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
}
 80057de:	bf00      	nop
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	200013e8 	.word	0x200013e8

080057ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057f4:	f000 f852 	bl	800589c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <prvIdleTask+0x28>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d9f9      	bls.n	80057f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <prvIdleTask+0x2c>)
 8005802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005810:	e7f0      	b.n	80057f4 <prvIdleTask+0x8>
 8005812:	bf00      	nop
 8005814:	20000f04 	.word	0x20000f04
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005822:	2300      	movs	r3, #0
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	e00c      	b.n	8005842 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4a12      	ldr	r2, [pc, #72]	; (800587c <prvInitialiseTaskLists+0x60>)
 8005834:	4413      	add	r3, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f7fe fc8e 	bl	8004158 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3301      	adds	r3, #1
 8005840:	607b      	str	r3, [r7, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b37      	cmp	r3, #55	; 0x37
 8005846:	d9ef      	bls.n	8005828 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005848:	480d      	ldr	r0, [pc, #52]	; (8005880 <prvInitialiseTaskLists+0x64>)
 800584a:	f7fe fc85 	bl	8004158 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800584e:	480d      	ldr	r0, [pc, #52]	; (8005884 <prvInitialiseTaskLists+0x68>)
 8005850:	f7fe fc82 	bl	8004158 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005854:	480c      	ldr	r0, [pc, #48]	; (8005888 <prvInitialiseTaskLists+0x6c>)
 8005856:	f7fe fc7f 	bl	8004158 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800585a:	480c      	ldr	r0, [pc, #48]	; (800588c <prvInitialiseTaskLists+0x70>)
 800585c:	f7fe fc7c 	bl	8004158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005860:	480b      	ldr	r0, [pc, #44]	; (8005890 <prvInitialiseTaskLists+0x74>)
 8005862:	f7fe fc79 	bl	8004158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <prvInitialiseTaskLists+0x78>)
 8005868:	4a05      	ldr	r2, [pc, #20]	; (8005880 <prvInitialiseTaskLists+0x64>)
 800586a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800586c:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <prvInitialiseTaskLists+0x7c>)
 800586e:	4a05      	ldr	r2, [pc, #20]	; (8005884 <prvInitialiseTaskLists+0x68>)
 8005870:	601a      	str	r2, [r3, #0]
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000f04 	.word	0x20000f04
 8005880:	20001364 	.word	0x20001364
 8005884:	20001378 	.word	0x20001378
 8005888:	20001394 	.word	0x20001394
 800588c:	200013a8 	.word	0x200013a8
 8005890:	200013c0 	.word	0x200013c0
 8005894:	2000138c 	.word	0x2000138c
 8005898:	20001390 	.word	0x20001390

0800589c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058a2:	e019      	b.n	80058d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058a4:	f000 fdca 	bl	800643c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a8:	4b10      	ldr	r3, [pc, #64]	; (80058ec <prvCheckTasksWaitingTermination+0x50>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe fcd9 	bl	800426c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058ba:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <prvCheckTasksWaitingTermination+0x54>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3b01      	subs	r3, #1
 80058c0:	4a0b      	ldr	r2, [pc, #44]	; (80058f0 <prvCheckTasksWaitingTermination+0x54>)
 80058c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058c4:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <prvCheckTasksWaitingTermination+0x58>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	4a0a      	ldr	r2, [pc, #40]	; (80058f4 <prvCheckTasksWaitingTermination+0x58>)
 80058cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058ce:	f000 fde9 	bl	80064a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f810 	bl	80058f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <prvCheckTasksWaitingTermination+0x58>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e1      	bne.n	80058a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200013a8 	.word	0x200013a8
 80058f0:	200013d4 	.word	0x200013d4
 80058f4:	200013bc 	.word	0x200013bc

080058f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3354      	adds	r3, #84	; 0x54
 8005904:	4618      	mov	r0, r3
 8005906:	f001 f8f3 	bl	8006af0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005910:	2b00      	cmp	r3, #0
 8005912:	d108      	bne.n	8005926 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ff85 	bl	8006828 <vPortFree>
				vPortFree( pxTCB );
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 ff82 	bl	8006828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005924:	e01a      	b.n	800595c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800592c:	2b01      	cmp	r3, #1
 800592e:	d103      	bne.n	8005938 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 ff79 	bl	8006828 <vPortFree>
	}
 8005936:	e011      	b.n	800595c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800593e:	2b02      	cmp	r3, #2
 8005940:	d00c      	beq.n	800595c <prvDeleteTCB+0x64>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	b672      	cpsid	i
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	b662      	cpsie	i
 8005956:	60fb      	str	r3, [r7, #12]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <prvDeleteTCB+0x62>
	}
 800595c:	bf00      	nop
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800596a:	4b0c      	ldr	r3, [pc, #48]	; (800599c <prvResetNextTaskUnblockTime+0x38>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005974:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <prvResetNextTaskUnblockTime+0x3c>)
 8005976:	f04f 32ff 	mov.w	r2, #4294967295
 800597a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800597c:	e008      	b.n	8005990 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597e:	4b07      	ldr	r3, [pc, #28]	; (800599c <prvResetNextTaskUnblockTime+0x38>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <prvResetNextTaskUnblockTime+0x3c>)
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	2000138c 	.word	0x2000138c
 80059a0:	200013f4 	.word	0x200013f4

080059a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <xTaskGetSchedulerState+0x34>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d102      	bne.n	80059b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059b2:	2301      	movs	r3, #1
 80059b4:	607b      	str	r3, [r7, #4]
 80059b6:	e008      	b.n	80059ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <xTaskGetSchedulerState+0x38>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059c0:	2302      	movs	r3, #2
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	e001      	b.n	80059ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059ca:	687b      	ldr	r3, [r7, #4]
	}
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	200013e0 	.word	0x200013e0
 80059dc:	200013fc 	.word	0x200013fc

080059e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d05a      	beq.n	8005aac <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059f6:	4b30      	ldr	r3, [pc, #192]	; (8005ab8 <xTaskPriorityDisinherit+0xd8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d00c      	beq.n	8005a1a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	b672      	cpsid	i
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	b662      	cpsie	i
 8005a14:	60fb      	str	r3, [r7, #12]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10c      	bne.n	8005a3c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	b672      	cpsid	i
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	b662      	cpsie	i
 8005a36:	60bb      	str	r3, [r7, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a40:	1e5a      	subs	r2, r3, #1
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d02c      	beq.n	8005aac <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d128      	bne.n	8005aac <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe fc04 	bl	800426c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <xTaskPriorityDisinherit+0xdc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d903      	bls.n	8005a8c <xTaskPriorityDisinherit+0xac>
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	4a0c      	ldr	r2, [pc, #48]	; (8005abc <xTaskPriorityDisinherit+0xdc>)
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4a09      	ldr	r2, [pc, #36]	; (8005ac0 <xTaskPriorityDisinherit+0xe0>)
 8005a9a:	441a      	add	r2, r3
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f7fe fb85 	bl	80041b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005aac:	697b      	ldr	r3, [r7, #20]
	}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20000f00 	.word	0x20000f00
 8005abc:	200013dc 	.word	0x200013dc
 8005ac0:	20000f04 	.word	0x20000f04

08005ac4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ace:	4b21      	ldr	r3, [pc, #132]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ad4:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe fbc6 	bl	800426c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d10a      	bne.n	8005afe <prvAddCurrentTaskToDelayedList+0x3a>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aee:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4819      	ldr	r0, [pc, #100]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x98>)
 8005af8:	f7fe fb5b 	bl	80041b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005afc:	e026      	b.n	8005b4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4413      	add	r3, r2
 8005b04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d209      	bcs.n	8005b2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b16:	4b12      	ldr	r3, [pc, #72]	; (8005b60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f7fe fb69 	bl	80041fa <vListInsert>
}
 8005b28:	e010      	b.n	8005b4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b2a:	4b0e      	ldr	r3, [pc, #56]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f7fe fb5f 	bl	80041fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d202      	bcs.n	8005b4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b46:	4a08      	ldr	r2, [pc, #32]	; (8005b68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	6013      	str	r3, [r2, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	200013d8 	.word	0x200013d8
 8005b58:	20000f00 	.word	0x20000f00
 8005b5c:	200013c0 	.word	0x200013c0
 8005b60:	20001390 	.word	0x20001390
 8005b64:	2000138c 	.word	0x2000138c
 8005b68:	200013f4 	.word	0x200013f4

08005b6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08a      	sub	sp, #40	; 0x28
 8005b70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b76:	f000 fb15 	bl	80061a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b7a:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <xTimerCreateTimerTask+0x84>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d021      	beq.n	8005bc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b8a:	1d3a      	adds	r2, r7, #4
 8005b8c:	f107 0108 	add.w	r1, r7, #8
 8005b90:	f107 030c 	add.w	r3, r7, #12
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe fac5 	bl	8004124 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	9202      	str	r2, [sp, #8]
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	460a      	mov	r2, r1
 8005bac:	4911      	ldr	r1, [pc, #68]	; (8005bf4 <xTimerCreateTimerTask+0x88>)
 8005bae:	4812      	ldr	r0, [pc, #72]	; (8005bf8 <xTimerCreateTimerTask+0x8c>)
 8005bb0:	f7ff f890 	bl	8004cd4 <xTaskCreateStatic>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	4a11      	ldr	r2, [pc, #68]	; (8005bfc <xTimerCreateTimerTask+0x90>)
 8005bb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bba:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <xTimerCreateTimerTask+0x90>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10c      	bne.n	8005be6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	b672      	cpsid	i
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	b662      	cpsie	i
 8005be0:	613b      	str	r3, [r7, #16]
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005be6:	697b      	ldr	r3, [r7, #20]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20001430 	.word	0x20001430
 8005bf4:	08006cb4 	.word	0x08006cb4
 8005bf8:	08005d3d 	.word	0x08005d3d
 8005bfc:	20001434 	.word	0x20001434

08005c00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10c      	bne.n	8005c32 <xTimerGenericCommand+0x32>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	b672      	cpsid	i
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	b662      	cpsie	i
 8005c2c:	623b      	str	r3, [r7, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c32:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <xTimerGenericCommand+0x9c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d02a      	beq.n	8005c90 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b05      	cmp	r3, #5
 8005c4a:	dc18      	bgt.n	8005c7e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c4c:	f7ff feaa 	bl	80059a4 <xTaskGetSchedulerState>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d109      	bne.n	8005c6a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c56:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <xTimerGenericCommand+0x9c>)
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	f107 0110 	add.w	r1, r7, #16
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c62:	f7fe fc3d 	bl	80044e0 <xQueueGenericSend>
 8005c66:	6278      	str	r0, [r7, #36]	; 0x24
 8005c68:	e012      	b.n	8005c90 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c6a:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <xTimerGenericCommand+0x9c>)
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	f107 0110 	add.w	r1, r7, #16
 8005c72:	2300      	movs	r3, #0
 8005c74:	2200      	movs	r2, #0
 8005c76:	f7fe fc33 	bl	80044e0 <xQueueGenericSend>
 8005c7a:	6278      	str	r0, [r7, #36]	; 0x24
 8005c7c:	e008      	b.n	8005c90 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c7e:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <xTimerGenericCommand+0x9c>)
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	f107 0110 	add.w	r1, r7, #16
 8005c86:	2300      	movs	r3, #0
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	f7fe fd2f 	bl	80046ec <xQueueGenericSendFromISR>
 8005c8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3728      	adds	r7, #40	; 0x28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20001430 	.word	0x20001430

08005ca0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005caa:	4b23      	ldr	r3, [pc, #140]	; (8005d38 <prvProcessExpiredTimer+0x98>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe fad7 	bl	800426c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d024      	beq.n	8005d16 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	18d1      	adds	r1, r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	6978      	ldr	r0, [r7, #20]
 8005cda:	f000 f8d3 	bl	8005e84 <prvInsertTimerInActiveList>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d021      	beq.n	8005d28 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	2100      	movs	r1, #0
 8005cee:	6978      	ldr	r0, [r7, #20]
 8005cf0:	f7ff ff86 	bl	8005c00 <xTimerGenericCommand>
 8005cf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d115      	bne.n	8005d28 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	b672      	cpsid	i
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	b662      	cpsie	i
 8005d10:	60fb      	str	r3, [r7, #12]
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	6978      	ldr	r0, [r7, #20]
 8005d2e:	4798      	blx	r3
}
 8005d30:	bf00      	nop
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20001428 	.word	0x20001428

08005d3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d44:	f107 0308 	add.w	r3, r7, #8
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 f857 	bl	8005dfc <prvGetNextExpireTime>
 8005d4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4619      	mov	r1, r3
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 f803 	bl	8005d60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d5a:	f000 f8d5 	bl	8005f08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d5e:	e7f1      	b.n	8005d44 <prvTimerTask+0x8>

08005d60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d6a:	f7ff fa1d 	bl	80051a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d6e:	f107 0308 	add.w	r3, r7, #8
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f866 	bl	8005e44 <prvSampleTimeNow>
 8005d78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d130      	bne.n	8005de2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <prvProcessTimerOrBlockTask+0x3c>
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d806      	bhi.n	8005d9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d8e:	f7ff fa19 	bl	80051c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d92:	68f9      	ldr	r1, [r7, #12]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff ff83 	bl	8005ca0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d9a:	e024      	b.n	8005de6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d008      	beq.n	8005db4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005da2:	4b13      	ldr	r3, [pc, #76]	; (8005df0 <prvProcessTimerOrBlockTask+0x90>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <prvProcessTimerOrBlockTask+0x50>
 8005dac:	2301      	movs	r3, #1
 8005dae:	e000      	b.n	8005db2 <prvProcessTimerOrBlockTask+0x52>
 8005db0:	2300      	movs	r3, #0
 8005db2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005db4:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <prvProcessTimerOrBlockTask+0x94>)
 8005db6:	6818      	ldr	r0, [r3, #0]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f7fe ff53 	bl	8004c6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005dc6:	f7ff f9fd 	bl	80051c4 <xTaskResumeAll>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005dd0:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <prvProcessTimerOrBlockTask+0x98>)
 8005dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	f3bf 8f6f 	isb	sy
}
 8005de0:	e001      	b.n	8005de6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005de2:	f7ff f9ef 	bl	80051c4 <xTaskResumeAll>
}
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	2000142c 	.word	0x2000142c
 8005df4:	20001430 	.word	0x20001430
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e04:	4b0e      	ldr	r3, [pc, #56]	; (8005e40 <prvGetNextExpireTime+0x44>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <prvGetNextExpireTime+0x16>
 8005e0e:	2201      	movs	r2, #1
 8005e10:	e000      	b.n	8005e14 <prvGetNextExpireTime+0x18>
 8005e12:	2200      	movs	r2, #0
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d105      	bne.n	8005e2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <prvGetNextExpireTime+0x44>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	e001      	b.n	8005e30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e30:	68fb      	ldr	r3, [r7, #12]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20001428 	.word	0x20001428

08005e44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e4c:	f7ff fa5a 	bl	8005304 <xTaskGetTickCount>
 8005e50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <prvSampleTimeNow+0x3c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d205      	bcs.n	8005e68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e5c:	f000 f93c 	bl	80060d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	e002      	b.n	8005e6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e6e:	4a04      	ldr	r2, [pc, #16]	; (8005e80 <prvSampleTimeNow+0x3c>)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e74:	68fb      	ldr	r3, [r7, #12]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20001438 	.word	0x20001438

08005e84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d812      	bhi.n	8005ed0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d302      	bcc.n	8005ebe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	e01b      	b.n	8005ef6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ebe:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <prvInsertTimerInActiveList+0x7c>)
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	f7fe f996 	bl	80041fa <vListInsert>
 8005ece:	e012      	b.n	8005ef6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d206      	bcs.n	8005ee6 <prvInsertTimerInActiveList+0x62>
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d302      	bcc.n	8005ee6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e007      	b.n	8005ef6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ee6:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <prvInsertTimerInActiveList+0x80>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f7fe f982 	bl	80041fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ef6:	697b      	ldr	r3, [r7, #20]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	2000142c 	.word	0x2000142c
 8005f04:	20001428 	.word	0x20001428

08005f08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08e      	sub	sp, #56	; 0x38
 8005f0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f0e:	e0d0      	b.n	80060b2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da1a      	bge.n	8005f4c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f16:	1d3b      	adds	r3, r7, #4
 8005f18:	3304      	adds	r3, #4
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10c      	bne.n	8005f3c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	b672      	cpsid	i
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	b662      	cpsie	i
 8005f36:	61fb      	str	r3, [r7, #28]
}
 8005f38:	bf00      	nop
 8005f3a:	e7fe      	b.n	8005f3a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f42:	6850      	ldr	r0, [r2, #4]
 8005f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f46:	6892      	ldr	r2, [r2, #8]
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f2c0 80ae 	blt.w	80060b0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	3304      	adds	r3, #4
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe f981 	bl	800426c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff ff69 	bl	8005e44 <prvSampleTimeNow>
 8005f72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b09      	cmp	r3, #9
 8005f78:	f200 809b 	bhi.w	80060b2 <prvProcessReceivedCommands+0x1aa>
 8005f7c:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <prvProcessReceivedCommands+0x7c>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005fad 	.word	0x08005fad
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fad 	.word	0x08005fad
 8005f90:	08006025 	.word	0x08006025
 8005f94:	08006039 	.word	0x08006039
 8005f98:	08006087 	.word	0x08006087
 8005f9c:	08005fad 	.word	0x08005fad
 8005fa0:	08005fad 	.word	0x08005fad
 8005fa4:	08006025 	.word	0x08006025
 8005fa8:	08006039 	.word	0x08006039
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fb2:	f043 0301 	orr.w	r3, r3, #1
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	18d1      	adds	r1, r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fcc:	f7ff ff5a 	bl	8005e84 <prvInsertTimerInActiveList>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d06d      	beq.n	80060b2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d062      	beq.n	80060b2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	441a      	add	r2, r3
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ffe:	f7ff fdff 	bl	8005c00 <xTimerGenericCommand>
 8006002:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d153      	bne.n	80060b2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	b672      	cpsid	i
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	b662      	cpsie	i
 800601e:	61bb      	str	r3, [r7, #24]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800602a:	f023 0301 	bic.w	r3, r3, #1
 800602e:	b2da      	uxtb	r2, r3
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006036:	e03c      	b.n	80060b2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	b2da      	uxtb	r2, r3
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10c      	bne.n	8006072 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	b672      	cpsid	i
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	b662      	cpsie	i
 800606c:	617b      	str	r3, [r7, #20]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	18d1      	adds	r1, r2, r3
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006080:	f7ff ff00 	bl	8005e84 <prvInsertTimerInActiveList>
					break;
 8006084:	e015      	b.n	80060b2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006096:	f000 fbc7 	bl	8006828 <vPortFree>
 800609a:	e00a      	b.n	80060b2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060ae:	e000      	b.n	80060b2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80060b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060b2:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <prvProcessReceivedCommands+0x1cc>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	1d39      	adds	r1, r7, #4
 80060b8:	2200      	movs	r2, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fbb6 	bl	800482c <xQueueReceive>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f47f af24 	bne.w	8005f10 <prvProcessReceivedCommands+0x8>
	}
}
 80060c8:	bf00      	nop
 80060ca:	bf00      	nop
 80060cc:	3730      	adds	r7, #48	; 0x30
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20001430 	.word	0x20001430

080060d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060de:	e04a      	b.n	8006176 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060e0:	4b2e      	ldr	r3, [pc, #184]	; (800619c <prvSwitchTimerLists+0xc4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ea:	4b2c      	ldr	r3, [pc, #176]	; (800619c <prvSwitchTimerLists+0xc4>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe f8b7 	bl	800426c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d030      	beq.n	8006176 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	429a      	cmp	r2, r3
 8006124:	d90e      	bls.n	8006144 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006132:	4b1a      	ldr	r3, [pc, #104]	; (800619c <prvSwitchTimerLists+0xc4>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3304      	adds	r3, #4
 800613a:	4619      	mov	r1, r3
 800613c:	4610      	mov	r0, r2
 800613e:	f7fe f85c 	bl	80041fa <vListInsert>
 8006142:	e018      	b.n	8006176 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006144:	2300      	movs	r3, #0
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	2300      	movs	r3, #0
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	2100      	movs	r1, #0
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7ff fd56 	bl	8005c00 <xTimerGenericCommand>
 8006154:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10c      	bne.n	8006176 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	b672      	cpsid	i
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	b662      	cpsie	i
 8006170:	603b      	str	r3, [r7, #0]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006176:	4b09      	ldr	r3, [pc, #36]	; (800619c <prvSwitchTimerLists+0xc4>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1af      	bne.n	80060e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <prvSwitchTimerLists+0xc4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006186:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <prvSwitchTimerLists+0xc8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a04      	ldr	r2, [pc, #16]	; (800619c <prvSwitchTimerLists+0xc4>)
 800618c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800618e:	4a04      	ldr	r2, [pc, #16]	; (80061a0 <prvSwitchTimerLists+0xc8>)
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	6013      	str	r3, [r2, #0]
}
 8006194:	bf00      	nop
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20001428 	.word	0x20001428
 80061a0:	2000142c 	.word	0x2000142c

080061a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061aa:	f000 f947 	bl	800643c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061ae:	4b15      	ldr	r3, [pc, #84]	; (8006204 <prvCheckForValidListAndQueue+0x60>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d120      	bne.n	80061f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061b6:	4814      	ldr	r0, [pc, #80]	; (8006208 <prvCheckForValidListAndQueue+0x64>)
 80061b8:	f7fd ffce 	bl	8004158 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061bc:	4813      	ldr	r0, [pc, #76]	; (800620c <prvCheckForValidListAndQueue+0x68>)
 80061be:	f7fd ffcb 	bl	8004158 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061c2:	4b13      	ldr	r3, [pc, #76]	; (8006210 <prvCheckForValidListAndQueue+0x6c>)
 80061c4:	4a10      	ldr	r2, [pc, #64]	; (8006208 <prvCheckForValidListAndQueue+0x64>)
 80061c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061c8:	4b12      	ldr	r3, [pc, #72]	; (8006214 <prvCheckForValidListAndQueue+0x70>)
 80061ca:	4a10      	ldr	r2, [pc, #64]	; (800620c <prvCheckForValidListAndQueue+0x68>)
 80061cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061ce:	2300      	movs	r3, #0
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	4b11      	ldr	r3, [pc, #68]	; (8006218 <prvCheckForValidListAndQueue+0x74>)
 80061d4:	4a11      	ldr	r2, [pc, #68]	; (800621c <prvCheckForValidListAndQueue+0x78>)
 80061d6:	2110      	movs	r1, #16
 80061d8:	200a      	movs	r0, #10
 80061da:	f7fe f8db 	bl	8004394 <xQueueGenericCreateStatic>
 80061de:	4603      	mov	r3, r0
 80061e0:	4a08      	ldr	r2, [pc, #32]	; (8006204 <prvCheckForValidListAndQueue+0x60>)
 80061e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061e4:	4b07      	ldr	r3, [pc, #28]	; (8006204 <prvCheckForValidListAndQueue+0x60>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061ec:	4b05      	ldr	r3, [pc, #20]	; (8006204 <prvCheckForValidListAndQueue+0x60>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	490b      	ldr	r1, [pc, #44]	; (8006220 <prvCheckForValidListAndQueue+0x7c>)
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fd10 	bl	8004c18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061f8:	f000 f954 	bl	80064a4 <vPortExitCritical>
}
 80061fc:	bf00      	nop
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20001430 	.word	0x20001430
 8006208:	20001400 	.word	0x20001400
 800620c:	20001414 	.word	0x20001414
 8006210:	20001428 	.word	0x20001428
 8006214:	2000142c 	.word	0x2000142c
 8006218:	200014dc 	.word	0x200014dc
 800621c:	2000143c 	.word	0x2000143c
 8006220:	08006cbc 	.word	0x08006cbc

08006224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3b04      	subs	r3, #4
 8006234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800623c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3b04      	subs	r3, #4
 8006242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f023 0201 	bic.w	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3b04      	subs	r3, #4
 8006252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006254:	4a0c      	ldr	r2, [pc, #48]	; (8006288 <pxPortInitialiseStack+0x64>)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3b14      	subs	r3, #20
 800625e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b04      	subs	r3, #4
 800626a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f06f 0202 	mvn.w	r2, #2
 8006272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3b20      	subs	r3, #32
 8006278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800627a:	68fb      	ldr	r3, [r7, #12]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	0800628d 	.word	0x0800628d

0800628c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006296:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <prvTaskExitError+0x5c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d00c      	beq.n	80062ba <prvTaskExitError+0x2e>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	b672      	cpsid	i
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	b662      	cpsie	i
 80062b4:	60fb      	str	r3, [r7, #12]
}
 80062b6:	bf00      	nop
 80062b8:	e7fe      	b.n	80062b8 <prvTaskExitError+0x2c>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	b672      	cpsid	i
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	b662      	cpsie	i
 80062ce:	60bb      	str	r3, [r7, #8]
}
 80062d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062d2:	bf00      	nop
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0fc      	beq.n	80062d4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	2000000c 	.word	0x2000000c
 80062ec:	00000000 	.word	0x00000000

080062f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062f0:	4b07      	ldr	r3, [pc, #28]	; (8006310 <pxCurrentTCBConst2>)
 80062f2:	6819      	ldr	r1, [r3, #0]
 80062f4:	6808      	ldr	r0, [r1, #0]
 80062f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	f380 8809 	msr	PSP, r0
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8811 	msr	BASEPRI, r0
 800630a:	4770      	bx	lr
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst2>:
 8006310:	20000f00 	.word	0x20000f00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006318:	4808      	ldr	r0, [pc, #32]	; (800633c <prvPortStartFirstTask+0x24>)
 800631a:	6800      	ldr	r0, [r0, #0]
 800631c:	6800      	ldr	r0, [r0, #0]
 800631e:	f380 8808 	msr	MSP, r0
 8006322:	f04f 0000 	mov.w	r0, #0
 8006326:	f380 8814 	msr	CONTROL, r0
 800632a:	b662      	cpsie	i
 800632c:	b661      	cpsie	f
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	df00      	svc	0
 8006338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800633a:	bf00      	nop
 800633c:	e000ed08 	.word	0xe000ed08

08006340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006346:	4b37      	ldr	r3, [pc, #220]	; (8006424 <xPortStartScheduler+0xe4>)
 8006348:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b2f      	ldr	r3, [pc, #188]	; (8006428 <xPortStartScheduler+0xe8>)
 800636c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800636e:	4b2f      	ldr	r3, [pc, #188]	; (800642c <xPortStartScheduler+0xec>)
 8006370:	2207      	movs	r2, #7
 8006372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006374:	e009      	b.n	800638a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006376:	4b2d      	ldr	r3, [pc, #180]	; (800642c <xPortStartScheduler+0xec>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3b01      	subs	r3, #1
 800637c:	4a2b      	ldr	r2, [pc, #172]	; (800642c <xPortStartScheduler+0xec>)
 800637e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b80      	cmp	r3, #128	; 0x80
 8006394:	d0ef      	beq.n	8006376 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006396:	4b25      	ldr	r3, [pc, #148]	; (800642c <xPortStartScheduler+0xec>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1c3 0307 	rsb	r3, r3, #7
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d00c      	beq.n	80063bc <xPortStartScheduler+0x7c>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	b672      	cpsid	i
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	b662      	cpsie	i
 80063b6:	60bb      	str	r3, [r7, #8]
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063bc:	4b1b      	ldr	r3, [pc, #108]	; (800642c <xPortStartScheduler+0xec>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	4a1a      	ldr	r2, [pc, #104]	; (800642c <xPortStartScheduler+0xec>)
 80063c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063c6:	4b19      	ldr	r3, [pc, #100]	; (800642c <xPortStartScheduler+0xec>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ce:	4a17      	ldr	r2, [pc, #92]	; (800642c <xPortStartScheduler+0xec>)
 80063d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063da:	4b15      	ldr	r3, [pc, #84]	; (8006430 <xPortStartScheduler+0xf0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a14      	ldr	r2, [pc, #80]	; (8006430 <xPortStartScheduler+0xf0>)
 80063e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063e6:	4b12      	ldr	r3, [pc, #72]	; (8006430 <xPortStartScheduler+0xf0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a11      	ldr	r2, [pc, #68]	; (8006430 <xPortStartScheduler+0xf0>)
 80063ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063f2:	f000 f8dd 	bl	80065b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063f6:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <xPortStartScheduler+0xf4>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063fc:	f000 f8fc 	bl	80065f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006400:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <xPortStartScheduler+0xf8>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a0c      	ldr	r2, [pc, #48]	; (8006438 <xPortStartScheduler+0xf8>)
 8006406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800640a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800640c:	f7ff ff84 	bl	8006318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006410:	f7ff f844 	bl	800549c <vTaskSwitchContext>
	prvTaskExitError();
 8006414:	f7ff ff3a 	bl	800628c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	e000e400 	.word	0xe000e400
 8006428:	2000152c 	.word	0x2000152c
 800642c:	20001530 	.word	0x20001530
 8006430:	e000ed20 	.word	0xe000ed20
 8006434:	2000000c 	.word	0x2000000c
 8006438:	e000ef34 	.word	0xe000ef34

0800643c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	b672      	cpsid	i
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	b662      	cpsie	i
 8006456:	607b      	str	r3, [r7, #4]
}
 8006458:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800645a:	4b10      	ldr	r3, [pc, #64]	; (800649c <vPortEnterCritical+0x60>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3301      	adds	r3, #1
 8006460:	4a0e      	ldr	r2, [pc, #56]	; (800649c <vPortEnterCritical+0x60>)
 8006462:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006464:	4b0d      	ldr	r3, [pc, #52]	; (800649c <vPortEnterCritical+0x60>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d111      	bne.n	8006490 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800646c:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <vPortEnterCritical+0x64>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00c      	beq.n	8006490 <vPortEnterCritical+0x54>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	b672      	cpsid	i
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	b662      	cpsie	i
 800648a:	603b      	str	r3, [r7, #0]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <vPortEnterCritical+0x52>
	}
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	2000000c 	.word	0x2000000c
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064aa:	4b13      	ldr	r3, [pc, #76]	; (80064f8 <vPortExitCritical+0x54>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10c      	bne.n	80064cc <vPortExitCritical+0x28>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	b672      	cpsid	i
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	b662      	cpsie	i
 80064c6:	607b      	str	r3, [r7, #4]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <vPortExitCritical+0x54>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	4a09      	ldr	r2, [pc, #36]	; (80064f8 <vPortExitCritical+0x54>)
 80064d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064d6:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <vPortExitCritical+0x54>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d105      	bne.n	80064ea <vPortExitCritical+0x46>
 80064de:	2300      	movs	r3, #0
 80064e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	f383 8811 	msr	BASEPRI, r3
}
 80064e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	2000000c 	.word	0x2000000c
 80064fc:	00000000 	.word	0x00000000

08006500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006500:	f3ef 8009 	mrs	r0, PSP
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4b15      	ldr	r3, [pc, #84]	; (8006560 <pxCurrentTCBConst>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f01e 0f10 	tst.w	lr, #16
 8006510:	bf08      	it	eq
 8006512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	6010      	str	r0, [r2, #0]
 800651c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006524:	b672      	cpsid	i
 8006526:	f380 8811 	msr	BASEPRI, r0
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	b662      	cpsie	i
 8006534:	f7fe ffb2 	bl	800549c <vTaskSwitchContext>
 8006538:	f04f 0000 	mov.w	r0, #0
 800653c:	f380 8811 	msr	BASEPRI, r0
 8006540:	bc09      	pop	{r0, r3}
 8006542:	6819      	ldr	r1, [r3, #0]
 8006544:	6808      	ldr	r0, [r1, #0]
 8006546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654a:	f01e 0f10 	tst.w	lr, #16
 800654e:	bf08      	it	eq
 8006550:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006554:	f380 8809 	msr	PSP, r0
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop

08006560 <pxCurrentTCBConst>:
 8006560:	20000f00 	.word	0x20000f00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	b672      	cpsid	i
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	b662      	cpsie	i
 8006582:	607b      	str	r3, [r7, #4]
}
 8006584:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006586:	f7fe fecd 	bl	8005324 <xTaskIncrementTick>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006590:	4b06      	ldr	r3, [pc, #24]	; (80065ac <SysTick_Handler+0x44>)
 8006592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	2300      	movs	r3, #0
 800659a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	f383 8811 	msr	BASEPRI, r3
}
 80065a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	e000ed04 	.word	0xe000ed04

080065b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065b4:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <vPortSetupTimerInterrupt+0x34>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065ba:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <vPortSetupTimerInterrupt+0x38>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065c0:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <vPortSetupTimerInterrupt+0x3c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a0a      	ldr	r2, [pc, #40]	; (80065f0 <vPortSetupTimerInterrupt+0x40>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	099b      	lsrs	r3, r3, #6
 80065cc:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <vPortSetupTimerInterrupt+0x44>)
 80065ce:	3b01      	subs	r3, #1
 80065d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065d2:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <vPortSetupTimerInterrupt+0x34>)
 80065d4:	2207      	movs	r2, #7
 80065d6:	601a      	str	r2, [r3, #0]
}
 80065d8:	bf00      	nop
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	e000e010 	.word	0xe000e010
 80065e8:	e000e018 	.word	0xe000e018
 80065ec:	20000000 	.word	0x20000000
 80065f0:	10624dd3 	.word	0x10624dd3
 80065f4:	e000e014 	.word	0xe000e014

080065f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006608 <vPortEnableVFP+0x10>
 80065fc:	6801      	ldr	r1, [r0, #0]
 80065fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006602:	6001      	str	r1, [r0, #0]
 8006604:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006606:	bf00      	nop
 8006608:	e000ed88 	.word	0xe000ed88

0800660c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006612:	f3ef 8305 	mrs	r3, IPSR
 8006616:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b0f      	cmp	r3, #15
 800661c:	d916      	bls.n	800664c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800661e:	4a19      	ldr	r2, [pc, #100]	; (8006684 <vPortValidateInterruptPriority+0x78>)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006628:	4b17      	ldr	r3, [pc, #92]	; (8006688 <vPortValidateInterruptPriority+0x7c>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	7afa      	ldrb	r2, [r7, #11]
 800662e:	429a      	cmp	r2, r3
 8006630:	d20c      	bcs.n	800664c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	b672      	cpsid	i
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	b662      	cpsie	i
 8006646:	607b      	str	r3, [r7, #4]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800664c:	4b0f      	ldr	r3, [pc, #60]	; (800668c <vPortValidateInterruptPriority+0x80>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006654:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <vPortValidateInterruptPriority+0x84>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d90c      	bls.n	8006676 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	b672      	cpsid	i
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	b662      	cpsie	i
 8006670:	603b      	str	r3, [r7, #0]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <vPortValidateInterruptPriority+0x68>
	}
 8006676:	bf00      	nop
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	e000e3f0 	.word	0xe000e3f0
 8006688:	2000152c 	.word	0x2000152c
 800668c:	e000ed0c 	.word	0xe000ed0c
 8006690:	20001530 	.word	0x20001530

08006694 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	; 0x28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066a0:	f7fe fd82 	bl	80051a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066a4:	4b5b      	ldr	r3, [pc, #364]	; (8006814 <pvPortMalloc+0x180>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066ac:	f000 f91a 	bl	80068e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066b0:	4b59      	ldr	r3, [pc, #356]	; (8006818 <pvPortMalloc+0x184>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f040 8092 	bne.w	80067e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01f      	beq.n	8006704 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80066c4:	2208      	movs	r2, #8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4413      	add	r3, r2
 80066ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d016      	beq.n	8006704 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f023 0307 	bic.w	r3, r3, #7
 80066dc:	3308      	adds	r3, #8
 80066de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00c      	beq.n	8006704 <pvPortMalloc+0x70>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	b672      	cpsid	i
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	b662      	cpsie	i
 80066fe:	617b      	str	r3, [r7, #20]
}
 8006700:	bf00      	nop
 8006702:	e7fe      	b.n	8006702 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d06b      	beq.n	80067e2 <pvPortMalloc+0x14e>
 800670a:	4b44      	ldr	r3, [pc, #272]	; (800681c <pvPortMalloc+0x188>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	429a      	cmp	r2, r3
 8006712:	d866      	bhi.n	80067e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006714:	4b42      	ldr	r3, [pc, #264]	; (8006820 <pvPortMalloc+0x18c>)
 8006716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006718:	4b41      	ldr	r3, [pc, #260]	; (8006820 <pvPortMalloc+0x18c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800671e:	e004      	b.n	800672a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	429a      	cmp	r2, r3
 8006732:	d903      	bls.n	800673c <pvPortMalloc+0xa8>
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1f1      	bne.n	8006720 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800673c:	4b35      	ldr	r3, [pc, #212]	; (8006814 <pvPortMalloc+0x180>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006742:	429a      	cmp	r2, r3
 8006744:	d04d      	beq.n	80067e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2208      	movs	r2, #8
 800674c:	4413      	add	r3, r2
 800674e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	2308      	movs	r3, #8
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	429a      	cmp	r2, r3
 8006766:	d921      	bls.n	80067ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00c      	beq.n	8006794 <pvPortMalloc+0x100>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	b672      	cpsid	i
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	b662      	cpsie	i
 800678e:	613b      	str	r3, [r7, #16]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	1ad2      	subs	r2, r2, r3
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067a6:	69b8      	ldr	r0, [r7, #24]
 80067a8:	f000 f8fe 	bl	80069a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067ac:	4b1b      	ldr	r3, [pc, #108]	; (800681c <pvPortMalloc+0x188>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	4a19      	ldr	r2, [pc, #100]	; (800681c <pvPortMalloc+0x188>)
 80067b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067ba:	4b18      	ldr	r3, [pc, #96]	; (800681c <pvPortMalloc+0x188>)
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4b19      	ldr	r3, [pc, #100]	; (8006824 <pvPortMalloc+0x190>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d203      	bcs.n	80067ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067c6:	4b15      	ldr	r3, [pc, #84]	; (800681c <pvPortMalloc+0x188>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a16      	ldr	r2, [pc, #88]	; (8006824 <pvPortMalloc+0x190>)
 80067cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	4b11      	ldr	r3, [pc, #68]	; (8006818 <pvPortMalloc+0x184>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067e2:	f7fe fcef 	bl	80051c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00c      	beq.n	800680a <pvPortMalloc+0x176>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	b672      	cpsid	i
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	b662      	cpsie	i
 8006804:	60fb      	str	r3, [r7, #12]
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <pvPortMalloc+0x174>
	return pvReturn;
 800680a:	69fb      	ldr	r3, [r7, #28]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3728      	adds	r7, #40	; 0x28
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	2000513c 	.word	0x2000513c
 8006818:	20005148 	.word	0x20005148
 800681c:	20005140 	.word	0x20005140
 8006820:	20005134 	.word	0x20005134
 8006824:	20005144 	.word	0x20005144

08006828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d04c      	beq.n	80068d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800683a:	2308      	movs	r3, #8
 800683c:	425b      	negs	r3, r3
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4413      	add	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	4b23      	ldr	r3, [pc, #140]	; (80068dc <vPortFree+0xb4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4013      	ands	r3, r2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10c      	bne.n	8006870 <vPortFree+0x48>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	b672      	cpsid	i
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	b662      	cpsie	i
 800686a:	60fb      	str	r3, [r7, #12]
}
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00c      	beq.n	8006892 <vPortFree+0x6a>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	b672      	cpsid	i
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	b662      	cpsie	i
 800688c:	60bb      	str	r3, [r7, #8]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	4b11      	ldr	r3, [pc, #68]	; (80068dc <vPortFree+0xb4>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4013      	ands	r3, r2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d019      	beq.n	80068d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d115      	bne.n	80068d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <vPortFree+0xb4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	43db      	mvns	r3, r3
 80068b2:	401a      	ands	r2, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068b8:	f7fe fc76 	bl	80051a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <vPortFree+0xb8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4413      	add	r3, r2
 80068c6:	4a06      	ldr	r2, [pc, #24]	; (80068e0 <vPortFree+0xb8>)
 80068c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068ca:	6938      	ldr	r0, [r7, #16]
 80068cc:	f000 f86c 	bl	80069a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80068d0:	f7fe fc78 	bl	80051c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068d4:	bf00      	nop
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20005148 	.word	0x20005148
 80068e0:	20005140 	.word	0x20005140

080068e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <prvHeapInit+0xac>)
 80068f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3307      	adds	r3, #7
 8006902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0307 	bic.w	r3, r3, #7
 800690a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <prvHeapInit+0xac>)
 8006914:	4413      	add	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800691c:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <prvHeapInit+0xb0>)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006922:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <prvHeapInit+0xb0>)
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	4413      	add	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006930:	2208      	movs	r2, #8
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0307 	bic.w	r3, r3, #7
 800693e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a15      	ldr	r2, [pc, #84]	; (8006998 <prvHeapInit+0xb4>)
 8006944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <prvHeapInit+0xb4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <prvHeapInit+0xb4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	1ad2      	subs	r2, r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <prvHeapInit+0xb4>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4a0a      	ldr	r2, [pc, #40]	; (800699c <prvHeapInit+0xb8>)
 8006972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <prvHeapInit+0xbc>)
 800697a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800697c:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <prvHeapInit+0xc0>)
 800697e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006982:	601a      	str	r2, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20001534 	.word	0x20001534
 8006994:	20005134 	.word	0x20005134
 8006998:	2000513c 	.word	0x2000513c
 800699c:	20005144 	.word	0x20005144
 80069a0:	20005140 	.word	0x20005140
 80069a4:	20005148 	.word	0x20005148

080069a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069b0:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <prvInsertBlockIntoFreeList+0xac>)
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e002      	b.n	80069bc <prvInsertBlockIntoFreeList+0x14>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d8f7      	bhi.n	80069b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d108      	bne.n	80069ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	441a      	add	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	441a      	add	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d118      	bne.n	8006a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d00d      	beq.n	8006a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e008      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e003      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d002      	beq.n	8006a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20005134 	.word	0x20005134
 8006a58:	2000513c 	.word	0x2000513c

08006a5c <__libc_init_array>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4d0d      	ldr	r5, [pc, #52]	; (8006a94 <__libc_init_array+0x38>)
 8006a60:	4c0d      	ldr	r4, [pc, #52]	; (8006a98 <__libc_init_array+0x3c>)
 8006a62:	1b64      	subs	r4, r4, r5
 8006a64:	10a4      	asrs	r4, r4, #2
 8006a66:	2600      	movs	r6, #0
 8006a68:	42a6      	cmp	r6, r4
 8006a6a:	d109      	bne.n	8006a80 <__libc_init_array+0x24>
 8006a6c:	4d0b      	ldr	r5, [pc, #44]	; (8006a9c <__libc_init_array+0x40>)
 8006a6e:	4c0c      	ldr	r4, [pc, #48]	; (8006aa0 <__libc_init_array+0x44>)
 8006a70:	f000 f8f2 	bl	8006c58 <_init>
 8006a74:	1b64      	subs	r4, r4, r5
 8006a76:	10a4      	asrs	r4, r4, #2
 8006a78:	2600      	movs	r6, #0
 8006a7a:	42a6      	cmp	r6, r4
 8006a7c:	d105      	bne.n	8006a8a <__libc_init_array+0x2e>
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a84:	4798      	blx	r3
 8006a86:	3601      	adds	r6, #1
 8006a88:	e7ee      	b.n	8006a68 <__libc_init_array+0xc>
 8006a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8e:	4798      	blx	r3
 8006a90:	3601      	adds	r6, #1
 8006a92:	e7f2      	b.n	8006a7a <__libc_init_array+0x1e>
 8006a94:	08006d8c 	.word	0x08006d8c
 8006a98:	08006d8c 	.word	0x08006d8c
 8006a9c:	08006d8c 	.word	0x08006d8c
 8006aa0:	08006d90 	.word	0x08006d90

08006aa4 <__retarget_lock_acquire_recursive>:
 8006aa4:	4770      	bx	lr

08006aa6 <__retarget_lock_release_recursive>:
 8006aa6:	4770      	bx	lr

08006aa8 <memcpy>:
 8006aa8:	440a      	add	r2, r1
 8006aaa:	4291      	cmp	r1, r2
 8006aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ab0:	d100      	bne.n	8006ab4 <memcpy+0xc>
 8006ab2:	4770      	bx	lr
 8006ab4:	b510      	push	{r4, lr}
 8006ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006abe:	4291      	cmp	r1, r2
 8006ac0:	d1f9      	bne.n	8006ab6 <memcpy+0xe>
 8006ac2:	bd10      	pop	{r4, pc}

08006ac4 <memset>:
 8006ac4:	4402      	add	r2, r0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d100      	bne.n	8006ace <memset+0xa>
 8006acc:	4770      	bx	lr
 8006ace:	f803 1b01 	strb.w	r1, [r3], #1
 8006ad2:	e7f9      	b.n	8006ac8 <memset+0x4>

08006ad4 <cleanup_glue>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	6809      	ldr	r1, [r1, #0]
 8006ada:	4605      	mov	r5, r0
 8006adc:	b109      	cbz	r1, 8006ae2 <cleanup_glue+0xe>
 8006ade:	f7ff fff9 	bl	8006ad4 <cleanup_glue>
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aea:	f000 b869 	b.w	8006bc0 <_free_r>
	...

08006af0 <_reclaim_reent>:
 8006af0:	4b2c      	ldr	r3, [pc, #176]	; (8006ba4 <_reclaim_reent+0xb4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4283      	cmp	r3, r0
 8006af6:	b570      	push	{r4, r5, r6, lr}
 8006af8:	4604      	mov	r4, r0
 8006afa:	d051      	beq.n	8006ba0 <_reclaim_reent+0xb0>
 8006afc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006afe:	b143      	cbz	r3, 8006b12 <_reclaim_reent+0x22>
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d14a      	bne.n	8006b9c <_reclaim_reent+0xac>
 8006b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b08:	6819      	ldr	r1, [r3, #0]
 8006b0a:	b111      	cbz	r1, 8006b12 <_reclaim_reent+0x22>
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f000 f857 	bl	8006bc0 <_free_r>
 8006b12:	6961      	ldr	r1, [r4, #20]
 8006b14:	b111      	cbz	r1, 8006b1c <_reclaim_reent+0x2c>
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 f852 	bl	8006bc0 <_free_r>
 8006b1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b1e:	b111      	cbz	r1, 8006b26 <_reclaim_reent+0x36>
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 f84d 	bl	8006bc0 <_free_r>
 8006b26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b28:	b111      	cbz	r1, 8006b30 <_reclaim_reent+0x40>
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 f848 	bl	8006bc0 <_free_r>
 8006b30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006b32:	b111      	cbz	r1, 8006b3a <_reclaim_reent+0x4a>
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 f843 	bl	8006bc0 <_free_r>
 8006b3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006b3c:	b111      	cbz	r1, 8006b44 <_reclaim_reent+0x54>
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f000 f83e 	bl	8006bc0 <_free_r>
 8006b44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006b46:	b111      	cbz	r1, 8006b4e <_reclaim_reent+0x5e>
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 f839 	bl	8006bc0 <_free_r>
 8006b4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006b50:	b111      	cbz	r1, 8006b58 <_reclaim_reent+0x68>
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 f834 	bl	8006bc0 <_free_r>
 8006b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b5a:	b111      	cbz	r1, 8006b62 <_reclaim_reent+0x72>
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 f82f 	bl	8006bc0 <_free_r>
 8006b62:	69a3      	ldr	r3, [r4, #24]
 8006b64:	b1e3      	cbz	r3, 8006ba0 <_reclaim_reent+0xb0>
 8006b66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b68:	4620      	mov	r0, r4
 8006b6a:	4798      	blx	r3
 8006b6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b6e:	b1b9      	cbz	r1, 8006ba0 <_reclaim_reent+0xb0>
 8006b70:	4620      	mov	r0, r4
 8006b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b76:	f7ff bfad 	b.w	8006ad4 <cleanup_glue>
 8006b7a:	5949      	ldr	r1, [r1, r5]
 8006b7c:	b941      	cbnz	r1, 8006b90 <_reclaim_reent+0xa0>
 8006b7e:	3504      	adds	r5, #4
 8006b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b82:	2d80      	cmp	r5, #128	; 0x80
 8006b84:	68d9      	ldr	r1, [r3, #12]
 8006b86:	d1f8      	bne.n	8006b7a <_reclaim_reent+0x8a>
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 f819 	bl	8006bc0 <_free_r>
 8006b8e:	e7ba      	b.n	8006b06 <_reclaim_reent+0x16>
 8006b90:	680e      	ldr	r6, [r1, #0]
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 f814 	bl	8006bc0 <_free_r>
 8006b98:	4631      	mov	r1, r6
 8006b9a:	e7ef      	b.n	8006b7c <_reclaim_reent+0x8c>
 8006b9c:	2500      	movs	r5, #0
 8006b9e:	e7ef      	b.n	8006b80 <_reclaim_reent+0x90>
 8006ba0:	bd70      	pop	{r4, r5, r6, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000010 	.word	0x20000010

08006ba8 <__malloc_lock>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__malloc_lock+0x8>)
 8006baa:	f7ff bf7b 	b.w	8006aa4 <__retarget_lock_acquire_recursive>
 8006bae:	bf00      	nop
 8006bb0:	2000514c 	.word	0x2000514c

08006bb4 <__malloc_unlock>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <__malloc_unlock+0x8>)
 8006bb6:	f7ff bf76 	b.w	8006aa6 <__retarget_lock_release_recursive>
 8006bba:	bf00      	nop
 8006bbc:	2000514c 	.word	0x2000514c

08006bc0 <_free_r>:
 8006bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	d044      	beq.n	8006c50 <_free_r+0x90>
 8006bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bca:	9001      	str	r0, [sp, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f1a1 0404 	sub.w	r4, r1, #4
 8006bd2:	bfb8      	it	lt
 8006bd4:	18e4      	addlt	r4, r4, r3
 8006bd6:	f7ff ffe7 	bl	8006ba8 <__malloc_lock>
 8006bda:	4a1e      	ldr	r2, [pc, #120]	; (8006c54 <_free_r+0x94>)
 8006bdc:	9801      	ldr	r0, [sp, #4]
 8006bde:	6813      	ldr	r3, [r2, #0]
 8006be0:	b933      	cbnz	r3, 8006bf0 <_free_r+0x30>
 8006be2:	6063      	str	r3, [r4, #4]
 8006be4:	6014      	str	r4, [r2, #0]
 8006be6:	b003      	add	sp, #12
 8006be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bec:	f7ff bfe2 	b.w	8006bb4 <__malloc_unlock>
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	d908      	bls.n	8006c06 <_free_r+0x46>
 8006bf4:	6825      	ldr	r5, [r4, #0]
 8006bf6:	1961      	adds	r1, r4, r5
 8006bf8:	428b      	cmp	r3, r1
 8006bfa:	bf01      	itttt	eq
 8006bfc:	6819      	ldreq	r1, [r3, #0]
 8006bfe:	685b      	ldreq	r3, [r3, #4]
 8006c00:	1949      	addeq	r1, r1, r5
 8006c02:	6021      	streq	r1, [r4, #0]
 8006c04:	e7ed      	b.n	8006be2 <_free_r+0x22>
 8006c06:	461a      	mov	r2, r3
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	b10b      	cbz	r3, 8006c10 <_free_r+0x50>
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	d9fa      	bls.n	8006c06 <_free_r+0x46>
 8006c10:	6811      	ldr	r1, [r2, #0]
 8006c12:	1855      	adds	r5, r2, r1
 8006c14:	42a5      	cmp	r5, r4
 8006c16:	d10b      	bne.n	8006c30 <_free_r+0x70>
 8006c18:	6824      	ldr	r4, [r4, #0]
 8006c1a:	4421      	add	r1, r4
 8006c1c:	1854      	adds	r4, r2, r1
 8006c1e:	42a3      	cmp	r3, r4
 8006c20:	6011      	str	r1, [r2, #0]
 8006c22:	d1e0      	bne.n	8006be6 <_free_r+0x26>
 8006c24:	681c      	ldr	r4, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	6053      	str	r3, [r2, #4]
 8006c2a:	4421      	add	r1, r4
 8006c2c:	6011      	str	r1, [r2, #0]
 8006c2e:	e7da      	b.n	8006be6 <_free_r+0x26>
 8006c30:	d902      	bls.n	8006c38 <_free_r+0x78>
 8006c32:	230c      	movs	r3, #12
 8006c34:	6003      	str	r3, [r0, #0]
 8006c36:	e7d6      	b.n	8006be6 <_free_r+0x26>
 8006c38:	6825      	ldr	r5, [r4, #0]
 8006c3a:	1961      	adds	r1, r4, r5
 8006c3c:	428b      	cmp	r3, r1
 8006c3e:	bf04      	itt	eq
 8006c40:	6819      	ldreq	r1, [r3, #0]
 8006c42:	685b      	ldreq	r3, [r3, #4]
 8006c44:	6063      	str	r3, [r4, #4]
 8006c46:	bf04      	itt	eq
 8006c48:	1949      	addeq	r1, r1, r5
 8006c4a:	6021      	streq	r1, [r4, #0]
 8006c4c:	6054      	str	r4, [r2, #4]
 8006c4e:	e7ca      	b.n	8006be6 <_free_r+0x26>
 8006c50:	b003      	add	sp, #12
 8006c52:	bd30      	pop	{r4, r5, pc}
 8006c54:	20005150 	.word	0x20005150

08006c58 <_init>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	bf00      	nop
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr

08006c64 <_fini>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr
