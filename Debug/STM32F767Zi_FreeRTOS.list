
STM32F767Zi_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b90  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d4  0800a0d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0d4  0800a0d4  0001a0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0dc  0800a0dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0e0  0800a0e0  0001a0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a0e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006950  20000074  0800a158  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200069c4  0800a158  000269c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024a47  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004571  00000000  00000000  00044ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  00049060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001990  00000000  00000000  0004ab98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a5b  00000000  00000000  0004c528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6a6  00000000  00000000  00051f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f6ad  00000000  00000000  00071629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180cd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a40  00000000  00000000  00180d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08009d78 	.word	0x08009d78

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08009d78 	.word	0x08009d78

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800055c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000560:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d013      	beq.n	8000594 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800056c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000570:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000574:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00b      	beq.n	8000594 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800057c:	e000      	b.n	8000580 <ITM_SendChar+0x2c>
    {
      __NOP();
 800057e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f9      	beq.n	800057e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800058a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f001 f898 	bl	80016de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f8b3 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 fa9d 	bl	8000af0 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b6:	f000 fa6d 	bl	8000a94 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005ba:	f000 f923 	bl	8000804 <MX_ADC1_Init>
  MX_TIM13_Init();
 80005be:	f000 f9eb 	bl	8000998 <MX_TIM13_Init>
  MX_ADC2_Init();
 80005c2:	f000 f973 	bl	80008ac <MX_ADC2_Init>
  MX_TIM10_Init();
 80005c6:	f000 f9c3 	bl	8000950 <MX_TIM10_Init>
  MX_USART3_UART_Init();
 80005ca:	f000 fa33 	bl	8000a34 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 80005ce:	4832      	ldr	r0, [pc, #200]	; (8000698 <main+0xf4>)
 80005d0:	f001 f91a 	bl	8001808 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80005d4:	4831      	ldr	r0, [pc, #196]	; (800069c <main+0xf8>)
 80005d6:	f001 f917 	bl	8001808 <HAL_ADC_Start>

  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80005da:	2100      	movs	r1, #0
 80005dc:	4830      	ldr	r0, [pc, #192]	; (80006a0 <main+0xfc>)
 80005de:	f003 faf9 	bl	8003bd4 <HAL_TIM_PWM_Start>
//  );

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e2:	f005 f975 	bl	80058d0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of msg_Queue */
  msg_QueueHandle = osMessageQueueNew (16, sizeof(QUEUE_t), &msg_Queue_attributes);
 80005e6:	4a2f      	ldr	r2, [pc, #188]	; (80006a4 <main+0x100>)
 80005e8:	217a      	movs	r1, #122	; 0x7a
 80005ea:	2010      	movs	r0, #16
 80005ec:	f005 fbce 	bl	8005d8c <osMessageQueueNew>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a2d      	ldr	r2, [pc, #180]	; (80006a8 <main+0x104>)
 80005f4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f6:	4a2d      	ldr	r2, [pc, #180]	; (80006ac <main+0x108>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	482d      	ldr	r0, [pc, #180]	; (80006b0 <main+0x10c>)
 80005fc:	f005 f9d2 	bl	80059a4 <osThreadNew>
 8000600:	4603      	mov	r3, r0
 8000602:	4a2c      	ldr	r2, [pc, #176]	; (80006b4 <main+0x110>)
 8000604:	6013      	str	r3, [r2, #0]

  /* creation of BlinkyTask */
  BlinkyTaskHandle = osThreadNew(StartBlinkyTask, NULL, &BlinkyTask_attributes);
 8000606:	4a2c      	ldr	r2, [pc, #176]	; (80006b8 <main+0x114>)
 8000608:	2100      	movs	r1, #0
 800060a:	482c      	ldr	r0, [pc, #176]	; (80006bc <main+0x118>)
 800060c:	f005 f9ca 	bl	80059a4 <osThreadNew>
 8000610:	4603      	mov	r3, r0
 8000612:	4a2b      	ldr	r2, [pc, #172]	; (80006c0 <main+0x11c>)
 8000614:	6013      	str	r3, [r2, #0]

  /* creation of adcReadValueT */
  adcReadValueTHandle = osThreadNew(adcReadValueTask, NULL, &adcReadValueT_attributes);
 8000616:	4a2b      	ldr	r2, [pc, #172]	; (80006c4 <main+0x120>)
 8000618:	2100      	movs	r1, #0
 800061a:	482b      	ldr	r0, [pc, #172]	; (80006c8 <main+0x124>)
 800061c:	f005 f9c2 	bl	80059a4 <osThreadNew>
 8000620:	4603      	mov	r3, r0
 8000622:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <main+0x128>)
 8000624:	6013      	str	r3, [r2, #0]

  /* creation of readTempT */
  readTempTHandle = osThreadNew(readTempTask, NULL, &readTempT_attributes);
 8000626:	4a2a      	ldr	r2, [pc, #168]	; (80006d0 <main+0x12c>)
 8000628:	2100      	movs	r1, #0
 800062a:	482a      	ldr	r0, [pc, #168]	; (80006d4 <main+0x130>)
 800062c:	f005 f9ba 	bl	80059a4 <osThreadNew>
 8000630:	4603      	mov	r3, r0
 8000632:	4a29      	ldr	r2, [pc, #164]	; (80006d8 <main+0x134>)
 8000634:	6013      	str	r3, [r2, #0]

  /* creation of pwmLedBrightnes */
  pwmLedBrightnesHandle = osThreadNew(pwmLedBrightnessTask, NULL, &pwmLedBrightnes_attributes);
 8000636:	4a29      	ldr	r2, [pc, #164]	; (80006dc <main+0x138>)
 8000638:	2100      	movs	r1, #0
 800063a:	4829      	ldr	r0, [pc, #164]	; (80006e0 <main+0x13c>)
 800063c:	f005 f9b2 	bl	80059a4 <osThreadNew>
 8000640:	4603      	mov	r3, r0
 8000642:	4a28      	ldr	r2, [pc, #160]	; (80006e4 <main+0x140>)
 8000644:	6013      	str	r3, [r2, #0]

  /* creation of usartDebugPrint */
  usartDebugPrintHandle = osThreadNew(usartDebugPrintTask, NULL, &usartDebugPrint_attributes);
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <main+0x144>)
 8000648:	2100      	movs	r1, #0
 800064a:	4828      	ldr	r0, [pc, #160]	; (80006ec <main+0x148>)
 800064c:	f005 f9aa 	bl	80059a4 <osThreadNew>
 8000650:	4603      	mov	r3, r0
 8000652:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <main+0x14c>)
 8000654:	6013      	str	r3, [r2, #0]

  /* creation of checkISRStateT */
  checkISRStateTHandle = osThreadNew(checkISRStateTask, NULL, &checkISRStateT_attributes);
 8000656:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <main+0x150>)
 8000658:	2100      	movs	r1, #0
 800065a:	4827      	ldr	r0, [pc, #156]	; (80006f8 <main+0x154>)
 800065c:	f005 f9a2 	bl	80059a4 <osThreadNew>
 8000660:	4603      	mov	r3, r0
 8000662:	4a26      	ldr	r2, [pc, #152]	; (80006fc <main+0x158>)
 8000664:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  EventGroup1 = osEventFlagsNew(NULL);
 8000666:	2000      	movs	r0, #0
 8000668:	f005 fa70 	bl	8005b4c <osEventFlagsNew>
 800066c:	4603      	mov	r3, r0
 800066e:	4a24      	ldr	r2, [pc, #144]	; (8000700 <main+0x15c>)
 8000670:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  xTaskCreate(
 8000672:	4b24      	ldr	r3, [pc, #144]	; (8000704 <main+0x160>)
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2308      	movs	r3, #8
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	4922      	ldr	r1, [pc, #136]	; (8000708 <main+0x164>)
 8000680:	4822      	ldr	r0, [pc, #136]	; (800070c <main+0x168>)
 8000682:	f006 fe0a 	bl	800729a <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of ISREvent */
  ISREventHandle = osEventFlagsNew(&ISREvent_attributes);
 8000686:	4822      	ldr	r0, [pc, #136]	; (8000710 <main+0x16c>)
 8000688:	f005 fa60 	bl	8005b4c <osEventFlagsNew>
 800068c:	4603      	mov	r3, r0
 800068e:	4a21      	ldr	r2, [pc, #132]	; (8000714 <main+0x170>)
 8000690:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000692:	f005 f951 	bl	8005938 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	e7fe      	b.n	8000696 <main+0xf2>
 8000698:	20000090 	.word	0x20000090
 800069c:	200000d8 	.word	0x200000d8
 80006a0:	2000016c 	.word	0x2000016c
 80006a4:	0800a008 	.word	0x0800a008
 80006a8:	20001724 	.word	0x20001724
 80006ac:	08009f0c 	.word	0x08009f0c
 80006b0:	08000d39 	.word	0x08000d39
 80006b4:	20000748 	.word	0x20000748
 80006b8:	08009f30 	.word	0x08009f30
 80006bc:	08000d69 	.word	0x08000d69
 80006c0:	2000074c 	.word	0x2000074c
 80006c4:	08009f54 	.word	0x08009f54
 80006c8:	08000d91 	.word	0x08000d91
 80006cc:	20000750 	.word	0x20000750
 80006d0:	08009f78 	.word	0x08009f78
 80006d4:	08000dd1 	.word	0x08000dd1
 80006d8:	20000a14 	.word	0x20000a14
 80006dc:	08009f9c 	.word	0x08009f9c
 80006e0:	08000e79 	.word	0x08000e79
 80006e4:	20000cd8 	.word	0x20000cd8
 80006e8:	08009fc0 	.word	0x08009fc0
 80006ec:	08000f05 	.word	0x08000f05
 80006f0:	20000f9c 	.word	0x20000f9c
 80006f4:	08009fe4 	.word	0x08009fe4
 80006f8:	08000f35 	.word	0x08000f35
 80006fc:	20001260 	.word	0x20001260
 8000700:	20001f44 	.word	0x20001f44
 8000704:	20001f40 	.word	0x20001f40
 8000708:	08009e0c 	.word	0x08009e0c
 800070c:	08000d49 	.word	0x08000d49
 8000710:	0800a020 	.word	0x0800a020
 8000714:	20001f18 	.word	0x20001f18

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2234      	movs	r2, #52	; 0x34
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f008 fe63 	bl	80093f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800073c:	f001 ffca 	bl	80026d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <SystemClock_Config+0xe4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a2d      	ldr	r2, [pc, #180]	; (80007fc <SystemClock_Config+0xe4>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <SystemClock_Config+0xe4>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <SystemClock_Config+0xe8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000760:	4a27      	ldr	r2, [pc, #156]	; (8000800 <SystemClock_Config+0xe8>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <SystemClock_Config+0xe8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000774:	2303      	movs	r3, #3
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077e:	2301      	movs	r3, #1
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000782:	2310      	movs	r3, #16
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000790:	2319      	movs	r3, #25
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000794:	23c0      	movs	r3, #192	; 0xc0
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800079c:	2304      	movs	r3, #4
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fff3 	bl	8002794 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007b4:	f000 fc36 	bl	8001024 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b8:	f001 ff9c 	bl	80026f4 <HAL_PWREx_EnableOverDrive>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007c2:	f000 fc2f 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	2103      	movs	r1, #3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fa84 	bl	8002cf0 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80007ee:	f000 fc19 	bl	8001024 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	; 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_ADC1_Init+0x9c>)
 8000818:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <MX_ADC1_Init+0xa0>)
 800081a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_ADC1_Init+0x9c>)
 800081e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000822:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_ADC1_Init+0x9c>)
 8000826:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800082a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_ADC1_Init+0x9c>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_ADC1_Init+0x9c>)
 8000834:	2201      	movs	r2, #1
 8000836:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_ADC1_Init+0x9c>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_ADC1_Init+0x9c>)
 8000842:	2200      	movs	r2, #0
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_ADC1_Init+0x9c>)
 8000848:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <MX_ADC1_Init+0xa4>)
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_ADC1_Init+0x9c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_ADC1_Init+0x9c>)
 8000854:	2201      	movs	r2, #1
 8000856:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_ADC1_Init+0x9c>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_ADC1_Init+0x9c>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <MX_ADC1_Init+0x9c>)
 8000868:	f000 ff8a 	bl	8001780 <HAL_ADC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000872:	f000 fbd7 	bl	8001024 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000876:	2303      	movs	r3, #3
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800087a:	2301      	movs	r3, #1
 800087c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <MX_ADC1_Init+0x9c>)
 8000888:	f001 f89a 	bl	80019c0 <HAL_ADC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000892:	f000 fbc7 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000090 	.word	0x20000090
 80008a4:	40012000 	.word	0x40012000
 80008a8:	0f000001 	.word	0x0f000001

080008ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_ADC2_Init+0x98>)
 80008c0:	4a21      	ldr	r2, [pc, #132]	; (8000948 <MX_ADC2_Init+0x9c>)
 80008c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_ADC2_Init+0x98>)
 80008c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_ADC2_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_ADC2_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC2_Init+0x98>)
 80008da:	2201      	movs	r2, #1
 80008dc:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_ADC2_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_ADC2_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_ADC2_Init+0x98>)
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <MX_ADC2_Init+0xa0>)
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_ADC2_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_ADC2_Init+0x98>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_ADC2_Init+0x98>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_ADC2_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_ADC2_Init+0x98>)
 800090e:	f000 ff37 	bl	8001780 <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000918:	f000 fb84 	bl	8001024 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800091c:	230a      	movs	r3, #10
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000920:	2301      	movs	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_ADC2_Init+0x98>)
 800092e:	f001 f847 	bl	80019c0 <HAL_ADC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000938:	f000 fb74 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000d8 	.word	0x200000d8
 8000948:	40012100 	.word	0x40012100
 800094c:	0f000001 	.word	0x0f000001

08000950 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_TIM10_Init+0x40>)
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <MX_TIM10_Init+0x44>)
 8000958:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_TIM10_Init+0x40>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_TIM10_Init+0x40>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 956;
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_TIM10_Init+0x40>)
 8000968:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800096c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_TIM10_Init+0x40>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_TIM10_Init+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_TIM10_Init+0x40>)
 800097c:	f002 fff8 	bl	8003970 <HAL_TIM_Base_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000986:	f000 fb4d 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000120 	.word	0x20000120
 8000994:	40014400 	.word	0x40014400

08000998 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_TIM13_Init+0x94>)
 80009b2:	4a1f      	ldr	r2, [pc, #124]	; (8000a30 <MX_TIM13_Init+0x98>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_TIM13_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_TIM13_Init+0x94>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1023;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_TIM13_Init+0x94>)
 80009c4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80009c8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_TIM13_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_TIM13_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80009d6:	4815      	ldr	r0, [pc, #84]	; (8000a2c <MX_TIM13_Init+0x94>)
 80009d8:	f002 ffca 	bl	8003970 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80009e2:	f000 fb1f 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_TIM13_Init+0x94>)
 80009e8:	f003 f892 	bl	8003b10 <HAL_TIM_PWM_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80009f2:	f000 fb17 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f6:	2360      	movs	r3, #96	; 0x60
 80009f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <MX_TIM13_Init+0x94>)
 8000a0e:	f003 fafb 	bl	8004008 <HAL_TIM_PWM_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000a18:	f000 fb04 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <MX_TIM13_Init+0x94>)
 8000a1e:	f000 fbd7 	bl	80011d0 <HAL_TIM_MspPostInit>

}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000016c 	.word	0x2000016c
 8000a30:	40001c00 	.word	0x40001c00

08000a34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <MX_USART3_UART_Init+0x5c>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a78:	f003 ff43 	bl	8004902 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a82:	f000 facf 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200001b8 	.word	0x200001b8
 8000a90:	40004800 	.word	0x40004800

08000a94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa2:	2206      	movs	r2, #6
 8000aa4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	f001 fcb4 	bl	8002444 <HAL_PCD_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ae2:	f000 fa9f 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000240 	.word	0x20000240

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	4b4b      	ldr	r3, [pc, #300]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a4a      	ldr	r2, [pc, #296]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b48      	ldr	r3, [pc, #288]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	61bb      	str	r3, [r7, #24]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	4b45      	ldr	r3, [pc, #276]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a44      	ldr	r2, [pc, #272]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b3f      	ldr	r3, [pc, #252]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a3e      	ldr	r2, [pc, #248]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b3c      	ldr	r3, [pc, #240]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a38      	ldr	r2, [pc, #224]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b36      	ldr	r3, [pc, #216]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a2c      	ldr	r2, [pc, #176]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b9c:	4826      	ldr	r0, [pc, #152]	; (8000c38 <MX_GPIO_Init+0x148>)
 8000b9e:	f001 fc05 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	4825      	ldr	r0, [pc, #148]	; (8000c3c <MX_GPIO_Init+0x14c>)
 8000ba8:	f001 fc00 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481f      	ldr	r0, [pc, #124]	; (8000c40 <MX_GPIO_Init+0x150>)
 8000bc4:	f001 fa2e 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bc8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4815      	ldr	r0, [pc, #84]	; (8000c38 <MX_GPIO_Init+0x148>)
 8000be2:	f001 fa1f 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000be6:	2340      	movs	r3, #64	; 0x40
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480f      	ldr	r0, [pc, #60]	; (8000c3c <MX_GPIO_Init+0x14c>)
 8000bfe:	f001 fa11 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <MX_GPIO_Init+0x14c>)
 8000c16:	f001 fa05 	bl	8002024 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2105      	movs	r1, #5
 8000c1e:	2028      	movs	r0, #40	; 0x28
 8000c20:	f001 f9d6 	bl	8001fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c24:	2028      	movs	r0, #40	; 0x28
 8000c26:	f001 f9ef 	bl	8002008 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	; 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40021800 	.word	0x40021800
 8000c40:	40020800 	.word	0x40020800

08000c44 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
#if DEBUG_ON == 1
void configureTimerForRunTimeStats(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <configureTimerForRunTimeStats+0x14>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim10);
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <configureTimerForRunTimeStats+0x18>)
 8000c50:	f002 fee6 	bl	8003a20 <HAL_TIM_Base_Start_IT>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20001f3c 	.word	0x20001f3c
 8000c5c:	20000120 	.word	0x20000120

08000c60 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <getRunTimeCounterValue+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20001f3c 	.word	0x20001f3c

08000c78 <_write>:

int _write(int file, char *ptr, int len)
 {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
	 int DataIdx;
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e009      	b.n	8000c9e <_write+0x26>
	 {
		 ITM_SendChar(*ptr++);
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	60ba      	str	r2, [r7, #8]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fc5e 	bl	8000554 <ITM_SendChar>
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dbf1      	blt.n	8000c8a <_write+0x12>
	 }
	 return len;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 }
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_GPIO_EXTI_Callback>:
  * @brief User button IRQ callback function
  * @param uint16_t GPIO_Pin
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == USER_Btn_Pin)
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cc0:	d10a      	bne.n	8000cd8 <HAL_GPIO_EXTI_Callback+0x28>
  {
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000cc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000cc8:	f001 fb89 	bl	80023de <HAL_GPIO_TogglePin>
    osEventFlagsSet(EventGroup1, LED_ISR_FLAG);
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0x34>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2151      	movs	r1, #81	; 0x51
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 ff8c 	bl	8005bf0 <osEventFlagsSet>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40020400 	.word	0x40020400
 8000ce4:	20001f44 	.word	0x20001f44

08000ce8 <getTemperature>:
  * @brief calculates temperature from TM35 sensor ADC raw value
  * @param uint16_t adc_raw_value
  * @retval None
  */
static uint16_t getTemperature(uint16_t adc_raw_value)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	return (adc_raw_value / TM35_MV_TO_C); /* 10mV / 1C degree*/
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <getTemperature+0x24>)
 8000cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfa:	08db      	lsrs	r3, r3, #3
 8000cfc:	b29b      	uxth	r3, r3
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	cccccccd 	.word	0xcccccccd

08000d10 <printUsartMessage>:
  * @brief print message via USART interface
  * @param const char* message
  * @retval None
  */
static void printUsartMessage(char* message)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(
	     &huart3,
	     (uint8_t*)message,
	     strlen(message),
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff fa91 	bl	8000240 <strlen>
 8000d1e:	4603      	mov	r3, r0
	HAL_UART_Transmit(
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	2301      	movs	r3, #1
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4803      	ldr	r0, [pc, #12]	; (8000d34 <printUsartMessage+0x24>)
 8000d28:	f003 fe39 	bl	800499e <HAL_UART_Transmit>
	     1
	     );
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200001b8 	.word	0x200001b8

08000d38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  (void) argument;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f004 fed5 	bl	8005af0 <osDelay>
 8000d46:	e7fb      	b.n	8000d40 <StartDefaultTask+0x8>

08000d48 <ledBlinkBlue>:
* @brief Function implementing the ledBlinkBlue thread (native FreeRTOS API).
* @param argument: Not used
* @retval None
*/
void ledBlinkBlue(void *pvParameters)
 {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	(void) pvParameters;
	for(;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	4804      	ldr	r0, [pc, #16]	; (8000d64 <ledBlinkBlue+0x1c>)
 8000d54:	f001 fb43 	bl	80023de <HAL_GPIO_TogglePin>
		vTaskDelay(500); // 0.5 sec (calculated in ticks)
 8000d58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5c:	f006 fbfe 	bl	800755c <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d60:	e7f6      	b.n	8000d50 <ledBlinkBlue+0x8>
 8000d62:	bf00      	nop
 8000d64:	40020400 	.word	0x40020400

08000d68 <StartBlinkyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask */
void StartBlinkyTask(void *argument)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask */
  (void) argument;
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d70:	2101      	movs	r1, #1
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <StartBlinkyTask+0x20>)
 8000d74:	f001 fb33 	bl	80023de <HAL_GPIO_TogglePin>
	printf("Hello world\n");
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <StartBlinkyTask+0x24>)
 8000d7a:	f008 fc45 	bl	8009608 <puts>
	osDelay(1000); // 1 sec (calculated in ticks)
 8000d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d82:	f004 feb5 	bl	8005af0 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d86:	e7f3      	b.n	8000d70 <StartBlinkyTask+0x8>
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	08009e18 	.word	0x08009e18

08000d90 <adcReadValueTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adcReadValueTask */
void adcReadValueTask(void *argument)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0a2      	sub	sp, #136	; 0x88
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  (void) argument;
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {
	uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <adcReadValueTask+0x38>)
 8000d9a:	f000 fe03 	bl	80019a4 <HAL_ADC_GetValue>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

	message.adc_val = adc_value;
 8000da4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000da8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

	osMessageQueuePut(msg_QueueHandle,
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <adcReadValueTask+0x3c>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	f107 010c 	add.w	r1, r7, #12
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295
 8000db8:	2200      	movs	r2, #0
 8000dba:	f005 f86d 	bl	8005e98 <osMessageQueuePut>
			&message,
			0,
			osWaitForever);

    osDelay(100);
 8000dbe:	2064      	movs	r0, #100	; 0x64
 8000dc0:	f004 fe96 	bl	8005af0 <osDelay>
  {
 8000dc4:	e7e8      	b.n	8000d98 <adcReadValueTask+0x8>
 8000dc6:	bf00      	nop
 8000dc8:	20000090 	.word	0x20000090
 8000dcc:	20001724 	.word	0x20001724

08000dd0 <readTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readTempTask */
void readTempTask(void *argument)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b0a2      	sub	sp, #136	; 0x88
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  (void) argument;
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {
	uint16_t adc_voltage = (ADC_VREF * (uint16_t)HAL_ADC_GetValue(&hadc2)) / ADC_RESOLUTION;
 8000dd8:	4823      	ldr	r0, [pc, #140]	; (8000e68 <readTempTask+0x98>)
 8000dda:	f000 fde3 	bl	80019a4 <HAL_ADC_GetValue>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000de8:	fb02 f303 	mul.w	r3, r2, r3
 8000dec:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <readTempTask+0x9c>)
 8000dee:	fb82 1203 	smull	r1, r2, r2, r3
 8000df2:	441a      	add	r2, r3
 8000df4:	12d2      	asrs	r2, r2, #11
 8000df6:	17db      	asrs	r3, r3, #31
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint16_t tempC = getTemperature(adc_voltage); /* 10mV / 1C degree*/
 8000dfe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff70 	bl	8000ce8 <getTemperature>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

	itoa(tempC, message.msg_buf, 10);
 8000e0e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000e12:	f107 0108 	add.w	r1, r7, #8
 8000e16:	220a      	movs	r2, #10
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f008 fad7 	bl	80093cc <itoa>
	strcat(message.msg_buf, " C :[temperature value]\r\n\0");
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fa0c 	bl	8000240 <strlen>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4413      	add	r3, r2
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <readTempTask+0xa0>)
 8000e34:	461d      	mov	r5, r3
 8000e36:	4614      	mov	r4, r2
 8000e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e3a:	6028      	str	r0, [r5, #0]
 8000e3c:	6069      	str	r1, [r5, #4]
 8000e3e:	60aa      	str	r2, [r5, #8]
 8000e40:	60eb      	str	r3, [r5, #12]
 8000e42:	cc03      	ldmia	r4!, {r0, r1}
 8000e44:	6128      	str	r0, [r5, #16]
 8000e46:	6169      	str	r1, [r5, #20]
 8000e48:	8823      	ldrh	r3, [r4, #0]
 8000e4a:	832b      	strh	r3, [r5, #24]

	osMessageQueuePut(msg_QueueHandle,
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <readTempTask+0xa4>)
 8000e4e:	6818      	ldr	r0, [r3, #0]
 8000e50:	f107 0108 	add.w	r1, r7, #8
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f005 f81d 	bl	8005e98 <osMessageQueuePut>
			&message,
			0,
			osWaitForever
			);

    osDelay(100);
 8000e5e:	2064      	movs	r0, #100	; 0x64
 8000e60:	f004 fe46 	bl	8005af0 <osDelay>
  {
 8000e64:	e7b8      	b.n	8000dd8 <readTempTask+0x8>
 8000e66:	bf00      	nop
 8000e68:	200000d8 	.word	0x200000d8
 8000e6c:	80080081 	.word	0x80080081
 8000e70:	08009e24 	.word	0x08009e24
 8000e74:	20001724 	.word	0x20001724

08000e78 <pwmLedBrightnessTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pwmLedBrightnessTask */
void pwmLedBrightnessTask(void *argument)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b0a2      	sub	sp, #136	; 0x88
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  QUEUE_t message;

  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(msg_QueueHandle,
 8000e80:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <pwmLedBrightnessTask+0x80>)
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	f107 010c 	add.w	r1, r7, #12
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f005 f877 	bl	8005f80 <osMessageQueueGet>
			&message,
			0,
			osWaitForever);


	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, message.adc_val);
 8000e92:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <pwmLedBrightnessTask+0x84>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34


	itoa(message.adc_val, message.msg_buf, 10);
 8000e9c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	220a      	movs	r2, #10
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f008 fa8f 	bl	80093cc <itoa>
	strcat(message.msg_buf, " :[potentiometer value]\r\n\0");
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff f9c4 	bl	8000240 <strlen>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <pwmLedBrightnessTask+0x88>)
 8000ec4:	461d      	mov	r5, r3
 8000ec6:	4614      	mov	r4, r2
 8000ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eca:	6028      	str	r0, [r5, #0]
 8000ecc:	6069      	str	r1, [r5, #4]
 8000ece:	60aa      	str	r2, [r5, #8]
 8000ed0:	60eb      	str	r3, [r5, #12]
 8000ed2:	cc03      	ldmia	r4!, {r0, r1}
 8000ed4:	6128      	str	r0, [r5, #16]
 8000ed6:	6169      	str	r1, [r5, #20]
 8000ed8:	8823      	ldrh	r3, [r4, #0]
 8000eda:	832b      	strh	r3, [r5, #24]

	osMessageQueuePut(msg_QueueHandle,
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <pwmLedBrightnessTask+0x80>)
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	f107 010c 	add.w	r1, r7, #12
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f004 ffd5 	bl	8005e98 <osMessageQueuePut>
			&message,
			0,
			osWaitForever
			);

    osDelay(100);
 8000eee:	2064      	movs	r0, #100	; 0x64
 8000ef0:	f004 fdfe 	bl	8005af0 <osDelay>
	osMessageQueueGet(msg_QueueHandle,
 8000ef4:	e7c4      	b.n	8000e80 <pwmLedBrightnessTask+0x8>
 8000ef6:	bf00      	nop
 8000ef8:	20001724 	.word	0x20001724
 8000efc:	2000016c 	.word	0x2000016c
 8000f00:	08009e40 	.word	0x08009e40

08000f04 <usartDebugPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usartDebugPrintTask */
void usartDebugPrintTask(void *argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0a2      	sub	sp, #136	; 0x88
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  QUEUE_t message;
//	char msg[20] = "test\r\n\0";
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(msg_QueueHandle,
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <usartDebugPrintTask+0x2c>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	f107 010c 	add.w	r1, r7, #12
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f005 f831 	bl	8005f80 <osMessageQueueGet>
			&message,
			0,
			osWaitForever
			);

	printUsartMessage(&message.msg_buf);
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fef4 	bl	8000d10 <printUsartMessage>

    osDelay(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f004 fde1 	bl	8005af0 <osDelay>
	osMessageQueueGet(msg_QueueHandle,
 8000f2e:	e7ed      	b.n	8000f0c <usartDebugPrintTask+0x8>
 8000f30:	20001724 	.word	0x20001724

08000f34 <checkISRStateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_checkISRStateTask */
void checkISRStateTask(void *argument)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0a4      	sub	sp, #144	; 0x90
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN checkISRStateTask */
  (void) argument;

  GPIO_PinState led_gpio_state;

  const char* led_on = "Pin state HIGH [Flag from ISR]\r\n\0";
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <checkISRStateTask+0xb4>)
 8000f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const char* led_off = "Pin state LOW [Flag from ISR]\r\n\0";
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <checkISRStateTask+0xb8>)
 8000f44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const char* led_unknown = "Pin state UNKNOWN [Flag from ISR]\r\n\0";
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <checkISRStateTask+0xbc>)
 8000f4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {

	osEventFlagsWait(EventGroup1,
 8000f4e:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <checkISRStateTask+0xc0>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	2201      	movs	r2, #1
 8000f58:	2151      	movs	r1, #81	; 0x51
 8000f5a:	f004 fea1 	bl	8005ca0 <osEventFlagsWait>
			LED_ISR_FLAG,
			osFlagsWaitAll,
			osWaitForever
			);

	led_gpio_state = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000f5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f62:	4825      	ldr	r0, [pc, #148]	; (8000ff8 <checkISRStateTask+0xc4>)
 8000f64:	f001 fa0a 	bl	800237c <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

	switch(led_gpio_state)
 8000f6e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d012      	beq.n	8000f9c <checkISRStateTask+0x68>
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d121      	bne.n	8000fbe <checkISRStateTask+0x8a>
	{
	case GPIO_PIN_SET:
		strcpy(message.msg_buf, led_on);
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000f82:	4618      	mov	r0, r3
 8000f84:	f008 fc05 	bl	8009792 <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <checkISRStateTask+0xc8>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	f107 0108 	add.w	r1, r7, #8
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	2200      	movs	r2, #0
 8000f96:	f004 ff7f 	bl	8005e98 <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000f9a:	e021      	b.n	8000fe0 <checkISRStateTask+0xac>

	case GPIO_PIN_RESET:
		strcpy(message.msg_buf, led_off);
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f008 fbf4 	bl	8009792 <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <checkISRStateTask+0xc8>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	f107 0108 	add.w	r1, r7, #8
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f004 ff6e 	bl	8005e98 <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000fbc:	e010      	b.n	8000fe0 <checkISRStateTask+0xac>

	default:
		strcpy(message.msg_buf, led_unknown);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f008 fbe3 	bl	8009792 <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <checkISRStateTask+0xc8>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	f107 0108 	add.w	r1, r7, #8
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f004 ff5d 	bl	8005e98 <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000fde:	bf00      	nop
	}

    osDelay(10);
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f004 fd85 	bl	8005af0 <osDelay>
	osEventFlagsWait(EventGroup1,
 8000fe6:	e7b2      	b.n	8000f4e <checkISRStateTask+0x1a>
 8000fe8:	08009e5c 	.word	0x08009e5c
 8000fec:	08009e80 	.word	0x08009e80
 8000ff0:	08009ea4 	.word	0x08009ea4
 8000ff4:	20001f44 	.word	0x20001f44
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	20001724 	.word	0x20001724

08001000 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001012:	f000 fb71 	bl	80016f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40001000 	.word	0x40001000

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>
	...

08001030 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_MspInit+0x4c>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_MspInit+0x4c>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_MspInit+0x4c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	210f      	movs	r1, #15
 800106a:	f06f 0001 	mvn.w	r0, #1
 800106e:	f000 ffaf 	bl	8001fd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800

08001080 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <HAL_ADC_MspInit+0xc8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d124      	bne.n	80010ec <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010a2:	4b2a      	ldr	r3, [pc, #168]	; (800114c <HAL_ADC_MspInit+0xcc>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a29      	ldr	r2, [pc, #164]	; (800114c <HAL_ADC_MspInit+0xcc>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b27      	ldr	r3, [pc, #156]	; (800114c <HAL_ADC_MspInit+0xcc>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <HAL_ADC_MspInit+0xcc>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a23      	ldr	r2, [pc, #140]	; (800114c <HAL_ADC_MspInit+0xcc>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <HAL_ADC_MspInit+0xcc>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = Potentiometer_AIN_Pin;
 80010d2:	2308      	movs	r3, #8
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d6:	2303      	movs	r3, #3
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Potentiometer_AIN_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	481a      	ldr	r0, [pc, #104]	; (8001150 <HAL_ADC_MspInit+0xd0>)
 80010e6:	f000 ff9d 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010ea:	e028      	b.n	800113e <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a18      	ldr	r2, [pc, #96]	; (8001154 <HAL_ADC_MspInit+0xd4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d123      	bne.n	800113e <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_ADC_MspInit+0xcc>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <HAL_ADC_MspInit+0xcc>)
 80010fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_ADC_MspInit+0xcc>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_ADC_MspInit+0xcc>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_ADC_MspInit+0xcc>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_ADC_MspInit+0xcc>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LM35_sensor_AIN_Pin;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LM35_sensor_AIN_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <HAL_ADC_MspInit+0xd8>)
 800113a:	f000 ff73 	bl	8002024 <HAL_GPIO_Init>
}
 800113e:	bf00      	nop
 8001140:	3730      	adds	r7, #48	; 0x30
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40012000 	.word	0x40012000
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000
 8001154:	40012100 	.word	0x40012100
 8001158:	40020800 	.word	0x40020800

0800115c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_TIM_Base_MspInit+0x68>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d114      	bne.n	8001198 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2105      	movs	r1, #5
 800118a:	2019      	movs	r0, #25
 800118c:	f000 ff20 	bl	8001fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001190:	2019      	movs	r0, #25
 8001192:	f000 ff39 	bl	8002008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001196:	e010      	b.n	80011ba <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM13)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <HAL_TIM_Base_MspInit+0x70>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d10b      	bne.n	80011ba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40014400 	.word	0x40014400
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40001c00 	.word	0x40001c00

080011d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a11      	ldr	r2, [pc, #68]	; (8001234 <HAL_TIM_MspPostInit+0x64>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d11b      	bne.n	800122a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_TIM_MspPostInit+0x68>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a10      	ldr	r2, [pc, #64]	; (8001238 <HAL_TIM_MspPostInit+0x68>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_TIM_MspPostInit+0x68>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800120a:	2340      	movs	r3, #64	; 0x40
 800120c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800121a:	2309      	movs	r3, #9
 800121c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <HAL_TIM_MspPostInit+0x6c>)
 8001226:	f000 fefd 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40001c00 	.word	0x40001c00
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0ae      	sub	sp, #184	; 0xb8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2290      	movs	r2, #144	; 0x90
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f008 f8c6 	bl	80093f2 <memset>
  if(huart->Instance==USART3)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <HAL_UART_MspInit+0xb4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d13c      	bne.n	80012ea <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001274:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8001276:	2320      	movs	r3, #32
 8001278:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4618      	mov	r0, r3
 8001280:	f001 ff4e 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800128a:	f7ff fecb 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_UART_MspInit+0xb8>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <HAL_UART_MspInit+0xb8>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_UART_MspInit+0xb8>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_UART_MspInit+0xb8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <HAL_UART_MspInit+0xb8>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_UART_MspInit+0xb8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012d8:	2307      	movs	r3, #7
 80012da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <HAL_UART_MspInit+0xbc>)
 80012e6:	f000 fe9d 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	37b8      	adds	r7, #184	; 0xb8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40004800 	.word	0x40004800
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020c00 	.word	0x40020c00

08001300 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0ae      	sub	sp, #184	; 0xb8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2290      	movs	r2, #144	; 0x90
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f008 f866 	bl	80093f2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800132e:	d159      	bne.n	80013e4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001330:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001334:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4618      	mov	r0, r3
 8001342:	f001 feed 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800134c:	f7ff fe6a 	bl	8001024 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_PCD_MspInit+0xec>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	4a25      	ldr	r2, [pc, #148]	; (80013ec <HAL_PCD_MspInit+0xec>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6313      	str	r3, [r2, #48]	; 0x30
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <HAL_PCD_MspInit+0xec>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8001368:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800136c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001382:	230a      	movs	r3, #10
 8001384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800138c:	4619      	mov	r1, r3
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <HAL_PCD_MspInit+0xf0>)
 8001390:	f000 fe48 	bl	8002024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001398:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4810      	ldr	r0, [pc, #64]	; (80013f0 <HAL_PCD_MspInit+0xf0>)
 80013b0:	f000 fe38 	bl	8002024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_PCD_MspInit+0xec>)
 80013b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <HAL_PCD_MspInit+0xec>)
 80013ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013be:	6353      	str	r3, [r2, #52]	; 0x34
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_PCD_MspInit+0xec>)
 80013c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_PCD_MspInit+0xec>)
 80013ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <HAL_PCD_MspInit+0xec>)
 80013d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d6:	6453      	str	r3, [r2, #68]	; 0x44
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <HAL_PCD_MspInit+0xec>)
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013e4:	bf00      	nop
 80013e6:	37b8      	adds	r7, #184	; 0xb8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000

080013f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_InitTick+0xe0>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <HAL_InitTick+0xe0>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_InitTick+0xe0>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800141c:	f107 0210 	add.w	r2, r7, #16
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fe48 	bl	80030bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001432:	2b00      	cmp	r3, #0
 8001434:	d103      	bne.n	800143e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001436:	f001 fe19 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 800143a:	6378      	str	r0, [r7, #52]	; 0x34
 800143c:	e004      	b.n	8001448 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800143e:	f001 fe15 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8001442:	4603      	mov	r3, r0
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <HAL_InitTick+0xe4>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	0c9b      	lsrs	r3, r3, #18
 8001452:	3b01      	subs	r3, #1
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <HAL_InitTick+0xe8>)
 8001458:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <HAL_InitTick+0xec>)
 800145a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_InitTick+0xe8>)
 800145e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001462:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001464:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <HAL_InitTick+0xe8>)
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_InitTick+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <HAL_InitTick+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_InitTick+0xe8>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800147c:	4817      	ldr	r0, [pc, #92]	; (80014dc <HAL_InitTick+0xe8>)
 800147e:	f002 fa77 	bl	8003970 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001488:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800148c:	2b00      	cmp	r3, #0
 800148e:	d11b      	bne.n	80014c8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001490:	4812      	ldr	r0, [pc, #72]	; (80014dc <HAL_InitTick+0xe8>)
 8001492:	f002 fac5 	bl	8003a20 <HAL_TIM_Base_Start_IT>
 8001496:	4603      	mov	r3, r0
 8001498:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800149c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014a4:	2036      	movs	r0, #54	; 0x36
 80014a6:	f000 fdaf 	bl	8002008 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d808      	bhi.n	80014c2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	2036      	movs	r0, #54	; 0x36
 80014b6:	f000 fd8b 	bl	8001fd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_InitTick+0xf0>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e002      	b.n	80014c8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3738      	adds	r7, #56	; 0x38
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	431bde83 	.word	0x431bde83
 80014dc:	20001f48 	.word	0x20001f48
 80014e0:	40001000 	.word	0x40001000
 80014e4:	20000004 	.word	0x20000004

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <TIM1_UP_TIM10_IRQHandler+0x18>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	4a03      	ldr	r2, [pc, #12]	; (800152c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001520:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001524:	f002 fc50 	bl	8003dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20001f3c 	.word	0x20001f3c
 8001530:	20000120 	.word	0x20000120

08001534 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001538:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800153c:	f000 ff6a 	bl	8002414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM6_DAC_IRQHandler+0x10>)
 800154a:	f002 fc3d 	bl	8003dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20001f48 	.word	0x20001f48

08001558 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e00a      	b.n	8001580 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800156a:	f3af 8000 	nop.w
 800156e:	4601      	mov	r1, r0
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	b2ca      	uxtb	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf0      	blt.n	800156a <_read+0x12>
  }

  return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ba:	605a      	str	r2, [r3, #4]
  return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_isatty>:

int _isatty(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <_sbrk+0x5c>)
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <_sbrk+0x60>)
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <_sbrk+0x64>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <_sbrk+0x68>)
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d207      	bcs.n	800163c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800162c:	f007 fd96 	bl	800915c <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	220c      	movs	r2, #12
 8001634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	e009      	b.n	8001650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <_sbrk+0x64>)
 800164c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20080000 	.word	0x20080000
 800165c:	00000400 	.word	0x00000400
 8001660:	20001f94 	.word	0x20001f94
 8001664:	200069c8 	.word	0x200069c8

08001668 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <SystemInit+0x20>)
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <SystemInit+0x20>)
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001692:	490e      	ldr	r1, [pc, #56]	; (80016cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001694:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a8:	4c0b      	ldr	r4, [pc, #44]	; (80016d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016b6:	f7ff ffd7 	bl	8001668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ba:	f007 fe4b 	bl	8009354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016be:	f7fe ff71 	bl	80005a4 <main>
  bx  lr    
 80016c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016d0:	0800a0e4 	.word	0x0800a0e4
  ldr r2, =_sbss
 80016d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016d8:	200069c4 	.word	0x200069c4

080016dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>

080016de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e2:	2003      	movs	r0, #3
 80016e4:	f000 fc69 	bl	8001fba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e8:	200f      	movs	r0, #15
 80016ea:	f7ff fe83 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ee:	f7ff fc9f 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008
 800171c:	20001f98 	.word	0x20001f98

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20001f98 	.word	0x20001f98

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008

08001780 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e031      	b.n	80017fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fc6e 	bl	8001080 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d116      	bne.n	80017ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_ADC_Init+0x84>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	f043 0202 	orr.w	r2, r3, #2
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fa4c 	bl	8001c6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	f043 0201 	orr.w	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ea:	e001      	b.n	80017f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	ffffeefd 	.word	0xffffeefd

08001808 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Start+0x1a>
 800181e:	2302      	movs	r3, #2
 8001820:	e0ad      	b.n	800197e <HAL_ADC_Start+0x176>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b01      	cmp	r3, #1
 8001836:	d018      	beq.n	800186a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001848:	4b50      	ldr	r3, [pc, #320]	; (800198c <HAL_ADC_Start+0x184>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a50      	ldr	r2, [pc, #320]	; (8001990 <HAL_ADC_Start+0x188>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9a      	lsrs	r2, r3, #18
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800185c:	e002      	b.n	8001864 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3b01      	subs	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f9      	bne.n	800185e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d175      	bne.n	8001964 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187c:	4b45      	ldr	r3, [pc, #276]	; (8001994 <HAL_ADC_Start+0x18c>)
 800187e:	4013      	ands	r3, r2
 8001880:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001892:	2b00      	cmp	r3, #0
 8001894:	d007      	beq.n	80018a6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800189e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b2:	d106      	bne.n	80018c2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	f023 0206 	bic.w	r2, r3, #6
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	645a      	str	r2, [r3, #68]	; 0x44
 80018c0:	e002      	b.n	80018c8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_ADC_Start+0x190>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10f      	bne.n	8001906 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d143      	bne.n	800197c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	e03a      	b.n	800197c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a24      	ldr	r2, [pc, #144]	; (800199c <HAL_ADC_Start+0x194>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d10e      	bne.n	800192e <HAL_ADC_Start+0x126>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d107      	bne.n	800192e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800192c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_ADC_Start+0x190>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	d120      	bne.n	800197c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <HAL_ADC_Start+0x198>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d11b      	bne.n	800197c <HAL_ADC_Start+0x174>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d114      	bne.n	800197c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	e00b      	b.n	800197c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f043 0210 	orr.w	r2, r3, #16
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000
 8001990:	431bde83 	.word	0x431bde83
 8001994:	fffff8fe 	.word	0xfffff8fe
 8001998:	40012300 	.word	0x40012300
 800199c:	40012000 	.word	0x40012000
 80019a0:	40012200 	.word	0x40012200

080019a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x1c>
 80019d8:	2302      	movs	r3, #2
 80019da:	e136      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x28a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	d93a      	bls.n	8001a62 <HAL_ADC_ConfigChannel+0xa2>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019f4:	d035      	beq.n	8001a62 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68d9      	ldr	r1, [r3, #12]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b1e      	subs	r3, #30
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	400a      	ands	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a8d      	ldr	r2, [pc, #564]	; (8001c58 <HAL_ADC_ConfigChannel+0x298>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10a      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68d9      	ldr	r1, [r3, #12]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	061a      	lsls	r2, r3, #24
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a3a:	e035      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68d9      	ldr	r1, [r3, #12]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	4603      	mov	r3, r0
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4403      	add	r3, r0
 8001a54:	3b1e      	subs	r3, #30
 8001a56:	409a      	lsls	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a60:	e022      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6919      	ldr	r1, [r3, #16]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	2207      	movs	r2, #7
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43da      	mvns	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	400a      	ands	r2, r1
 8001a84:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6919      	ldr	r1, [r3, #16]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	4603      	mov	r3, r0
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4403      	add	r3, r0
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b06      	cmp	r3, #6
 8001aae:	d824      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b05      	subs	r3, #5
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	400a      	ands	r2, r1
 8001ad0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b05      	subs	r3, #5
 8001aec:	fa00 f203 	lsl.w	r2, r0, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
 8001af8:	e04c      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d824      	bhi.n	8001b4c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3b23      	subs	r3, #35	; 0x23
 8001b14:	221f      	movs	r2, #31
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	400a      	ands	r2, r1
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	4618      	mov	r0, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b23      	subs	r3, #35	; 0x23
 8001b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
 8001b4a:	e023      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b41      	subs	r3, #65	; 0x41
 8001b5e:	221f      	movs	r2, #31
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43da      	mvns	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	3b41      	subs	r3, #65	; 0x41
 8001b88:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a30      	ldr	r2, [pc, #192]	; (8001c5c <HAL_ADC_ConfigChannel+0x29c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1f4>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ba6:	d105      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001bb2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a28      	ldr	r2, [pc, #160]	; (8001c5c <HAL_ADC_ConfigChannel+0x29c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d10f      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x21e>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b12      	cmp	r3, #18
 8001bc4:	d10b      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bcc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bd0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bdc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <HAL_ADC_ConfigChannel+0x29c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d12b      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x280>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_ADC_ConfigChannel+0x298>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <HAL_ADC_ConfigChannel+0x23a>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b11      	cmp	r3, #17
 8001bf8:	d122      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c00:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c04:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4a15      	ldr	r2, [pc, #84]	; (8001c60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c10:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <HAL_ADC_ConfigChannel+0x298>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d111      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_ADC_ConfigChannel+0x2a4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_ADC_ConfigChannel+0x2a8>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	0c9a      	lsrs	r2, r3, #18
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c32:	e002      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f9      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	10000012 	.word	0x10000012
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	40012300 	.word	0x40012300
 8001c64:	20000000 	.word	0x20000000
 8001c68:	431bde83 	.word	0x431bde83

08001c6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c74:	4b78      	ldr	r3, [pc, #480]	; (8001e58 <ADC_Init+0x1ec>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a77      	ldr	r2, [pc, #476]	; (8001e58 <ADC_Init+0x1ec>)
 8001c7a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c7e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001c80:	4b75      	ldr	r3, [pc, #468]	; (8001e58 <ADC_Init+0x1ec>)
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4973      	ldr	r1, [pc, #460]	; (8001e58 <ADC_Init+0x1ec>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	021a      	lsls	r2, r3, #8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6899      	ldr	r1, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	4a58      	ldr	r2, [pc, #352]	; (8001e5c <ADC_Init+0x1f0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d022      	beq.n	8001d46 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6899      	ldr	r1, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6899      	ldr	r1, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	e00f      	b.n	8001d66 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0202 	bic.w	r2, r2, #2
 8001d74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6899      	ldr	r1, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	005a      	lsls	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01b      	beq.n	8001dcc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001da2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001db2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6859      	ldr	r1, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	035a      	lsls	r2, r3, #13
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	e007      	b.n	8001ddc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	051a      	lsls	r2, r3, #20
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e1e:	025a      	lsls	r2, r3, #9
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6899      	ldr	r1, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	029a      	lsls	r2, r3, #10
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40012300 	.word	0x40012300
 8001e5c:	0f000001 	.word	0x0f000001

08001e60 <__NVIC_SetPriorityGrouping>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <__NVIC_SetPriorityGrouping+0x40>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8e:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <__NVIC_SetPriorityGrouping+0x40>)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	60d3      	str	r3, [r2, #12]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00
 8001ea4:	05fa0000 	.word	0x05fa0000

08001ea8 <__NVIC_GetPriorityGrouping>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <__NVIC_EnableIRQ+0x38>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ff4c 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe2:	f7ff ff61 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 8001fe6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	6978      	ldr	r0, [r7, #20]
 8001fee:	f7ff ffb1 	bl	8001f54 <NVIC_EncodePriority>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ff80 	bl	8001f00 <__NVIC_SetPriority>
}
 8002000:	bf00      	nop
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff54 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e175      	b.n	8002330 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8164 	bne.w	800232a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d005      	beq.n	800207a <HAL_GPIO_Init+0x56>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d130      	bne.n	80020dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 0201 	and.w	r2, r3, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d017      	beq.n	8002118 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d123      	bne.n	800216c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	69b9      	ldr	r1, [r7, #24]
 8002168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80be 	beq.w	800232a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	4b66      	ldr	r3, [pc, #408]	; (8002348 <HAL_GPIO_Init+0x324>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a65      	ldr	r2, [pc, #404]	; (8002348 <HAL_GPIO_Init+0x324>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <HAL_GPIO_Init+0x324>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021c6:	4a61      	ldr	r2, [pc, #388]	; (800234c <HAL_GPIO_Init+0x328>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a58      	ldr	r2, [pc, #352]	; (8002350 <HAL_GPIO_Init+0x32c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d037      	beq.n	8002262 <HAL_GPIO_Init+0x23e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a57      	ldr	r2, [pc, #348]	; (8002354 <HAL_GPIO_Init+0x330>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d031      	beq.n	800225e <HAL_GPIO_Init+0x23a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a56      	ldr	r2, [pc, #344]	; (8002358 <HAL_GPIO_Init+0x334>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02b      	beq.n	800225a <HAL_GPIO_Init+0x236>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a55      	ldr	r2, [pc, #340]	; (800235c <HAL_GPIO_Init+0x338>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d025      	beq.n	8002256 <HAL_GPIO_Init+0x232>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a54      	ldr	r2, [pc, #336]	; (8002360 <HAL_GPIO_Init+0x33c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01f      	beq.n	8002252 <HAL_GPIO_Init+0x22e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a53      	ldr	r2, [pc, #332]	; (8002364 <HAL_GPIO_Init+0x340>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d019      	beq.n	800224e <HAL_GPIO_Init+0x22a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a52      	ldr	r2, [pc, #328]	; (8002368 <HAL_GPIO_Init+0x344>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_GPIO_Init+0x226>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a51      	ldr	r2, [pc, #324]	; (800236c <HAL_GPIO_Init+0x348>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00d      	beq.n	8002246 <HAL_GPIO_Init+0x222>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a50      	ldr	r2, [pc, #320]	; (8002370 <HAL_GPIO_Init+0x34c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <HAL_GPIO_Init+0x21e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4f      	ldr	r2, [pc, #316]	; (8002374 <HAL_GPIO_Init+0x350>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_GPIO_Init+0x21a>
 800223a:	2309      	movs	r3, #9
 800223c:	e012      	b.n	8002264 <HAL_GPIO_Init+0x240>
 800223e:	230a      	movs	r3, #10
 8002240:	e010      	b.n	8002264 <HAL_GPIO_Init+0x240>
 8002242:	2308      	movs	r3, #8
 8002244:	e00e      	b.n	8002264 <HAL_GPIO_Init+0x240>
 8002246:	2307      	movs	r3, #7
 8002248:	e00c      	b.n	8002264 <HAL_GPIO_Init+0x240>
 800224a:	2306      	movs	r3, #6
 800224c:	e00a      	b.n	8002264 <HAL_GPIO_Init+0x240>
 800224e:	2305      	movs	r3, #5
 8002250:	e008      	b.n	8002264 <HAL_GPIO_Init+0x240>
 8002252:	2304      	movs	r3, #4
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x240>
 8002256:	2303      	movs	r3, #3
 8002258:	e004      	b.n	8002264 <HAL_GPIO_Init+0x240>
 800225a:	2302      	movs	r3, #2
 800225c:	e002      	b.n	8002264 <HAL_GPIO_Init+0x240>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_GPIO_Init+0x240>
 8002262:	2300      	movs	r3, #0
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f002 0203 	and.w	r2, r2, #3
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	4093      	lsls	r3, r2
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002274:	4935      	ldr	r1, [pc, #212]	; (800234c <HAL_GPIO_Init+0x328>)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	3302      	adds	r3, #2
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002282:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <HAL_GPIO_Init+0x354>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a6:	4a34      	ldr	r2, [pc, #208]	; (8002378 <HAL_GPIO_Init+0x354>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ac:	4b32      	ldr	r3, [pc, #200]	; (8002378 <HAL_GPIO_Init+0x354>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d0:	4a29      	ldr	r2, [pc, #164]	; (8002378 <HAL_GPIO_Init+0x354>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d6:	4b28      	ldr	r3, [pc, #160]	; (8002378 <HAL_GPIO_Init+0x354>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022fa:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <HAL_GPIO_Init+0x354>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_GPIO_Init+0x354>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <HAL_GPIO_Init+0x354>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	f67f ae86 	bls.w	8002044 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3724      	adds	r7, #36	; 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	40013800 	.word	0x40013800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021000 	.word	0x40021000
 8002364:	40021400 	.word	0x40021400
 8002368:	40021800 	.word	0x40021800
 800236c:	40021c00 	.word	0x40021c00
 8002370:	40022000 	.word	0x40022000
 8002374:	40022400 	.word	0x40022400
 8002378:	40013c00 	.word	0x40013c00

0800237c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e001      	b.n	800239e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023c8:	e003      	b.n	80023d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	041a      	lsls	r2, r3, #16
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023f0:	887a      	ldrh	r2, [r7, #2]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	041a      	lsls	r2, r3, #16
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43d9      	mvns	r1, r3
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	400b      	ands	r3, r1
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fc3c 	bl	8000cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40013c00 	.word	0x40013c00

08002444 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002446:	b08f      	sub	sp, #60	; 0x3c
 8002448:	af0a      	add	r7, sp, #40	; 0x28
 800244a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e116      	b.n	8002684 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7fe ff45 	bl	8001300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2203      	movs	r2, #3
 800247a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f002 ff77 	bl	8005388 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	687e      	ldr	r6, [r7, #4]
 80024a2:	466d      	mov	r5, sp
 80024a4:	f106 0410 	add.w	r4, r6, #16
 80024a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80024b8:	1d33      	adds	r3, r6, #4
 80024ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024bc:	6838      	ldr	r0, [r7, #0]
 80024be:	f002 ff0b 	bl	80052d8 <USB_CoreInit>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0d7      	b.n	8002684 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 ff65 	bl	80053aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e04a      	b.n	800257c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	333d      	adds	r3, #61	; 0x3d
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	333c      	adds	r3, #60	; 0x3c
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	b298      	uxth	r0, r3
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3344      	adds	r3, #68	; 0x44
 8002522:	4602      	mov	r2, r0
 8002524:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3340      	adds	r3, #64	; 0x40
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3348      	adds	r3, #72	; 0x48
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	334c      	adds	r3, #76	; 0x4c
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	3354      	adds	r3, #84	; 0x54
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	3301      	adds	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	429a      	cmp	r2, r3
 8002584:	d3af      	bcc.n	80024e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e044      	b.n	8002616 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	3301      	adds	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	d3b5      	bcc.n	800258c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	687e      	ldr	r6, [r7, #4]
 8002628:	466d      	mov	r5, sp
 800262a:	f106 0410 	add.w	r4, r6, #16
 800262e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800263a:	e885 0003 	stmia.w	r5, {r0, r1}
 800263e:	1d33      	adds	r3, r6, #4
 8002640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002642:	6838      	ldr	r0, [r7, #0]
 8002644:	f002 fefe 	bl	8005444 <USB_DevInit>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e014      	b.n	8002684 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	2b01      	cmp	r3, #1
 8002670:	d102      	bne.n	8002678 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f80a 	bl	800268c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f003 f8bc 	bl	80057fa <USB_DevDisconnect>

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800268c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	10000003 	.word	0x10000003

080026d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40007000 	.word	0x40007000

080026f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	4b23      	ldr	r3, [pc, #140]	; (800278c <HAL_PWREx_EnableOverDrive+0x98>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <HAL_PWREx_EnableOverDrive+0x98>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_PWREx_EnableOverDrive+0x98>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002722:	f7fe fffd 	bl	8001720 <HAL_GetTick>
 8002726:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002728:	e009      	b.n	800273e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800272a:	f7fe fff9 	bl	8001720 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002738:	d901      	bls.n	800273e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e022      	b.n	8002784 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274a:	d1ee      	bne.n	800272a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002756:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002758:	f7fe ffe2 	bl	8001720 <HAL_GetTick>
 800275c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800275e:	e009      	b.n	8002774 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002760:	f7fe ffde 	bl	8001720 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800276e:	d901      	bls.n	8002774 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e007      	b.n	8002784 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002780:	d1ee      	bne.n	8002760 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000

08002794 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e29b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8087 	beq.w	80028c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b8:	4b96      	ldr	r3, [pc, #600]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d00c      	beq.n	80027de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c4:	4b93      	ldr	r3, [pc, #588]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d112      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62>
 80027d0:	4b90      	ldr	r3, [pc, #576]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027dc:	d10b      	bne.n	80027f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027de:	4b8d      	ldr	r3, [pc, #564]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d06c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x130>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d168      	bne.n	80028c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e275      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x7a>
 8002800:	4b84      	ldr	r3, [pc, #528]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a83      	ldr	r2, [pc, #524]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	e02e      	b.n	800286c <HAL_RCC_OscConfig+0xd8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x9c>
 8002816:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7e      	ldr	r2, [pc, #504]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800281c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b7c      	ldr	r3, [pc, #496]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a7b      	ldr	r2, [pc, #492]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xd8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0xc0>
 800283a:	4b76      	ldr	r3, [pc, #472]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a75      	ldr	r2, [pc, #468]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b73      	ldr	r3, [pc, #460]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a72      	ldr	r2, [pc, #456]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xd8>
 8002854:	4b6f      	ldr	r3, [pc, #444]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6e      	ldr	r2, [pc, #440]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b6c      	ldr	r3, [pc, #432]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a6b      	ldr	r2, [pc, #428]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe ff54 	bl	8001720 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe ff50 	bl	8001720 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e229      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xe8>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe ff40 	bl	8001720 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe ff3c 	bl	8001720 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e215      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x110>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d069      	beq.n	80029a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028d2:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028de:	4b4d      	ldr	r3, [pc, #308]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x190>
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x17a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1e9      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	493d      	ldr	r1, [pc, #244]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e040      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d023      	beq.n	8002974 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b39      	ldr	r3, [pc, #228]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a38      	ldr	r2, [pc, #224]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fef2 	bl	8001720 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002940:	f7fe feee 	bl	8001720 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1c7      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4929      	ldr	r1, [pc, #164]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
 8002972:	e018      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fece 	bl	8001720 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002988:	f7fe feca 	bl	8001720 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e1a3      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d038      	beq.n	8002a24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d019      	beq.n	80029ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029be:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7fe feab 	bl	8001720 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ce:	f7fe fea7 	bl	8001720 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e180      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x23a>
 80029ec:	e01a      	b.n	8002a24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fe fe91 	bl	8001720 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe fe8d 	bl	8001720 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d903      	bls.n	8002a18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e166      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
 8002a14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	4b92      	ldr	r3, [pc, #584]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ee      	bne.n	8002a02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80a4 	beq.w	8002b7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a32:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10d      	bne.n	8002a5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b89      	ldr	r3, [pc, #548]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a88      	ldr	r2, [pc, #544]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4a:	4b86      	ldr	r3, [pc, #536]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a56:	2301      	movs	r3, #1
 8002a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5a:	4b83      	ldr	r3, [pc, #524]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d118      	bne.n	8002a98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a66:	4b80      	ldr	r3, [pc, #512]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a7f      	ldr	r2, [pc, #508]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a72:	f7fe fe55 	bl	8001720 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7a:	f7fe fe51 	bl	8001720 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	; 0x64
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e12a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8c:	4b76      	ldr	r3, [pc, #472]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x31a>
 8002aa0:	4b70      	ldr	r3, [pc, #448]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	4a6f      	ldr	r2, [pc, #444]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002aac:	e02d      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x33c>
 8002ab6:	4b6b      	ldr	r3, [pc, #428]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a6a      	ldr	r2, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac2:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	4a67      	ldr	r2, [pc, #412]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	f023 0304 	bic.w	r3, r3, #4
 8002acc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ace:	e01c      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x35e>
 8002ad8:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a61      	ldr	r2, [pc, #388]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae4:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a5e      	ldr	r2, [pc, #376]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	e00b      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
 8002af2:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a5b      	ldr	r2, [pc, #364]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d015      	beq.n	8002b3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b12:	f7fe fe05 	bl	8001720 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1a:	f7fe fe01 	bl	8001720 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e0d8      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ee      	beq.n	8002b1a <HAL_RCC_OscConfig+0x386>
 8002b3c:	e014      	b.n	8002b68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fdef 	bl	8001720 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7fe fdeb 	bl	8001720 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0c2      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5c:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ee      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a3c      	ldr	r2, [pc, #240]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80ae 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d06d      	beq.n	8002c6c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d14b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a31      	ldr	r2, [pc, #196]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fdbc 	bl	8001720 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fdb8 	bl	8001720 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e091      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	071b      	lsls	r3, r3, #28
 8002bf6:	491b      	ldr	r1, [pc, #108]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fd8a 	bl	8001720 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe fd86 	bl	8001720 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e05f      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x47c>
 8002c2e:	e057      	b.n	8002ce0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fd70 	bl	8001720 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe fd6c 	bl	8001720 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e045      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <HAL_RCC_OscConfig+0x4d0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4b0>
 8002c62:	e03d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x54c>
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <HAL_RCC_OscConfig+0x558>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d030      	beq.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d129      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d122      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ca2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d119      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d10f      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0d0      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d08:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d910      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b67      	ldr	r3, [pc, #412]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 020f 	bic.w	r2, r3, #15
 8002d1e:	4965      	ldr	r1, [pc, #404]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0b8      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d50:	4b59      	ldr	r3, [pc, #356]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d68:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	494d      	ldr	r1, [pc, #308]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d040      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d115      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e07f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db2:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e073      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06b      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd2:	4b39      	ldr	r3, [pc, #228]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4936      	ldr	r1, [pc, #216]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de4:	f7fe fc9c 	bl	8001720 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fe fc98 	bl	8001720 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e053      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 020c 	and.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1eb      	bne.n	8002dec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d210      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 020f 	bic.w	r2, r3, #15
 8002e2a:	4922      	ldr	r1, [pc, #136]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e032      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4916      	ldr	r1, [pc, #88]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	490e      	ldr	r1, [pc, #56]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e82:	f000 f821 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	490a      	ldr	r1, [pc, #40]	; (8002ebc <HAL_RCC_ClockConfig+0x1cc>)
 8002e94:	5ccb      	ldrb	r3, [r1, r3]
 8002e96:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9a:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_RCC_ClockConfig+0x1d4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe faa6 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023c00 	.word	0x40023c00
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	0800a030 	.word	0x0800a030
 8002ec0:	20000000 	.word	0x20000000
 8002ec4:	20000004 	.word	0x20000004

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ecc:	b090      	sub	sp, #64	; 0x40
 8002ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed8:	2300      	movs	r3, #0
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee0:	4b59      	ldr	r3, [pc, #356]	; (8003048 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d00d      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x40>
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	f200 80a1 	bhi.w	8003034 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x34>
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002efa:	e09b      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b53      	ldr	r3, [pc, #332]	; (800304c <HAL_RCC_GetSysClockFreq+0x184>)
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f00:	e09b      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f02:	4b53      	ldr	r3, [pc, #332]	; (8003050 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f06:	e098      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f08:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f10:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f12:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d028      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	2200      	movs	r2, #0
 8002f26:	623b      	str	r3, [r7, #32]
 8002f28:	627a      	str	r2, [r7, #36]	; 0x24
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f30:	2100      	movs	r1, #0
 8002f32:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f34:	fb03 f201 	mul.w	r2, r3, r1
 8002f38:	2300      	movs	r3, #0
 8002f3a:	fb00 f303 	mul.w	r3, r0, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	4a43      	ldr	r2, [pc, #268]	; (8003050 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f42:	fba0 1202 	umull	r1, r2, r0, r2
 8002f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f48:	460a      	mov	r2, r1
 8002f4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f4e:	4413      	add	r3, r2
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f54:	2200      	movs	r2, #0
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	61fa      	str	r2, [r7, #28]
 8002f5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f62:	f7fd f975 	bl	8000250 <__aeabi_uldivmod>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6e:	e053      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f70:	4b35      	ldr	r3, [pc, #212]	; (8003048 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	099b      	lsrs	r3, r3, #6
 8002f76:	2200      	movs	r2, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	617a      	str	r2, [r7, #20]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f82:	f04f 0b00 	mov.w	fp, #0
 8002f86:	4652      	mov	r2, sl
 8002f88:	465b      	mov	r3, fp
 8002f8a:	f04f 0000 	mov.w	r0, #0
 8002f8e:	f04f 0100 	mov.w	r1, #0
 8002f92:	0159      	lsls	r1, r3, #5
 8002f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f98:	0150      	lsls	r0, r2, #5
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	ebb2 080a 	subs.w	r8, r2, sl
 8002fa2:	eb63 090b 	sbc.w	r9, r3, fp
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fba:	ebb2 0408 	subs.w	r4, r2, r8
 8002fbe:	eb63 0509 	sbc.w	r5, r3, r9
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	00eb      	lsls	r3, r5, #3
 8002fcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd0:	00e2      	lsls	r2, r4, #3
 8002fd2:	4614      	mov	r4, r2
 8002fd4:	461d      	mov	r5, r3
 8002fd6:	eb14 030a 	adds.w	r3, r4, sl
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	eb45 030b 	adc.w	r3, r5, fp
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fee:	4629      	mov	r1, r5
 8002ff0:	028b      	lsls	r3, r1, #10
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	028a      	lsls	r2, r1, #10
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003002:	2200      	movs	r2, #0
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	60fa      	str	r2, [r7, #12]
 8003008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800300c:	f7fd f920 	bl	8000250 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4613      	mov	r3, r2
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_GetSysClockFreq+0x180>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	3301      	adds	r3, #1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003032:	e002      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetSysClockFreq+0x184>)
 8003036:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800303c:	4618      	mov	r0, r3
 800303e:	3740      	adds	r7, #64	; 0x40
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	00f42400 	.word	0x00f42400
 8003050:	017d7840 	.word	0x017d7840

08003054 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_RCC_GetHCLKFreq+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000000 	.word	0x20000000

0800306c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003070:	f7ff fff0 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0a9b      	lsrs	r3, r3, #10
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4903      	ldr	r1, [pc, #12]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	0800a040 	.word	0x0800a040

08003094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003098:	f7ff ffdc 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0b5b      	lsrs	r3, r3, #13
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4903      	ldr	r1, [pc, #12]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	0800a040 	.word	0x0800a040

080030bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	220f      	movs	r2, #15
 80030ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_RCC_GetClockConfig+0x5c>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <HAL_RCC_GetClockConfig+0x5c>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <HAL_RCC_GetClockConfig+0x5c>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_GetClockConfig+0x5c>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	08db      	lsrs	r3, r3, #3
 80030f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <HAL_RCC_GetClockConfig+0x60>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 020f 	and.w	r2, r3, #15
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	601a      	str	r2, [r3, #0]
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	40023c00 	.word	0x40023c00

08003120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d012      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003148:	4b69      	ldr	r3, [pc, #420]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a68      	ldr	r2, [pc, #416]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003152:	6093      	str	r3, [r2, #8]
 8003154:	4b66      	ldr	r3, [pc, #408]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315c:	4964      	ldr	r1, [pc, #400]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800316a:	2301      	movs	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d017      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800317a:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003188:	4959      	ldr	r1, [pc, #356]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003198:	d101      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800319a:	2301      	movs	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031a6:	2301      	movs	r3, #1
 80031a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d017      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031b6:	4b4e      	ldr	r3, [pc, #312]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	494a      	ldr	r1, [pc, #296]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d4:	d101      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 808b 	beq.w	800331a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003204:	4b3a      	ldr	r3, [pc, #232]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	4a39      	ldr	r2, [pc, #228]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	; 0x40
 8003210:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800321c:	4b35      	ldr	r3, [pc, #212]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a34      	ldr	r2, [pc, #208]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003228:	f7fe fa7a 	bl	8001720 <HAL_GetTick>
 800322c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fe fa76 	bl	8001720 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e38f      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003242:	4b2c      	ldr	r3, [pc, #176]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800324e:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d035      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	429a      	cmp	r2, r3
 800326a:	d02e      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800326c:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003274:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003276:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003282:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003294:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d114      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe fa3e 	bl	8001720 <HAL_GetTick>
 80032a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a6:	e00a      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7fe fa3a 	bl	8001720 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e351      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032be:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ee      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d6:	d111      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032e6:	400b      	ands	r3, r1
 80032e8:	4901      	ldr	r1, [pc, #4]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
 80032ee:	e00b      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40007000 	.word	0x40007000
 80032f8:	0ffffcff 	.word	0x0ffffcff
 80032fc:	4bac      	ldr	r3, [pc, #688]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4aab      	ldr	r2, [pc, #684]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003302:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003306:	6093      	str	r3, [r2, #8]
 8003308:	4ba9      	ldr	r3, [pc, #676]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800330a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003314:	49a6      	ldr	r1, [pc, #664]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003316:	4313      	orrs	r3, r2
 8003318:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003326:	4ba2      	ldr	r3, [pc, #648]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800332c:	4aa0      	ldr	r2, [pc, #640]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003332:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003336:	4b9e      	ldr	r3, [pc, #632]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003338:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	499b      	ldr	r1, [pc, #620]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003354:	4b96      	ldr	r3, [pc, #600]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003362:	4993      	ldr	r1, [pc, #588]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003376:	4b8e      	ldr	r3, [pc, #568]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003384:	498a      	ldr	r1, [pc, #552]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003398:	4b85      	ldr	r3, [pc, #532]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a6:	4982      	ldr	r1, [pc, #520]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ba:	4b7d      	ldr	r3, [pc, #500]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	4979      	ldr	r1, [pc, #484]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033dc:	4b74      	ldr	r3, [pc, #464]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4971      	ldr	r1, [pc, #452]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033fe:	4b6c      	ldr	r3, [pc, #432]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003404:	f023 020c 	bic.w	r2, r3, #12
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340c:	4968      	ldr	r1, [pc, #416]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003420:	4b63      	ldr	r3, [pc, #396]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342e:	4960      	ldr	r1, [pc, #384]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003442:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003450:	4957      	ldr	r1, [pc, #348]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003464:	4b52      	ldr	r3, [pc, #328]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	494f      	ldr	r1, [pc, #316]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003486:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	4946      	ldr	r1, [pc, #280]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034a8:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	493e      	ldr	r1, [pc, #248]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034ca:	4b39      	ldr	r3, [pc, #228]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	4935      	ldr	r1, [pc, #212]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034ec:	4b30      	ldr	r3, [pc, #192]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fa:	492d      	ldr	r1, [pc, #180]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d011      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800350e:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351c:	4924      	ldr	r1, [pc, #144]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352c:	d101      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800352e:	2301      	movs	r3, #1
 8003530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800353e:	2301      	movs	r3, #1
 8003540:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	4914      	ldr	r1, [pc, #80]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003580:	490b      	ldr	r1, [pc, #44]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00f      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a4:	4902      	ldr	r1, [pc, #8]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035ac:	e002      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00b      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035c0:	4b8a      	ldr	r3, [pc, #552]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	4986      	ldr	r1, [pc, #536]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00b      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035e4:	4b81      	ldr	r3, [pc, #516]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f4:	497d      	ldr	r1, [pc, #500]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d006      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80d6 	beq.w	80037bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003610:	4b76      	ldr	r3, [pc, #472]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a75      	ldr	r2, [pc, #468]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800361a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361c:	f7fe f880 	bl	8001720 <HAL_GetTick>
 8003620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003624:	f7fe f87c 	bl	8001720 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e195      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003636:	4b6d      	ldr	r3, [pc, #436]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d021      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11d      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003656:	4b65      	ldr	r3, [pc, #404]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366a:	0e1b      	lsrs	r3, r3, #24
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	019a      	lsls	r2, r3, #6
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	041b      	lsls	r3, r3, #16
 800367c:	431a      	orrs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	071b      	lsls	r3, r3, #28
 800368a:	4958      	ldr	r1, [pc, #352]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d004      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d02e      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036bc:	d129      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036be:	4b4b      	ldr	r3, [pc, #300]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036cc:	4b47      	ldr	r3, [pc, #284]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d2:	0f1b      	lsrs	r3, r3, #28
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	019a      	lsls	r2, r3, #6
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	061b      	lsls	r3, r3, #24
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	071b      	lsls	r3, r3, #28
 80036f2:	493e      	ldr	r1, [pc, #248]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036fa:	4b3c      	ldr	r3, [pc, #240]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003700:	f023 021f 	bic.w	r2, r3, #31
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	3b01      	subs	r3, #1
 800370a:	4938      	ldr	r1, [pc, #224]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01d      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800371e:	4b33      	ldr	r3, [pc, #204]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003724:	0e1b      	lsrs	r3, r3, #24
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800372c:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003732:	0f1b      	lsrs	r3, r3, #28
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	019a      	lsls	r2, r3, #6
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	431a      	orrs	r2, r3
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	4926      	ldr	r1, [pc, #152]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d011      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	019a      	lsls	r2, r3, #6
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	071b      	lsls	r3, r3, #28
 8003782:	491a      	ldr	r1, [pc, #104]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800378a:	4b18      	ldr	r3, [pc, #96]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a17      	ldr	r2, [pc, #92]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003790:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003796:	f7fd ffc3 	bl	8001720 <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800379e:	f7fd ffbf 	bl	8001720 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b64      	cmp	r3, #100	; 0x64
 80037aa:	d901      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0d8      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037b0:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	f040 80ce 	bne.w	8003960 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a08      	ldr	r2, [pc, #32]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7fd ffa6 	bl	8001720 <HAL_GetTick>
 80037d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037d6:	e00b      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037d8:	f7fd ffa2 	bl	8001720 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d904      	bls.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0bb      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037f0:	4b5e      	ldr	r3, [pc, #376]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037fc:	d0ec      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800381a:	2b00      	cmp	r3, #0
 800381c:	d02e      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d12a      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003826:	4b51      	ldr	r3, [pc, #324]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	0c1b      	lsrs	r3, r3, #16
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003834:	4b4d      	ldr	r3, [pc, #308]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	0f1b      	lsrs	r3, r3, #28
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	019a      	lsls	r2, r3, #6
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	431a      	orrs	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	071b      	lsls	r3, r3, #28
 800385a:	4944      	ldr	r1, [pc, #272]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003862:	4b42      	ldr	r3, [pc, #264]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003868:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	3b01      	subs	r3, #1
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	493d      	ldr	r1, [pc, #244]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d022      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800388c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003890:	d11d      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003892:	4b36      	ldr	r3, [pc, #216]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	0e1b      	lsrs	r3, r3, #24
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038a0:	4b32      	ldr	r3, [pc, #200]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	0f1b      	lsrs	r3, r3, #28
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	019a      	lsls	r2, r3, #6
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	431a      	orrs	r2, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	061b      	lsls	r3, r3, #24
 80038c0:	431a      	orrs	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	071b      	lsls	r3, r3, #28
 80038c6:	4929      	ldr	r1, [pc, #164]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d028      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038da:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	0e1b      	lsrs	r3, r3, #24
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038e8:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	019a      	lsls	r2, r3, #6
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	431a      	orrs	r2, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	071b      	lsls	r3, r3, #28
 800390e:	4917      	ldr	r1, [pc, #92]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	4911      	ldr	r1, [pc, #68]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0e      	ldr	r2, [pc, #56]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003938:	f7fd fef2 	bl	8001720 <HAL_GetTick>
 800393c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003940:	f7fd feee 	bl	8001720 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	; 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e007      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800395a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395e:	d1ef      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800

08003970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e049      	b.n	8003a16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd fbe0 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 fc66 	bl	8004280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d001      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e054      	b.n	8003ae2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a26      	ldr	r2, [pc, #152]	; (8003af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d022      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a62:	d01d      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a22      	ldr	r2, [pc, #136]	; (8003af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d018      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a21      	ldr	r2, [pc, #132]	; (8003af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1f      	ldr	r2, [pc, #124]	; (8003afc <HAL_TIM_Base_Start_IT+0xdc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00e      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1e      	ldr	r2, [pc, #120]	; (8003b00 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d004      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d115      	bne.n	8003acc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_TIM_Base_Start_IT+0xec>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b06      	cmp	r3, #6
 8003ab0:	d015      	beq.n	8003ade <HAL_TIM_Base_Start_IT+0xbe>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab8:	d011      	beq.n	8003ade <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aca:	e008      	b.n	8003ade <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	e000      	b.n	8003ae0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ade:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800
 8003afc:	40000c00 	.word	0x40000c00
 8003b00:	40010400 	.word	0x40010400
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40001800 	.word	0x40001800
 8003b0c:	00010007 	.word	0x00010007

08003b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e049      	b.n	8003bb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f841 	bl	8003bbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f000 fb96 	bl	8004280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <HAL_TIM_PWM_Start+0x24>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e03c      	b.n	8003c72 <HAL_TIM_PWM_Start+0x9e>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d109      	bne.n	8003c12 <HAL_TIM_PWM_Start+0x3e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	e02f      	b.n	8003c72 <HAL_TIM_PWM_Start+0x9e>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d109      	bne.n	8003c2c <HAL_TIM_PWM_Start+0x58>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	bf14      	ite	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	2300      	moveq	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e022      	b.n	8003c72 <HAL_TIM_PWM_Start+0x9e>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	d109      	bne.n	8003c46 <HAL_TIM_PWM_Start+0x72>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	bf14      	ite	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	2300      	moveq	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	e015      	b.n	8003c72 <HAL_TIM_PWM_Start+0x9e>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d109      	bne.n	8003c60 <HAL_TIM_PWM_Start+0x8c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e008      	b.n	8003c72 <HAL_TIM_PWM_Start+0x9e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	bf14      	ite	ne
 8003c6c:	2301      	movne	r3, #1
 8003c6e:	2300      	moveq	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e092      	b.n	8003da0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_PWM_Start+0xb6>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c88:	e023      	b.n	8003cd2 <HAL_TIM_PWM_Start+0xfe>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIM_PWM_Start+0xc6>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c98:	e01b      	b.n	8003cd2 <HAL_TIM_PWM_Start+0xfe>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d104      	bne.n	8003caa <HAL_TIM_PWM_Start+0xd6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca8:	e013      	b.n	8003cd2 <HAL_TIM_PWM_Start+0xfe>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_PWM_Start+0xe6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cb8:	e00b      	b.n	8003cd2 <HAL_TIM_PWM_Start+0xfe>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_PWM_Start+0xf6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc8:	e003      	b.n	8003cd2 <HAL_TIM_PWM_Start+0xfe>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fdce 	bl	800487c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a30      	ldr	r2, [pc, #192]	; (8003da8 <HAL_TIM_PWM_Start+0x1d4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIM_PWM_Start+0x120>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2f      	ldr	r2, [pc, #188]	; (8003dac <HAL_TIM_PWM_Start+0x1d8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d101      	bne.n	8003cf8 <HAL_TIM_PWM_Start+0x124>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_TIM_PWM_Start+0x126>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <HAL_TIM_PWM_Start+0x1d4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d022      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x18a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d01d      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x18a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a22      	ldr	r2, [pc, #136]	; (8003db0 <HAL_TIM_PWM_Start+0x1dc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d018      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x18a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a20      	ldr	r2, [pc, #128]	; (8003db4 <HAL_TIM_PWM_Start+0x1e0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x18a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <HAL_TIM_PWM_Start+0x1e4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00e      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x18a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <HAL_TIM_PWM_Start+0x1d8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d009      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x18a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_TIM_PWM_Start+0x1e8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d004      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x18a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a19      	ldr	r2, [pc, #100]	; (8003dc0 <HAL_TIM_PWM_Start+0x1ec>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d115      	bne.n	8003d8a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	4b17      	ldr	r3, [pc, #92]	; (8003dc4 <HAL_TIM_PWM_Start+0x1f0>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b06      	cmp	r3, #6
 8003d6e:	d015      	beq.n	8003d9c <HAL_TIM_PWM_Start+0x1c8>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d76:	d011      	beq.n	8003d9c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d88:	e008      	b.n	8003d9c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e000      	b.n	8003d9e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40010400 	.word	0x40010400
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40000c00 	.word	0x40000c00
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	40001800 	.word	0x40001800
 8003dc4:	00010007 	.word	0x00010007

08003dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d122      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d11b      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0202 	mvn.w	r2, #2
 8003df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fa1a 	bl	8004244 <HAL_TIM_IC_CaptureCallback>
 8003e10:	e005      	b.n	8003e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa0c 	bl	8004230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fa1d 	bl	8004258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d122      	bne.n	8003e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d11b      	bne.n	8003e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0204 	mvn.w	r2, #4
 8003e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f9f0 	bl	8004244 <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f9e2 	bl	8004230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f9f3 	bl	8004258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d122      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d11b      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0208 	mvn.w	r2, #8
 8003e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f9c6 	bl	8004244 <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f9b8 	bl	8004230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f9c9 	bl	8004258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d122      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d11b      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0210 	mvn.w	r2, #16
 8003ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f99c 	bl	8004244 <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f98e 	bl	8004230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f99f 	bl	8004258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d10e      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d107      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0201 	mvn.w	r2, #1
 8003f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fd f85a 	bl	8001000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b80      	cmp	r3, #128	; 0x80
 8003f58:	d10e      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f64:	2b80      	cmp	r3, #128	; 0x80
 8003f66:	d107      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fcb1 	bl	80048da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f86:	d10e      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f92:	2b80      	cmp	r3, #128	; 0x80
 8003f94:	d107      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fca4 	bl	80048ee <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d10e      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbe:	2b40      	cmp	r3, #64	; 0x40
 8003fc0:	d107      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f94d 	bl	800426c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d10e      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d107      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f06f 0220 	mvn.w	r2, #32
 8003ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fc64 	bl	80048c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004022:	2302      	movs	r3, #2
 8004024:	e0ff      	b.n	8004226 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b14      	cmp	r3, #20
 8004032:	f200 80f0 	bhi.w	8004216 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	08004091 	.word	0x08004091
 8004040:	08004217 	.word	0x08004217
 8004044:	08004217 	.word	0x08004217
 8004048:	08004217 	.word	0x08004217
 800404c:	080040d1 	.word	0x080040d1
 8004050:	08004217 	.word	0x08004217
 8004054:	08004217 	.word	0x08004217
 8004058:	08004217 	.word	0x08004217
 800405c:	08004113 	.word	0x08004113
 8004060:	08004217 	.word	0x08004217
 8004064:	08004217 	.word	0x08004217
 8004068:	08004217 	.word	0x08004217
 800406c:	08004153 	.word	0x08004153
 8004070:	08004217 	.word	0x08004217
 8004074:	08004217 	.word	0x08004217
 8004078:	08004217 	.word	0x08004217
 800407c:	08004195 	.word	0x08004195
 8004080:	08004217 	.word	0x08004217
 8004084:	08004217 	.word	0x08004217
 8004088:	08004217 	.word	0x08004217
 800408c:	080041d5 	.word	0x080041d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f992 	bl	80043c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0208 	orr.w	r2, r2, #8
 80040aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0204 	bic.w	r2, r2, #4
 80040ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6999      	ldr	r1, [r3, #24]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	619a      	str	r2, [r3, #24]
      break;
 80040ce:	e0a5      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f9e4 	bl	80044a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6999      	ldr	r1, [r3, #24]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	021a      	lsls	r2, r3, #8
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	619a      	str	r2, [r3, #24]
      break;
 8004110:	e084      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fa3b 	bl	8004594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0208 	orr.w	r2, r2, #8
 800412c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0204 	bic.w	r2, r2, #4
 800413c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69d9      	ldr	r1, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	61da      	str	r2, [r3, #28]
      break;
 8004150:	e064      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fa91 	bl	8004680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69d9      	ldr	r1, [r3, #28]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	021a      	lsls	r2, r3, #8
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	61da      	str	r2, [r3, #28]
      break;
 8004192:	e043      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fac8 	bl	8004730 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0208 	orr.w	r2, r2, #8
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041d2:	e023      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fafa 	bl	80047d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004214:	e002      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	75fb      	strb	r3, [r7, #23]
      break;
 800421a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004224:	7dfb      	ldrb	r3, [r7, #23]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop

08004230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a40      	ldr	r2, [pc, #256]	; (8004394 <TIM_Base_SetConfig+0x114>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d00f      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3d      	ldr	r2, [pc, #244]	; (8004398 <TIM_Base_SetConfig+0x118>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00b      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a3c      	ldr	r2, [pc, #240]	; (800439c <TIM_Base_SetConfig+0x11c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3b      	ldr	r2, [pc, #236]	; (80043a0 <TIM_Base_SetConfig+0x120>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a3a      	ldr	r2, [pc, #232]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d108      	bne.n	80042d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a2f      	ldr	r2, [pc, #188]	; (8004394 <TIM_Base_SetConfig+0x114>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02b      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d027      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2c      	ldr	r2, [pc, #176]	; (8004398 <TIM_Base_SetConfig+0x118>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d023      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2b      	ldr	r2, [pc, #172]	; (800439c <TIM_Base_SetConfig+0x11c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01f      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2a      	ldr	r2, [pc, #168]	; (80043a0 <TIM_Base_SetConfig+0x120>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01b      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a29      	ldr	r2, [pc, #164]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d017      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a28      	ldr	r2, [pc, #160]	; (80043a8 <TIM_Base_SetConfig+0x128>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <TIM_Base_SetConfig+0x12c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00f      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <TIM_Base_SetConfig+0x130>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00b      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a25      	ldr	r2, [pc, #148]	; (80043b4 <TIM_Base_SetConfig+0x134>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d007      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a24      	ldr	r2, [pc, #144]	; (80043b8 <TIM_Base_SetConfig+0x138>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d003      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a23      	ldr	r2, [pc, #140]	; (80043bc <TIM_Base_SetConfig+0x13c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d108      	bne.n	8004344 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <TIM_Base_SetConfig+0x114>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d103      	bne.n	8004380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	615a      	str	r2, [r3, #20]
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40010400 	.word	0x40010400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40014400 	.word	0x40014400
 80043b0:	40014800 	.word	0x40014800
 80043b4:	40001800 	.word	0x40001800
 80043b8:	40001c00 	.word	0x40001c00
 80043bc:	40002000 	.word	0x40002000

080043c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4b2b      	ldr	r3, [pc, #172]	; (8004498 <TIM_OC1_SetConfig+0xd8>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f023 0302 	bic.w	r3, r3, #2
 8004408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a21      	ldr	r2, [pc, #132]	; (800449c <TIM_OC1_SetConfig+0xdc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_OC1_SetConfig+0x64>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a20      	ldr	r2, [pc, #128]	; (80044a0 <TIM_OC1_SetConfig+0xe0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d10c      	bne.n	800443e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0308 	bic.w	r3, r3, #8
 800442a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 0304 	bic.w	r3, r3, #4
 800443c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a16      	ldr	r2, [pc, #88]	; (800449c <TIM_OC1_SetConfig+0xdc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_OC1_SetConfig+0x8e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <TIM_OC1_SetConfig+0xe0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d111      	bne.n	8004472 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	621a      	str	r2, [r3, #32]
}
 800448c:	bf00      	nop
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	fffeff8f 	.word	0xfffeff8f
 800449c:	40010000 	.word	0x40010000
 80044a0:	40010400 	.word	0x40010400

080044a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0210 	bic.w	r2, r3, #16
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4b2e      	ldr	r3, [pc, #184]	; (8004588 <TIM_OC2_SetConfig+0xe4>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0320 	bic.w	r3, r3, #32
 80044ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a23      	ldr	r2, [pc, #140]	; (800458c <TIM_OC2_SetConfig+0xe8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_OC2_SetConfig+0x68>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a22      	ldr	r2, [pc, #136]	; (8004590 <TIM_OC2_SetConfig+0xec>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d10d      	bne.n	8004528 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004526:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <TIM_OC2_SetConfig+0xe8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_OC2_SetConfig+0x94>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a17      	ldr	r2, [pc, #92]	; (8004590 <TIM_OC2_SetConfig+0xec>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d113      	bne.n	8004560 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800453e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	feff8fff 	.word	0xfeff8fff
 800458c:	40010000 	.word	0x40010000
 8004590:	40010400 	.word	0x40010400

08004594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <TIM_OC3_SetConfig+0xe0>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0303 	bic.w	r3, r3, #3
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a22      	ldr	r2, [pc, #136]	; (8004678 <TIM_OC3_SetConfig+0xe4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_OC3_SetConfig+0x66>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a21      	ldr	r2, [pc, #132]	; (800467c <TIM_OC3_SetConfig+0xe8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d10d      	bne.n	8004616 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <TIM_OC3_SetConfig+0xe4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_OC3_SetConfig+0x92>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a16      	ldr	r2, [pc, #88]	; (800467c <TIM_OC3_SetConfig+0xe8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d113      	bne.n	800464e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800462c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	621a      	str	r2, [r3, #32]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	fffeff8f 	.word	0xfffeff8f
 8004678:	40010000 	.word	0x40010000
 800467c:	40010400 	.word	0x40010400

08004680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <TIM_OC4_SetConfig+0xa4>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	031b      	lsls	r3, r3, #12
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a13      	ldr	r2, [pc, #76]	; (8004728 <TIM_OC4_SetConfig+0xa8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_OC4_SetConfig+0x68>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a12      	ldr	r2, [pc, #72]	; (800472c <TIM_OC4_SetConfig+0xac>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d109      	bne.n	80046fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	feff8fff 	.word	0xfeff8fff
 8004728:	40010000 	.word	0x40010000
 800472c:	40010400 	.word	0x40010400

08004730 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <TIM_OC5_SetConfig+0x98>)
 800475c:	4013      	ands	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004770:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a12      	ldr	r2, [pc, #72]	; (80047cc <TIM_OC5_SetConfig+0x9c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_OC5_SetConfig+0x5e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a11      	ldr	r2, [pc, #68]	; (80047d0 <TIM_OC5_SetConfig+0xa0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d109      	bne.n	80047a2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004794:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	fffeff8f 	.word	0xfffeff8f
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40010400 	.word	0x40010400

080047d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <TIM_OC6_SetConfig+0x9c>)
 8004800:	4013      	ands	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	051b      	lsls	r3, r3, #20
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a13      	ldr	r2, [pc, #76]	; (8004874 <TIM_OC6_SetConfig+0xa0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_OC6_SetConfig+0x60>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a12      	ldr	r2, [pc, #72]	; (8004878 <TIM_OC6_SetConfig+0xa4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d109      	bne.n	8004848 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	029b      	lsls	r3, r3, #10
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	feff8fff 	.word	0xfeff8fff
 8004874:	40010000 	.word	0x40010000
 8004878:	40010400 	.word	0x40010400

0800487c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	2201      	movs	r2, #1
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1a      	ldr	r2, [r3, #32]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	43db      	mvns	r3, r3
 800489e:	401a      	ands	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1a      	ldr	r2, [r3, #32]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	fa01 f303 	lsl.w	r3, r1, r3
 80048b4:	431a      	orrs	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e040      	b.n	8004996 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fc fc8b 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2224      	movs	r2, #36	; 0x24
 800492e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f8af 	bl	8004aa4 <UART_SetConfig>
 8004946:	4603      	mov	r3, r0
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e022      	b.n	8004996 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fb07 	bl	8004f6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800496c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800497c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fb8e 	bl	80050b0 <UART_CheckIdleState>
 8004994:	4603      	mov	r3, r0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b08a      	sub	sp, #40	; 0x28
 80049a2:	af02      	add	r7, sp, #8
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	4613      	mov	r3, r2
 80049ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d171      	bne.n	8004a9a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_UART_Transmit+0x24>
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e06a      	b.n	8004a9c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2221      	movs	r2, #33	; 0x21
 80049d2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049d4:	f7fc fea4 	bl	8001720 <HAL_GetTick>
 80049d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	88fa      	ldrh	r2, [r7, #6]
 80049de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	88fa      	ldrh	r2, [r7, #6]
 80049e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f2:	d108      	bne.n	8004a06 <HAL_UART_Transmit+0x68>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	e003      	b.n	8004a0e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a0e:	e02c      	b.n	8004a6a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	2180      	movs	r1, #128	; 0x80
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fb95 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e038      	b.n	8004a9c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10b      	bne.n	8004a48 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	3302      	adds	r3, #2
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	e007      	b.n	8004a58 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	781a      	ldrb	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	3301      	adds	r3, #1
 8004a56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1cc      	bne.n	8004a10 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2140      	movs	r1, #64	; 0x40
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fb62 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e005      	b.n	8004a9c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
  }
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4ba6      	ldr	r3, [pc, #664]	; (8004d68 <UART_SetConfig+0x2c4>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	6979      	ldr	r1, [r7, #20]
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a94      	ldr	r2, [pc, #592]	; (8004d6c <UART_SetConfig+0x2c8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d120      	bne.n	8004b62 <UART_SetConfig+0xbe>
 8004b20:	4b93      	ldr	r3, [pc, #588]	; (8004d70 <UART_SetConfig+0x2cc>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d816      	bhi.n	8004b5c <UART_SetConfig+0xb8>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x90>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b51 	.word	0x08004b51
 8004b3c:	08004b4b 	.word	0x08004b4b
 8004b40:	08004b57 	.word	0x08004b57
 8004b44:	2301      	movs	r3, #1
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e150      	b.n	8004dec <UART_SetConfig+0x348>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e14d      	b.n	8004dec <UART_SetConfig+0x348>
 8004b50:	2304      	movs	r3, #4
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e14a      	b.n	8004dec <UART_SetConfig+0x348>
 8004b56:	2308      	movs	r3, #8
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e147      	b.n	8004dec <UART_SetConfig+0x348>
 8004b5c:	2310      	movs	r3, #16
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e144      	b.n	8004dec <UART_SetConfig+0x348>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a83      	ldr	r2, [pc, #524]	; (8004d74 <UART_SetConfig+0x2d0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d132      	bne.n	8004bd2 <UART_SetConfig+0x12e>
 8004b6c:	4b80      	ldr	r3, [pc, #512]	; (8004d70 <UART_SetConfig+0x2cc>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d828      	bhi.n	8004bcc <UART_SetConfig+0x128>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0xdc>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004bb5 	.word	0x08004bb5
 8004b84:	08004bcd 	.word	0x08004bcd
 8004b88:	08004bcd 	.word	0x08004bcd
 8004b8c:	08004bcd 	.word	0x08004bcd
 8004b90:	08004bc1 	.word	0x08004bc1
 8004b94:	08004bcd 	.word	0x08004bcd
 8004b98:	08004bcd 	.word	0x08004bcd
 8004b9c:	08004bcd 	.word	0x08004bcd
 8004ba0:	08004bbb 	.word	0x08004bbb
 8004ba4:	08004bcd 	.word	0x08004bcd
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004bcd 	.word	0x08004bcd
 8004bb0:	08004bc7 	.word	0x08004bc7
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e118      	b.n	8004dec <UART_SetConfig+0x348>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e115      	b.n	8004dec <UART_SetConfig+0x348>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e112      	b.n	8004dec <UART_SetConfig+0x348>
 8004bc6:	2308      	movs	r3, #8
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e10f      	b.n	8004dec <UART_SetConfig+0x348>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e10c      	b.n	8004dec <UART_SetConfig+0x348>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a68      	ldr	r2, [pc, #416]	; (8004d78 <UART_SetConfig+0x2d4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d120      	bne.n	8004c1e <UART_SetConfig+0x17a>
 8004bdc:	4b64      	ldr	r3, [pc, #400]	; (8004d70 <UART_SetConfig+0x2cc>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004be6:	2b30      	cmp	r3, #48	; 0x30
 8004be8:	d013      	beq.n	8004c12 <UART_SetConfig+0x16e>
 8004bea:	2b30      	cmp	r3, #48	; 0x30
 8004bec:	d814      	bhi.n	8004c18 <UART_SetConfig+0x174>
 8004bee:	2b20      	cmp	r3, #32
 8004bf0:	d009      	beq.n	8004c06 <UART_SetConfig+0x162>
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d810      	bhi.n	8004c18 <UART_SetConfig+0x174>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <UART_SetConfig+0x15c>
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d006      	beq.n	8004c0c <UART_SetConfig+0x168>
 8004bfe:	e00b      	b.n	8004c18 <UART_SetConfig+0x174>
 8004c00:	2300      	movs	r3, #0
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	e0f2      	b.n	8004dec <UART_SetConfig+0x348>
 8004c06:	2302      	movs	r3, #2
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	e0ef      	b.n	8004dec <UART_SetConfig+0x348>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e0ec      	b.n	8004dec <UART_SetConfig+0x348>
 8004c12:	2308      	movs	r3, #8
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e0e9      	b.n	8004dec <UART_SetConfig+0x348>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e0e6      	b.n	8004dec <UART_SetConfig+0x348>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a56      	ldr	r2, [pc, #344]	; (8004d7c <UART_SetConfig+0x2d8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d120      	bne.n	8004c6a <UART_SetConfig+0x1c6>
 8004c28:	4b51      	ldr	r3, [pc, #324]	; (8004d70 <UART_SetConfig+0x2cc>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c32:	2bc0      	cmp	r3, #192	; 0xc0
 8004c34:	d013      	beq.n	8004c5e <UART_SetConfig+0x1ba>
 8004c36:	2bc0      	cmp	r3, #192	; 0xc0
 8004c38:	d814      	bhi.n	8004c64 <UART_SetConfig+0x1c0>
 8004c3a:	2b80      	cmp	r3, #128	; 0x80
 8004c3c:	d009      	beq.n	8004c52 <UART_SetConfig+0x1ae>
 8004c3e:	2b80      	cmp	r3, #128	; 0x80
 8004c40:	d810      	bhi.n	8004c64 <UART_SetConfig+0x1c0>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <UART_SetConfig+0x1a8>
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d006      	beq.n	8004c58 <UART_SetConfig+0x1b4>
 8004c4a:	e00b      	b.n	8004c64 <UART_SetConfig+0x1c0>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e0cc      	b.n	8004dec <UART_SetConfig+0x348>
 8004c52:	2302      	movs	r3, #2
 8004c54:	77fb      	strb	r3, [r7, #31]
 8004c56:	e0c9      	b.n	8004dec <UART_SetConfig+0x348>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e0c6      	b.n	8004dec <UART_SetConfig+0x348>
 8004c5e:	2308      	movs	r3, #8
 8004c60:	77fb      	strb	r3, [r7, #31]
 8004c62:	e0c3      	b.n	8004dec <UART_SetConfig+0x348>
 8004c64:	2310      	movs	r3, #16
 8004c66:	77fb      	strb	r3, [r7, #31]
 8004c68:	e0c0      	b.n	8004dec <UART_SetConfig+0x348>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a44      	ldr	r2, [pc, #272]	; (8004d80 <UART_SetConfig+0x2dc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d125      	bne.n	8004cc0 <UART_SetConfig+0x21c>
 8004c74:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <UART_SetConfig+0x2cc>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c82:	d017      	beq.n	8004cb4 <UART_SetConfig+0x210>
 8004c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c88:	d817      	bhi.n	8004cba <UART_SetConfig+0x216>
 8004c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8e:	d00b      	beq.n	8004ca8 <UART_SetConfig+0x204>
 8004c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c94:	d811      	bhi.n	8004cba <UART_SetConfig+0x216>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <UART_SetConfig+0x1fe>
 8004c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c9e:	d006      	beq.n	8004cae <UART_SetConfig+0x20a>
 8004ca0:	e00b      	b.n	8004cba <UART_SetConfig+0x216>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	77fb      	strb	r3, [r7, #31]
 8004ca6:	e0a1      	b.n	8004dec <UART_SetConfig+0x348>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	77fb      	strb	r3, [r7, #31]
 8004cac:	e09e      	b.n	8004dec <UART_SetConfig+0x348>
 8004cae:	2304      	movs	r3, #4
 8004cb0:	77fb      	strb	r3, [r7, #31]
 8004cb2:	e09b      	b.n	8004dec <UART_SetConfig+0x348>
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e098      	b.n	8004dec <UART_SetConfig+0x348>
 8004cba:	2310      	movs	r3, #16
 8004cbc:	77fb      	strb	r3, [r7, #31]
 8004cbe:	e095      	b.n	8004dec <UART_SetConfig+0x348>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <UART_SetConfig+0x2e0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d125      	bne.n	8004d16 <UART_SetConfig+0x272>
 8004cca:	4b29      	ldr	r3, [pc, #164]	; (8004d70 <UART_SetConfig+0x2cc>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cd8:	d017      	beq.n	8004d0a <UART_SetConfig+0x266>
 8004cda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cde:	d817      	bhi.n	8004d10 <UART_SetConfig+0x26c>
 8004ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce4:	d00b      	beq.n	8004cfe <UART_SetConfig+0x25a>
 8004ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cea:	d811      	bhi.n	8004d10 <UART_SetConfig+0x26c>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <UART_SetConfig+0x254>
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d006      	beq.n	8004d04 <UART_SetConfig+0x260>
 8004cf6:	e00b      	b.n	8004d10 <UART_SetConfig+0x26c>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e076      	b.n	8004dec <UART_SetConfig+0x348>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	e073      	b.n	8004dec <UART_SetConfig+0x348>
 8004d04:	2304      	movs	r3, #4
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e070      	b.n	8004dec <UART_SetConfig+0x348>
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e06d      	b.n	8004dec <UART_SetConfig+0x348>
 8004d10:	2310      	movs	r3, #16
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e06a      	b.n	8004dec <UART_SetConfig+0x348>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <UART_SetConfig+0x2e4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d138      	bne.n	8004d92 <UART_SetConfig+0x2ee>
 8004d20:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <UART_SetConfig+0x2cc>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d2e:	d017      	beq.n	8004d60 <UART_SetConfig+0x2bc>
 8004d30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d34:	d82a      	bhi.n	8004d8c <UART_SetConfig+0x2e8>
 8004d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3a:	d00b      	beq.n	8004d54 <UART_SetConfig+0x2b0>
 8004d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d40:	d824      	bhi.n	8004d8c <UART_SetConfig+0x2e8>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <UART_SetConfig+0x2aa>
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4a:	d006      	beq.n	8004d5a <UART_SetConfig+0x2b6>
 8004d4c:	e01e      	b.n	8004d8c <UART_SetConfig+0x2e8>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	77fb      	strb	r3, [r7, #31]
 8004d52:	e04b      	b.n	8004dec <UART_SetConfig+0x348>
 8004d54:	2302      	movs	r3, #2
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e048      	b.n	8004dec <UART_SetConfig+0x348>
 8004d5a:	2304      	movs	r3, #4
 8004d5c:	77fb      	strb	r3, [r7, #31]
 8004d5e:	e045      	b.n	8004dec <UART_SetConfig+0x348>
 8004d60:	2308      	movs	r3, #8
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e042      	b.n	8004dec <UART_SetConfig+0x348>
 8004d66:	bf00      	nop
 8004d68:	efff69f3 	.word	0xefff69f3
 8004d6c:	40011000 	.word	0x40011000
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40004400 	.word	0x40004400
 8004d78:	40004800 	.word	0x40004800
 8004d7c:	40004c00 	.word	0x40004c00
 8004d80:	40005000 	.word	0x40005000
 8004d84:	40011400 	.word	0x40011400
 8004d88:	40007800 	.word	0x40007800
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e02c      	b.n	8004dec <UART_SetConfig+0x348>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a72      	ldr	r2, [pc, #456]	; (8004f60 <UART_SetConfig+0x4bc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d125      	bne.n	8004de8 <UART_SetConfig+0x344>
 8004d9c:	4b71      	ldr	r3, [pc, #452]	; (8004f64 <UART_SetConfig+0x4c0>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004da6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004daa:	d017      	beq.n	8004ddc <UART_SetConfig+0x338>
 8004dac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004db0:	d817      	bhi.n	8004de2 <UART_SetConfig+0x33e>
 8004db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db6:	d00b      	beq.n	8004dd0 <UART_SetConfig+0x32c>
 8004db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbc:	d811      	bhi.n	8004de2 <UART_SetConfig+0x33e>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <UART_SetConfig+0x326>
 8004dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dc6:	d006      	beq.n	8004dd6 <UART_SetConfig+0x332>
 8004dc8:	e00b      	b.n	8004de2 <UART_SetConfig+0x33e>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	77fb      	strb	r3, [r7, #31]
 8004dce:	e00d      	b.n	8004dec <UART_SetConfig+0x348>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e00a      	b.n	8004dec <UART_SetConfig+0x348>
 8004dd6:	2304      	movs	r3, #4
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e007      	b.n	8004dec <UART_SetConfig+0x348>
 8004ddc:	2308      	movs	r3, #8
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e004      	b.n	8004dec <UART_SetConfig+0x348>
 8004de2:	2310      	movs	r3, #16
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e001      	b.n	8004dec <UART_SetConfig+0x348>
 8004de8:	2310      	movs	r3, #16
 8004dea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df4:	d15b      	bne.n	8004eae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004df6:	7ffb      	ldrb	r3, [r7, #31]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d828      	bhi.n	8004e4e <UART_SetConfig+0x3aa>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <UART_SetConfig+0x360>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e31 	.word	0x08004e31
 8004e0c:	08004e39 	.word	0x08004e39
 8004e10:	08004e4f 	.word	0x08004e4f
 8004e14:	08004e3f 	.word	0x08004e3f
 8004e18:	08004e4f 	.word	0x08004e4f
 8004e1c:	08004e4f 	.word	0x08004e4f
 8004e20:	08004e4f 	.word	0x08004e4f
 8004e24:	08004e47 	.word	0x08004e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fe f920 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8004e2c:	61b8      	str	r0, [r7, #24]
        break;
 8004e2e:	e013      	b.n	8004e58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e30:	f7fe f930 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 8004e34:	61b8      	str	r0, [r7, #24]
        break;
 8004e36:	e00f      	b.n	8004e58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e38:	4b4b      	ldr	r3, [pc, #300]	; (8004f68 <UART_SetConfig+0x4c4>)
 8004e3a:	61bb      	str	r3, [r7, #24]
        break;
 8004e3c:	e00c      	b.n	8004e58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7fe f843 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8004e42:	61b8      	str	r0, [r7, #24]
        break;
 8004e44:	e008      	b.n	8004e58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4a:	61bb      	str	r3, [r7, #24]
        break;
 8004e4c:	e004      	b.n	8004e58 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	77bb      	strb	r3, [r7, #30]
        break;
 8004e56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d074      	beq.n	8004f48 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	005a      	lsls	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	441a      	add	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	2b0f      	cmp	r3, #15
 8004e78:	d916      	bls.n	8004ea8 <UART_SetConfig+0x404>
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e80:	d212      	bcs.n	8004ea8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f023 030f 	bic.w	r3, r3, #15
 8004e8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	89fb      	ldrh	r3, [r7, #14]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	89fa      	ldrh	r2, [r7, #14]
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	e04f      	b.n	8004f48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	77bb      	strb	r3, [r7, #30]
 8004eac:	e04c      	b.n	8004f48 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eae:	7ffb      	ldrb	r3, [r7, #31]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d828      	bhi.n	8004f06 <UART_SetConfig+0x462>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <UART_SetConfig+0x418>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	08004ee9 	.word	0x08004ee9
 8004ec4:	08004ef1 	.word	0x08004ef1
 8004ec8:	08004f07 	.word	0x08004f07
 8004ecc:	08004ef7 	.word	0x08004ef7
 8004ed0:	08004f07 	.word	0x08004f07
 8004ed4:	08004f07 	.word	0x08004f07
 8004ed8:	08004f07 	.word	0x08004f07
 8004edc:	08004eff 	.word	0x08004eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee0:	f7fe f8c4 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8004ee4:	61b8      	str	r0, [r7, #24]
        break;
 8004ee6:	e013      	b.n	8004f10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ee8:	f7fe f8d4 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 8004eec:	61b8      	str	r0, [r7, #24]
        break;
 8004eee:	e00f      	b.n	8004f10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef0:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <UART_SetConfig+0x4c4>)
 8004ef2:	61bb      	str	r3, [r7, #24]
        break;
 8004ef4:	e00c      	b.n	8004f10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef6:	f7fd ffe7 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8004efa:	61b8      	str	r0, [r7, #24]
        break;
 8004efc:	e008      	b.n	8004f10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f02:	61bb      	str	r3, [r7, #24]
        break;
 8004f04:	e004      	b.n	8004f10 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f0e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d018      	beq.n	8004f48 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	085a      	lsrs	r2, r3, #1
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	441a      	add	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b0f      	cmp	r3, #15
 8004f2e:	d909      	bls.n	8004f44 <UART_SetConfig+0x4a0>
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f36:	d205      	bcs.n	8004f44 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	e001      	b.n	8004f48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f54:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40007c00 	.word	0x40007c00
 8004f64:	40023800 	.word	0x40023800
 8004f68:	00f42400 	.word	0x00f42400

08004f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01a      	beq.n	8005082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506a:	d10a      	bne.n	8005082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	605a      	str	r2, [r3, #4]
  }
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050c0:	f7fc fb2e 	bl	8001720 <HAL_GetTick>
 80050c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d10e      	bne.n	80050f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f831 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e027      	b.n	8005142 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d10e      	bne.n	800511e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f81b 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e011      	b.n	8005142 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b09c      	sub	sp, #112	; 0x70
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515a:	e0a7      	b.n	80052ac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	f000 80a3 	beq.w	80052ac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005166:	f7fc fadb 	bl	8001720 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005172:	429a      	cmp	r2, r3
 8005174:	d302      	bcc.n	800517c <UART_WaitOnFlagUntilTimeout+0x32>
 8005176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005178:	2b00      	cmp	r3, #0
 800517a:	d13f      	bne.n	80051fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800518a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005190:	667b      	str	r3, [r7, #100]	; 0x64
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800519c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e6      	bne.n	800517c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3308      	adds	r3, #8
 80051b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	663b      	str	r3, [r7, #96]	; 0x60
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80051d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e5      	bne.n	80051ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e068      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d050      	beq.n	80052ac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005218:	d148      	bne.n	80052ac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005222:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
 8005244:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e6      	bne.n	8005224 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3308      	adds	r3, #8
 800525c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	613b      	str	r3, [r7, #16]
   return(result);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	66bb      	str	r3, [r7, #104]	; 0x68
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005276:	623a      	str	r2, [r7, #32]
 8005278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	69f9      	ldr	r1, [r7, #28]
 800527c:	6a3a      	ldr	r2, [r7, #32]
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	61bb      	str	r3, [r7, #24]
   return(result);
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e5      	bne.n	8005256 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e010      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69da      	ldr	r2, [r3, #28]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4013      	ands	r3, r2
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	f43f af48 	beq.w	800515c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3770      	adds	r7, #112	; 0x70
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052d8:	b084      	sub	sp, #16
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	f107 001c 	add.w	r0, r7, #28
 80052e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d120      	bne.n	8005332 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	4b20      	ldr	r3, [pc, #128]	; (8005384 <USB_CoreInit+0xac>)
 8005302:	4013      	ands	r3, r2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005316:	2b01      	cmp	r3, #1
 8005318:	d105      	bne.n	8005326 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fa96 	bl	8005858 <USB_CoreReset>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]
 8005330:	e010      	b.n	8005354 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa8a 	bl	8005858 <USB_CoreReset>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	2b01      	cmp	r3, #1
 8005358:	d10b      	bne.n	8005372 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f043 0206 	orr.w	r2, r3, #6
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f043 0220 	orr.w	r2, r3, #32
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005372:	7bfb      	ldrb	r3, [r7, #15]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800537e:	b004      	add	sp, #16
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	ffbdffbf 	.word	0xffbdffbf

08005388 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f023 0201 	bic.w	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053c6:	78fb      	ldrb	r3, [r7, #3]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d115      	bne.n	80053f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053d8:	2001      	movs	r0, #1
 80053da:	f7fc f9ad 	bl	8001738 <HAL_Delay>
      ms++;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3301      	adds	r3, #1
 80053e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fa29 	bl	800583c <USB_GetMode>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d01e      	beq.n	800542e <USB_SetCurrentMode+0x84>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b31      	cmp	r3, #49	; 0x31
 80053f4:	d9f0      	bls.n	80053d8 <USB_SetCurrentMode+0x2e>
 80053f6:	e01a      	b.n	800542e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d115      	bne.n	800542a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800540a:	2001      	movs	r0, #1
 800540c:	f7fc f994 	bl	8001738 <HAL_Delay>
      ms++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa10 	bl	800583c <USB_GetMode>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <USB_SetCurrentMode+0x84>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b31      	cmp	r3, #49	; 0x31
 8005426:	d9f0      	bls.n	800540a <USB_SetCurrentMode+0x60>
 8005428:	e001      	b.n	800542e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e005      	b.n	800543a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b32      	cmp	r3, #50	; 0x32
 8005432:	d101      	bne.n	8005438 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005444:	b084      	sub	sp, #16
 8005446:	b580      	push	{r7, lr}
 8005448:	b086      	sub	sp, #24
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	e009      	b.n	8005478 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	3340      	adds	r3, #64	; 0x40
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	2200      	movs	r2, #0
 8005470:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	3301      	adds	r3, #1
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b0e      	cmp	r3, #14
 800547c:	d9f2      	bls.n	8005464 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800547e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d11c      	bne.n	80054be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005492:	f043 0302 	orr.w	r3, r3, #2
 8005496:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	e005      	b.n	80054ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054d0:	461a      	mov	r2, r3
 80054d2:	2300      	movs	r3, #0
 80054d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054dc:	4619      	mov	r1, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e4:	461a      	mov	r2, r3
 80054e6:	680b      	ldr	r3, [r1, #0]
 80054e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d10c      	bne.n	800550a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d104      	bne.n	8005500 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054f6:	2100      	movs	r1, #0
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f965 	bl	80057c8 <USB_SetDevSpeed>
 80054fe:	e008      	b.n	8005512 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005500:	2101      	movs	r1, #1
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f960 	bl	80057c8 <USB_SetDevSpeed>
 8005508:	e003      	b.n	8005512 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800550a:	2103      	movs	r1, #3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f95b 	bl	80057c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005512:	2110      	movs	r1, #16
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f8f3 	bl	8005700 <USB_FlushTxFifo>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f91f 	bl	8005768 <USB_FlushRxFifo>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	461a      	mov	r2, r3
 800553c:	2300      	movs	r3, #0
 800553e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	461a      	mov	r2, r3
 8005548:	2300      	movs	r3, #0
 800554a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005552:	461a      	mov	r2, r3
 8005554:	2300      	movs	r3, #0
 8005556:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005558:	2300      	movs	r3, #0
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	e043      	b.n	80055e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005574:	d118      	bne.n	80055a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	461a      	mov	r2, r3
 800558a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	e013      	b.n	80055ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559e:	461a      	mov	r2, r3
 80055a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e008      	b.n	80055ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	461a      	mov	r2, r3
 80055b6:	2300      	movs	r3, #0
 80055b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c6:	461a      	mov	r2, r3
 80055c8:	2300      	movs	r3, #0
 80055ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	461a      	mov	r2, r3
 80055da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	3301      	adds	r3, #1
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d3b7      	bcc.n	800555e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	e043      	b.n	800567c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800560a:	d118      	bne.n	800563e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561e:	461a      	mov	r2, r3
 8005620:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	e013      	b.n	8005650 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	461a      	mov	r2, r3
 8005636:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	e008      	b.n	8005650 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	461a      	mov	r2, r3
 800564c:	2300      	movs	r3, #0
 800564e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	461a      	mov	r2, r3
 800565e:	2300      	movs	r3, #0
 8005660:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566e:	461a      	mov	r2, r3
 8005670:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005674:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	3301      	adds	r3, #1
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	429a      	cmp	r2, r3
 8005682:	d3b7      	bcc.n	80055f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005696:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d105      	bne.n	80056b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f043 0210 	orr.w	r2, r3, #16
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699a      	ldr	r2, [r3, #24]
 80056bc:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <USB_DevInit+0x2b4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	f043 0208 	orr.w	r2, r3, #8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d105      	bne.n	80056e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	4b06      	ldr	r3, [pc, #24]	; (80056fc <USB_DevInit+0x2b8>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056f4:	b004      	add	sp, #16
 80056f6:	4770      	bx	lr
 80056f8:	803c3800 	.word	0x803c3800
 80056fc:	40000004 	.word	0x40000004

08005700 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4a13      	ldr	r2, [pc, #76]	; (8005764 <USB_FlushTxFifo+0x64>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d901      	bls.n	8005720 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e01b      	b.n	8005758 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	daf2      	bge.n	800570e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	019b      	lsls	r3, r3, #6
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3301      	adds	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4a08      	ldr	r2, [pc, #32]	; (8005764 <USB_FlushTxFifo+0x64>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e006      	b.n	8005758 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b20      	cmp	r3, #32
 8005754:	d0f0      	beq.n	8005738 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	00030d40 	.word	0x00030d40

08005768 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a11      	ldr	r2, [pc, #68]	; (80057c4 <USB_FlushRxFifo+0x5c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e018      	b.n	80057b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	daf2      	bge.n	8005774 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2210      	movs	r2, #16
 8005796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3301      	adds	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4a08      	ldr	r2, [pc, #32]	; (80057c4 <USB_FlushRxFifo+0x5c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e006      	b.n	80057b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2b10      	cmp	r3, #16
 80057b4:	d0f0      	beq.n	8005798 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	00030d40 	.word	0x00030d40

080057c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005814:	f023 0303 	bic.w	r3, r3, #3
 8005818:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005828:	f043 0302 	orr.w	r3, r3, #2
 800582c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	f003 0301 	and.w	r3, r3, #1
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3301      	adds	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4a13      	ldr	r2, [pc, #76]	; (80058bc <USB_CoreReset+0x64>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e01b      	b.n	80058ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	daf2      	bge.n	8005864 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f043 0201 	orr.w	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3301      	adds	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4a09      	ldr	r2, [pc, #36]	; (80058bc <USB_CoreReset+0x64>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d901      	bls.n	80058a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e006      	b.n	80058ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d0f0      	beq.n	800588e <USB_CoreReset+0x36>

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	00030d40 	.word	0x00030d40

080058c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d6:	f3ef 8305 	mrs	r3, IPSR
 80058da:	60bb      	str	r3, [r7, #8]
  return(result);
 80058dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10f      	bne.n	8005902 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058e2:	f3ef 8310 	mrs	r3, PRIMASK
 80058e6:	607b      	str	r3, [r7, #4]
  return(result);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d105      	bne.n	80058fa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058ee:	f3ef 8311 	mrs	r3, BASEPRI
 80058f2:	603b      	str	r3, [r7, #0]
  return(result);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <osKernelInitialize+0x3a>
 80058fa:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <osKernelInitialize+0x64>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d103      	bne.n	800590a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005902:	f06f 0305 	mvn.w	r3, #5
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e00c      	b.n	8005924 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800590a:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <osKernelInitialize+0x64>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d105      	bne.n	800591e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <osKernelInitialize+0x64>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	e002      	b.n	8005924 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005924:	68fb      	ldr	r3, [r7, #12]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20001f9c 	.word	0x20001f9c

08005938 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800593e:	f3ef 8305 	mrs	r3, IPSR
 8005942:	60bb      	str	r3, [r7, #8]
  return(result);
 8005944:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10f      	bne.n	800596a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594a:	f3ef 8310 	mrs	r3, PRIMASK
 800594e:	607b      	str	r3, [r7, #4]
  return(result);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d105      	bne.n	8005962 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005956:	f3ef 8311 	mrs	r3, BASEPRI
 800595a:	603b      	str	r3, [r7, #0]
  return(result);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <osKernelStart+0x3a>
 8005962:	4b0f      	ldr	r3, [pc, #60]	; (80059a0 <osKernelStart+0x68>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d103      	bne.n	8005972 <osKernelStart+0x3a>
    stat = osErrorISR;
 800596a:	f06f 0305 	mvn.w	r3, #5
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	e010      	b.n	8005994 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005972:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <osKernelStart+0x68>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d109      	bne.n	800598e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800597a:	f7ff ffa1 	bl	80058c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800597e:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <osKernelStart+0x68>)
 8005980:	2202      	movs	r2, #2
 8005982:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005984:	f001 fe20 	bl	80075c8 <vTaskStartScheduler>
      stat = osOK;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e002      	b.n	8005994 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800598e:	f04f 33ff 	mov.w	r3, #4294967295
 8005992:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005994:	68fb      	ldr	r3, [r7, #12]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20001f9c 	.word	0x20001f9c

080059a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b090      	sub	sp, #64	; 0x40
 80059a8:	af04      	add	r7, sp, #16
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059b4:	f3ef 8305 	mrs	r3, IPSR
 80059b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80059ba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f040 808f 	bne.w	8005ae0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c2:	f3ef 8310 	mrs	r3, PRIMASK
 80059c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d105      	bne.n	80059da <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059ce:	f3ef 8311 	mrs	r3, BASEPRI
 80059d2:	617b      	str	r3, [r7, #20]
  return(result);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <osThreadNew+0x3e>
 80059da:	4b44      	ldr	r3, [pc, #272]	; (8005aec <osThreadNew+0x148>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d07e      	beq.n	8005ae0 <osThreadNew+0x13c>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d07b      	beq.n	8005ae0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80059ec:	2318      	movs	r3, #24
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80059f4:	f04f 33ff 	mov.w	r3, #4294967295
 80059f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d045      	beq.n	8005a8c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <osThreadNew+0x6a>
        name = attr->name;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <osThreadNew+0x90>
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	2b38      	cmp	r3, #56	; 0x38
 8005a26:	d805      	bhi.n	8005a34 <osThreadNew+0x90>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <osThreadNew+0x94>
        return (NULL);
 8005a34:	2300      	movs	r3, #0
 8005a36:	e054      	b.n	8005ae2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00e      	beq.n	8005a6e <osThreadNew+0xca>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2bbf      	cmp	r3, #191	; 0xbf
 8005a56:	d90a      	bls.n	8005a6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d006      	beq.n	8005a6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <osThreadNew+0xca>
        mem = 1;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	623b      	str	r3, [r7, #32]
 8005a6c:	e010      	b.n	8005a90 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10c      	bne.n	8005a90 <osThreadNew+0xec>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d108      	bne.n	8005a90 <osThreadNew+0xec>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <osThreadNew+0xec>
          mem = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	623b      	str	r3, [r7, #32]
 8005a8a:	e001      	b.n	8005a90 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d110      	bne.n	8005ab8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a9e:	9202      	str	r2, [sp, #8]
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f001 fb91 	bl	80071d4 <xTaskCreateStatic>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	e013      	b.n	8005ae0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d110      	bne.n	8005ae0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	f107 0310 	add.w	r3, r7, #16
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f001 fbe2 	bl	800729a <xTaskCreate>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d001      	beq.n	8005ae0 <osThreadNew+0x13c>
          hTask = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ae0:	693b      	ldr	r3, [r7, #16]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3730      	adds	r7, #48	; 0x30
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20001f9c 	.word	0x20001f9c

08005af0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005af8:	f3ef 8305 	mrs	r3, IPSR
 8005afc:	613b      	str	r3, [r7, #16]
  return(result);
 8005afe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10f      	bne.n	8005b24 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b04:	f3ef 8310 	mrs	r3, PRIMASK
 8005b08:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b10:	f3ef 8311 	mrs	r3, BASEPRI
 8005b14:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <osDelay+0x3c>
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <osDelay+0x58>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d103      	bne.n	8005b2c <osDelay+0x3c>
    stat = osErrorISR;
 8005b24:	f06f 0305 	mvn.w	r3, #5
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e007      	b.n	8005b3c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f001 fd10 	bl	800755c <vTaskDelay>
    }
  }

  return (stat);
 8005b3c:	697b      	ldr	r3, [r7, #20]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20001f9c 	.word	0x20001f9c

08005b4c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b58:	f3ef 8305 	mrs	r3, IPSR
 8005b5c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d13d      	bne.n	8005be0 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b64:	f3ef 8310 	mrs	r3, PRIMASK
 8005b68:	613b      	str	r3, [r7, #16]
  return(result);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b70:	f3ef 8311 	mrs	r3, BASEPRI
 8005b74:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <osEventFlagsNew+0x38>
 8005b7c:	4b1b      	ldr	r3, [pc, #108]	; (8005bec <osEventFlagsNew+0xa0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d02d      	beq.n	8005be0 <osEventFlagsNew+0x94>
    mem = -1;
 8005b84:	f04f 33ff 	mov.w	r3, #4294967295
 8005b88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d015      	beq.n	8005bbc <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d006      	beq.n	8005ba6 <osEventFlagsNew+0x5a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	2b1f      	cmp	r3, #31
 8005b9e:	d902      	bls.n	8005ba6 <osEventFlagsNew+0x5a>
        mem = 1;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	e00c      	b.n	8005bc0 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d108      	bne.n	8005bc0 <osEventFlagsNew+0x74>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <osEventFlagsNew+0x74>
          mem = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	e001      	b.n	8005bc0 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d106      	bne.n	8005bd4 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fa7e 	bl	80060cc <xEventGroupCreateStatic>
 8005bd0:	61f8      	str	r0, [r7, #28]
 8005bd2:	e005      	b.n	8005be0 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8005bda:	f000 fab2 	bl	8006142 <xEventGroupCreate>
 8005bde:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005be0:	69fb      	ldr	r3, [r7, #28]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3720      	adds	r7, #32
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20001f9c 	.word	0x20001f9c

08005bf0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <osEventFlagsSet+0x1e>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005c0e:	f06f 0303 	mvn.w	r3, #3
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	e03a      	b.n	8005c8c <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c16:	f3ef 8305 	mrs	r3, IPSR
 8005c1a:	617b      	str	r3, [r7, #20]
  return(result);
 8005c1c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10f      	bne.n	8005c42 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c22:	f3ef 8310 	mrs	r3, PRIMASK
 8005c26:	613b      	str	r3, [r7, #16]
  return(result);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c32:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d021      	beq.n	8005c7e <osEventFlagsSet+0x8e>
 8005c3a:	4b17      	ldr	r3, [pc, #92]	; (8005c98 <osEventFlagsSet+0xa8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d11d      	bne.n	8005c7e <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005c46:	f107 0308 	add.w	r3, r7, #8
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	69b8      	ldr	r0, [r7, #24]
 8005c50:	f000 fc26 	bl	80064a0 <xEventGroupSetBitsFromISR>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8005c5a:	f06f 0302 	mvn.w	r3, #2
 8005c5e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005c60:	e013      	b.n	8005c8a <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00e      	beq.n	8005c8a <osEventFlagsSet+0x9a>
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <osEventFlagsSet+0xac>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005c7c:	e005      	b.n	8005c8a <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	69b8      	ldr	r0, [r7, #24]
 8005c82:	f000 fb4f 	bl	8006324 <xEventGroupSetBits>
 8005c86:	61f8      	str	r0, [r7, #28]
 8005c88:	e000      	b.n	8005c8c <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005c8a:	bf00      	nop
  }

  return (rflags);
 8005c8c:	69fb      	ldr	r3, [r7, #28]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20001f9c 	.word	0x20001f9c
 8005c9c:	e000ed04 	.word	0xe000ed04

08005ca0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08e      	sub	sp, #56	; 0x38
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <osEventFlagsWait+0x22>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8005cc2:	f06f 0303 	mvn.w	r3, #3
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc8:	e059      	b.n	8005d7e <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cca:	f3ef 8305 	mrs	r3, IPSR
 8005cce:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cd0:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10f      	bne.n	8005cf6 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cda:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce6:	617b      	str	r3, [r7, #20]
  return(result);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <osEventFlagsWait+0x5e>
 8005cee:	4b26      	ldr	r3, [pc, #152]	; (8005d88 <osEventFlagsWait+0xe8>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d103      	bne.n	8005cfe <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8005cf6:	f06f 0305 	mvn.w	r3, #5
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfc:	e03f      	b.n	8005d7e <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d0c:	e001      	b.n	8005d12 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d20:	e001      	b.n	8005d26 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8005d22:	2301      	movs	r3, #1
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	6a38      	ldr	r0, [r7, #32]
 8005d32:	f000 fa21 	bl	8006178 <xEventGroupWaitBits>
 8005d36:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00e      	beq.n	8005d60 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d019      	beq.n	8005d7e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8005d50:	f06f 0301 	mvn.w	r3, #1
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
 8005d56:	e012      	b.n	8005d7e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005d58:	f06f 0302 	mvn.w	r3, #2
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5e:	e00e      	b.n	8005d7e <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	4013      	ands	r3, r2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8005d70:	f06f 0301 	mvn.w	r3, #1
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
 8005d76:	e002      	b.n	8005d7e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005d78:	f06f 0302 	mvn.w	r3, #2
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3730      	adds	r7, #48	; 0x30
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	20001f9c 	.word	0x20001f9c

08005d8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08c      	sub	sp, #48	; 0x30
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d9c:	f3ef 8305 	mrs	r3, IPSR
 8005da0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005da2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d16f      	bne.n	8005e88 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dac:	617b      	str	r3, [r7, #20]
  return(result);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005db4:	f3ef 8311 	mrs	r3, BASEPRI
 8005db8:	613b      	str	r3, [r7, #16]
  return(result);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <osMessageQueueNew+0x3c>
 8005dc0:	4b34      	ldr	r3, [pc, #208]	; (8005e94 <osMessageQueueNew+0x108>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d05f      	beq.n	8005e88 <osMessageQueueNew+0xfc>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d05c      	beq.n	8005e88 <osMessageQueueNew+0xfc>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d059      	beq.n	8005e88 <osMessageQueueNew+0xfc>
    mem = -1;
 8005dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d029      	beq.n	8005e34 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <osMessageQueueNew+0x82>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	2b4f      	cmp	r3, #79	; 0x4f
 8005dee:	d90e      	bls.n	8005e0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	fb01 f303 	mul.w	r3, r1, r3
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d302      	bcc.n	8005e0e <osMessageQueueNew+0x82>
        mem = 1;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	623b      	str	r3, [r7, #32]
 8005e0c:	e014      	b.n	8005e38 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d110      	bne.n	8005e38 <osMessageQueueNew+0xac>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10c      	bne.n	8005e38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d108      	bne.n	8005e38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <osMessageQueueNew+0xac>
          mem = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	e001      	b.n	8005e38 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d10b      	bne.n	8005e56 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2100      	movs	r1, #0
 8005e48:	9100      	str	r1, [sp, #0]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 fc59 	bl	8006704 <xQueueGenericCreateStatic>
 8005e52:	6278      	str	r0, [r7, #36]	; 0x24
 8005e54:	e008      	b.n	8005e68 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 fcd1 	bl	8006808 <xQueueGenericCreate>
 8005e66:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00c      	beq.n	8005e88 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <osMessageQueueNew+0xf0>
        name = attr->name;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	e001      	b.n	8005e80 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005e80:	69f9      	ldr	r1, [r7, #28]
 8005e82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e84:	f001 f948 	bl	8007118 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3728      	adds	r7, #40	; 0x28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20001f9c 	.word	0x20001f9c

08005e98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	; 0x28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eb0:	f3ef 8305 	mrs	r3, IPSR
 8005eb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005eb6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10f      	bne.n	8005edc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d105      	bne.n	8005ed4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d02c      	beq.n	8005f2e <osMessageQueuePut+0x96>
 8005ed4:	4b28      	ldr	r3, [pc, #160]	; (8005f78 <osMessageQueuePut+0xe0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d128      	bne.n	8005f2e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <osMessageQueuePut+0x56>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <osMessageQueuePut+0x56>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005eee:	f06f 0303 	mvn.w	r3, #3
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ef4:	e039      	b.n	8005f6a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005efa:	f107 0210 	add.w	r2, r7, #16
 8005efe:	2300      	movs	r3, #0
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	6a38      	ldr	r0, [r7, #32]
 8005f04:	f000 fdec 	bl	8006ae0 <xQueueGenericSendFromISR>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d003      	beq.n	8005f16 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005f0e:	f06f 0302 	mvn.w	r3, #2
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f14:	e029      	b.n	8005f6a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d026      	beq.n	8005f6a <osMessageQueuePut+0xd2>
 8005f1c:	4b17      	ldr	r3, [pc, #92]	; (8005f7c <osMessageQueuePut+0xe4>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f2c:	e01d      	b.n	8005f6a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <osMessageQueuePut+0xa2>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005f3a:	f06f 0303 	mvn.w	r3, #3
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f40:	e014      	b.n	8005f6c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005f42:	2300      	movs	r3, #0
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	6a38      	ldr	r0, [r7, #32]
 8005f4a:	f000 fcc3 	bl	80068d4 <xQueueGenericSend>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d00b      	beq.n	8005f6c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005f5a:	f06f 0301 	mvn.w	r3, #1
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f60:	e004      	b.n	8005f6c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005f62:	f06f 0302 	mvn.w	r3, #2
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
 8005f68:	e000      	b.n	8005f6c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f6a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3728      	adds	r7, #40	; 0x28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20001f9c 	.word	0x20001f9c
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f96:	f3ef 8305 	mrs	r3, IPSR
 8005f9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f9c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10f      	bne.n	8005fc2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d105      	bne.n	8005fba <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fae:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb2:	617b      	str	r3, [r7, #20]
  return(result);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d02c      	beq.n	8006014 <osMessageQueueGet+0x94>
 8005fba:	4b28      	ldr	r3, [pc, #160]	; (800605c <osMessageQueueGet+0xdc>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d128      	bne.n	8006014 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <osMessageQueueGet+0x54>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <osMessageQueueGet+0x54>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005fd4:	f06f 0303 	mvn.w	r3, #3
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fda:	e038      	b.n	800604e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005fe0:	f107 0310 	add.w	r3, r7, #16
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	6a38      	ldr	r0, [r7, #32]
 8005fea:	f000 feff 	bl	8006dec <xQueueReceiveFromISR>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d003      	beq.n	8005ffc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005ff4:	f06f 0302 	mvn.w	r3, #2
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ffa:	e028      	b.n	800604e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d025      	beq.n	800604e <osMessageQueueGet+0xce>
 8006002:	4b17      	ldr	r3, [pc, #92]	; (8006060 <osMessageQueueGet+0xe0>)
 8006004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006012:	e01c      	b.n	800604e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <osMessageQueueGet+0xa0>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d103      	bne.n	8006028 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006020:	f06f 0303 	mvn.w	r3, #3
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
 8006026:	e013      	b.n	8006050 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	6a38      	ldr	r0, [r7, #32]
 800602e:	f000 fdf7 	bl	8006c20 <xQueueReceive>
 8006032:	4603      	mov	r3, r0
 8006034:	2b01      	cmp	r3, #1
 8006036:	d00b      	beq.n	8006050 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800603e:	f06f 0301 	mvn.w	r3, #1
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
 8006044:	e004      	b.n	8006050 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006046:	f06f 0302 	mvn.w	r3, #2
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
 800604c:	e000      	b.n	8006050 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800604e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006052:	4618      	mov	r0, r3
 8006054:	3728      	adds	r7, #40	; 0x28
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20001f9c 	.word	0x20001f9c
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a07      	ldr	r2, [pc, #28]	; (8006090 <vApplicationGetIdleTaskMemory+0x2c>)
 8006074:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4a06      	ldr	r2, [pc, #24]	; (8006094 <vApplicationGetIdleTaskMemory+0x30>)
 800607a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2280      	movs	r2, #128	; 0x80
 8006080:	601a      	str	r2, [r3, #0]
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20001fa0 	.word	0x20001fa0
 8006094:	20002060 	.word	0x20002060

08006098 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4a07      	ldr	r2, [pc, #28]	; (80060c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80060a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4a06      	ldr	r2, [pc, #24]	; (80060c8 <vApplicationGetTimerTaskMemory+0x30>)
 80060ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060b6:	601a      	str	r2, [r3, #0]
}
 80060b8:	bf00      	nop
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	20002260 	.word	0x20002260
 80060c8:	20002320 	.word	0x20002320

080060cc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10c      	bne.n	80060f4 <xEventGroupCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	b672      	cpsid	i
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	b662      	cpsie	i
 80060ee:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80060f4:	2320      	movs	r3, #32
 80060f6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d00c      	beq.n	8006118 <xEventGroupCreateStatic+0x4c>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	b672      	cpsid	i
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	b662      	cpsie	i
 8006112:	60fb      	str	r3, [r7, #12]
}
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <xEventGroupCreateStatic+0x4a>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <xEventGroupCreateStatic+0x6c>
		{
			pxEventBits->uxEventBits = 0;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3304      	adds	r3, #4
 800612c:	4618      	mov	r0, r3
 800612e:	f000 f9cb 	bl	80064c8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2201      	movs	r2, #1
 8006136:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8006138:	697b      	ldr	r3, [r7, #20]
	}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006142:	b580      	push	{r7, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006148:	2020      	movs	r0, #32
 800614a:	f002 fe23 	bl	8008d94 <pvPortMalloc>
 800614e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	4618      	mov	r0, r3
 8006162:	f000 f9b1 	bl	80064c8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800616c:	687b      	ldr	r3, [r7, #4]
	}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b090      	sub	sp, #64	; 0x40
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800618e:	2300      	movs	r3, #0
 8006190:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10c      	bne.n	80061b2 <xEventGroupWaitBits+0x3a>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	b672      	cpsid	i
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	b662      	cpsie	i
 80061ac:	623b      	str	r3, [r7, #32]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00c      	beq.n	80061d6 <xEventGroupWaitBits+0x5e>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	b672      	cpsid	i
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	b662      	cpsie	i
 80061d0:	61fb      	str	r3, [r7, #28]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10c      	bne.n	80061f6 <xEventGroupWaitBits+0x7e>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	b672      	cpsid	i
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	b662      	cpsie	i
 80061f0:	61bb      	str	r3, [r7, #24]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xEventGroupWaitBits+0x7c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061f6:	f001 ff1d 	bl	8008034 <xTaskGetSchedulerState>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <xEventGroupWaitBits+0x8e>
 8006200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <xEventGroupWaitBits+0x92>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <xEventGroupWaitBits+0x94>
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10c      	bne.n	800622a <xEventGroupWaitBits+0xb2>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	b672      	cpsid	i
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	b662      	cpsie	i
 8006224:	617b      	str	r3, [r7, #20]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xEventGroupWaitBits+0xb0>
	}
	#endif

	vTaskSuspendAll();
 800622a:	f001 fa43 	bl	80076b4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800623a:	f000 f90f 	bl	800645c <prvTestWaitCondition>
 800623e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00e      	beq.n	8006264 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800624a:	2300      	movs	r3, #0
 800624c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d028      	beq.n	80062a6 <xEventGroupWaitBits+0x12e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	43db      	mvns	r3, r3
 800625c:	401a      	ands	r2, r3
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	e020      	b.n	80062a6 <xEventGroupWaitBits+0x12e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <xEventGroupWaitBits+0xfc>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800626e:	2301      	movs	r3, #1
 8006270:	633b      	str	r3, [r7, #48]	; 0x30
 8006272:	e018      	b.n	80062a6 <xEventGroupWaitBits+0x12e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <xEventGroupWaitBits+0x10a>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006280:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <xEventGroupWaitBits+0x118>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800628e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006292:	1d18      	adds	r0, r3, #4
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	4313      	orrs	r3, r2
 800629a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800629c:	4619      	mov	r1, r3
 800629e:	f001 fc2b 	bl	8007af8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80062a6:	f001 fa13 	bl	80076d0 <xTaskResumeAll>
 80062aa:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80062ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d031      	beq.n	8006316 <xEventGroupWaitBits+0x19e>
	{
		if( xAlreadyYielded == pdFALSE )
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d107      	bne.n	80062c8 <xEventGroupWaitBits+0x150>
		{
			portYIELD_WITHIN_API();
 80062b8:	4b19      	ldr	r3, [pc, #100]	; (8006320 <xEventGroupWaitBits+0x1a8>)
 80062ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80062c8:	f001 ff44 	bl	8008154 <uxTaskResetEventItemValue>
 80062cc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80062ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d11a      	bne.n	800630e <xEventGroupWaitBits+0x196>
		{
			taskENTER_CRITICAL();
 80062d8:	f002 fc30 	bl	8008b3c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80062dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80062e8:	f000 f8b8 	bl	800645c <prvTestWaitCondition>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d009      	beq.n	8006306 <xEventGroupWaitBits+0x18e>
				{
					if( xClearOnExit != pdFALSE )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d006      	beq.n	8006306 <xEventGroupWaitBits+0x18e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80062f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	43db      	mvns	r3, r3
 8006300:	401a      	ands	r2, r3
 8006302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006304:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006306:	2301      	movs	r3, #1
 8006308:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800630a:	f002 fc4b 	bl	8008ba4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006314:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006318:	4618      	mov	r0, r3
 800631a:	3740      	adds	r7, #64	; 0x40
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08e      	sub	sp, #56	; 0x38
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800632e:	2300      	movs	r3, #0
 8006330:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006336:	2300      	movs	r3, #0
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10c      	bne.n	800635a <xEventGroupSetBits+0x36>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	b672      	cpsid	i
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	b662      	cpsie	i
 8006354:	613b      	str	r3, [r7, #16]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00c      	beq.n	800637e <xEventGroupSetBits+0x5a>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	b672      	cpsid	i
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	b662      	cpsie	i
 8006378:	60fb      	str	r3, [r7, #12]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	3304      	adds	r3, #4
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	3308      	adds	r3, #8
 8006388:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800638a:	f001 f993 	bl	80076b4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	431a      	orrs	r2, r3
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80063a0:	e03c      	b.n	800641c <xEventGroupSetBits+0xf8>
		{
			pxNext = listGET_NEXT( pxListItem );
 80063a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80063b8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063c0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d108      	bne.n	80063de <xEventGroupSetBits+0xba>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00b      	beq.n	80063f0 <xEventGroupSetBits+0xcc>
				{
					xMatchFound = pdTRUE;
 80063d8:	2301      	movs	r3, #1
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063dc:	e008      	b.n	80063f0 <xEventGroupSetBits+0xcc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80063de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	4013      	ands	r3, r2
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d101      	bne.n	80063f0 <xEventGroupSetBits+0xcc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80063ec:	2301      	movs	r3, #1
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d010      	beq.n	8006418 <xEventGroupSetBits+0xf4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <xEventGroupSetBits+0xe4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	4313      	orrs	r3, r2
 8006406:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006410:	4619      	mov	r1, r3
 8006412:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006414:	f001 fc44 	bl	8007ca0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800641c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	429a      	cmp	r2, r3
 8006422:	d1be      	bne.n	80063a2 <xEventGroupSetBits+0x7e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642a:	43db      	mvns	r3, r3
 800642c:	401a      	ands	r2, r3
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006432:	f001 f94d 	bl	80076d0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	681b      	ldr	r3, [r3, #0]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3738      	adds	r7, #56	; 0x38
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff ff68 	bl	8006324 <xEventGroupSetBits>
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4013      	ands	r3, r2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800647c:	2301      	movs	r3, #1
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	e007      	b.n	8006492 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4013      	ands	r3, r2
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	429a      	cmp	r2, r3
 800648c:	d101      	bne.n	8006492 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800648e:	2301      	movs	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006492:	697b      	ldr	r3, [r7, #20]
}
 8006494:	4618      	mov	r0, r3
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	68f9      	ldr	r1, [r7, #12]
 80064b2:	4804      	ldr	r0, [pc, #16]	; (80064c4 <xEventGroupSetBitsFromISR+0x24>)
 80064b4:	f002 fa16 	bl	80088e4 <xTimerPendFunctionCallFromISR>
 80064b8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80064ba:	697b      	ldr	r3, [r7, #20]
	}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	08006443 	.word	0x08006443

080064c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f103 0208 	add.w	r2, r3, #8
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f04f 32ff 	mov.w	r2, #4294967295
 80064e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f103 0208 	add.w	r2, r3, #8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f103 0208 	add.w	r2, r3, #8
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006580:	d103      	bne.n	800658a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	e00c      	b.n	80065a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3308      	adds	r3, #8
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e002      	b.n	8006598 <vListInsert+0x2e>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d2f6      	bcs.n	8006592 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	601a      	str	r2, [r3, #0]
}
 80065d0:	bf00      	nop
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6892      	ldr	r2, [r2, #8]
 80065f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6852      	ldr	r2, [r2, #4]
 80065fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	429a      	cmp	r2, r3
 8006606:	d103      	bne.n	8006610 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	1e5a      	subs	r2, r3, #1
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10c      	bne.n	800665e <xQueueGenericReset+0x2e>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	b672      	cpsid	i
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	b662      	cpsie	i
 8006658:	60bb      	str	r3, [r7, #8]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800665e:	f002 fa6d 	bl	8008b3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666a:	68f9      	ldr	r1, [r7, #12]
 800666c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800666e:	fb01 f303 	mul.w	r3, r1, r3
 8006672:	441a      	add	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668e:	3b01      	subs	r3, #1
 8006690:	68f9      	ldr	r1, [r7, #12]
 8006692:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006694:	fb01 f303 	mul.w	r3, r1, r3
 8006698:	441a      	add	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	22ff      	movs	r2, #255	; 0xff
 80066a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	22ff      	movs	r2, #255	; 0xff
 80066aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d114      	bne.n	80066de <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01a      	beq.n	80066f2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3310      	adds	r3, #16
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 fa87 	bl	8007bd4 <xTaskRemoveFromEventList>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d012      	beq.n	80066f2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066cc:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <xQueueGenericReset+0xd0>)
 80066ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	e009      	b.n	80066f2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3310      	adds	r3, #16
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff fef0 	bl	80064c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3324      	adds	r3, #36	; 0x24
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff feeb 	bl	80064c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066f2:	f002 fa57 	bl	8008ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066f6:	2301      	movs	r3, #1
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	e000ed04 	.word	0xe000ed04

08006704 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08e      	sub	sp, #56	; 0x38
 8006708:	af02      	add	r7, sp, #8
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10c      	bne.n	8006732 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	b672      	cpsid	i
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	b662      	cpsie	i
 800672c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10c      	bne.n	8006752 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	b672      	cpsid	i
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	b662      	cpsie	i
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <xQueueGenericCreateStatic+0x5a>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <xQueueGenericCreateStatic+0x5e>
 800675e:	2301      	movs	r3, #1
 8006760:	e000      	b.n	8006764 <xQueueGenericCreateStatic+0x60>
 8006762:	2300      	movs	r3, #0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10c      	bne.n	8006782 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	b672      	cpsid	i
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	b662      	cpsie	i
 800677c:	623b      	str	r3, [r7, #32]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <xQueueGenericCreateStatic+0x8a>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <xQueueGenericCreateStatic+0x8e>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <xQueueGenericCreateStatic+0x90>
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10c      	bne.n	80067b2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	b672      	cpsid	i
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	b662      	cpsie	i
 80067ac:	61fb      	str	r3, [r7, #28]
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067b2:	2350      	movs	r3, #80	; 0x50
 80067b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b50      	cmp	r3, #80	; 0x50
 80067ba:	d00c      	beq.n	80067d6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	b672      	cpsid	i
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	b662      	cpsie	i
 80067d0:	61bb      	str	r3, [r7, #24]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00d      	beq.n	80067fe <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	4613      	mov	r3, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	68b9      	ldr	r1, [r7, #8]
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f847 	bl	800688c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006800:	4618      	mov	r0, r3
 8006802:	3730      	adds	r7, #48	; 0x30
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08a      	sub	sp, #40	; 0x28
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	4613      	mov	r3, r2
 8006814:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10c      	bne.n	8006836 <xQueueGenericCreate+0x2e>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	b672      	cpsid	i
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	b662      	cpsie	i
 8006830:	613b      	str	r3, [r7, #16]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d102      	bne.n	8006842 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800683c:	2300      	movs	r3, #0
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	e004      	b.n	800684c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	3350      	adds	r3, #80	; 0x50
 8006850:	4618      	mov	r0, r3
 8006852:	f002 fa9f 	bl	8008d94 <pvPortMalloc>
 8006856:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d011      	beq.n	8006882 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	3350      	adds	r3, #80	; 0x50
 8006866:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006870:	79fa      	ldrb	r2, [r7, #7]
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f805 	bl	800688c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006882:	69bb      	ldr	r3, [r7, #24]
	}
 8006884:	4618      	mov	r0, r3
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d103      	bne.n	80068a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	e002      	b.n	80068ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068ba:	2101      	movs	r1, #1
 80068bc:	69b8      	ldr	r0, [r7, #24]
 80068be:	f7ff feb7 	bl	8006630 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08e      	sub	sp, #56	; 0x38
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068e2:	2300      	movs	r3, #0
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10c      	bne.n	800690a <xQueueGenericSend+0x36>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	b672      	cpsid	i
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	b662      	cpsie	i
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d103      	bne.n	8006918 <xQueueGenericSend+0x44>
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <xQueueGenericSend+0x48>
 8006918:	2301      	movs	r3, #1
 800691a:	e000      	b.n	800691e <xQueueGenericSend+0x4a>
 800691c:	2300      	movs	r3, #0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10c      	bne.n	800693c <xQueueGenericSend+0x68>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	b672      	cpsid	i
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	b662      	cpsie	i
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d103      	bne.n	800694a <xQueueGenericSend+0x76>
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <xQueueGenericSend+0x7a>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <xQueueGenericSend+0x7c>
 800694e:	2300      	movs	r3, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10c      	bne.n	800696e <xQueueGenericSend+0x9a>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	b672      	cpsid	i
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	b662      	cpsie	i
 8006968:	623b      	str	r3, [r7, #32]
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800696e:	f001 fb61 	bl	8008034 <xTaskGetSchedulerState>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d102      	bne.n	800697e <xQueueGenericSend+0xaa>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <xQueueGenericSend+0xae>
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <xQueueGenericSend+0xb0>
 8006982:	2300      	movs	r3, #0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10c      	bne.n	80069a2 <xQueueGenericSend+0xce>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	b672      	cpsid	i
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	b662      	cpsie	i
 800699c:	61fb      	str	r3, [r7, #28]
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069a2:	f002 f8cb 	bl	8008b3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d302      	bcc.n	80069b8 <xQueueGenericSend+0xe4>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d129      	bne.n	8006a0c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069be:	f000 fa9b 	bl	8006ef8 <prvCopyDataToQueue>
 80069c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d010      	beq.n	80069ee <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	3324      	adds	r3, #36	; 0x24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 f8ff 	bl	8007bd4 <xTaskRemoveFromEventList>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d013      	beq.n	8006a04 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069dc:	4b3f      	ldr	r3, [pc, #252]	; (8006adc <xQueueGenericSend+0x208>)
 80069de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	e00a      	b.n	8006a04 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d007      	beq.n	8006a04 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069f4:	4b39      	ldr	r3, [pc, #228]	; (8006adc <xQueueGenericSend+0x208>)
 80069f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a04:	f002 f8ce 	bl	8008ba4 <vPortExitCritical>
				return pdPASS;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e063      	b.n	8006ad4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a12:	f002 f8c7 	bl	8008ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e05c      	b.n	8006ad4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a20:	f107 0314 	add.w	r3, r7, #20
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 f9a1 	bl	8007d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a2e:	f002 f8b9 	bl	8008ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a32:	f000 fe3f 	bl	80076b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a36:	f002 f881 	bl	8008b3c <vPortEnterCritical>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a40:	b25b      	sxtb	r3, r3
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a46:	d103      	bne.n	8006a50 <xQueueGenericSend+0x17c>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a56:	b25b      	sxtb	r3, r3
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5c:	d103      	bne.n	8006a66 <xQueueGenericSend+0x192>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a66:	f002 f89d 	bl	8008ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a6a:	1d3a      	adds	r2, r7, #4
 8006a6c:	f107 0314 	add.w	r3, r7, #20
 8006a70:	4611      	mov	r1, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 f990 	bl	8007d98 <xTaskCheckForTimeOut>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d124      	bne.n	8006ac8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a80:	f000 fb32 	bl	80070e8 <prvIsQueueFull>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d018      	beq.n	8006abc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	3310      	adds	r3, #16
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 f80a 	bl	8007aac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9a:	f000 fabd 	bl	8007018 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a9e:	f000 fe17 	bl	80076d0 <xTaskResumeAll>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f47f af7c 	bne.w	80069a2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006aaa:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <xQueueGenericSend+0x208>)
 8006aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	e772      	b.n	80069a2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006abe:	f000 faab 	bl	8007018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ac2:	f000 fe05 	bl	80076d0 <xTaskResumeAll>
 8006ac6:	e76c      	b.n	80069a2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aca:	f000 faa5 	bl	8007018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ace:	f000 fdff 	bl	80076d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ad2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3738      	adds	r7, #56	; 0x38
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08e      	sub	sp, #56	; 0x38
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10c      	bne.n	8006b12 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	b672      	cpsid	i
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	b662      	cpsie	i
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d103      	bne.n	8006b20 <xQueueGenericSendFromISR+0x40>
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <xQueueGenericSendFromISR+0x44>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <xQueueGenericSendFromISR+0x46>
 8006b24:	2300      	movs	r3, #0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10c      	bne.n	8006b44 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	b672      	cpsid	i
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	b662      	cpsie	i
 8006b3e:	623b      	str	r3, [r7, #32]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d103      	bne.n	8006b52 <xQueueGenericSendFromISR+0x72>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <xQueueGenericSendFromISR+0x76>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <xQueueGenericSendFromISR+0x78>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10c      	bne.n	8006b76 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	b672      	cpsid	i
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	b662      	cpsie	i
 8006b70:	61fb      	str	r3, [r7, #28]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b76:	f002 f8c9 	bl	8008d0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	b672      	cpsid	i
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	b662      	cpsie	i
 8006b92:	61ba      	str	r2, [r7, #24]
 8006b94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d302      	bcc.n	8006bac <xQueueGenericSendFromISR+0xcc>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d12c      	bne.n	8006c06 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bbc:	f000 f99c 	bl	8006ef8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bc0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc8:	d112      	bne.n	8006bf0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d016      	beq.n	8006c00 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	3324      	adds	r3, #36	; 0x24
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fffc 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00e      	beq.n	8006c00 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e007      	b.n	8006c00 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	b25a      	sxtb	r2, r3
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c00:	2301      	movs	r3, #1
 8006c02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006c04:	e001      	b.n	8006c0a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3738      	adds	r7, #56	; 0x38
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08c      	sub	sp, #48	; 0x30
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10c      	bne.n	8006c54 <xQueueReceive+0x34>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	b672      	cpsid	i
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	b662      	cpsie	i
 8006c4e:	623b      	str	r3, [r7, #32]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d103      	bne.n	8006c62 <xQueueReceive+0x42>
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <xQueueReceive+0x46>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <xQueueReceive+0x48>
 8006c66:	2300      	movs	r3, #0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10c      	bne.n	8006c86 <xQueueReceive+0x66>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	b672      	cpsid	i
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	b662      	cpsie	i
 8006c80:	61fb      	str	r3, [r7, #28]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c86:	f001 f9d5 	bl	8008034 <xTaskGetSchedulerState>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <xQueueReceive+0x76>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <xQueueReceive+0x7a>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <xQueueReceive+0x7c>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10c      	bne.n	8006cba <xQueueReceive+0x9a>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	b672      	cpsid	i
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	b662      	cpsie	i
 8006cb4:	61bb      	str	r3, [r7, #24]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cba:	f001 ff3f 	bl	8008b3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d01f      	beq.n	8006d0a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cce:	f000 f97d 	bl	8006fcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	1e5a      	subs	r2, r3, #1
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00f      	beq.n	8006d02 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	3310      	adds	r3, #16
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 ff74 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cf2:	4b3d      	ldr	r3, [pc, #244]	; (8006de8 <xQueueReceive+0x1c8>)
 8006cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d02:	f001 ff4f 	bl	8008ba4 <vPortExitCritical>
				return pdPASS;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e069      	b.n	8006dde <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d103      	bne.n	8006d18 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d10:	f001 ff48 	bl	8008ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e062      	b.n	8006dde <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d1e:	f107 0310 	add.w	r3, r7, #16
 8006d22:	4618      	mov	r0, r3
 8006d24:	f001 f822 	bl	8007d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d2c:	f001 ff3a 	bl	8008ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d30:	f000 fcc0 	bl	80076b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d34:	f001 ff02 	bl	8008b3c <vPortEnterCritical>
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d3e:	b25b      	sxtb	r3, r3
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d103      	bne.n	8006d4e <xQueueReceive+0x12e>
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d54:	b25b      	sxtb	r3, r3
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5a:	d103      	bne.n	8006d64 <xQueueReceive+0x144>
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d64:	f001 ff1e 	bl	8008ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d68:	1d3a      	adds	r2, r7, #4
 8006d6a:	f107 0310 	add.w	r3, r7, #16
 8006d6e:	4611      	mov	r1, r2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 f811 	bl	8007d98 <xTaskCheckForTimeOut>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d123      	bne.n	8006dc4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d7e:	f000 f99d 	bl	80070bc <prvIsQueueEmpty>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d017      	beq.n	8006db8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8a:	3324      	adds	r3, #36	; 0x24
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fe8b 	bl	8007aac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d98:	f000 f93e 	bl	8007018 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d9c:	f000 fc98 	bl	80076d0 <xTaskResumeAll>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d189      	bne.n	8006cba <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <xQueueReceive+0x1c8>)
 8006da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	e780      	b.n	8006cba <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dba:	f000 f92d 	bl	8007018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dbe:	f000 fc87 	bl	80076d0 <xTaskResumeAll>
 8006dc2:	e77a      	b.n	8006cba <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc6:	f000 f927 	bl	8007018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dca:	f000 fc81 	bl	80076d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd0:	f000 f974 	bl	80070bc <prvIsQueueEmpty>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f43f af6f 	beq.w	8006cba <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ddc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3730      	adds	r7, #48	; 0x30
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08e      	sub	sp, #56	; 0x38
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10c      	bne.n	8006e1c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	b672      	cpsid	i
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	b662      	cpsie	i
 8006e16:	623b      	str	r3, [r7, #32]
}
 8006e18:	bf00      	nop
 8006e1a:	e7fe      	b.n	8006e1a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <xQueueReceiveFromISR+0x3e>
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <xQueueReceiveFromISR+0x42>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <xQueueReceiveFromISR+0x44>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10c      	bne.n	8006e4e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	b672      	cpsid	i
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	b662      	cpsie	i
 8006e48:	61fb      	str	r3, [r7, #28]
}
 8006e4a:	bf00      	nop
 8006e4c:	e7fe      	b.n	8006e4c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e4e:	f001 ff5d 	bl	8008d0c <vPortValidateInterruptPriority>
	__asm volatile
 8006e52:	f3ef 8211 	mrs	r2, BASEPRI
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	b672      	cpsid	i
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	b662      	cpsie	i
 8006e6a:	61ba      	str	r2, [r7, #24]
 8006e6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d02f      	beq.n	8006ede <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e8c:	f000 f89e 	bl	8006fcc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	1e5a      	subs	r2, r3, #1
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea0:	d112      	bne.n	8006ec8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d016      	beq.n	8006ed8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	3310      	adds	r3, #16
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fe90 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00e      	beq.n	8006ed8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e007      	b.n	8006ed8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ecc:	3301      	adds	r3, #1
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	b25a      	sxtb	r2, r3
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	637b      	str	r3, [r7, #52]	; 0x34
 8006edc:	e001      	b.n	8006ee2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f383 8811 	msr	BASEPRI, r3
}
 8006eec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3738      	adds	r7, #56	; 0x38
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10d      	bne.n	8006f32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d14d      	bne.n	8006fba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 f8a4 	bl	8008070 <xTaskPriorityDisinherit>
 8006f28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	609a      	str	r2, [r3, #8]
 8006f30:	e043      	b.n	8006fba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d119      	bne.n	8006f6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6858      	ldr	r0, [r3, #4]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	461a      	mov	r2, r3
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	f002 fa47 	bl	80093d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	441a      	add	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d32b      	bcc.n	8006fba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	605a      	str	r2, [r3, #4]
 8006f6a:	e026      	b.n	8006fba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68d8      	ldr	r0, [r3, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f74:	461a      	mov	r2, r3
 8006f76:	68b9      	ldr	r1, [r7, #8]
 8006f78:	f002 fa2d 	bl	80093d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	425b      	negs	r3, r3
 8006f86:	441a      	add	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d207      	bcs.n	8006fa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	425b      	negs	r3, r3
 8006fa2:	441a      	add	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d105      	bne.n	8006fba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fc2:	697b      	ldr	r3, [r7, #20]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d018      	beq.n	8007010 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	441a      	add	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d303      	bcc.n	8007000 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68d9      	ldr	r1, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	461a      	mov	r2, r3
 800700a:	6838      	ldr	r0, [r7, #0]
 800700c:	f002 f9e3 	bl	80093d6 <memcpy>
	}
}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007020:	f001 fd8c 	bl	8008b3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800702a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800702c:	e011      	b.n	8007052 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	2b00      	cmp	r3, #0
 8007034:	d012      	beq.n	800705c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3324      	adds	r3, #36	; 0x24
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fdca 	bl	8007bd4 <xTaskRemoveFromEventList>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007046:	f000 ff0d 	bl	8007e64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	3b01      	subs	r3, #1
 800704e:	b2db      	uxtb	r3, r3
 8007050:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007056:	2b00      	cmp	r3, #0
 8007058:	dce9      	bgt.n	800702e <prvUnlockQueue+0x16>
 800705a:	e000      	b.n	800705e <prvUnlockQueue+0x46>
					break;
 800705c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	22ff      	movs	r2, #255	; 0xff
 8007062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007066:	f001 fd9d 	bl	8008ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800706a:	f001 fd67 	bl	8008b3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007074:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007076:	e011      	b.n	800709c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d012      	beq.n	80070a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3310      	adds	r3, #16
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fda5 	bl	8007bd4 <xTaskRemoveFromEventList>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007090:	f000 fee8 	bl	8007e64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007094:	7bbb      	ldrb	r3, [r7, #14]
 8007096:	3b01      	subs	r3, #1
 8007098:	b2db      	uxtb	r3, r3
 800709a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800709c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	dce9      	bgt.n	8007078 <prvUnlockQueue+0x60>
 80070a4:	e000      	b.n	80070a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	22ff      	movs	r2, #255	; 0xff
 80070ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80070b0:	f001 fd78 	bl	8008ba4 <vPortExitCritical>
}
 80070b4:	bf00      	nop
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070c4:	f001 fd3a 	bl	8008b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070d0:	2301      	movs	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	e001      	b.n	80070da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070da:	f001 fd63 	bl	8008ba4 <vPortExitCritical>

	return xReturn;
 80070de:	68fb      	ldr	r3, [r7, #12]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070f0:	f001 fd24 	bl	8008b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d102      	bne.n	8007106 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007100:	2301      	movs	r3, #1
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e001      	b.n	800710a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800710a:	f001 fd4b 	bl	8008ba4 <vPortExitCritical>

	return xReturn;
 800710e:	68fb      	ldr	r3, [r7, #12]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	e014      	b.n	8007152 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007128:	4a0f      	ldr	r2, [pc, #60]	; (8007168 <vQueueAddToRegistry+0x50>)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10b      	bne.n	800714c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007134:	490c      	ldr	r1, [pc, #48]	; (8007168 <vQueueAddToRegistry+0x50>)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800713e:	4a0a      	ldr	r2, [pc, #40]	; (8007168 <vQueueAddToRegistry+0x50>)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	4413      	add	r3, r2
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800714a:	e006      	b.n	800715a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3301      	adds	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b07      	cmp	r3, #7
 8007156:	d9e7      	bls.n	8007128 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007158:	bf00      	nop
 800715a:	bf00      	nop
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20002720 	.word	0x20002720

0800716c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800717c:	f001 fcde 	bl	8008b3c <vPortEnterCritical>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007186:	b25b      	sxtb	r3, r3
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718c:	d103      	bne.n	8007196 <vQueueWaitForMessageRestricted+0x2a>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800719c:	b25b      	sxtb	r3, r3
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a2:	d103      	bne.n	80071ac <vQueueWaitForMessageRestricted+0x40>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071ac:	f001 fcfa 	bl	8008ba4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	3324      	adds	r3, #36	; 0x24
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fcd9 	bl	8007b78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071c6:	6978      	ldr	r0, [r7, #20]
 80071c8:	f7ff ff26 	bl	8007018 <prvUnlockQueue>
	}
 80071cc:	bf00      	nop
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08e      	sub	sp, #56	; 0x38
 80071d8:	af04      	add	r7, sp, #16
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10c      	bne.n	8007202 <xTaskCreateStatic+0x2e>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	b672      	cpsid	i
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	b662      	cpsie	i
 80071fc:	623b      	str	r3, [r7, #32]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10c      	bne.n	8007222 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	b672      	cpsid	i
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	b662      	cpsie	i
 800721c:	61fb      	str	r3, [r7, #28]
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007222:	23c0      	movs	r3, #192	; 0xc0
 8007224:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2bc0      	cmp	r3, #192	; 0xc0
 800722a:	d00c      	beq.n	8007246 <xTaskCreateStatic+0x72>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	b672      	cpsid	i
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	b662      	cpsie	i
 8007240:	61bb      	str	r3, [r7, #24]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007246:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724a:	2b00      	cmp	r3, #0
 800724c:	d01e      	beq.n	800728c <xTaskCreateStatic+0xb8>
 800724e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01b      	beq.n	800728c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800725c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	2202      	movs	r2, #2
 8007262:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007266:	2300      	movs	r3, #0
 8007268:	9303      	str	r3, [sp, #12]
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	9302      	str	r3, [sp, #8]
 800726e:	f107 0314 	add.w	r3, r7, #20
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 f850 	bl	8007324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007286:	f000 f8f9 	bl	800747c <prvAddNewTaskToReadyList>
 800728a:	e001      	b.n	8007290 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007290:	697b      	ldr	r3, [r7, #20]
	}
 8007292:	4618      	mov	r0, r3
 8007294:	3728      	adds	r7, #40	; 0x28
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800729a:	b580      	push	{r7, lr}
 800729c:	b08c      	sub	sp, #48	; 0x30
 800729e:	af04      	add	r7, sp, #16
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072aa:	88fb      	ldrh	r3, [r7, #6]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f001 fd70 	bl	8008d94 <pvPortMalloc>
 80072b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00e      	beq.n	80072da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072bc:	20c0      	movs	r0, #192	; 0xc0
 80072be:	f001 fd69 	bl	8008d94 <pvPortMalloc>
 80072c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
 80072d0:	e005      	b.n	80072de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072d2:	6978      	ldr	r0, [r7, #20]
 80072d4:	f001 fe28 	bl	8008f28 <vPortFree>
 80072d8:	e001      	b.n	80072de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d017      	beq.n	8007314 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072ec:	88fa      	ldrh	r2, [r7, #6]
 80072ee:	2300      	movs	r3, #0
 80072f0:	9303      	str	r3, [sp, #12]
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	9302      	str	r3, [sp, #8]
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	68b9      	ldr	r1, [r7, #8]
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f80e 	bl	8007324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007308:	69f8      	ldr	r0, [r7, #28]
 800730a:	f000 f8b7 	bl	800747c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800730e:	2301      	movs	r3, #1
 8007310:	61bb      	str	r3, [r7, #24]
 8007312:	e002      	b.n	800731a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007314:	f04f 33ff 	mov.w	r3, #4294967295
 8007318:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800731a:	69bb      	ldr	r3, [r7, #24]
	}
 800731c:	4618      	mov	r0, r3
 800731e:	3720      	adds	r7, #32
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b088      	sub	sp, #32
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	461a      	mov	r2, r3
 800733c:	21a5      	movs	r1, #165	; 0xa5
 800733e:	f002 f858 	bl	80093f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800734c:	440b      	add	r3, r1
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	f023 0307 	bic.w	r3, r3, #7
 800735a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00c      	beq.n	8007380 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	b672      	cpsid	i
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	b662      	cpsie	i
 800737a:	617b      	str	r3, [r7, #20]
}
 800737c:	bf00      	nop
 800737e:	e7fe      	b.n	800737e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d01f      	beq.n	80073c6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007386:	2300      	movs	r3, #0
 8007388:	61fb      	str	r3, [r7, #28]
 800738a:	e012      	b.n	80073b2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	7819      	ldrb	r1, [r3, #0]
 8007394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	4413      	add	r3, r2
 800739a:	3334      	adds	r3, #52	; 0x34
 800739c:	460a      	mov	r2, r1
 800739e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d006      	beq.n	80073ba <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	3301      	adds	r3, #1
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	2b0f      	cmp	r3, #15
 80073b6:	d9e9      	bls.n	800738c <prvInitialiseNewTask+0x68>
 80073b8:	e000      	b.n	80073bc <prvInitialiseNewTask+0x98>
			{
				break;
 80073ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073c4:	e003      	b.n	80073ce <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	2b37      	cmp	r3, #55	; 0x37
 80073d2:	d901      	bls.n	80073d8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073d4:	2337      	movs	r3, #55	; 0x37
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	2200      	movs	r2, #0
 80073e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	3304      	adds	r3, #4
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff f88a 	bl	8006508 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	3318      	adds	r3, #24
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff f885 	bl	8006508 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007402:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007412:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	2200      	movs	r2, #0
 8007418:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	2200      	movs	r2, #0
 8007426:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	3358      	adds	r3, #88	; 0x58
 800742e:	2260      	movs	r2, #96	; 0x60
 8007430:	2100      	movs	r1, #0
 8007432:	4618      	mov	r0, r3
 8007434:	f001 ffdd 	bl	80093f2 <memset>
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	4a0d      	ldr	r2, [pc, #52]	; (8007470 <prvInitialiseNewTask+0x14c>)
 800743c:	65da      	str	r2, [r3, #92]	; 0x5c
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	4a0c      	ldr	r2, [pc, #48]	; (8007474 <prvInitialiseNewTask+0x150>)
 8007442:	661a      	str	r2, [r3, #96]	; 0x60
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	4a0c      	ldr	r2, [pc, #48]	; (8007478 <prvInitialiseNewTask+0x154>)
 8007448:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	68f9      	ldr	r1, [r7, #12]
 800744e:	69b8      	ldr	r0, [r7, #24]
 8007450:	f001 fa68 	bl	8008924 <pxPortInitialiseStack>
 8007454:	4602      	mov	r2, r0
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007466:	bf00      	nop
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	0800a068 	.word	0x0800a068
 8007474:	0800a088 	.word	0x0800a088
 8007478:	0800a048 	.word	0x0800a048

0800747c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007484:	f001 fb5a 	bl	8008b3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007488:	4b2d      	ldr	r3, [pc, #180]	; (8007540 <prvAddNewTaskToReadyList+0xc4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3301      	adds	r3, #1
 800748e:	4a2c      	ldr	r2, [pc, #176]	; (8007540 <prvAddNewTaskToReadyList+0xc4>)
 8007490:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007492:	4b2c      	ldr	r3, [pc, #176]	; (8007544 <prvAddNewTaskToReadyList+0xc8>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d109      	bne.n	80074ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800749a:	4a2a      	ldr	r2, [pc, #168]	; (8007544 <prvAddNewTaskToReadyList+0xc8>)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074a0:	4b27      	ldr	r3, [pc, #156]	; (8007540 <prvAddNewTaskToReadyList+0xc4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d110      	bne.n	80074ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074a8:	f000 fd00 	bl	8007eac <prvInitialiseTaskLists>
 80074ac:	e00d      	b.n	80074ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074ae:	4b26      	ldr	r3, [pc, #152]	; (8007548 <prvAddNewTaskToReadyList+0xcc>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074b6:	4b23      	ldr	r3, [pc, #140]	; (8007544 <prvAddNewTaskToReadyList+0xc8>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d802      	bhi.n	80074ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074c4:	4a1f      	ldr	r2, [pc, #124]	; (8007544 <prvAddNewTaskToReadyList+0xc8>)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074ca:	4b20      	ldr	r3, [pc, #128]	; (800754c <prvAddNewTaskToReadyList+0xd0>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3301      	adds	r3, #1
 80074d0:	4a1e      	ldr	r2, [pc, #120]	; (800754c <prvAddNewTaskToReadyList+0xd0>)
 80074d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074d4:	4b1d      	ldr	r3, [pc, #116]	; (800754c <prvAddNewTaskToReadyList+0xd0>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e0:	4b1b      	ldr	r3, [pc, #108]	; (8007550 <prvAddNewTaskToReadyList+0xd4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d903      	bls.n	80074f0 <prvAddNewTaskToReadyList+0x74>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	4a18      	ldr	r2, [pc, #96]	; (8007550 <prvAddNewTaskToReadyList+0xd4>)
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4a15      	ldr	r2, [pc, #84]	; (8007554 <prvAddNewTaskToReadyList+0xd8>)
 80074fe:	441a      	add	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3304      	adds	r3, #4
 8007504:	4619      	mov	r1, r3
 8007506:	4610      	mov	r0, r2
 8007508:	f7ff f80b 	bl	8006522 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800750c:	f001 fb4a 	bl	8008ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007510:	4b0d      	ldr	r3, [pc, #52]	; (8007548 <prvAddNewTaskToReadyList+0xcc>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00e      	beq.n	8007536 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007518:	4b0a      	ldr	r3, [pc, #40]	; (8007544 <prvAddNewTaskToReadyList+0xc8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	429a      	cmp	r2, r3
 8007524:	d207      	bcs.n	8007536 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007526:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <prvAddNewTaskToReadyList+0xdc>)
 8007528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20002c34 	.word	0x20002c34
 8007544:	20002760 	.word	0x20002760
 8007548:	20002c40 	.word	0x20002c40
 800754c:	20002c50 	.word	0x20002c50
 8007550:	20002c3c 	.word	0x20002c3c
 8007554:	20002764 	.word	0x20002764
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d019      	beq.n	80075a2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800756e:	4b14      	ldr	r3, [pc, #80]	; (80075c0 <vTaskDelay+0x64>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00c      	beq.n	8007590 <vTaskDelay+0x34>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	b672      	cpsid	i
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	b662      	cpsie	i
 800758a:	60bb      	str	r3, [r7, #8]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007590:	f000 f890 	bl	80076b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007594:	2100      	movs	r1, #0
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fdf4 	bl	8008184 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800759c:	f000 f898 	bl	80076d0 <xTaskResumeAll>
 80075a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d107      	bne.n	80075b8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80075a8:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <vTaskDelay+0x68>)
 80075aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20002c5c 	.word	0x20002c5c
 80075c4:	e000ed04 	.word	0xe000ed04

080075c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	; 0x28
 80075cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075d6:	463a      	mov	r2, r7
 80075d8:	1d39      	adds	r1, r7, #4
 80075da:	f107 0308 	add.w	r3, r7, #8
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fd40 	bl	8006064 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	9202      	str	r2, [sp, #8]
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	2300      	movs	r3, #0
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	2300      	movs	r3, #0
 80075f4:	460a      	mov	r2, r1
 80075f6:	4927      	ldr	r1, [pc, #156]	; (8007694 <vTaskStartScheduler+0xcc>)
 80075f8:	4827      	ldr	r0, [pc, #156]	; (8007698 <vTaskStartScheduler+0xd0>)
 80075fa:	f7ff fdeb 	bl	80071d4 <xTaskCreateStatic>
 80075fe:	4603      	mov	r3, r0
 8007600:	4a26      	ldr	r2, [pc, #152]	; (800769c <vTaskStartScheduler+0xd4>)
 8007602:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007604:	4b25      	ldr	r3, [pc, #148]	; (800769c <vTaskStartScheduler+0xd4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800760c:	2301      	movs	r3, #1
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	e001      	b.n	8007616 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007612:	2300      	movs	r3, #0
 8007614:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d102      	bne.n	8007622 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800761c:	f000 fe06 	bl	800822c <xTimerCreateTimerTask>
 8007620:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d11f      	bne.n	8007668 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	b672      	cpsid	i
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	b662      	cpsie	i
 800763c:	613b      	str	r3, [r7, #16]
}
 800763e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007640:	4b17      	ldr	r3, [pc, #92]	; (80076a0 <vTaskStartScheduler+0xd8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3358      	adds	r3, #88	; 0x58
 8007646:	4a17      	ldr	r2, [pc, #92]	; (80076a4 <vTaskStartScheduler+0xdc>)
 8007648:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800764a:	4b17      	ldr	r3, [pc, #92]	; (80076a8 <vTaskStartScheduler+0xe0>)
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007652:	4b16      	ldr	r3, [pc, #88]	; (80076ac <vTaskStartScheduler+0xe4>)
 8007654:	2201      	movs	r2, #1
 8007656:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007658:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <vTaskStartScheduler+0xe8>)
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800765e:	f7f9 faf1 	bl	8000c44 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007662:	f001 f9ed 	bl	8008a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007666:	e010      	b.n	800768a <vTaskStartScheduler+0xc2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766e:	d10c      	bne.n	800768a <vTaskStartScheduler+0xc2>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	b672      	cpsid	i
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	b662      	cpsie	i
 8007684:	60fb      	str	r3, [r7, #12]
}
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <vTaskStartScheduler+0xc0>
}
 800768a:	bf00      	nop
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	08009ecc 	.word	0x08009ecc
 8007698:	08007e7d 	.word	0x08007e7d
 800769c:	20002c58 	.word	0x20002c58
 80076a0:	20002760 	.word	0x20002760
 80076a4:	20000010 	.word	0x20000010
 80076a8:	20002c54 	.word	0x20002c54
 80076ac:	20002c40 	.word	0x20002c40
 80076b0:	20002c38 	.word	0x20002c38

080076b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80076b8:	4b04      	ldr	r3, [pc, #16]	; (80076cc <vTaskSuspendAll+0x18>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3301      	adds	r3, #1
 80076be:	4a03      	ldr	r2, [pc, #12]	; (80076cc <vTaskSuspendAll+0x18>)
 80076c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80076c2:	bf00      	nop
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	20002c5c 	.word	0x20002c5c

080076d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076da:	2300      	movs	r3, #0
 80076dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076de:	4b43      	ldr	r3, [pc, #268]	; (80077ec <xTaskResumeAll+0x11c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10c      	bne.n	8007700 <xTaskResumeAll+0x30>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	b672      	cpsid	i
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	b662      	cpsie	i
 80076fa:	603b      	str	r3, [r7, #0]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007700:	f001 fa1c 	bl	8008b3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007704:	4b39      	ldr	r3, [pc, #228]	; (80077ec <xTaskResumeAll+0x11c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3b01      	subs	r3, #1
 800770a:	4a38      	ldr	r2, [pc, #224]	; (80077ec <xTaskResumeAll+0x11c>)
 800770c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800770e:	4b37      	ldr	r3, [pc, #220]	; (80077ec <xTaskResumeAll+0x11c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d162      	bne.n	80077dc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007716:	4b36      	ldr	r3, [pc, #216]	; (80077f0 <xTaskResumeAll+0x120>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d05e      	beq.n	80077dc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800771e:	e02f      	b.n	8007780 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007720:	4b34      	ldr	r3, [pc, #208]	; (80077f4 <xTaskResumeAll+0x124>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3318      	adds	r3, #24
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe ff55 	bl	80065dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3304      	adds	r3, #4
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe ff50 	bl	80065dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007740:	4b2d      	ldr	r3, [pc, #180]	; (80077f8 <xTaskResumeAll+0x128>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	d903      	bls.n	8007750 <xTaskResumeAll+0x80>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	4a2a      	ldr	r2, [pc, #168]	; (80077f8 <xTaskResumeAll+0x128>)
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4a27      	ldr	r2, [pc, #156]	; (80077fc <xTaskResumeAll+0x12c>)
 800775e:	441a      	add	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3304      	adds	r3, #4
 8007764:	4619      	mov	r1, r3
 8007766:	4610      	mov	r0, r2
 8007768:	f7fe fedb 	bl	8006522 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007770:	4b23      	ldr	r3, [pc, #140]	; (8007800 <xTaskResumeAll+0x130>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	429a      	cmp	r2, r3
 8007778:	d302      	bcc.n	8007780 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800777a:	4b22      	ldr	r3, [pc, #136]	; (8007804 <xTaskResumeAll+0x134>)
 800777c:	2201      	movs	r2, #1
 800777e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007780:	4b1c      	ldr	r3, [pc, #112]	; (80077f4 <xTaskResumeAll+0x124>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1cb      	bne.n	8007720 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800778e:	f000 fc31 	bl	8007ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007792:	4b1d      	ldr	r3, [pc, #116]	; (8007808 <xTaskResumeAll+0x138>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d010      	beq.n	80077c0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800779e:	f000 f847 	bl	8007830 <xTaskIncrementTick>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80077a8:	4b16      	ldr	r3, [pc, #88]	; (8007804 <xTaskResumeAll+0x134>)
 80077aa:	2201      	movs	r2, #1
 80077ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1f1      	bne.n	800779e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80077ba:	4b13      	ldr	r3, [pc, #76]	; (8007808 <xTaskResumeAll+0x138>)
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077c0:	4b10      	ldr	r3, [pc, #64]	; (8007804 <xTaskResumeAll+0x134>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d009      	beq.n	80077dc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077c8:	2301      	movs	r3, #1
 80077ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077cc:	4b0f      	ldr	r3, [pc, #60]	; (800780c <xTaskResumeAll+0x13c>)
 80077ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077dc:	f001 f9e2 	bl	8008ba4 <vPortExitCritical>

	return xAlreadyYielded;
 80077e0:	68bb      	ldr	r3, [r7, #8]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20002c5c 	.word	0x20002c5c
 80077f0:	20002c34 	.word	0x20002c34
 80077f4:	20002bf4 	.word	0x20002bf4
 80077f8:	20002c3c 	.word	0x20002c3c
 80077fc:	20002764 	.word	0x20002764
 8007800:	20002760 	.word	0x20002760
 8007804:	20002c48 	.word	0x20002c48
 8007808:	20002c44 	.word	0x20002c44
 800780c:	e000ed04 	.word	0xe000ed04

08007810 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007816:	4b05      	ldr	r3, [pc, #20]	; (800782c <xTaskGetTickCount+0x1c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800781c:	687b      	ldr	r3, [r7, #4]
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	20002c38 	.word	0x20002c38

08007830 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800783a:	4b50      	ldr	r3, [pc, #320]	; (800797c <xTaskIncrementTick+0x14c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	f040 808b 	bne.w	800795a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007844:	4b4e      	ldr	r3, [pc, #312]	; (8007980 <xTaskIncrementTick+0x150>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3301      	adds	r3, #1
 800784a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800784c:	4a4c      	ldr	r2, [pc, #304]	; (8007980 <xTaskIncrementTick+0x150>)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d122      	bne.n	800789e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007858:	4b4a      	ldr	r3, [pc, #296]	; (8007984 <xTaskIncrementTick+0x154>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00c      	beq.n	800787c <xTaskIncrementTick+0x4c>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	b672      	cpsid	i
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	b662      	cpsie	i
 8007876:	603b      	str	r3, [r7, #0]
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <xTaskIncrementTick+0x4a>
 800787c:	4b41      	ldr	r3, [pc, #260]	; (8007984 <xTaskIncrementTick+0x154>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	4b41      	ldr	r3, [pc, #260]	; (8007988 <xTaskIncrementTick+0x158>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a3f      	ldr	r2, [pc, #252]	; (8007984 <xTaskIncrementTick+0x154>)
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	4a3f      	ldr	r2, [pc, #252]	; (8007988 <xTaskIncrementTick+0x158>)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	4b3e      	ldr	r3, [pc, #248]	; (800798c <xTaskIncrementTick+0x15c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	4a3d      	ldr	r2, [pc, #244]	; (800798c <xTaskIncrementTick+0x15c>)
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	f000 fbab 	bl	8007ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800789e:	4b3c      	ldr	r3, [pc, #240]	; (8007990 <xTaskIncrementTick+0x160>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d349      	bcc.n	800793c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078a8:	4b36      	ldr	r3, [pc, #216]	; (8007984 <xTaskIncrementTick+0x154>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d104      	bne.n	80078bc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b2:	4b37      	ldr	r3, [pc, #220]	; (8007990 <xTaskIncrementTick+0x160>)
 80078b4:	f04f 32ff 	mov.w	r2, #4294967295
 80078b8:	601a      	str	r2, [r3, #0]
					break;
 80078ba:	e03f      	b.n	800793c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078bc:	4b31      	ldr	r3, [pc, #196]	; (8007984 <xTaskIncrementTick+0x154>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d203      	bcs.n	80078dc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078d4:	4a2e      	ldr	r2, [pc, #184]	; (8007990 <xTaskIncrementTick+0x160>)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078da:	e02f      	b.n	800793c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	3304      	adds	r3, #4
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fe fe7b 	bl	80065dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	3318      	adds	r3, #24
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fe72 	bl	80065dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fc:	4b25      	ldr	r3, [pc, #148]	; (8007994 <xTaskIncrementTick+0x164>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d903      	bls.n	800790c <xTaskIncrementTick+0xdc>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	4a22      	ldr	r2, [pc, #136]	; (8007994 <xTaskIncrementTick+0x164>)
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4a1f      	ldr	r2, [pc, #124]	; (8007998 <xTaskIncrementTick+0x168>)
 800791a:	441a      	add	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7fe fdfd 	bl	8006522 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792c:	4b1b      	ldr	r3, [pc, #108]	; (800799c <xTaskIncrementTick+0x16c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	429a      	cmp	r2, r3
 8007934:	d3b8      	bcc.n	80078a8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007936:	2301      	movs	r3, #1
 8007938:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800793a:	e7b5      	b.n	80078a8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800793c:	4b17      	ldr	r3, [pc, #92]	; (800799c <xTaskIncrementTick+0x16c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007942:	4915      	ldr	r1, [pc, #84]	; (8007998 <xTaskIncrementTick+0x168>)
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d907      	bls.n	8007964 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007954:	2301      	movs	r3, #1
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	e004      	b.n	8007964 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800795a:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <xTaskIncrementTick+0x170>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3301      	adds	r3, #1
 8007960:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <xTaskIncrementTick+0x170>)
 8007962:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007964:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <xTaskIncrementTick+0x174>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800796c:	2301      	movs	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007970:	697b      	ldr	r3, [r7, #20]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20002c5c 	.word	0x20002c5c
 8007980:	20002c38 	.word	0x20002c38
 8007984:	20002bec 	.word	0x20002bec
 8007988:	20002bf0 	.word	0x20002bf0
 800798c:	20002c4c 	.word	0x20002c4c
 8007990:	20002c54 	.word	0x20002c54
 8007994:	20002c3c 	.word	0x20002c3c
 8007998:	20002764 	.word	0x20002764
 800799c:	20002760 	.word	0x20002760
 80079a0:	20002c44 	.word	0x20002c44
 80079a4:	20002c48 	.word	0x20002c48

080079a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079ae:	4b37      	ldr	r3, [pc, #220]	; (8007a8c <vTaskSwitchContext+0xe4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079b6:	4b36      	ldr	r3, [pc, #216]	; (8007a90 <vTaskSwitchContext+0xe8>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079bc:	e061      	b.n	8007a82 <vTaskSwitchContext+0xda>
		xYieldPending = pdFALSE;
 80079be:	4b34      	ldr	r3, [pc, #208]	; (8007a90 <vTaskSwitchContext+0xe8>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80079c4:	f7f9 f94c 	bl	8000c60 <getRunTimeCounterValue>
 80079c8:	4603      	mov	r3, r0
 80079ca:	4a32      	ldr	r2, [pc, #200]	; (8007a94 <vTaskSwitchContext+0xec>)
 80079cc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80079ce:	4b31      	ldr	r3, [pc, #196]	; (8007a94 <vTaskSwitchContext+0xec>)
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b31      	ldr	r3, [pc, #196]	; (8007a98 <vTaskSwitchContext+0xf0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d909      	bls.n	80079ee <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80079da:	4b30      	ldr	r3, [pc, #192]	; (8007a9c <vTaskSwitchContext+0xf4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079e0:	4a2c      	ldr	r2, [pc, #176]	; (8007a94 <vTaskSwitchContext+0xec>)
 80079e2:	6810      	ldr	r0, [r2, #0]
 80079e4:	4a2c      	ldr	r2, [pc, #176]	; (8007a98 <vTaskSwitchContext+0xf0>)
 80079e6:	6812      	ldr	r2, [r2, #0]
 80079e8:	1a82      	subs	r2, r0, r2
 80079ea:	440a      	add	r2, r1
 80079ec:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80079ee:	4b29      	ldr	r3, [pc, #164]	; (8007a94 <vTaskSwitchContext+0xec>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a29      	ldr	r2, [pc, #164]	; (8007a98 <vTaskSwitchContext+0xf0>)
 80079f4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f6:	4b2a      	ldr	r3, [pc, #168]	; (8007aa0 <vTaskSwitchContext+0xf8>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	e012      	b.n	8007a24 <vTaskSwitchContext+0x7c>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10c      	bne.n	8007a1e <vTaskSwitchContext+0x76>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	b672      	cpsid	i
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	b662      	cpsie	i
 8007a18:	607b      	str	r3, [r7, #4]
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <vTaskSwitchContext+0x74>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	491f      	ldr	r1, [pc, #124]	; (8007aa4 <vTaskSwitchContext+0xfc>)
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0e2      	beq.n	80079fe <vTaskSwitchContext+0x56>
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4a18      	ldr	r2, [pc, #96]	; (8007aa4 <vTaskSwitchContext+0xfc>)
 8007a44:	4413      	add	r3, r2
 8007a46:	60bb      	str	r3, [r7, #8]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	605a      	str	r2, [r3, #4]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	3308      	adds	r3, #8
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d104      	bne.n	8007a68 <vTaskSwitchContext+0xc0>
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	605a      	str	r2, [r3, #4]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	4a0b      	ldr	r2, [pc, #44]	; (8007a9c <vTaskSwitchContext+0xf4>)
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	4a0b      	ldr	r2, [pc, #44]	; (8007aa0 <vTaskSwitchContext+0xf8>)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a78:	4b08      	ldr	r3, [pc, #32]	; (8007a9c <vTaskSwitchContext+0xf4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3358      	adds	r3, #88	; 0x58
 8007a7e:	4a0a      	ldr	r2, [pc, #40]	; (8007aa8 <vTaskSwitchContext+0x100>)
 8007a80:	6013      	str	r3, [r2, #0]
}
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20002c5c 	.word	0x20002c5c
 8007a90:	20002c48 	.word	0x20002c48
 8007a94:	20002c64 	.word	0x20002c64
 8007a98:	20002c60 	.word	0x20002c60
 8007a9c:	20002760 	.word	0x20002760
 8007aa0:	20002c3c 	.word	0x20002c3c
 8007aa4:	20002764 	.word	0x20002764
 8007aa8:	20000010 	.word	0x20000010

08007aac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10c      	bne.n	8007ad6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	b672      	cpsid	i
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	b662      	cpsie	i
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ad6:	4b07      	ldr	r3, [pc, #28]	; (8007af4 <vTaskPlaceOnEventList+0x48>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3318      	adds	r3, #24
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7fe fd43 	bl	800656a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	6838      	ldr	r0, [r7, #0]
 8007ae8:	f000 fb4c 	bl	8008184 <prvAddCurrentTaskToDelayedList>
}
 8007aec:	bf00      	nop
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	20002760 	.word	0x20002760

08007af8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10c      	bne.n	8007b24 <vTaskPlaceOnUnorderedEventList+0x2c>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	b672      	cpsid	i
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	b662      	cpsie	i
 8007b1e:	617b      	str	r3, [r7, #20]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007b24:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <vTaskPlaceOnUnorderedEventList+0x78>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10c      	bne.n	8007b46 <vTaskPlaceOnUnorderedEventList+0x4e>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	b672      	cpsid	i
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	b662      	cpsie	i
 8007b40:	613b      	str	r3, [r7, #16]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <vTaskPlaceOnUnorderedEventList+0x4c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007b46:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007b50:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b52:	4b08      	ldr	r3, [pc, #32]	; (8007b74 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3318      	adds	r3, #24
 8007b58:	4619      	mov	r1, r3
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7fe fce1 	bl	8006522 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b60:	2101      	movs	r1, #1
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fb0e 	bl	8008184 <prvAddCurrentTaskToDelayedList>
}
 8007b68:	bf00      	nop
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20002c5c 	.word	0x20002c5c
 8007b74:	20002760 	.word	0x20002760

08007b78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10c      	bne.n	8007ba4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	b672      	cpsid	i
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	b662      	cpsie	i
 8007b9e:	617b      	str	r3, [r7, #20]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ba4:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <vTaskPlaceOnEventListRestricted+0x58>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3318      	adds	r3, #24
 8007baa:	4619      	mov	r1, r3
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7fe fcb8 	bl	8006522 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	68b8      	ldr	r0, [r7, #8]
 8007bc2:	f000 fadf 	bl	8008184 <prvAddCurrentTaskToDelayedList>
	}
 8007bc6:	bf00      	nop
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20002760 	.word	0x20002760

08007bd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10c      	bne.n	8007c04 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	b672      	cpsid	i
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	b662      	cpsie	i
 8007bfe:	60fb      	str	r3, [r7, #12]
}
 8007c00:	bf00      	nop
 8007c02:	e7fe      	b.n	8007c02 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	3318      	adds	r3, #24
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe fce7 	bl	80065dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0e:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <xTaskRemoveFromEventList+0xb4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d11d      	bne.n	8007c52 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fcde 	bl	80065dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c24:	4b19      	ldr	r3, [pc, #100]	; (8007c8c <xTaskRemoveFromEventList+0xb8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d903      	bls.n	8007c34 <xTaskRemoveFromEventList+0x60>
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	4a16      	ldr	r2, [pc, #88]	; (8007c8c <xTaskRemoveFromEventList+0xb8>)
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4a13      	ldr	r2, [pc, #76]	; (8007c90 <xTaskRemoveFromEventList+0xbc>)
 8007c42:	441a      	add	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f7fe fc69 	bl	8006522 <vListInsertEnd>
 8007c50:	e005      	b.n	8007c5e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	3318      	adds	r3, #24
 8007c56:	4619      	mov	r1, r3
 8007c58:	480e      	ldr	r0, [pc, #56]	; (8007c94 <xTaskRemoveFromEventList+0xc0>)
 8007c5a:	f7fe fc62 	bl	8006522 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c62:	4b0d      	ldr	r3, [pc, #52]	; (8007c98 <xTaskRemoveFromEventList+0xc4>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d905      	bls.n	8007c78 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c70:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <xTaskRemoveFromEventList+0xc8>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	e001      	b.n	8007c7c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c7c:	697b      	ldr	r3, [r7, #20]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20002c5c 	.word	0x20002c5c
 8007c8c:	20002c3c 	.word	0x20002c3c
 8007c90:	20002764 	.word	0x20002764
 8007c94:	20002bf4 	.word	0x20002bf4
 8007c98:	20002760 	.word	0x20002760
 8007c9c:	20002c48 	.word	0x20002c48

08007ca0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007caa:	4b2b      	ldr	r3, [pc, #172]	; (8007d58 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10c      	bne.n	8007ccc <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	b672      	cpsid	i
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	b662      	cpsie	i
 8007cc6:	613b      	str	r3, [r7, #16]
}
 8007cc8:	bf00      	nop
 8007cca:	e7fe      	b.n	8007cca <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10c      	bne.n	8007cfc <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	b672      	cpsid	i
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	b662      	cpsie	i
 8007cf6:	60fb      	str	r3, [r7, #12]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7fe fc6d 	bl	80065dc <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	3304      	adds	r3, #4
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fc68 	bl	80065dc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	4b12      	ldr	r3, [pc, #72]	; (8007d5c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d903      	bls.n	8007d20 <vTaskRemoveFromUnorderedEventList+0x80>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	4a0f      	ldr	r2, [pc, #60]	; (8007d5c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4a0c      	ldr	r2, [pc, #48]	; (8007d60 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007d2e:	441a      	add	r2, r3
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f7fe fbf3 	bl	8006522 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	4b08      	ldr	r3, [pc, #32]	; (8007d64 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d902      	bls.n	8007d50 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007d4a:	4b07      	ldr	r3, [pc, #28]	; (8007d68 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]
	}
}
 8007d50:	bf00      	nop
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20002c5c 	.word	0x20002c5c
 8007d5c:	20002c3c 	.word	0x20002c3c
 8007d60:	20002764 	.word	0x20002764
 8007d64:	20002760 	.word	0x20002760
 8007d68:	20002c48 	.word	0x20002c48

08007d6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d74:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <vTaskInternalSetTimeOutState+0x24>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d7c:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <vTaskInternalSetTimeOutState+0x28>)
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	605a      	str	r2, [r3, #4]
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	20002c4c 	.word	0x20002c4c
 8007d94:	20002c38 	.word	0x20002c38

08007d98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10c      	bne.n	8007dc2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	b672      	cpsid	i
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	b662      	cpsie	i
 8007dbc:	613b      	str	r3, [r7, #16]
}
 8007dbe:	bf00      	nop
 8007dc0:	e7fe      	b.n	8007dc0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10c      	bne.n	8007de2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	b672      	cpsid	i
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	b662      	cpsie	i
 8007ddc:	60fb      	str	r3, [r7, #12]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007de2:	f000 feab 	bl	8008b3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007de6:	4b1d      	ldr	r3, [pc, #116]	; (8007e5c <xTaskCheckForTimeOut+0xc4>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfe:	d102      	bne.n	8007e06 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	61fb      	str	r3, [r7, #28]
 8007e04:	e023      	b.n	8007e4e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b15      	ldr	r3, [pc, #84]	; (8007e60 <xTaskCheckForTimeOut+0xc8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d007      	beq.n	8007e22 <xTaskCheckForTimeOut+0x8a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d302      	bcc.n	8007e22 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	61fb      	str	r3, [r7, #28]
 8007e20:	e015      	b.n	8007e4e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d20b      	bcs.n	8007e44 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	1ad2      	subs	r2, r2, r3
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff ff97 	bl	8007d6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	e004      	b.n	8007e4e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e4e:	f000 fea9 	bl	8008ba4 <vPortExitCritical>

	return xReturn;
 8007e52:	69fb      	ldr	r3, [r7, #28]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3720      	adds	r7, #32
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20002c38 	.word	0x20002c38
 8007e60:	20002c4c 	.word	0x20002c4c

08007e64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e68:	4b03      	ldr	r3, [pc, #12]	; (8007e78 <vTaskMissedYield+0x14>)
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]
}
 8007e6e:	bf00      	nop
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	20002c48 	.word	0x20002c48

08007e7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e84:	f000 f852 	bl	8007f2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e88:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <prvIdleTask+0x28>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d9f9      	bls.n	8007e84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e90:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <prvIdleTask+0x2c>)
 8007e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ea0:	e7f0      	b.n	8007e84 <prvIdleTask+0x8>
 8007ea2:	bf00      	nop
 8007ea4:	20002764 	.word	0x20002764
 8007ea8:	e000ed04 	.word	0xe000ed04

08007eac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	607b      	str	r3, [r7, #4]
 8007eb6:	e00c      	b.n	8007ed2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4a12      	ldr	r2, [pc, #72]	; (8007f0c <prvInitialiseTaskLists+0x60>)
 8007ec4:	4413      	add	r3, r2
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe fafe 	bl	80064c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	607b      	str	r3, [r7, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b37      	cmp	r3, #55	; 0x37
 8007ed6:	d9ef      	bls.n	8007eb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ed8:	480d      	ldr	r0, [pc, #52]	; (8007f10 <prvInitialiseTaskLists+0x64>)
 8007eda:	f7fe faf5 	bl	80064c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ede:	480d      	ldr	r0, [pc, #52]	; (8007f14 <prvInitialiseTaskLists+0x68>)
 8007ee0:	f7fe faf2 	bl	80064c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ee4:	480c      	ldr	r0, [pc, #48]	; (8007f18 <prvInitialiseTaskLists+0x6c>)
 8007ee6:	f7fe faef 	bl	80064c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007eea:	480c      	ldr	r0, [pc, #48]	; (8007f1c <prvInitialiseTaskLists+0x70>)
 8007eec:	f7fe faec 	bl	80064c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ef0:	480b      	ldr	r0, [pc, #44]	; (8007f20 <prvInitialiseTaskLists+0x74>)
 8007ef2:	f7fe fae9 	bl	80064c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <prvInitialiseTaskLists+0x78>)
 8007ef8:	4a05      	ldr	r2, [pc, #20]	; (8007f10 <prvInitialiseTaskLists+0x64>)
 8007efa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <prvInitialiseTaskLists+0x7c>)
 8007efe:	4a05      	ldr	r2, [pc, #20]	; (8007f14 <prvInitialiseTaskLists+0x68>)
 8007f00:	601a      	str	r2, [r3, #0]
}
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20002764 	.word	0x20002764
 8007f10:	20002bc4 	.word	0x20002bc4
 8007f14:	20002bd8 	.word	0x20002bd8
 8007f18:	20002bf4 	.word	0x20002bf4
 8007f1c:	20002c08 	.word	0x20002c08
 8007f20:	20002c20 	.word	0x20002c20
 8007f24:	20002bec 	.word	0x20002bec
 8007f28:	20002bf0 	.word	0x20002bf0

08007f2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f32:	e019      	b.n	8007f68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f34:	f000 fe02 	bl	8008b3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f38:	4b10      	ldr	r3, [pc, #64]	; (8007f7c <prvCheckTasksWaitingTermination+0x50>)
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fe fb49 	bl	80065dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f4a:	4b0d      	ldr	r3, [pc, #52]	; (8007f80 <prvCheckTasksWaitingTermination+0x54>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	4a0b      	ldr	r2, [pc, #44]	; (8007f80 <prvCheckTasksWaitingTermination+0x54>)
 8007f52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f54:	4b0b      	ldr	r3, [pc, #44]	; (8007f84 <prvCheckTasksWaitingTermination+0x58>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	4a0a      	ldr	r2, [pc, #40]	; (8007f84 <prvCheckTasksWaitingTermination+0x58>)
 8007f5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f5e:	f000 fe21 	bl	8008ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f810 	bl	8007f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <prvCheckTasksWaitingTermination+0x58>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e1      	bne.n	8007f34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20002c08 	.word	0x20002c08
 8007f80:	20002c34 	.word	0x20002c34
 8007f84:	20002c1c 	.word	0x20002c1c

08007f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3358      	adds	r3, #88	; 0x58
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 fb4d 	bl	8009634 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d108      	bne.n	8007fb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 ffbd 	bl	8008f28 <vPortFree>
				vPortFree( pxTCB );
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 ffba 	bl	8008f28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fb4:	e01a      	b.n	8007fec <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d103      	bne.n	8007fc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 ffb1 	bl	8008f28 <vPortFree>
	}
 8007fc6:	e011      	b.n	8007fec <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d00c      	beq.n	8007fec <prvDeleteTCB+0x64>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	b672      	cpsid	i
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	b662      	cpsie	i
 8007fe6:	60fb      	str	r3, [r7, #12]
}
 8007fe8:	bf00      	nop
 8007fea:	e7fe      	b.n	8007fea <prvDeleteTCB+0x62>
	}
 8007fec:	bf00      	nop
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	; (800802c <prvResetNextTaskUnblockTime+0x38>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d104      	bne.n	800800e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <prvResetNextTaskUnblockTime+0x3c>)
 8008006:	f04f 32ff 	mov.w	r2, #4294967295
 800800a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800800c:	e008      	b.n	8008020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800800e:	4b07      	ldr	r3, [pc, #28]	; (800802c <prvResetNextTaskUnblockTime+0x38>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	4a04      	ldr	r2, [pc, #16]	; (8008030 <prvResetNextTaskUnblockTime+0x3c>)
 800801e:	6013      	str	r3, [r2, #0]
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	20002bec 	.word	0x20002bec
 8008030:	20002c54 	.word	0x20002c54

08008034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800803a:	4b0b      	ldr	r3, [pc, #44]	; (8008068 <xTaskGetSchedulerState+0x34>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008042:	2301      	movs	r3, #1
 8008044:	607b      	str	r3, [r7, #4]
 8008046:	e008      	b.n	800805a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008048:	4b08      	ldr	r3, [pc, #32]	; (800806c <xTaskGetSchedulerState+0x38>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008050:	2302      	movs	r3, #2
 8008052:	607b      	str	r3, [r7, #4]
 8008054:	e001      	b.n	800805a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008056:	2300      	movs	r3, #0
 8008058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800805a:	687b      	ldr	r3, [r7, #4]
	}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	20002c40 	.word	0x20002c40
 800806c:	20002c5c 	.word	0x20002c5c

08008070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d05a      	beq.n	800813c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008086:	4b30      	ldr	r3, [pc, #192]	; (8008148 <xTaskPriorityDisinherit+0xd8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	429a      	cmp	r2, r3
 800808e:	d00c      	beq.n	80080aa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	b672      	cpsid	i
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	b662      	cpsie	i
 80080a4:	60fb      	str	r3, [r7, #12]
}
 80080a6:	bf00      	nop
 80080a8:	e7fe      	b.n	80080a8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10c      	bne.n	80080cc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	b672      	cpsid	i
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	b662      	cpsie	i
 80080c6:	60bb      	str	r3, [r7, #8]
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d0:	1e5a      	subs	r2, r3, #1
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080de:	429a      	cmp	r2, r3
 80080e0:	d02c      	beq.n	800813c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d128      	bne.n	800813c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fa74 	bl	80065dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	4b0f      	ldr	r3, [pc, #60]	; (800814c <xTaskPriorityDisinherit+0xdc>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d903      	bls.n	800811c <xTaskPriorityDisinherit+0xac>
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	4a0c      	ldr	r2, [pc, #48]	; (800814c <xTaskPriorityDisinherit+0xdc>)
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4a09      	ldr	r2, [pc, #36]	; (8008150 <xTaskPriorityDisinherit+0xe0>)
 800812a:	441a      	add	r2, r3
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	3304      	adds	r3, #4
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f7fe f9f5 	bl	8006522 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008138:	2301      	movs	r3, #1
 800813a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800813c:	697b      	ldr	r3, [r7, #20]
	}
 800813e:	4618      	mov	r0, r3
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20002760 	.word	0x20002760
 800814c:	20002c3c 	.word	0x20002c3c
 8008150:	20002764 	.word	0x20002764

08008154 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800815a:	4b09      	ldr	r3, [pc, #36]	; (8008180 <uxTaskResetEventItemValue+0x2c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <uxTaskResetEventItemValue+0x2c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008168:	4b05      	ldr	r3, [pc, #20]	; (8008180 <uxTaskResetEventItemValue+0x2c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008170:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008172:	687b      	ldr	r3, [r7, #4]
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	20002760 	.word	0x20002760

08008184 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800818e:	4b21      	ldr	r3, [pc, #132]	; (8008214 <prvAddCurrentTaskToDelayedList+0x90>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008194:	4b20      	ldr	r3, [pc, #128]	; (8008218 <prvAddCurrentTaskToDelayedList+0x94>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3304      	adds	r3, #4
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fa1e 	bl	80065dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a6:	d10a      	bne.n	80081be <prvAddCurrentTaskToDelayedList+0x3a>
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d007      	beq.n	80081be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ae:	4b1a      	ldr	r3, [pc, #104]	; (8008218 <prvAddCurrentTaskToDelayedList+0x94>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3304      	adds	r3, #4
 80081b4:	4619      	mov	r1, r3
 80081b6:	4819      	ldr	r0, [pc, #100]	; (800821c <prvAddCurrentTaskToDelayedList+0x98>)
 80081b8:	f7fe f9b3 	bl	8006522 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081bc:	e026      	b.n	800820c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4413      	add	r3, r2
 80081c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <prvAddCurrentTaskToDelayedList+0x94>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d209      	bcs.n	80081ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081d6:	4b12      	ldr	r3, [pc, #72]	; (8008220 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b0f      	ldr	r3, [pc, #60]	; (8008218 <prvAddCurrentTaskToDelayedList+0x94>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3304      	adds	r3, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7fe f9c1 	bl	800656a <vListInsert>
}
 80081e8:	e010      	b.n	800820c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ea:	4b0e      	ldr	r3, [pc, #56]	; (8008224 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <prvAddCurrentTaskToDelayedList+0x94>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4619      	mov	r1, r3
 80081f6:	4610      	mov	r0, r2
 80081f8:	f7fe f9b7 	bl	800656a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	429a      	cmp	r2, r3
 8008204:	d202      	bcs.n	800820c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008206:	4a08      	ldr	r2, [pc, #32]	; (8008228 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	6013      	str	r3, [r2, #0]
}
 800820c:	bf00      	nop
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	20002c38 	.word	0x20002c38
 8008218:	20002760 	.word	0x20002760
 800821c:	20002c20 	.word	0x20002c20
 8008220:	20002bf0 	.word	0x20002bf0
 8008224:	20002bec 	.word	0x20002bec
 8008228:	20002c54 	.word	0x20002c54

0800822c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08a      	sub	sp, #40	; 0x28
 8008230:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008232:	2300      	movs	r3, #0
 8008234:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008236:	f000 fb15 	bl	8008864 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800823a:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <xTimerCreateTimerTask+0x84>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d021      	beq.n	8008286 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800824a:	1d3a      	adds	r2, r7, #4
 800824c:	f107 0108 	add.w	r1, r7, #8
 8008250:	f107 030c 	add.w	r3, r7, #12
 8008254:	4618      	mov	r0, r3
 8008256:	f7fd ff1f 	bl	8006098 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	9202      	str	r2, [sp, #8]
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	2302      	movs	r3, #2
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	2300      	movs	r3, #0
 800826a:	460a      	mov	r2, r1
 800826c:	4911      	ldr	r1, [pc, #68]	; (80082b4 <xTimerCreateTimerTask+0x88>)
 800826e:	4812      	ldr	r0, [pc, #72]	; (80082b8 <xTimerCreateTimerTask+0x8c>)
 8008270:	f7fe ffb0 	bl	80071d4 <xTaskCreateStatic>
 8008274:	4603      	mov	r3, r0
 8008276:	4a11      	ldr	r2, [pc, #68]	; (80082bc <xTimerCreateTimerTask+0x90>)
 8008278:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800827a:	4b10      	ldr	r3, [pc, #64]	; (80082bc <xTimerCreateTimerTask+0x90>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008282:	2301      	movs	r3, #1
 8008284:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10c      	bne.n	80082a6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	b672      	cpsid	i
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	b662      	cpsie	i
 80082a0:	613b      	str	r3, [r7, #16]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80082a6:	697b      	ldr	r3, [r7, #20]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20002c98 	.word	0x20002c98
 80082b4:	08009efc 	.word	0x08009efc
 80082b8:	080083fd 	.word	0x080083fd
 80082bc:	20002c9c 	.word	0x20002c9c

080082c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08a      	sub	sp, #40	; 0x28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10c      	bne.n	80082f2 <xTimerGenericCommand+0x32>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	b672      	cpsid	i
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	b662      	cpsie	i
 80082ec:	623b      	str	r3, [r7, #32]
}
 80082ee:	bf00      	nop
 80082f0:	e7fe      	b.n	80082f0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80082f2:	4b1a      	ldr	r3, [pc, #104]	; (800835c <xTimerGenericCommand+0x9c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d02a      	beq.n	8008350 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b05      	cmp	r3, #5
 800830a:	dc18      	bgt.n	800833e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800830c:	f7ff fe92 	bl	8008034 <xTaskGetSchedulerState>
 8008310:	4603      	mov	r3, r0
 8008312:	2b02      	cmp	r3, #2
 8008314:	d109      	bne.n	800832a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008316:	4b11      	ldr	r3, [pc, #68]	; (800835c <xTimerGenericCommand+0x9c>)
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	f107 0110 	add.w	r1, r7, #16
 800831e:	2300      	movs	r3, #0
 8008320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008322:	f7fe fad7 	bl	80068d4 <xQueueGenericSend>
 8008326:	6278      	str	r0, [r7, #36]	; 0x24
 8008328:	e012      	b.n	8008350 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800832a:	4b0c      	ldr	r3, [pc, #48]	; (800835c <xTimerGenericCommand+0x9c>)
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	f107 0110 	add.w	r1, r7, #16
 8008332:	2300      	movs	r3, #0
 8008334:	2200      	movs	r2, #0
 8008336:	f7fe facd 	bl	80068d4 <xQueueGenericSend>
 800833a:	6278      	str	r0, [r7, #36]	; 0x24
 800833c:	e008      	b.n	8008350 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800833e:	4b07      	ldr	r3, [pc, #28]	; (800835c <xTimerGenericCommand+0x9c>)
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	f107 0110 	add.w	r1, r7, #16
 8008346:	2300      	movs	r3, #0
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	f7fe fbc9 	bl	8006ae0 <xQueueGenericSendFromISR>
 800834e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008352:	4618      	mov	r0, r3
 8008354:	3728      	adds	r7, #40	; 0x28
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20002c98 	.word	0x20002c98

08008360 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af02      	add	r7, sp, #8
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800836a:	4b23      	ldr	r3, [pc, #140]	; (80083f8 <prvProcessExpiredTimer+0x98>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	3304      	adds	r3, #4
 8008378:	4618      	mov	r0, r3
 800837a:	f7fe f92f 	bl	80065dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d024      	beq.n	80083d6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	699a      	ldr	r2, [r3, #24]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	18d1      	adds	r1, r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	6978      	ldr	r0, [r7, #20]
 800839a:	f000 f8d3 	bl	8008544 <prvInsertTimerInActiveList>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d021      	beq.n	80083e8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083a4:	2300      	movs	r3, #0
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	2300      	movs	r3, #0
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	2100      	movs	r1, #0
 80083ae:	6978      	ldr	r0, [r7, #20]
 80083b0:	f7ff ff86 	bl	80082c0 <xTimerGenericCommand>
 80083b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d115      	bne.n	80083e8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	b672      	cpsid	i
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	b662      	cpsie	i
 80083d0:	60fb      	str	r3, [r7, #12]
}
 80083d2:	bf00      	nop
 80083d4:	e7fe      	b.n	80083d4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083dc:	f023 0301 	bic.w	r3, r3, #1
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	6978      	ldr	r0, [r7, #20]
 80083ee:	4798      	blx	r3
}
 80083f0:	bf00      	nop
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20002c90 	.word	0x20002c90

080083fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008404:	f107 0308 	add.w	r3, r7, #8
 8008408:	4618      	mov	r0, r3
 800840a:	f000 f857 	bl	80084bc <prvGetNextExpireTime>
 800840e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4619      	mov	r1, r3
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f803 	bl	8008420 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800841a:	f000 f8d5 	bl	80085c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800841e:	e7f1      	b.n	8008404 <prvTimerTask+0x8>

08008420 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800842a:	f7ff f943 	bl	80076b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800842e:	f107 0308 	add.w	r3, r7, #8
 8008432:	4618      	mov	r0, r3
 8008434:	f000 f866 	bl	8008504 <prvSampleTimeNow>
 8008438:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d130      	bne.n	80084a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <prvProcessTimerOrBlockTask+0x3c>
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	429a      	cmp	r2, r3
 800844c:	d806      	bhi.n	800845c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800844e:	f7ff f93f 	bl	80076d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008452:	68f9      	ldr	r1, [r7, #12]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff ff83 	bl	8008360 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800845a:	e024      	b.n	80084a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d008      	beq.n	8008474 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008462:	4b13      	ldr	r3, [pc, #76]	; (80084b0 <prvProcessTimerOrBlockTask+0x90>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <prvProcessTimerOrBlockTask+0x50>
 800846c:	2301      	movs	r3, #1
 800846e:	e000      	b.n	8008472 <prvProcessTimerOrBlockTask+0x52>
 8008470:	2300      	movs	r3, #0
 8008472:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008474:	4b0f      	ldr	r3, [pc, #60]	; (80084b4 <prvProcessTimerOrBlockTask+0x94>)
 8008476:	6818      	ldr	r0, [r3, #0]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	4619      	mov	r1, r3
 8008482:	f7fe fe73 	bl	800716c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008486:	f7ff f923 	bl	80076d0 <xTaskResumeAll>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008490:	4b09      	ldr	r3, [pc, #36]	; (80084b8 <prvProcessTimerOrBlockTask+0x98>)
 8008492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	f3bf 8f6f 	isb	sy
}
 80084a0:	e001      	b.n	80084a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084a2:	f7ff f915 	bl	80076d0 <xTaskResumeAll>
}
 80084a6:	bf00      	nop
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20002c94 	.word	0x20002c94
 80084b4:	20002c98 	.word	0x20002c98
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084c4:	4b0e      	ldr	r3, [pc, #56]	; (8008500 <prvGetNextExpireTime+0x44>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <prvGetNextExpireTime+0x16>
 80084ce:	2201      	movs	r2, #1
 80084d0:	e000      	b.n	80084d4 <prvGetNextExpireTime+0x18>
 80084d2:	2200      	movs	r2, #0
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d105      	bne.n	80084ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084e0:	4b07      	ldr	r3, [pc, #28]	; (8008500 <prvGetNextExpireTime+0x44>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	e001      	b.n	80084f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084f0:	68fb      	ldr	r3, [r7, #12]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	20002c90 	.word	0x20002c90

08008504 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800850c:	f7ff f980 	bl	8007810 <xTaskGetTickCount>
 8008510:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008512:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <prvSampleTimeNow+0x3c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	429a      	cmp	r2, r3
 800851a:	d205      	bcs.n	8008528 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800851c:	f000 f93c 	bl	8008798 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	e002      	b.n	800852e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800852e:	4a04      	ldr	r2, [pc, #16]	; (8008540 <prvSampleTimeNow+0x3c>)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008534:	68fb      	ldr	r3, [r7, #12]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20002ca0 	.word	0x20002ca0

08008544 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	429a      	cmp	r2, r3
 8008568:	d812      	bhi.n	8008590 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	429a      	cmp	r2, r3
 8008576:	d302      	bcc.n	800857e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008578:	2301      	movs	r3, #1
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	e01b      	b.n	80085b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800857e:	4b10      	ldr	r3, [pc, #64]	; (80085c0 <prvInsertTimerInActiveList+0x7c>)
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3304      	adds	r3, #4
 8008586:	4619      	mov	r1, r3
 8008588:	4610      	mov	r0, r2
 800858a:	f7fd ffee 	bl	800656a <vListInsert>
 800858e:	e012      	b.n	80085b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d206      	bcs.n	80085a6 <prvInsertTimerInActiveList+0x62>
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	429a      	cmp	r2, r3
 800859e:	d302      	bcc.n	80085a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085a0:	2301      	movs	r3, #1
 80085a2:	617b      	str	r3, [r7, #20]
 80085a4:	e007      	b.n	80085b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085a6:	4b07      	ldr	r3, [pc, #28]	; (80085c4 <prvInsertTimerInActiveList+0x80>)
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3304      	adds	r3, #4
 80085ae:	4619      	mov	r1, r3
 80085b0:	4610      	mov	r0, r2
 80085b2:	f7fd ffda 	bl	800656a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085b6:	697b      	ldr	r3, [r7, #20]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20002c94 	.word	0x20002c94
 80085c4:	20002c90 	.word	0x20002c90

080085c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08e      	sub	sp, #56	; 0x38
 80085cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085ce:	e0d0      	b.n	8008772 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	da1a      	bge.n	800860c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085d6:	1d3b      	adds	r3, r7, #4
 80085d8:	3304      	adds	r3, #4
 80085da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10c      	bne.n	80085fc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	b672      	cpsid	i
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	b662      	cpsie	i
 80085f6:	61fb      	str	r3, [r7, #28]
}
 80085f8:	bf00      	nop
 80085fa:	e7fe      	b.n	80085fa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008602:	6850      	ldr	r0, [r2, #4]
 8008604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008606:	6892      	ldr	r2, [r2, #8]
 8008608:	4611      	mov	r1, r2
 800860a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f2c0 80ae 	blt.w	8008770 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	3304      	adds	r3, #4
 8008624:	4618      	mov	r0, r3
 8008626:	f7fd ffd9 	bl	80065dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800862a:	463b      	mov	r3, r7
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff ff69 	bl	8008504 <prvSampleTimeNow>
 8008632:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b09      	cmp	r3, #9
 8008638:	f200 809b 	bhi.w	8008772 <prvProcessReceivedCommands+0x1aa>
 800863c:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <prvProcessReceivedCommands+0x7c>)
 800863e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008642:	bf00      	nop
 8008644:	0800866d 	.word	0x0800866d
 8008648:	0800866d 	.word	0x0800866d
 800864c:	0800866d 	.word	0x0800866d
 8008650:	080086e5 	.word	0x080086e5
 8008654:	080086f9 	.word	0x080086f9
 8008658:	08008747 	.word	0x08008747
 800865c:	0800866d 	.word	0x0800866d
 8008660:	0800866d 	.word	0x0800866d
 8008664:	080086e5 	.word	0x080086e5
 8008668:	080086f9 	.word	0x080086f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008672:	f043 0301 	orr.w	r3, r3, #1
 8008676:	b2da      	uxtb	r2, r3
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	18d1      	adds	r1, r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800868c:	f7ff ff5a 	bl	8008544 <prvInsertTimerInActiveList>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d06d      	beq.n	8008772 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800869c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d062      	beq.n	8008772 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	441a      	add	r2, r3
 80086b4:	2300      	movs	r3, #0
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	2300      	movs	r3, #0
 80086ba:	2100      	movs	r1, #0
 80086bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086be:	f7ff fdff 	bl	80082c0 <xTimerGenericCommand>
 80086c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d153      	bne.n	8008772 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	b672      	cpsid	i
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	b662      	cpsie	i
 80086de:	61bb      	str	r3, [r7, #24]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ea:	f023 0301 	bic.w	r3, r3, #1
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80086f6:	e03c      	b.n	8008772 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086fe:	f043 0301 	orr.w	r3, r3, #1
 8008702:	b2da      	uxtb	r2, r3
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10c      	bne.n	8008732 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871c:	b672      	cpsid	i
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	b662      	cpsie	i
 800872c:	617b      	str	r3, [r7, #20]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	699a      	ldr	r2, [r3, #24]
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	18d1      	adds	r1, r2, r3
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008740:	f7ff ff00 	bl	8008544 <prvInsertTimerInActiveList>
					break;
 8008744:	e015      	b.n	8008772 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b00      	cmp	r3, #0
 8008752:	d103      	bne.n	800875c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008756:	f000 fbe7 	bl	8008f28 <vPortFree>
 800875a:	e00a      	b.n	8008772 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008762:	f023 0301 	bic.w	r3, r3, #1
 8008766:	b2da      	uxtb	r2, r3
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800876e:	e000      	b.n	8008772 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008770:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008772:	4b08      	ldr	r3, [pc, #32]	; (8008794 <prvProcessReceivedCommands+0x1cc>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	1d39      	adds	r1, r7, #4
 8008778:	2200      	movs	r2, #0
 800877a:	4618      	mov	r0, r3
 800877c:	f7fe fa50 	bl	8006c20 <xQueueReceive>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	f47f af24 	bne.w	80085d0 <prvProcessReceivedCommands+0x8>
	}
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	3730      	adds	r7, #48	; 0x30
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20002c98 	.word	0x20002c98

08008798 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b088      	sub	sp, #32
 800879c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800879e:	e04a      	b.n	8008836 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087a0:	4b2e      	ldr	r3, [pc, #184]	; (800885c <prvSwitchTimerLists+0xc4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087aa:	4b2c      	ldr	r3, [pc, #176]	; (800885c <prvSwitchTimerLists+0xc4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3304      	adds	r3, #4
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fd ff0f 	bl	80065dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d030      	beq.n	8008836 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	4413      	add	r3, r2
 80087dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d90e      	bls.n	8008804 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087f2:	4b1a      	ldr	r3, [pc, #104]	; (800885c <prvSwitchTimerLists+0xc4>)
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3304      	adds	r3, #4
 80087fa:	4619      	mov	r1, r3
 80087fc:	4610      	mov	r0, r2
 80087fe:	f7fd feb4 	bl	800656a <vListInsert>
 8008802:	e018      	b.n	8008836 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008804:	2300      	movs	r3, #0
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	2300      	movs	r3, #0
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	2100      	movs	r1, #0
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f7ff fd56 	bl	80082c0 <xTimerGenericCommand>
 8008814:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10c      	bne.n	8008836 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	b672      	cpsid	i
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	b662      	cpsie	i
 8008830:	603b      	str	r3, [r7, #0]
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008836:	4b09      	ldr	r3, [pc, #36]	; (800885c <prvSwitchTimerLists+0xc4>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1af      	bne.n	80087a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <prvSwitchTimerLists+0xc4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008846:	4b06      	ldr	r3, [pc, #24]	; (8008860 <prvSwitchTimerLists+0xc8>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a04      	ldr	r2, [pc, #16]	; (800885c <prvSwitchTimerLists+0xc4>)
 800884c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800884e:	4a04      	ldr	r2, [pc, #16]	; (8008860 <prvSwitchTimerLists+0xc8>)
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	6013      	str	r3, [r2, #0]
}
 8008854:	bf00      	nop
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20002c90 	.word	0x20002c90
 8008860:	20002c94 	.word	0x20002c94

08008864 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800886a:	f000 f967 	bl	8008b3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800886e:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <prvCheckForValidListAndQueue+0x60>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d120      	bne.n	80088b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008876:	4814      	ldr	r0, [pc, #80]	; (80088c8 <prvCheckForValidListAndQueue+0x64>)
 8008878:	f7fd fe26 	bl	80064c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800887c:	4813      	ldr	r0, [pc, #76]	; (80088cc <prvCheckForValidListAndQueue+0x68>)
 800887e:	f7fd fe23 	bl	80064c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008882:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <prvCheckForValidListAndQueue+0x6c>)
 8008884:	4a10      	ldr	r2, [pc, #64]	; (80088c8 <prvCheckForValidListAndQueue+0x64>)
 8008886:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008888:	4b12      	ldr	r3, [pc, #72]	; (80088d4 <prvCheckForValidListAndQueue+0x70>)
 800888a:	4a10      	ldr	r2, [pc, #64]	; (80088cc <prvCheckForValidListAndQueue+0x68>)
 800888c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800888e:	2300      	movs	r3, #0
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	4b11      	ldr	r3, [pc, #68]	; (80088d8 <prvCheckForValidListAndQueue+0x74>)
 8008894:	4a11      	ldr	r2, [pc, #68]	; (80088dc <prvCheckForValidListAndQueue+0x78>)
 8008896:	2110      	movs	r1, #16
 8008898:	200a      	movs	r0, #10
 800889a:	f7fd ff33 	bl	8006704 <xQueueGenericCreateStatic>
 800889e:	4603      	mov	r3, r0
 80088a0:	4a08      	ldr	r2, [pc, #32]	; (80088c4 <prvCheckForValidListAndQueue+0x60>)
 80088a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088a4:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <prvCheckForValidListAndQueue+0x60>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d005      	beq.n	80088b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088ac:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <prvCheckForValidListAndQueue+0x60>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	490b      	ldr	r1, [pc, #44]	; (80088e0 <prvCheckForValidListAndQueue+0x7c>)
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe fc30 	bl	8007118 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088b8:	f000 f974 	bl	8008ba4 <vPortExitCritical>
}
 80088bc:	bf00      	nop
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20002c98 	.word	0x20002c98
 80088c8:	20002c68 	.word	0x20002c68
 80088cc:	20002c7c 	.word	0x20002c7c
 80088d0:	20002c90 	.word	0x20002c90
 80088d4:	20002c94 	.word	0x20002c94
 80088d8:	20002d44 	.word	0x20002d44
 80088dc:	20002ca4 	.word	0x20002ca4
 80088e0:	08009f04 	.word	0x08009f04

080088e4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08a      	sub	sp, #40	; 0x28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80088f2:	f06f 0301 	mvn.w	r3, #1
 80088f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008904:	4b06      	ldr	r3, [pc, #24]	; (8008920 <xTimerPendFunctionCallFromISR+0x3c>)
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	f107 0114 	add.w	r1, r7, #20
 800890c:	2300      	movs	r3, #0
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	f7fe f8e6 	bl	8006ae0 <xQueueGenericSendFromISR>
 8008914:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008918:	4618      	mov	r0, r3
 800891a:	3728      	adds	r7, #40	; 0x28
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20002c98 	.word	0x20002c98

08008924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3b04      	subs	r3, #4
 8008934:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800893c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3b04      	subs	r3, #4
 8008942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	f023 0201 	bic.w	r2, r3, #1
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3b04      	subs	r3, #4
 8008952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008954:	4a0c      	ldr	r2, [pc, #48]	; (8008988 <pxPortInitialiseStack+0x64>)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3b14      	subs	r3, #20
 800895e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3b04      	subs	r3, #4
 800896a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f06f 0202 	mvn.w	r2, #2
 8008972:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3b20      	subs	r3, #32
 8008978:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800897a:	68fb      	ldr	r3, [r7, #12]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	0800898d 	.word	0x0800898d

0800898c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008992:	2300      	movs	r3, #0
 8008994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008996:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <prvTaskExitError+0x5c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899e:	d00c      	beq.n	80089ba <prvTaskExitError+0x2e>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	b672      	cpsid	i
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	b662      	cpsie	i
 80089b4:	60fb      	str	r3, [r7, #12]
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <prvTaskExitError+0x2c>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	b672      	cpsid	i
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	b662      	cpsie	i
 80089ce:	60bb      	str	r3, [r7, #8]
}
 80089d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089d2:	bf00      	nop
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0fc      	beq.n	80089d4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089da:	bf00      	nop
 80089dc:	bf00      	nop
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	2000000c 	.word	0x2000000c
 80089ec:	00000000 	.word	0x00000000

080089f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <pxCurrentTCBConst2>)
 80089f2:	6819      	ldr	r1, [r3, #0]
 80089f4:	6808      	ldr	r0, [r1, #0]
 80089f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fa:	f380 8809 	msr	PSP, r0
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8811 	msr	BASEPRI, r0
 8008a0a:	4770      	bx	lr
 8008a0c:	f3af 8000 	nop.w

08008a10 <pxCurrentTCBConst2>:
 8008a10:	20002760 	.word	0x20002760
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop

08008a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a18:	4808      	ldr	r0, [pc, #32]	; (8008a3c <prvPortStartFirstTask+0x24>)
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	6800      	ldr	r0, [r0, #0]
 8008a1e:	f380 8808 	msr	MSP, r0
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8814 	msr	CONTROL, r0
 8008a2a:	b662      	cpsie	i
 8008a2c:	b661      	cpsie	f
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	df00      	svc	0
 8008a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a3a:	bf00      	nop
 8008a3c:	e000ed08 	.word	0xe000ed08

08008a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a46:	4b37      	ldr	r3, [pc, #220]	; (8008b24 <xPortStartScheduler+0xe4>)
 8008a48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	22ff      	movs	r2, #255	; 0xff
 8008a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	4b2f      	ldr	r3, [pc, #188]	; (8008b28 <xPortStartScheduler+0xe8>)
 8008a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a6e:	4b2f      	ldr	r3, [pc, #188]	; (8008b2c <xPortStartScheduler+0xec>)
 8008a70:	2207      	movs	r2, #7
 8008a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a74:	e009      	b.n	8008a8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a76:	4b2d      	ldr	r3, [pc, #180]	; (8008b2c <xPortStartScheduler+0xec>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	4a2b      	ldr	r2, [pc, #172]	; (8008b2c <xPortStartScheduler+0xec>)
 8008a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a92:	2b80      	cmp	r3, #128	; 0x80
 8008a94:	d0ef      	beq.n	8008a76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a96:	4b25      	ldr	r3, [pc, #148]	; (8008b2c <xPortStartScheduler+0xec>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f1c3 0307 	rsb	r3, r3, #7
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d00c      	beq.n	8008abc <xPortStartScheduler+0x7c>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	b672      	cpsid	i
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	b662      	cpsie	i
 8008ab6:	60bb      	str	r3, [r7, #8]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008abc:	4b1b      	ldr	r3, [pc, #108]	; (8008b2c <xPortStartScheduler+0xec>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	4a1a      	ldr	r2, [pc, #104]	; (8008b2c <xPortStartScheduler+0xec>)
 8008ac4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ac6:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <xPortStartScheduler+0xec>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ace:	4a17      	ldr	r2, [pc, #92]	; (8008b2c <xPortStartScheduler+0xec>)
 8008ad0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ada:	4b15      	ldr	r3, [pc, #84]	; (8008b30 <xPortStartScheduler+0xf0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a14      	ldr	r2, [pc, #80]	; (8008b30 <xPortStartScheduler+0xf0>)
 8008ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ae4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ae6:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <xPortStartScheduler+0xf0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a11      	ldr	r2, [pc, #68]	; (8008b30 <xPortStartScheduler+0xf0>)
 8008aec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008af0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008af2:	f000 f8dd 	bl	8008cb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008af6:	4b0f      	ldr	r3, [pc, #60]	; (8008b34 <xPortStartScheduler+0xf4>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008afc:	f000 f8fc 	bl	8008cf8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b00:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <xPortStartScheduler+0xf8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a0c      	ldr	r2, [pc, #48]	; (8008b38 <xPortStartScheduler+0xf8>)
 8008b06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b0c:	f7ff ff84 	bl	8008a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b10:	f7fe ff4a 	bl	80079a8 <vTaskSwitchContext>
	prvTaskExitError();
 8008b14:	f7ff ff3a 	bl	800898c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	e000e400 	.word	0xe000e400
 8008b28:	20002d94 	.word	0x20002d94
 8008b2c:	20002d98 	.word	0x20002d98
 8008b30:	e000ed20 	.word	0xe000ed20
 8008b34:	2000000c 	.word	0x2000000c
 8008b38:	e000ef34 	.word	0xe000ef34

08008b3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	b672      	cpsid	i
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	b662      	cpsie	i
 8008b56:	607b      	str	r3, [r7, #4]
}
 8008b58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b5a:	4b10      	ldr	r3, [pc, #64]	; (8008b9c <vPortEnterCritical+0x60>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	4a0e      	ldr	r2, [pc, #56]	; (8008b9c <vPortEnterCritical+0x60>)
 8008b62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b64:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <vPortEnterCritical+0x60>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d111      	bne.n	8008b90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <vPortEnterCritical+0x64>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00c      	beq.n	8008b90 <vPortEnterCritical+0x54>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	b672      	cpsid	i
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	b662      	cpsie	i
 8008b8a:	603b      	str	r3, [r7, #0]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <vPortEnterCritical+0x52>
	}
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	2000000c 	.word	0x2000000c
 8008ba0:	e000ed04 	.word	0xe000ed04

08008ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008baa:	4b13      	ldr	r3, [pc, #76]	; (8008bf8 <vPortExitCritical+0x54>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10c      	bne.n	8008bcc <vPortExitCritical+0x28>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	b672      	cpsid	i
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	b662      	cpsie	i
 8008bc6:	607b      	str	r3, [r7, #4]
}
 8008bc8:	bf00      	nop
 8008bca:	e7fe      	b.n	8008bca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <vPortExitCritical+0x54>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	4a09      	ldr	r2, [pc, #36]	; (8008bf8 <vPortExitCritical+0x54>)
 8008bd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bd6:	4b08      	ldr	r3, [pc, #32]	; (8008bf8 <vPortExitCritical+0x54>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d105      	bne.n	8008bea <vPortExitCritical+0x46>
 8008bde:	2300      	movs	r3, #0
 8008be0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	f383 8811 	msr	BASEPRI, r3
}
 8008be8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	2000000c 	.word	0x2000000c
 8008bfc:	00000000 	.word	0x00000000

08008c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c00:	f3ef 8009 	mrs	r0, PSP
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	4b15      	ldr	r3, [pc, #84]	; (8008c60 <pxCurrentTCBConst>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	f01e 0f10 	tst.w	lr, #16
 8008c10:	bf08      	it	eq
 8008c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	6010      	str	r0, [r2, #0]
 8008c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f380 8811 	msr	BASEPRI, r0
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	f7fe feb8 	bl	80079a8 <vTaskSwitchContext>
 8008c38:	f04f 0000 	mov.w	r0, #0
 8008c3c:	f380 8811 	msr	BASEPRI, r0
 8008c40:	bc09      	pop	{r0, r3}
 8008c42:	6819      	ldr	r1, [r3, #0]
 8008c44:	6808      	ldr	r0, [r1, #0]
 8008c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4a:	f01e 0f10 	tst.w	lr, #16
 8008c4e:	bf08      	it	eq
 8008c50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c54:	f380 8809 	msr	PSP, r0
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop

08008c60 <pxCurrentTCBConst>:
 8008c60:	20002760 	.word	0x20002760
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop

08008c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	b672      	cpsid	i
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	b662      	cpsie	i
 8008c82:	607b      	str	r3, [r7, #4]
}
 8008c84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c86:	f7fe fdd3 	bl	8007830 <xTaskIncrementTick>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c90:	4b06      	ldr	r3, [pc, #24]	; (8008cac <SysTick_Handler+0x44>)
 8008c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	f383 8811 	msr	BASEPRI, r3
}
 8008ca2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	e000ed04 	.word	0xe000ed04

08008cb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <vPortSetupTimerInterrupt+0x34>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cba:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <vPortSetupTimerInterrupt+0x38>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cc0:	4b0a      	ldr	r3, [pc, #40]	; (8008cec <vPortSetupTimerInterrupt+0x3c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a0a      	ldr	r2, [pc, #40]	; (8008cf0 <vPortSetupTimerInterrupt+0x40>)
 8008cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cca:	099b      	lsrs	r3, r3, #6
 8008ccc:	4a09      	ldr	r2, [pc, #36]	; (8008cf4 <vPortSetupTimerInterrupt+0x44>)
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cd2:	4b04      	ldr	r3, [pc, #16]	; (8008ce4 <vPortSetupTimerInterrupt+0x34>)
 8008cd4:	2207      	movs	r2, #7
 8008cd6:	601a      	str	r2, [r3, #0]
}
 8008cd8:	bf00      	nop
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	e000e010 	.word	0xe000e010
 8008ce8:	e000e018 	.word	0xe000e018
 8008cec:	20000000 	.word	0x20000000
 8008cf0:	10624dd3 	.word	0x10624dd3
 8008cf4:	e000e014 	.word	0xe000e014

08008cf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cf8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d08 <vPortEnableVFP+0x10>
 8008cfc:	6801      	ldr	r1, [r0, #0]
 8008cfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d02:	6001      	str	r1, [r0, #0]
 8008d04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d06:	bf00      	nop
 8008d08:	e000ed88 	.word	0xe000ed88

08008d0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d12:	f3ef 8305 	mrs	r3, IPSR
 8008d16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b0f      	cmp	r3, #15
 8008d1c:	d916      	bls.n	8008d4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d1e:	4a19      	ldr	r2, [pc, #100]	; (8008d84 <vPortValidateInterruptPriority+0x78>)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4413      	add	r3, r2
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d28:	4b17      	ldr	r3, [pc, #92]	; (8008d88 <vPortValidateInterruptPriority+0x7c>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	7afa      	ldrb	r2, [r7, #11]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d20c      	bcs.n	8008d4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	b672      	cpsid	i
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	b662      	cpsie	i
 8008d46:	607b      	str	r3, [r7, #4]
}
 8008d48:	bf00      	nop
 8008d4a:	e7fe      	b.n	8008d4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d4c:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <vPortValidateInterruptPriority+0x80>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d54:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <vPortValidateInterruptPriority+0x84>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d90c      	bls.n	8008d76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	b672      	cpsid	i
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	b662      	cpsie	i
 8008d70:	603b      	str	r3, [r7, #0]
}
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <vPortValidateInterruptPriority+0x68>
	}
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	e000e3f0 	.word	0xe000e3f0
 8008d88:	20002d94 	.word	0x20002d94
 8008d8c:	e000ed0c 	.word	0xe000ed0c
 8008d90:	20002d98 	.word	0x20002d98

08008d94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08a      	sub	sp, #40	; 0x28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008da0:	f7fe fc88 	bl	80076b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008da4:	4b5b      	ldr	r3, [pc, #364]	; (8008f14 <pvPortMalloc+0x180>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dac:	f000 f91a 	bl	8008fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008db0:	4b59      	ldr	r3, [pc, #356]	; (8008f18 <pvPortMalloc+0x184>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4013      	ands	r3, r2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f040 8092 	bne.w	8008ee2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d01f      	beq.n	8008e04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4413      	add	r3, r2
 8008dca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d016      	beq.n	8008e04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f023 0307 	bic.w	r3, r3, #7
 8008ddc:	3308      	adds	r3, #8
 8008dde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00c      	beq.n	8008e04 <pvPortMalloc+0x70>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	b672      	cpsid	i
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	b662      	cpsie	i
 8008dfe:	617b      	str	r3, [r7, #20]
}
 8008e00:	bf00      	nop
 8008e02:	e7fe      	b.n	8008e02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d06b      	beq.n	8008ee2 <pvPortMalloc+0x14e>
 8008e0a:	4b44      	ldr	r3, [pc, #272]	; (8008f1c <pvPortMalloc+0x188>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d866      	bhi.n	8008ee2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e14:	4b42      	ldr	r3, [pc, #264]	; (8008f20 <pvPortMalloc+0x18c>)
 8008e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e18:	4b41      	ldr	r3, [pc, #260]	; (8008f20 <pvPortMalloc+0x18c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e1e:	e004      	b.n	8008e2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d903      	bls.n	8008e3c <pvPortMalloc+0xa8>
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1f1      	bne.n	8008e20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e3c:	4b35      	ldr	r3, [pc, #212]	; (8008f14 <pvPortMalloc+0x180>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d04d      	beq.n	8008ee2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2208      	movs	r2, #8
 8008e4c:	4413      	add	r3, r2
 8008e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	1ad2      	subs	r2, r2, r3
 8008e60:	2308      	movs	r3, #8
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d921      	bls.n	8008eac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00c      	beq.n	8008e94 <pvPortMalloc+0x100>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	b672      	cpsid	i
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	b662      	cpsie	i
 8008e8e:	613b      	str	r3, [r7, #16]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	1ad2      	subs	r2, r2, r3
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ea6:	69b8      	ldr	r0, [r7, #24]
 8008ea8:	f000 f8fe 	bl	80090a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008eac:	4b1b      	ldr	r3, [pc, #108]	; (8008f1c <pvPortMalloc+0x188>)
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	4a19      	ldr	r2, [pc, #100]	; (8008f1c <pvPortMalloc+0x188>)
 8008eb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eba:	4b18      	ldr	r3, [pc, #96]	; (8008f1c <pvPortMalloc+0x188>)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	4b19      	ldr	r3, [pc, #100]	; (8008f24 <pvPortMalloc+0x190>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d203      	bcs.n	8008ece <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ec6:	4b15      	ldr	r3, [pc, #84]	; (8008f1c <pvPortMalloc+0x188>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a16      	ldr	r2, [pc, #88]	; (8008f24 <pvPortMalloc+0x190>)
 8008ecc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	4b11      	ldr	r3, [pc, #68]	; (8008f18 <pvPortMalloc+0x184>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	2200      	movs	r2, #0
 8008ee0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ee2:	f7fe fbf5 	bl	80076d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00c      	beq.n	8008f0a <pvPortMalloc+0x176>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	b672      	cpsid	i
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	b662      	cpsie	i
 8008f04:	60fb      	str	r3, [r7, #12]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <pvPortMalloc+0x174>
	return pvReturn;
 8008f0a:	69fb      	ldr	r3, [r7, #28]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3728      	adds	r7, #40	; 0x28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	200069a4 	.word	0x200069a4
 8008f18:	200069b0 	.word	0x200069b0
 8008f1c:	200069a8 	.word	0x200069a8
 8008f20:	2000699c 	.word	0x2000699c
 8008f24:	200069ac 	.word	0x200069ac

08008f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d04c      	beq.n	8008fd4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f3a:	2308      	movs	r3, #8
 8008f3c:	425b      	negs	r3, r3
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4413      	add	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	4b23      	ldr	r3, [pc, #140]	; (8008fdc <vPortFree+0xb4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4013      	ands	r3, r2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10c      	bne.n	8008f70 <vPortFree+0x48>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	b672      	cpsid	i
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	b662      	cpsie	i
 8008f6a:	60fb      	str	r3, [r7, #12]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00c      	beq.n	8008f92 <vPortFree+0x6a>
	__asm volatile
 8008f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7c:	b672      	cpsid	i
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	b662      	cpsie	i
 8008f8c:	60bb      	str	r3, [r7, #8]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	4b11      	ldr	r3, [pc, #68]	; (8008fdc <vPortFree+0xb4>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d019      	beq.n	8008fd4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d115      	bne.n	8008fd4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	4b0b      	ldr	r3, [pc, #44]	; (8008fdc <vPortFree+0xb4>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	43db      	mvns	r3, r3
 8008fb2:	401a      	ands	r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fb8:	f7fe fb7c 	bl	80076b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <vPortFree+0xb8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	4a06      	ldr	r2, [pc, #24]	; (8008fe0 <vPortFree+0xb8>)
 8008fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fca:	6938      	ldr	r0, [r7, #16]
 8008fcc:	f000 f86c 	bl	80090a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008fd0:	f7fe fb7e 	bl	80076d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	200069b0 	.word	0x200069b0
 8008fe0:	200069a8 	.word	0x200069a8

08008fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ff0:	4b27      	ldr	r3, [pc, #156]	; (8009090 <prvHeapInit+0xac>)
 8008ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00c      	beq.n	8009018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3307      	adds	r3, #7
 8009002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f023 0307 	bic.w	r3, r3, #7
 800900a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	4a1f      	ldr	r2, [pc, #124]	; (8009090 <prvHeapInit+0xac>)
 8009014:	4413      	add	r3, r2
 8009016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800901c:	4a1d      	ldr	r2, [pc, #116]	; (8009094 <prvHeapInit+0xb0>)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009022:	4b1c      	ldr	r3, [pc, #112]	; (8009094 <prvHeapInit+0xb0>)
 8009024:	2200      	movs	r2, #0
 8009026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	4413      	add	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009030:	2208      	movs	r2, #8
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 0307 	bic.w	r3, r3, #7
 800903e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4a15      	ldr	r2, [pc, #84]	; (8009098 <prvHeapInit+0xb4>)
 8009044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009046:	4b14      	ldr	r3, [pc, #80]	; (8009098 <prvHeapInit+0xb4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2200      	movs	r2, #0
 800904c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800904e:	4b12      	ldr	r3, [pc, #72]	; (8009098 <prvHeapInit+0xb4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	1ad2      	subs	r2, r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009064:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <prvHeapInit+0xb4>)
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	4a0a      	ldr	r2, [pc, #40]	; (800909c <prvHeapInit+0xb8>)
 8009072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	4a09      	ldr	r2, [pc, #36]	; (80090a0 <prvHeapInit+0xbc>)
 800907a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800907c:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <prvHeapInit+0xc0>)
 800907e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009082:	601a      	str	r2, [r3, #0]
}
 8009084:	bf00      	nop
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	20002d9c 	.word	0x20002d9c
 8009094:	2000699c 	.word	0x2000699c
 8009098:	200069a4 	.word	0x200069a4
 800909c:	200069ac 	.word	0x200069ac
 80090a0:	200069a8 	.word	0x200069a8
 80090a4:	200069b0 	.word	0x200069b0

080090a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090b0:	4b28      	ldr	r3, [pc, #160]	; (8009154 <prvInsertBlockIntoFreeList+0xac>)
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	e002      	b.n	80090bc <prvInsertBlockIntoFreeList+0x14>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d8f7      	bhi.n	80090b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	4413      	add	r3, r2
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d108      	bne.n	80090ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	441a      	add	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	441a      	add	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d118      	bne.n	8009130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	4b15      	ldr	r3, [pc, #84]	; (8009158 <prvInsertBlockIntoFreeList+0xb0>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d00d      	beq.n	8009126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	441a      	add	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	e008      	b.n	8009138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009126:	4b0c      	ldr	r3, [pc, #48]	; (8009158 <prvInsertBlockIntoFreeList+0xb0>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	e003      	b.n	8009138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	d002      	beq.n	8009146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009146:	bf00      	nop
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	2000699c 	.word	0x2000699c
 8009158:	200069a4 	.word	0x200069a4

0800915c <__errno>:
 800915c:	4b01      	ldr	r3, [pc, #4]	; (8009164 <__errno+0x8>)
 800915e:	6818      	ldr	r0, [r3, #0]
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	20000010 	.word	0x20000010

08009168 <std>:
 8009168:	2300      	movs	r3, #0
 800916a:	b510      	push	{r4, lr}
 800916c:	4604      	mov	r4, r0
 800916e:	e9c0 3300 	strd	r3, r3, [r0]
 8009172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009176:	6083      	str	r3, [r0, #8]
 8009178:	8181      	strh	r1, [r0, #12]
 800917a:	6643      	str	r3, [r0, #100]	; 0x64
 800917c:	81c2      	strh	r2, [r0, #14]
 800917e:	6183      	str	r3, [r0, #24]
 8009180:	4619      	mov	r1, r3
 8009182:	2208      	movs	r2, #8
 8009184:	305c      	adds	r0, #92	; 0x5c
 8009186:	f000 f934 	bl	80093f2 <memset>
 800918a:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <std+0x38>)
 800918c:	6263      	str	r3, [r4, #36]	; 0x24
 800918e:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <std+0x3c>)
 8009190:	62a3      	str	r3, [r4, #40]	; 0x28
 8009192:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <std+0x40>)
 8009194:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009196:	4b05      	ldr	r3, [pc, #20]	; (80091ac <std+0x44>)
 8009198:	6224      	str	r4, [r4, #32]
 800919a:	6323      	str	r3, [r4, #48]	; 0x30
 800919c:	bd10      	pop	{r4, pc}
 800919e:	bf00      	nop
 80091a0:	0800970d 	.word	0x0800970d
 80091a4:	0800972f 	.word	0x0800972f
 80091a8:	08009767 	.word	0x08009767
 80091ac:	0800978b 	.word	0x0800978b

080091b0 <_cleanup_r>:
 80091b0:	4901      	ldr	r1, [pc, #4]	; (80091b8 <_cleanup_r+0x8>)
 80091b2:	f000 b8af 	b.w	8009314 <_fwalk_reent>
 80091b6:	bf00      	nop
 80091b8:	08009af9 	.word	0x08009af9

080091bc <__sfmoreglue>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	2268      	movs	r2, #104	; 0x68
 80091c0:	1e4d      	subs	r5, r1, #1
 80091c2:	4355      	muls	r5, r2
 80091c4:	460e      	mov	r6, r1
 80091c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091ca:	f000 f93b 	bl	8009444 <_malloc_r>
 80091ce:	4604      	mov	r4, r0
 80091d0:	b140      	cbz	r0, 80091e4 <__sfmoreglue+0x28>
 80091d2:	2100      	movs	r1, #0
 80091d4:	e9c0 1600 	strd	r1, r6, [r0]
 80091d8:	300c      	adds	r0, #12
 80091da:	60a0      	str	r0, [r4, #8]
 80091dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091e0:	f000 f907 	bl	80093f2 <memset>
 80091e4:	4620      	mov	r0, r4
 80091e6:	bd70      	pop	{r4, r5, r6, pc}

080091e8 <__sfp_lock_acquire>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__sfp_lock_acquire+0x8>)
 80091ea:	f000 b8f2 	b.w	80093d2 <__retarget_lock_acquire_recursive>
 80091ee:	bf00      	nop
 80091f0:	200069b5 	.word	0x200069b5

080091f4 <__sfp_lock_release>:
 80091f4:	4801      	ldr	r0, [pc, #4]	; (80091fc <__sfp_lock_release+0x8>)
 80091f6:	f000 b8ed 	b.w	80093d4 <__retarget_lock_release_recursive>
 80091fa:	bf00      	nop
 80091fc:	200069b5 	.word	0x200069b5

08009200 <__sinit_lock_acquire>:
 8009200:	4801      	ldr	r0, [pc, #4]	; (8009208 <__sinit_lock_acquire+0x8>)
 8009202:	f000 b8e6 	b.w	80093d2 <__retarget_lock_acquire_recursive>
 8009206:	bf00      	nop
 8009208:	200069b6 	.word	0x200069b6

0800920c <__sinit_lock_release>:
 800920c:	4801      	ldr	r0, [pc, #4]	; (8009214 <__sinit_lock_release+0x8>)
 800920e:	f000 b8e1 	b.w	80093d4 <__retarget_lock_release_recursive>
 8009212:	bf00      	nop
 8009214:	200069b6 	.word	0x200069b6

08009218 <__sinit>:
 8009218:	b510      	push	{r4, lr}
 800921a:	4604      	mov	r4, r0
 800921c:	f7ff fff0 	bl	8009200 <__sinit_lock_acquire>
 8009220:	69a3      	ldr	r3, [r4, #24]
 8009222:	b11b      	cbz	r3, 800922c <__sinit+0x14>
 8009224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009228:	f7ff bff0 	b.w	800920c <__sinit_lock_release>
 800922c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009230:	6523      	str	r3, [r4, #80]	; 0x50
 8009232:	4b13      	ldr	r3, [pc, #76]	; (8009280 <__sinit+0x68>)
 8009234:	4a13      	ldr	r2, [pc, #76]	; (8009284 <__sinit+0x6c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	62a2      	str	r2, [r4, #40]	; 0x28
 800923a:	42a3      	cmp	r3, r4
 800923c:	bf04      	itt	eq
 800923e:	2301      	moveq	r3, #1
 8009240:	61a3      	streq	r3, [r4, #24]
 8009242:	4620      	mov	r0, r4
 8009244:	f000 f820 	bl	8009288 <__sfp>
 8009248:	6060      	str	r0, [r4, #4]
 800924a:	4620      	mov	r0, r4
 800924c:	f000 f81c 	bl	8009288 <__sfp>
 8009250:	60a0      	str	r0, [r4, #8]
 8009252:	4620      	mov	r0, r4
 8009254:	f000 f818 	bl	8009288 <__sfp>
 8009258:	2200      	movs	r2, #0
 800925a:	60e0      	str	r0, [r4, #12]
 800925c:	2104      	movs	r1, #4
 800925e:	6860      	ldr	r0, [r4, #4]
 8009260:	f7ff ff82 	bl	8009168 <std>
 8009264:	68a0      	ldr	r0, [r4, #8]
 8009266:	2201      	movs	r2, #1
 8009268:	2109      	movs	r1, #9
 800926a:	f7ff ff7d 	bl	8009168 <std>
 800926e:	68e0      	ldr	r0, [r4, #12]
 8009270:	2202      	movs	r2, #2
 8009272:	2112      	movs	r1, #18
 8009274:	f7ff ff78 	bl	8009168 <std>
 8009278:	2301      	movs	r3, #1
 800927a:	61a3      	str	r3, [r4, #24]
 800927c:	e7d2      	b.n	8009224 <__sinit+0xc>
 800927e:	bf00      	nop
 8009280:	0800a0a8 	.word	0x0800a0a8
 8009284:	080091b1 	.word	0x080091b1

08009288 <__sfp>:
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928a:	4607      	mov	r7, r0
 800928c:	f7ff ffac 	bl	80091e8 <__sfp_lock_acquire>
 8009290:	4b1e      	ldr	r3, [pc, #120]	; (800930c <__sfp+0x84>)
 8009292:	681e      	ldr	r6, [r3, #0]
 8009294:	69b3      	ldr	r3, [r6, #24]
 8009296:	b913      	cbnz	r3, 800929e <__sfp+0x16>
 8009298:	4630      	mov	r0, r6
 800929a:	f7ff ffbd 	bl	8009218 <__sinit>
 800929e:	3648      	adds	r6, #72	; 0x48
 80092a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	d503      	bpl.n	80092b0 <__sfp+0x28>
 80092a8:	6833      	ldr	r3, [r6, #0]
 80092aa:	b30b      	cbz	r3, 80092f0 <__sfp+0x68>
 80092ac:	6836      	ldr	r6, [r6, #0]
 80092ae:	e7f7      	b.n	80092a0 <__sfp+0x18>
 80092b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092b4:	b9d5      	cbnz	r5, 80092ec <__sfp+0x64>
 80092b6:	4b16      	ldr	r3, [pc, #88]	; (8009310 <__sfp+0x88>)
 80092b8:	60e3      	str	r3, [r4, #12]
 80092ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092be:	6665      	str	r5, [r4, #100]	; 0x64
 80092c0:	f000 f886 	bl	80093d0 <__retarget_lock_init_recursive>
 80092c4:	f7ff ff96 	bl	80091f4 <__sfp_lock_release>
 80092c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092d0:	6025      	str	r5, [r4, #0]
 80092d2:	61a5      	str	r5, [r4, #24]
 80092d4:	2208      	movs	r2, #8
 80092d6:	4629      	mov	r1, r5
 80092d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092dc:	f000 f889 	bl	80093f2 <memset>
 80092e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092e8:	4620      	mov	r0, r4
 80092ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ec:	3468      	adds	r4, #104	; 0x68
 80092ee:	e7d9      	b.n	80092a4 <__sfp+0x1c>
 80092f0:	2104      	movs	r1, #4
 80092f2:	4638      	mov	r0, r7
 80092f4:	f7ff ff62 	bl	80091bc <__sfmoreglue>
 80092f8:	4604      	mov	r4, r0
 80092fa:	6030      	str	r0, [r6, #0]
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d1d5      	bne.n	80092ac <__sfp+0x24>
 8009300:	f7ff ff78 	bl	80091f4 <__sfp_lock_release>
 8009304:	230c      	movs	r3, #12
 8009306:	603b      	str	r3, [r7, #0]
 8009308:	e7ee      	b.n	80092e8 <__sfp+0x60>
 800930a:	bf00      	nop
 800930c:	0800a0a8 	.word	0x0800a0a8
 8009310:	ffff0001 	.word	0xffff0001

08009314 <_fwalk_reent>:
 8009314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009318:	4606      	mov	r6, r0
 800931a:	4688      	mov	r8, r1
 800931c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009320:	2700      	movs	r7, #0
 8009322:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009326:	f1b9 0901 	subs.w	r9, r9, #1
 800932a:	d505      	bpl.n	8009338 <_fwalk_reent+0x24>
 800932c:	6824      	ldr	r4, [r4, #0]
 800932e:	2c00      	cmp	r4, #0
 8009330:	d1f7      	bne.n	8009322 <_fwalk_reent+0xe>
 8009332:	4638      	mov	r0, r7
 8009334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009338:	89ab      	ldrh	r3, [r5, #12]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d907      	bls.n	800934e <_fwalk_reent+0x3a>
 800933e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009342:	3301      	adds	r3, #1
 8009344:	d003      	beq.n	800934e <_fwalk_reent+0x3a>
 8009346:	4629      	mov	r1, r5
 8009348:	4630      	mov	r0, r6
 800934a:	47c0      	blx	r8
 800934c:	4307      	orrs	r7, r0
 800934e:	3568      	adds	r5, #104	; 0x68
 8009350:	e7e9      	b.n	8009326 <_fwalk_reent+0x12>
	...

08009354 <__libc_init_array>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	4d0d      	ldr	r5, [pc, #52]	; (800938c <__libc_init_array+0x38>)
 8009358:	4c0d      	ldr	r4, [pc, #52]	; (8009390 <__libc_init_array+0x3c>)
 800935a:	1b64      	subs	r4, r4, r5
 800935c:	10a4      	asrs	r4, r4, #2
 800935e:	2600      	movs	r6, #0
 8009360:	42a6      	cmp	r6, r4
 8009362:	d109      	bne.n	8009378 <__libc_init_array+0x24>
 8009364:	4d0b      	ldr	r5, [pc, #44]	; (8009394 <__libc_init_array+0x40>)
 8009366:	4c0c      	ldr	r4, [pc, #48]	; (8009398 <__libc_init_array+0x44>)
 8009368:	f000 fd06 	bl	8009d78 <_init>
 800936c:	1b64      	subs	r4, r4, r5
 800936e:	10a4      	asrs	r4, r4, #2
 8009370:	2600      	movs	r6, #0
 8009372:	42a6      	cmp	r6, r4
 8009374:	d105      	bne.n	8009382 <__libc_init_array+0x2e>
 8009376:	bd70      	pop	{r4, r5, r6, pc}
 8009378:	f855 3b04 	ldr.w	r3, [r5], #4
 800937c:	4798      	blx	r3
 800937e:	3601      	adds	r6, #1
 8009380:	e7ee      	b.n	8009360 <__libc_init_array+0xc>
 8009382:	f855 3b04 	ldr.w	r3, [r5], #4
 8009386:	4798      	blx	r3
 8009388:	3601      	adds	r6, #1
 800938a:	e7f2      	b.n	8009372 <__libc_init_array+0x1e>
 800938c:	0800a0dc 	.word	0x0800a0dc
 8009390:	0800a0dc 	.word	0x0800a0dc
 8009394:	0800a0dc 	.word	0x0800a0dc
 8009398:	0800a0e0 	.word	0x0800a0e0

0800939c <__itoa>:
 800939c:	1e93      	subs	r3, r2, #2
 800939e:	2b22      	cmp	r3, #34	; 0x22
 80093a0:	b510      	push	{r4, lr}
 80093a2:	460c      	mov	r4, r1
 80093a4:	d904      	bls.n	80093b0 <__itoa+0x14>
 80093a6:	2300      	movs	r3, #0
 80093a8:	700b      	strb	r3, [r1, #0]
 80093aa:	461c      	mov	r4, r3
 80093ac:	4620      	mov	r0, r4
 80093ae:	bd10      	pop	{r4, pc}
 80093b0:	2a0a      	cmp	r2, #10
 80093b2:	d109      	bne.n	80093c8 <__itoa+0x2c>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	da07      	bge.n	80093c8 <__itoa+0x2c>
 80093b8:	232d      	movs	r3, #45	; 0x2d
 80093ba:	700b      	strb	r3, [r1, #0]
 80093bc:	4240      	negs	r0, r0
 80093be:	2101      	movs	r1, #1
 80093c0:	4421      	add	r1, r4
 80093c2:	f000 f9ef 	bl	80097a4 <__utoa>
 80093c6:	e7f1      	b.n	80093ac <__itoa+0x10>
 80093c8:	2100      	movs	r1, #0
 80093ca:	e7f9      	b.n	80093c0 <__itoa+0x24>

080093cc <itoa>:
 80093cc:	f7ff bfe6 	b.w	800939c <__itoa>

080093d0 <__retarget_lock_init_recursive>:
 80093d0:	4770      	bx	lr

080093d2 <__retarget_lock_acquire_recursive>:
 80093d2:	4770      	bx	lr

080093d4 <__retarget_lock_release_recursive>:
 80093d4:	4770      	bx	lr

080093d6 <memcpy>:
 80093d6:	440a      	add	r2, r1
 80093d8:	4291      	cmp	r1, r2
 80093da:	f100 33ff 	add.w	r3, r0, #4294967295
 80093de:	d100      	bne.n	80093e2 <memcpy+0xc>
 80093e0:	4770      	bx	lr
 80093e2:	b510      	push	{r4, lr}
 80093e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ec:	4291      	cmp	r1, r2
 80093ee:	d1f9      	bne.n	80093e4 <memcpy+0xe>
 80093f0:	bd10      	pop	{r4, pc}

080093f2 <memset>:
 80093f2:	4402      	add	r2, r0
 80093f4:	4603      	mov	r3, r0
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d100      	bne.n	80093fc <memset+0xa>
 80093fa:	4770      	bx	lr
 80093fc:	f803 1b01 	strb.w	r1, [r3], #1
 8009400:	e7f9      	b.n	80093f6 <memset+0x4>
	...

08009404 <sbrk_aligned>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	4e0e      	ldr	r6, [pc, #56]	; (8009440 <sbrk_aligned+0x3c>)
 8009408:	460c      	mov	r4, r1
 800940a:	6831      	ldr	r1, [r6, #0]
 800940c:	4605      	mov	r5, r0
 800940e:	b911      	cbnz	r1, 8009416 <sbrk_aligned+0x12>
 8009410:	f000 f96c 	bl	80096ec <_sbrk_r>
 8009414:	6030      	str	r0, [r6, #0]
 8009416:	4621      	mov	r1, r4
 8009418:	4628      	mov	r0, r5
 800941a:	f000 f967 	bl	80096ec <_sbrk_r>
 800941e:	1c43      	adds	r3, r0, #1
 8009420:	d00a      	beq.n	8009438 <sbrk_aligned+0x34>
 8009422:	1cc4      	adds	r4, r0, #3
 8009424:	f024 0403 	bic.w	r4, r4, #3
 8009428:	42a0      	cmp	r0, r4
 800942a:	d007      	beq.n	800943c <sbrk_aligned+0x38>
 800942c:	1a21      	subs	r1, r4, r0
 800942e:	4628      	mov	r0, r5
 8009430:	f000 f95c 	bl	80096ec <_sbrk_r>
 8009434:	3001      	adds	r0, #1
 8009436:	d101      	bne.n	800943c <sbrk_aligned+0x38>
 8009438:	f04f 34ff 	mov.w	r4, #4294967295
 800943c:	4620      	mov	r0, r4
 800943e:	bd70      	pop	{r4, r5, r6, pc}
 8009440:	200069bc 	.word	0x200069bc

08009444 <_malloc_r>:
 8009444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009448:	1ccd      	adds	r5, r1, #3
 800944a:	f025 0503 	bic.w	r5, r5, #3
 800944e:	3508      	adds	r5, #8
 8009450:	2d0c      	cmp	r5, #12
 8009452:	bf38      	it	cc
 8009454:	250c      	movcc	r5, #12
 8009456:	2d00      	cmp	r5, #0
 8009458:	4607      	mov	r7, r0
 800945a:	db01      	blt.n	8009460 <_malloc_r+0x1c>
 800945c:	42a9      	cmp	r1, r5
 800945e:	d905      	bls.n	800946c <_malloc_r+0x28>
 8009460:	230c      	movs	r3, #12
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	2600      	movs	r6, #0
 8009466:	4630      	mov	r0, r6
 8009468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800946c:	4e2e      	ldr	r6, [pc, #184]	; (8009528 <_malloc_r+0xe4>)
 800946e:	f000 fbf7 	bl	8009c60 <__malloc_lock>
 8009472:	6833      	ldr	r3, [r6, #0]
 8009474:	461c      	mov	r4, r3
 8009476:	bb34      	cbnz	r4, 80094c6 <_malloc_r+0x82>
 8009478:	4629      	mov	r1, r5
 800947a:	4638      	mov	r0, r7
 800947c:	f7ff ffc2 	bl	8009404 <sbrk_aligned>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	4604      	mov	r4, r0
 8009484:	d14d      	bne.n	8009522 <_malloc_r+0xde>
 8009486:	6834      	ldr	r4, [r6, #0]
 8009488:	4626      	mov	r6, r4
 800948a:	2e00      	cmp	r6, #0
 800948c:	d140      	bne.n	8009510 <_malloc_r+0xcc>
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	4631      	mov	r1, r6
 8009492:	4638      	mov	r0, r7
 8009494:	eb04 0803 	add.w	r8, r4, r3
 8009498:	f000 f928 	bl	80096ec <_sbrk_r>
 800949c:	4580      	cmp	r8, r0
 800949e:	d13a      	bne.n	8009516 <_malloc_r+0xd2>
 80094a0:	6821      	ldr	r1, [r4, #0]
 80094a2:	3503      	adds	r5, #3
 80094a4:	1a6d      	subs	r5, r5, r1
 80094a6:	f025 0503 	bic.w	r5, r5, #3
 80094aa:	3508      	adds	r5, #8
 80094ac:	2d0c      	cmp	r5, #12
 80094ae:	bf38      	it	cc
 80094b0:	250c      	movcc	r5, #12
 80094b2:	4629      	mov	r1, r5
 80094b4:	4638      	mov	r0, r7
 80094b6:	f7ff ffa5 	bl	8009404 <sbrk_aligned>
 80094ba:	3001      	adds	r0, #1
 80094bc:	d02b      	beq.n	8009516 <_malloc_r+0xd2>
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	442b      	add	r3, r5
 80094c2:	6023      	str	r3, [r4, #0]
 80094c4:	e00e      	b.n	80094e4 <_malloc_r+0xa0>
 80094c6:	6822      	ldr	r2, [r4, #0]
 80094c8:	1b52      	subs	r2, r2, r5
 80094ca:	d41e      	bmi.n	800950a <_malloc_r+0xc6>
 80094cc:	2a0b      	cmp	r2, #11
 80094ce:	d916      	bls.n	80094fe <_malloc_r+0xba>
 80094d0:	1961      	adds	r1, r4, r5
 80094d2:	42a3      	cmp	r3, r4
 80094d4:	6025      	str	r5, [r4, #0]
 80094d6:	bf18      	it	ne
 80094d8:	6059      	strne	r1, [r3, #4]
 80094da:	6863      	ldr	r3, [r4, #4]
 80094dc:	bf08      	it	eq
 80094de:	6031      	streq	r1, [r6, #0]
 80094e0:	5162      	str	r2, [r4, r5]
 80094e2:	604b      	str	r3, [r1, #4]
 80094e4:	4638      	mov	r0, r7
 80094e6:	f104 060b 	add.w	r6, r4, #11
 80094ea:	f000 fbbf 	bl	8009c6c <__malloc_unlock>
 80094ee:	f026 0607 	bic.w	r6, r6, #7
 80094f2:	1d23      	adds	r3, r4, #4
 80094f4:	1af2      	subs	r2, r6, r3
 80094f6:	d0b6      	beq.n	8009466 <_malloc_r+0x22>
 80094f8:	1b9b      	subs	r3, r3, r6
 80094fa:	50a3      	str	r3, [r4, r2]
 80094fc:	e7b3      	b.n	8009466 <_malloc_r+0x22>
 80094fe:	6862      	ldr	r2, [r4, #4]
 8009500:	42a3      	cmp	r3, r4
 8009502:	bf0c      	ite	eq
 8009504:	6032      	streq	r2, [r6, #0]
 8009506:	605a      	strne	r2, [r3, #4]
 8009508:	e7ec      	b.n	80094e4 <_malloc_r+0xa0>
 800950a:	4623      	mov	r3, r4
 800950c:	6864      	ldr	r4, [r4, #4]
 800950e:	e7b2      	b.n	8009476 <_malloc_r+0x32>
 8009510:	4634      	mov	r4, r6
 8009512:	6876      	ldr	r6, [r6, #4]
 8009514:	e7b9      	b.n	800948a <_malloc_r+0x46>
 8009516:	230c      	movs	r3, #12
 8009518:	603b      	str	r3, [r7, #0]
 800951a:	4638      	mov	r0, r7
 800951c:	f000 fba6 	bl	8009c6c <__malloc_unlock>
 8009520:	e7a1      	b.n	8009466 <_malloc_r+0x22>
 8009522:	6025      	str	r5, [r4, #0]
 8009524:	e7de      	b.n	80094e4 <_malloc_r+0xa0>
 8009526:	bf00      	nop
 8009528:	200069b8 	.word	0x200069b8

0800952c <_puts_r>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	460e      	mov	r6, r1
 8009530:	4605      	mov	r5, r0
 8009532:	b118      	cbz	r0, 800953c <_puts_r+0x10>
 8009534:	6983      	ldr	r3, [r0, #24]
 8009536:	b90b      	cbnz	r3, 800953c <_puts_r+0x10>
 8009538:	f7ff fe6e 	bl	8009218 <__sinit>
 800953c:	69ab      	ldr	r3, [r5, #24]
 800953e:	68ac      	ldr	r4, [r5, #8]
 8009540:	b913      	cbnz	r3, 8009548 <_puts_r+0x1c>
 8009542:	4628      	mov	r0, r5
 8009544:	f7ff fe68 	bl	8009218 <__sinit>
 8009548:	4b2c      	ldr	r3, [pc, #176]	; (80095fc <_puts_r+0xd0>)
 800954a:	429c      	cmp	r4, r3
 800954c:	d120      	bne.n	8009590 <_puts_r+0x64>
 800954e:	686c      	ldr	r4, [r5, #4]
 8009550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009552:	07db      	lsls	r3, r3, #31
 8009554:	d405      	bmi.n	8009562 <_puts_r+0x36>
 8009556:	89a3      	ldrh	r3, [r4, #12]
 8009558:	0598      	lsls	r0, r3, #22
 800955a:	d402      	bmi.n	8009562 <_puts_r+0x36>
 800955c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800955e:	f7ff ff38 	bl	80093d2 <__retarget_lock_acquire_recursive>
 8009562:	89a3      	ldrh	r3, [r4, #12]
 8009564:	0719      	lsls	r1, r3, #28
 8009566:	d51d      	bpl.n	80095a4 <_puts_r+0x78>
 8009568:	6923      	ldr	r3, [r4, #16]
 800956a:	b1db      	cbz	r3, 80095a4 <_puts_r+0x78>
 800956c:	3e01      	subs	r6, #1
 800956e:	68a3      	ldr	r3, [r4, #8]
 8009570:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009574:	3b01      	subs	r3, #1
 8009576:	60a3      	str	r3, [r4, #8]
 8009578:	bb39      	cbnz	r1, 80095ca <_puts_r+0x9e>
 800957a:	2b00      	cmp	r3, #0
 800957c:	da38      	bge.n	80095f0 <_puts_r+0xc4>
 800957e:	4622      	mov	r2, r4
 8009580:	210a      	movs	r1, #10
 8009582:	4628      	mov	r0, r5
 8009584:	f000 f950 	bl	8009828 <__swbuf_r>
 8009588:	3001      	adds	r0, #1
 800958a:	d011      	beq.n	80095b0 <_puts_r+0x84>
 800958c:	250a      	movs	r5, #10
 800958e:	e011      	b.n	80095b4 <_puts_r+0x88>
 8009590:	4b1b      	ldr	r3, [pc, #108]	; (8009600 <_puts_r+0xd4>)
 8009592:	429c      	cmp	r4, r3
 8009594:	d101      	bne.n	800959a <_puts_r+0x6e>
 8009596:	68ac      	ldr	r4, [r5, #8]
 8009598:	e7da      	b.n	8009550 <_puts_r+0x24>
 800959a:	4b1a      	ldr	r3, [pc, #104]	; (8009604 <_puts_r+0xd8>)
 800959c:	429c      	cmp	r4, r3
 800959e:	bf08      	it	eq
 80095a0:	68ec      	ldreq	r4, [r5, #12]
 80095a2:	e7d5      	b.n	8009550 <_puts_r+0x24>
 80095a4:	4621      	mov	r1, r4
 80095a6:	4628      	mov	r0, r5
 80095a8:	f000 f9a2 	bl	80098f0 <__swsetup_r>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d0dd      	beq.n	800956c <_puts_r+0x40>
 80095b0:	f04f 35ff 	mov.w	r5, #4294967295
 80095b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095b6:	07da      	lsls	r2, r3, #31
 80095b8:	d405      	bmi.n	80095c6 <_puts_r+0x9a>
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	059b      	lsls	r3, r3, #22
 80095be:	d402      	bmi.n	80095c6 <_puts_r+0x9a>
 80095c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095c2:	f7ff ff07 	bl	80093d4 <__retarget_lock_release_recursive>
 80095c6:	4628      	mov	r0, r5
 80095c8:	bd70      	pop	{r4, r5, r6, pc}
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	da04      	bge.n	80095d8 <_puts_r+0xac>
 80095ce:	69a2      	ldr	r2, [r4, #24]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	dc06      	bgt.n	80095e2 <_puts_r+0xb6>
 80095d4:	290a      	cmp	r1, #10
 80095d6:	d004      	beq.n	80095e2 <_puts_r+0xb6>
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	6022      	str	r2, [r4, #0]
 80095de:	7019      	strb	r1, [r3, #0]
 80095e0:	e7c5      	b.n	800956e <_puts_r+0x42>
 80095e2:	4622      	mov	r2, r4
 80095e4:	4628      	mov	r0, r5
 80095e6:	f000 f91f 	bl	8009828 <__swbuf_r>
 80095ea:	3001      	adds	r0, #1
 80095ec:	d1bf      	bne.n	800956e <_puts_r+0x42>
 80095ee:	e7df      	b.n	80095b0 <_puts_r+0x84>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	250a      	movs	r5, #10
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	6022      	str	r2, [r4, #0]
 80095f8:	701d      	strb	r5, [r3, #0]
 80095fa:	e7db      	b.n	80095b4 <_puts_r+0x88>
 80095fc:	0800a068 	.word	0x0800a068
 8009600:	0800a088 	.word	0x0800a088
 8009604:	0800a048 	.word	0x0800a048

08009608 <puts>:
 8009608:	4b02      	ldr	r3, [pc, #8]	; (8009614 <puts+0xc>)
 800960a:	4601      	mov	r1, r0
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	f7ff bf8d 	b.w	800952c <_puts_r>
 8009612:	bf00      	nop
 8009614:	20000010 	.word	0x20000010

08009618 <cleanup_glue>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	460c      	mov	r4, r1
 800961c:	6809      	ldr	r1, [r1, #0]
 800961e:	4605      	mov	r5, r0
 8009620:	b109      	cbz	r1, 8009626 <cleanup_glue+0xe>
 8009622:	f7ff fff9 	bl	8009618 <cleanup_glue>
 8009626:	4621      	mov	r1, r4
 8009628:	4628      	mov	r0, r5
 800962a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800962e:	f000 bb23 	b.w	8009c78 <_free_r>
	...

08009634 <_reclaim_reent>:
 8009634:	4b2c      	ldr	r3, [pc, #176]	; (80096e8 <_reclaim_reent+0xb4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4283      	cmp	r3, r0
 800963a:	b570      	push	{r4, r5, r6, lr}
 800963c:	4604      	mov	r4, r0
 800963e:	d051      	beq.n	80096e4 <_reclaim_reent+0xb0>
 8009640:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009642:	b143      	cbz	r3, 8009656 <_reclaim_reent+0x22>
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d14a      	bne.n	80096e0 <_reclaim_reent+0xac>
 800964a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800964c:	6819      	ldr	r1, [r3, #0]
 800964e:	b111      	cbz	r1, 8009656 <_reclaim_reent+0x22>
 8009650:	4620      	mov	r0, r4
 8009652:	f000 fb11 	bl	8009c78 <_free_r>
 8009656:	6961      	ldr	r1, [r4, #20]
 8009658:	b111      	cbz	r1, 8009660 <_reclaim_reent+0x2c>
 800965a:	4620      	mov	r0, r4
 800965c:	f000 fb0c 	bl	8009c78 <_free_r>
 8009660:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009662:	b111      	cbz	r1, 800966a <_reclaim_reent+0x36>
 8009664:	4620      	mov	r0, r4
 8009666:	f000 fb07 	bl	8009c78 <_free_r>
 800966a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800966c:	b111      	cbz	r1, 8009674 <_reclaim_reent+0x40>
 800966e:	4620      	mov	r0, r4
 8009670:	f000 fb02 	bl	8009c78 <_free_r>
 8009674:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009676:	b111      	cbz	r1, 800967e <_reclaim_reent+0x4a>
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fafd 	bl	8009c78 <_free_r>
 800967e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009680:	b111      	cbz	r1, 8009688 <_reclaim_reent+0x54>
 8009682:	4620      	mov	r0, r4
 8009684:	f000 faf8 	bl	8009c78 <_free_r>
 8009688:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800968a:	b111      	cbz	r1, 8009692 <_reclaim_reent+0x5e>
 800968c:	4620      	mov	r0, r4
 800968e:	f000 faf3 	bl	8009c78 <_free_r>
 8009692:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009694:	b111      	cbz	r1, 800969c <_reclaim_reent+0x68>
 8009696:	4620      	mov	r0, r4
 8009698:	f000 faee 	bl	8009c78 <_free_r>
 800969c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800969e:	b111      	cbz	r1, 80096a6 <_reclaim_reent+0x72>
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 fae9 	bl	8009c78 <_free_r>
 80096a6:	69a3      	ldr	r3, [r4, #24]
 80096a8:	b1e3      	cbz	r3, 80096e4 <_reclaim_reent+0xb0>
 80096aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096ac:	4620      	mov	r0, r4
 80096ae:	4798      	blx	r3
 80096b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80096b2:	b1b9      	cbz	r1, 80096e4 <_reclaim_reent+0xb0>
 80096b4:	4620      	mov	r0, r4
 80096b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096ba:	f7ff bfad 	b.w	8009618 <cleanup_glue>
 80096be:	5949      	ldr	r1, [r1, r5]
 80096c0:	b941      	cbnz	r1, 80096d4 <_reclaim_reent+0xa0>
 80096c2:	3504      	adds	r5, #4
 80096c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096c6:	2d80      	cmp	r5, #128	; 0x80
 80096c8:	68d9      	ldr	r1, [r3, #12]
 80096ca:	d1f8      	bne.n	80096be <_reclaim_reent+0x8a>
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 fad3 	bl	8009c78 <_free_r>
 80096d2:	e7ba      	b.n	800964a <_reclaim_reent+0x16>
 80096d4:	680e      	ldr	r6, [r1, #0]
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 face 	bl	8009c78 <_free_r>
 80096dc:	4631      	mov	r1, r6
 80096de:	e7ef      	b.n	80096c0 <_reclaim_reent+0x8c>
 80096e0:	2500      	movs	r5, #0
 80096e2:	e7ef      	b.n	80096c4 <_reclaim_reent+0x90>
 80096e4:	bd70      	pop	{r4, r5, r6, pc}
 80096e6:	bf00      	nop
 80096e8:	20000010 	.word	0x20000010

080096ec <_sbrk_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d06      	ldr	r5, [pc, #24]	; (8009708 <_sbrk_r+0x1c>)
 80096f0:	2300      	movs	r3, #0
 80096f2:	4604      	mov	r4, r0
 80096f4:	4608      	mov	r0, r1
 80096f6:	602b      	str	r3, [r5, #0]
 80096f8:	f7f7 ff80 	bl	80015fc <_sbrk>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	d102      	bne.n	8009706 <_sbrk_r+0x1a>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	b103      	cbz	r3, 8009706 <_sbrk_r+0x1a>
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	200069c0 	.word	0x200069c0

0800970c <__sread>:
 800970c:	b510      	push	{r4, lr}
 800970e:	460c      	mov	r4, r1
 8009710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009714:	f000 fafc 	bl	8009d10 <_read_r>
 8009718:	2800      	cmp	r0, #0
 800971a:	bfab      	itete	ge
 800971c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800971e:	89a3      	ldrhlt	r3, [r4, #12]
 8009720:	181b      	addge	r3, r3, r0
 8009722:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009726:	bfac      	ite	ge
 8009728:	6563      	strge	r3, [r4, #84]	; 0x54
 800972a:	81a3      	strhlt	r3, [r4, #12]
 800972c:	bd10      	pop	{r4, pc}

0800972e <__swrite>:
 800972e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009732:	461f      	mov	r7, r3
 8009734:	898b      	ldrh	r3, [r1, #12]
 8009736:	05db      	lsls	r3, r3, #23
 8009738:	4605      	mov	r5, r0
 800973a:	460c      	mov	r4, r1
 800973c:	4616      	mov	r6, r2
 800973e:	d505      	bpl.n	800974c <__swrite+0x1e>
 8009740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009744:	2302      	movs	r3, #2
 8009746:	2200      	movs	r2, #0
 8009748:	f000 fa12 	bl	8009b70 <_lseek_r>
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009756:	81a3      	strh	r3, [r4, #12]
 8009758:	4632      	mov	r2, r6
 800975a:	463b      	mov	r3, r7
 800975c:	4628      	mov	r0, r5
 800975e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009762:	f000 b8b3 	b.w	80098cc <_write_r>

08009766 <__sseek>:
 8009766:	b510      	push	{r4, lr}
 8009768:	460c      	mov	r4, r1
 800976a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976e:	f000 f9ff 	bl	8009b70 <_lseek_r>
 8009772:	1c43      	adds	r3, r0, #1
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	bf15      	itete	ne
 8009778:	6560      	strne	r0, [r4, #84]	; 0x54
 800977a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800977e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009782:	81a3      	strheq	r3, [r4, #12]
 8009784:	bf18      	it	ne
 8009786:	81a3      	strhne	r3, [r4, #12]
 8009788:	bd10      	pop	{r4, pc}

0800978a <__sclose>:
 800978a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800978e:	f000 b91d 	b.w	80099cc <_close_r>

08009792 <strcpy>:
 8009792:	4603      	mov	r3, r0
 8009794:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009798:	f803 2b01 	strb.w	r2, [r3], #1
 800979c:	2a00      	cmp	r2, #0
 800979e:	d1f9      	bne.n	8009794 <strcpy+0x2>
 80097a0:	4770      	bx	lr
	...

080097a4 <__utoa>:
 80097a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097a6:	4c1f      	ldr	r4, [pc, #124]	; (8009824 <__utoa+0x80>)
 80097a8:	b08b      	sub	sp, #44	; 0x2c
 80097aa:	4605      	mov	r5, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	466e      	mov	r6, sp
 80097b0:	f104 0c20 	add.w	ip, r4, #32
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	6861      	ldr	r1, [r4, #4]
 80097b8:	4637      	mov	r7, r6
 80097ba:	c703      	stmia	r7!, {r0, r1}
 80097bc:	3408      	adds	r4, #8
 80097be:	4564      	cmp	r4, ip
 80097c0:	463e      	mov	r6, r7
 80097c2:	d1f7      	bne.n	80097b4 <__utoa+0x10>
 80097c4:	7921      	ldrb	r1, [r4, #4]
 80097c6:	7139      	strb	r1, [r7, #4]
 80097c8:	1e91      	subs	r1, r2, #2
 80097ca:	6820      	ldr	r0, [r4, #0]
 80097cc:	6038      	str	r0, [r7, #0]
 80097ce:	2922      	cmp	r1, #34	; 0x22
 80097d0:	f04f 0100 	mov.w	r1, #0
 80097d4:	d904      	bls.n	80097e0 <__utoa+0x3c>
 80097d6:	7019      	strb	r1, [r3, #0]
 80097d8:	460b      	mov	r3, r1
 80097da:	4618      	mov	r0, r3
 80097dc:	b00b      	add	sp, #44	; 0x2c
 80097de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e0:	1e58      	subs	r0, r3, #1
 80097e2:	4684      	mov	ip, r0
 80097e4:	fbb5 f7f2 	udiv	r7, r5, r2
 80097e8:	fb02 5617 	mls	r6, r2, r7, r5
 80097ec:	3628      	adds	r6, #40	; 0x28
 80097ee:	446e      	add	r6, sp
 80097f0:	460c      	mov	r4, r1
 80097f2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80097f6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80097fa:	462e      	mov	r6, r5
 80097fc:	42b2      	cmp	r2, r6
 80097fe:	f101 0101 	add.w	r1, r1, #1
 8009802:	463d      	mov	r5, r7
 8009804:	d9ee      	bls.n	80097e4 <__utoa+0x40>
 8009806:	2200      	movs	r2, #0
 8009808:	545a      	strb	r2, [r3, r1]
 800980a:	1919      	adds	r1, r3, r4
 800980c:	1aa5      	subs	r5, r4, r2
 800980e:	42aa      	cmp	r2, r5
 8009810:	dae3      	bge.n	80097da <__utoa+0x36>
 8009812:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009816:	780e      	ldrb	r6, [r1, #0]
 8009818:	7006      	strb	r6, [r0, #0]
 800981a:	3201      	adds	r2, #1
 800981c:	f801 5901 	strb.w	r5, [r1], #-1
 8009820:	e7f4      	b.n	800980c <__utoa+0x68>
 8009822:	bf00      	nop
 8009824:	0800a0ac 	.word	0x0800a0ac

08009828 <__swbuf_r>:
 8009828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982a:	460e      	mov	r6, r1
 800982c:	4614      	mov	r4, r2
 800982e:	4605      	mov	r5, r0
 8009830:	b118      	cbz	r0, 800983a <__swbuf_r+0x12>
 8009832:	6983      	ldr	r3, [r0, #24]
 8009834:	b90b      	cbnz	r3, 800983a <__swbuf_r+0x12>
 8009836:	f7ff fcef 	bl	8009218 <__sinit>
 800983a:	4b21      	ldr	r3, [pc, #132]	; (80098c0 <__swbuf_r+0x98>)
 800983c:	429c      	cmp	r4, r3
 800983e:	d12b      	bne.n	8009898 <__swbuf_r+0x70>
 8009840:	686c      	ldr	r4, [r5, #4]
 8009842:	69a3      	ldr	r3, [r4, #24]
 8009844:	60a3      	str	r3, [r4, #8]
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	071a      	lsls	r2, r3, #28
 800984a:	d52f      	bpl.n	80098ac <__swbuf_r+0x84>
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	b36b      	cbz	r3, 80098ac <__swbuf_r+0x84>
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	6820      	ldr	r0, [r4, #0]
 8009854:	1ac0      	subs	r0, r0, r3
 8009856:	6963      	ldr	r3, [r4, #20]
 8009858:	b2f6      	uxtb	r6, r6
 800985a:	4283      	cmp	r3, r0
 800985c:	4637      	mov	r7, r6
 800985e:	dc04      	bgt.n	800986a <__swbuf_r+0x42>
 8009860:	4621      	mov	r1, r4
 8009862:	4628      	mov	r0, r5
 8009864:	f000 f948 	bl	8009af8 <_fflush_r>
 8009868:	bb30      	cbnz	r0, 80098b8 <__swbuf_r+0x90>
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	3b01      	subs	r3, #1
 800986e:	60a3      	str	r3, [r4, #8]
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	6022      	str	r2, [r4, #0]
 8009876:	701e      	strb	r6, [r3, #0]
 8009878:	6963      	ldr	r3, [r4, #20]
 800987a:	3001      	adds	r0, #1
 800987c:	4283      	cmp	r3, r0
 800987e:	d004      	beq.n	800988a <__swbuf_r+0x62>
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	07db      	lsls	r3, r3, #31
 8009884:	d506      	bpl.n	8009894 <__swbuf_r+0x6c>
 8009886:	2e0a      	cmp	r6, #10
 8009888:	d104      	bne.n	8009894 <__swbuf_r+0x6c>
 800988a:	4621      	mov	r1, r4
 800988c:	4628      	mov	r0, r5
 800988e:	f000 f933 	bl	8009af8 <_fflush_r>
 8009892:	b988      	cbnz	r0, 80098b8 <__swbuf_r+0x90>
 8009894:	4638      	mov	r0, r7
 8009896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009898:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <__swbuf_r+0x9c>)
 800989a:	429c      	cmp	r4, r3
 800989c:	d101      	bne.n	80098a2 <__swbuf_r+0x7a>
 800989e:	68ac      	ldr	r4, [r5, #8]
 80098a0:	e7cf      	b.n	8009842 <__swbuf_r+0x1a>
 80098a2:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <__swbuf_r+0xa0>)
 80098a4:	429c      	cmp	r4, r3
 80098a6:	bf08      	it	eq
 80098a8:	68ec      	ldreq	r4, [r5, #12]
 80098aa:	e7ca      	b.n	8009842 <__swbuf_r+0x1a>
 80098ac:	4621      	mov	r1, r4
 80098ae:	4628      	mov	r0, r5
 80098b0:	f000 f81e 	bl	80098f0 <__swsetup_r>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d0cb      	beq.n	8009850 <__swbuf_r+0x28>
 80098b8:	f04f 37ff 	mov.w	r7, #4294967295
 80098bc:	e7ea      	b.n	8009894 <__swbuf_r+0x6c>
 80098be:	bf00      	nop
 80098c0:	0800a068 	.word	0x0800a068
 80098c4:	0800a088 	.word	0x0800a088
 80098c8:	0800a048 	.word	0x0800a048

080098cc <_write_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4d07      	ldr	r5, [pc, #28]	; (80098ec <_write_r+0x20>)
 80098d0:	4604      	mov	r4, r0
 80098d2:	4608      	mov	r0, r1
 80098d4:	4611      	mov	r1, r2
 80098d6:	2200      	movs	r2, #0
 80098d8:	602a      	str	r2, [r5, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	f7f7 f9cc 	bl	8000c78 <_write>
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	d102      	bne.n	80098ea <_write_r+0x1e>
 80098e4:	682b      	ldr	r3, [r5, #0]
 80098e6:	b103      	cbz	r3, 80098ea <_write_r+0x1e>
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	bd38      	pop	{r3, r4, r5, pc}
 80098ec:	200069c0 	.word	0x200069c0

080098f0 <__swsetup_r>:
 80098f0:	4b32      	ldr	r3, [pc, #200]	; (80099bc <__swsetup_r+0xcc>)
 80098f2:	b570      	push	{r4, r5, r6, lr}
 80098f4:	681d      	ldr	r5, [r3, #0]
 80098f6:	4606      	mov	r6, r0
 80098f8:	460c      	mov	r4, r1
 80098fa:	b125      	cbz	r5, 8009906 <__swsetup_r+0x16>
 80098fc:	69ab      	ldr	r3, [r5, #24]
 80098fe:	b913      	cbnz	r3, 8009906 <__swsetup_r+0x16>
 8009900:	4628      	mov	r0, r5
 8009902:	f7ff fc89 	bl	8009218 <__sinit>
 8009906:	4b2e      	ldr	r3, [pc, #184]	; (80099c0 <__swsetup_r+0xd0>)
 8009908:	429c      	cmp	r4, r3
 800990a:	d10f      	bne.n	800992c <__swsetup_r+0x3c>
 800990c:	686c      	ldr	r4, [r5, #4]
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009914:	0719      	lsls	r1, r3, #28
 8009916:	d42c      	bmi.n	8009972 <__swsetup_r+0x82>
 8009918:	06dd      	lsls	r5, r3, #27
 800991a:	d411      	bmi.n	8009940 <__swsetup_r+0x50>
 800991c:	2309      	movs	r3, #9
 800991e:	6033      	str	r3, [r6, #0]
 8009920:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	f04f 30ff 	mov.w	r0, #4294967295
 800992a:	e03e      	b.n	80099aa <__swsetup_r+0xba>
 800992c:	4b25      	ldr	r3, [pc, #148]	; (80099c4 <__swsetup_r+0xd4>)
 800992e:	429c      	cmp	r4, r3
 8009930:	d101      	bne.n	8009936 <__swsetup_r+0x46>
 8009932:	68ac      	ldr	r4, [r5, #8]
 8009934:	e7eb      	b.n	800990e <__swsetup_r+0x1e>
 8009936:	4b24      	ldr	r3, [pc, #144]	; (80099c8 <__swsetup_r+0xd8>)
 8009938:	429c      	cmp	r4, r3
 800993a:	bf08      	it	eq
 800993c:	68ec      	ldreq	r4, [r5, #12]
 800993e:	e7e6      	b.n	800990e <__swsetup_r+0x1e>
 8009940:	0758      	lsls	r0, r3, #29
 8009942:	d512      	bpl.n	800996a <__swsetup_r+0x7a>
 8009944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009946:	b141      	cbz	r1, 800995a <__swsetup_r+0x6a>
 8009948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800994c:	4299      	cmp	r1, r3
 800994e:	d002      	beq.n	8009956 <__swsetup_r+0x66>
 8009950:	4630      	mov	r0, r6
 8009952:	f000 f991 	bl	8009c78 <_free_r>
 8009956:	2300      	movs	r3, #0
 8009958:	6363      	str	r3, [r4, #52]	; 0x34
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009960:	81a3      	strh	r3, [r4, #12]
 8009962:	2300      	movs	r3, #0
 8009964:	6063      	str	r3, [r4, #4]
 8009966:	6923      	ldr	r3, [r4, #16]
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	f043 0308 	orr.w	r3, r3, #8
 8009970:	81a3      	strh	r3, [r4, #12]
 8009972:	6923      	ldr	r3, [r4, #16]
 8009974:	b94b      	cbnz	r3, 800998a <__swsetup_r+0x9a>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800997c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009980:	d003      	beq.n	800998a <__swsetup_r+0x9a>
 8009982:	4621      	mov	r1, r4
 8009984:	4630      	mov	r0, r6
 8009986:	f000 f92b 	bl	8009be0 <__smakebuf_r>
 800998a:	89a0      	ldrh	r0, [r4, #12]
 800998c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009990:	f010 0301 	ands.w	r3, r0, #1
 8009994:	d00a      	beq.n	80099ac <__swsetup_r+0xbc>
 8009996:	2300      	movs	r3, #0
 8009998:	60a3      	str	r3, [r4, #8]
 800999a:	6963      	ldr	r3, [r4, #20]
 800999c:	425b      	negs	r3, r3
 800999e:	61a3      	str	r3, [r4, #24]
 80099a0:	6923      	ldr	r3, [r4, #16]
 80099a2:	b943      	cbnz	r3, 80099b6 <__swsetup_r+0xc6>
 80099a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099a8:	d1ba      	bne.n	8009920 <__swsetup_r+0x30>
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	0781      	lsls	r1, r0, #30
 80099ae:	bf58      	it	pl
 80099b0:	6963      	ldrpl	r3, [r4, #20]
 80099b2:	60a3      	str	r3, [r4, #8]
 80099b4:	e7f4      	b.n	80099a0 <__swsetup_r+0xb0>
 80099b6:	2000      	movs	r0, #0
 80099b8:	e7f7      	b.n	80099aa <__swsetup_r+0xba>
 80099ba:	bf00      	nop
 80099bc:	20000010 	.word	0x20000010
 80099c0:	0800a068 	.word	0x0800a068
 80099c4:	0800a088 	.word	0x0800a088
 80099c8:	0800a048 	.word	0x0800a048

080099cc <_close_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d06      	ldr	r5, [pc, #24]	; (80099e8 <_close_r+0x1c>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	602b      	str	r3, [r5, #0]
 80099d8:	f7f7 fddb 	bl	8001592 <_close>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_close_r+0x1a>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_close_r+0x1a>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	200069c0 	.word	0x200069c0

080099ec <__sflush_r>:
 80099ec:	898a      	ldrh	r2, [r1, #12]
 80099ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f2:	4605      	mov	r5, r0
 80099f4:	0710      	lsls	r0, r2, #28
 80099f6:	460c      	mov	r4, r1
 80099f8:	d458      	bmi.n	8009aac <__sflush_r+0xc0>
 80099fa:	684b      	ldr	r3, [r1, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	dc05      	bgt.n	8009a0c <__sflush_r+0x20>
 8009a00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	dc02      	bgt.n	8009a0c <__sflush_r+0x20>
 8009a06:	2000      	movs	r0, #0
 8009a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a0e:	2e00      	cmp	r6, #0
 8009a10:	d0f9      	beq.n	8009a06 <__sflush_r+0x1a>
 8009a12:	2300      	movs	r3, #0
 8009a14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a18:	682f      	ldr	r7, [r5, #0]
 8009a1a:	602b      	str	r3, [r5, #0]
 8009a1c:	d032      	beq.n	8009a84 <__sflush_r+0x98>
 8009a1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	075a      	lsls	r2, r3, #29
 8009a24:	d505      	bpl.n	8009a32 <__sflush_r+0x46>
 8009a26:	6863      	ldr	r3, [r4, #4]
 8009a28:	1ac0      	subs	r0, r0, r3
 8009a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a2c:	b10b      	cbz	r3, 8009a32 <__sflush_r+0x46>
 8009a2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a30:	1ac0      	subs	r0, r0, r3
 8009a32:	2300      	movs	r3, #0
 8009a34:	4602      	mov	r2, r0
 8009a36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a38:	6a21      	ldr	r1, [r4, #32]
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b0      	blx	r6
 8009a3e:	1c43      	adds	r3, r0, #1
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	d106      	bne.n	8009a52 <__sflush_r+0x66>
 8009a44:	6829      	ldr	r1, [r5, #0]
 8009a46:	291d      	cmp	r1, #29
 8009a48:	d82c      	bhi.n	8009aa4 <__sflush_r+0xb8>
 8009a4a:	4a2a      	ldr	r2, [pc, #168]	; (8009af4 <__sflush_r+0x108>)
 8009a4c:	40ca      	lsrs	r2, r1
 8009a4e:	07d6      	lsls	r6, r2, #31
 8009a50:	d528      	bpl.n	8009aa4 <__sflush_r+0xb8>
 8009a52:	2200      	movs	r2, #0
 8009a54:	6062      	str	r2, [r4, #4]
 8009a56:	04d9      	lsls	r1, r3, #19
 8009a58:	6922      	ldr	r2, [r4, #16]
 8009a5a:	6022      	str	r2, [r4, #0]
 8009a5c:	d504      	bpl.n	8009a68 <__sflush_r+0x7c>
 8009a5e:	1c42      	adds	r2, r0, #1
 8009a60:	d101      	bne.n	8009a66 <__sflush_r+0x7a>
 8009a62:	682b      	ldr	r3, [r5, #0]
 8009a64:	b903      	cbnz	r3, 8009a68 <__sflush_r+0x7c>
 8009a66:	6560      	str	r0, [r4, #84]	; 0x54
 8009a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a6a:	602f      	str	r7, [r5, #0]
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	d0ca      	beq.n	8009a06 <__sflush_r+0x1a>
 8009a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a74:	4299      	cmp	r1, r3
 8009a76:	d002      	beq.n	8009a7e <__sflush_r+0x92>
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f000 f8fd 	bl	8009c78 <_free_r>
 8009a7e:	2000      	movs	r0, #0
 8009a80:	6360      	str	r0, [r4, #52]	; 0x34
 8009a82:	e7c1      	b.n	8009a08 <__sflush_r+0x1c>
 8009a84:	6a21      	ldr	r1, [r4, #32]
 8009a86:	2301      	movs	r3, #1
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b0      	blx	r6
 8009a8c:	1c41      	adds	r1, r0, #1
 8009a8e:	d1c7      	bne.n	8009a20 <__sflush_r+0x34>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d0c4      	beq.n	8009a20 <__sflush_r+0x34>
 8009a96:	2b1d      	cmp	r3, #29
 8009a98:	d001      	beq.n	8009a9e <__sflush_r+0xb2>
 8009a9a:	2b16      	cmp	r3, #22
 8009a9c:	d101      	bne.n	8009aa2 <__sflush_r+0xb6>
 8009a9e:	602f      	str	r7, [r5, #0]
 8009aa0:	e7b1      	b.n	8009a06 <__sflush_r+0x1a>
 8009aa2:	89a3      	ldrh	r3, [r4, #12]
 8009aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa8:	81a3      	strh	r3, [r4, #12]
 8009aaa:	e7ad      	b.n	8009a08 <__sflush_r+0x1c>
 8009aac:	690f      	ldr	r7, [r1, #16]
 8009aae:	2f00      	cmp	r7, #0
 8009ab0:	d0a9      	beq.n	8009a06 <__sflush_r+0x1a>
 8009ab2:	0793      	lsls	r3, r2, #30
 8009ab4:	680e      	ldr	r6, [r1, #0]
 8009ab6:	bf08      	it	eq
 8009ab8:	694b      	ldreq	r3, [r1, #20]
 8009aba:	600f      	str	r7, [r1, #0]
 8009abc:	bf18      	it	ne
 8009abe:	2300      	movne	r3, #0
 8009ac0:	eba6 0807 	sub.w	r8, r6, r7
 8009ac4:	608b      	str	r3, [r1, #8]
 8009ac6:	f1b8 0f00 	cmp.w	r8, #0
 8009aca:	dd9c      	ble.n	8009a06 <__sflush_r+0x1a>
 8009acc:	6a21      	ldr	r1, [r4, #32]
 8009ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ad0:	4643      	mov	r3, r8
 8009ad2:	463a      	mov	r2, r7
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	47b0      	blx	r6
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	dc06      	bgt.n	8009aea <__sflush_r+0xfe>
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ae2:	81a3      	strh	r3, [r4, #12]
 8009ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae8:	e78e      	b.n	8009a08 <__sflush_r+0x1c>
 8009aea:	4407      	add	r7, r0
 8009aec:	eba8 0800 	sub.w	r8, r8, r0
 8009af0:	e7e9      	b.n	8009ac6 <__sflush_r+0xda>
 8009af2:	bf00      	nop
 8009af4:	20400001 	.word	0x20400001

08009af8 <_fflush_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	690b      	ldr	r3, [r1, #16]
 8009afc:	4605      	mov	r5, r0
 8009afe:	460c      	mov	r4, r1
 8009b00:	b913      	cbnz	r3, 8009b08 <_fflush_r+0x10>
 8009b02:	2500      	movs	r5, #0
 8009b04:	4628      	mov	r0, r5
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	b118      	cbz	r0, 8009b12 <_fflush_r+0x1a>
 8009b0a:	6983      	ldr	r3, [r0, #24]
 8009b0c:	b90b      	cbnz	r3, 8009b12 <_fflush_r+0x1a>
 8009b0e:	f7ff fb83 	bl	8009218 <__sinit>
 8009b12:	4b14      	ldr	r3, [pc, #80]	; (8009b64 <_fflush_r+0x6c>)
 8009b14:	429c      	cmp	r4, r3
 8009b16:	d11b      	bne.n	8009b50 <_fflush_r+0x58>
 8009b18:	686c      	ldr	r4, [r5, #4]
 8009b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0ef      	beq.n	8009b02 <_fflush_r+0xa>
 8009b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b24:	07d0      	lsls	r0, r2, #31
 8009b26:	d404      	bmi.n	8009b32 <_fflush_r+0x3a>
 8009b28:	0599      	lsls	r1, r3, #22
 8009b2a:	d402      	bmi.n	8009b32 <_fflush_r+0x3a>
 8009b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b2e:	f7ff fc50 	bl	80093d2 <__retarget_lock_acquire_recursive>
 8009b32:	4628      	mov	r0, r5
 8009b34:	4621      	mov	r1, r4
 8009b36:	f7ff ff59 	bl	80099ec <__sflush_r>
 8009b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b3c:	07da      	lsls	r2, r3, #31
 8009b3e:	4605      	mov	r5, r0
 8009b40:	d4e0      	bmi.n	8009b04 <_fflush_r+0xc>
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	059b      	lsls	r3, r3, #22
 8009b46:	d4dd      	bmi.n	8009b04 <_fflush_r+0xc>
 8009b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b4a:	f7ff fc43 	bl	80093d4 <__retarget_lock_release_recursive>
 8009b4e:	e7d9      	b.n	8009b04 <_fflush_r+0xc>
 8009b50:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <_fflush_r+0x70>)
 8009b52:	429c      	cmp	r4, r3
 8009b54:	d101      	bne.n	8009b5a <_fflush_r+0x62>
 8009b56:	68ac      	ldr	r4, [r5, #8]
 8009b58:	e7df      	b.n	8009b1a <_fflush_r+0x22>
 8009b5a:	4b04      	ldr	r3, [pc, #16]	; (8009b6c <_fflush_r+0x74>)
 8009b5c:	429c      	cmp	r4, r3
 8009b5e:	bf08      	it	eq
 8009b60:	68ec      	ldreq	r4, [r5, #12]
 8009b62:	e7da      	b.n	8009b1a <_fflush_r+0x22>
 8009b64:	0800a068 	.word	0x0800a068
 8009b68:	0800a088 	.word	0x0800a088
 8009b6c:	0800a048 	.word	0x0800a048

08009b70 <_lseek_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4d07      	ldr	r5, [pc, #28]	; (8009b90 <_lseek_r+0x20>)
 8009b74:	4604      	mov	r4, r0
 8009b76:	4608      	mov	r0, r1
 8009b78:	4611      	mov	r1, r2
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	602a      	str	r2, [r5, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f7f7 fd2e 	bl	80015e0 <_lseek>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_lseek_r+0x1e>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_lseek_r+0x1e>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	200069c0 	.word	0x200069c0

08009b94 <__swhatbuf_r>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	460e      	mov	r6, r1
 8009b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b9c:	2900      	cmp	r1, #0
 8009b9e:	b096      	sub	sp, #88	; 0x58
 8009ba0:	4614      	mov	r4, r2
 8009ba2:	461d      	mov	r5, r3
 8009ba4:	da08      	bge.n	8009bb8 <__swhatbuf_r+0x24>
 8009ba6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	602a      	str	r2, [r5, #0]
 8009bae:	061a      	lsls	r2, r3, #24
 8009bb0:	d410      	bmi.n	8009bd4 <__swhatbuf_r+0x40>
 8009bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb6:	e00e      	b.n	8009bd6 <__swhatbuf_r+0x42>
 8009bb8:	466a      	mov	r2, sp
 8009bba:	f000 f8bb 	bl	8009d34 <_fstat_r>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	dbf1      	blt.n	8009ba6 <__swhatbuf_r+0x12>
 8009bc2:	9a01      	ldr	r2, [sp, #4]
 8009bc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bcc:	425a      	negs	r2, r3
 8009bce:	415a      	adcs	r2, r3
 8009bd0:	602a      	str	r2, [r5, #0]
 8009bd2:	e7ee      	b.n	8009bb2 <__swhatbuf_r+0x1e>
 8009bd4:	2340      	movs	r3, #64	; 0x40
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	b016      	add	sp, #88	; 0x58
 8009bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009be0 <__smakebuf_r>:
 8009be0:	898b      	ldrh	r3, [r1, #12]
 8009be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009be4:	079d      	lsls	r5, r3, #30
 8009be6:	4606      	mov	r6, r0
 8009be8:	460c      	mov	r4, r1
 8009bea:	d507      	bpl.n	8009bfc <__smakebuf_r+0x1c>
 8009bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	6123      	str	r3, [r4, #16]
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	6163      	str	r3, [r4, #20]
 8009bf8:	b002      	add	sp, #8
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	ab01      	add	r3, sp, #4
 8009bfe:	466a      	mov	r2, sp
 8009c00:	f7ff ffc8 	bl	8009b94 <__swhatbuf_r>
 8009c04:	9900      	ldr	r1, [sp, #0]
 8009c06:	4605      	mov	r5, r0
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f7ff fc1b 	bl	8009444 <_malloc_r>
 8009c0e:	b948      	cbnz	r0, 8009c24 <__smakebuf_r+0x44>
 8009c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c14:	059a      	lsls	r2, r3, #22
 8009c16:	d4ef      	bmi.n	8009bf8 <__smakebuf_r+0x18>
 8009c18:	f023 0303 	bic.w	r3, r3, #3
 8009c1c:	f043 0302 	orr.w	r3, r3, #2
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	e7e3      	b.n	8009bec <__smakebuf_r+0xc>
 8009c24:	4b0d      	ldr	r3, [pc, #52]	; (8009c5c <__smakebuf_r+0x7c>)
 8009c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	6020      	str	r0, [r4, #0]
 8009c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c30:	81a3      	strh	r3, [r4, #12]
 8009c32:	9b00      	ldr	r3, [sp, #0]
 8009c34:	6163      	str	r3, [r4, #20]
 8009c36:	9b01      	ldr	r3, [sp, #4]
 8009c38:	6120      	str	r0, [r4, #16]
 8009c3a:	b15b      	cbz	r3, 8009c54 <__smakebuf_r+0x74>
 8009c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c40:	4630      	mov	r0, r6
 8009c42:	f000 f889 	bl	8009d58 <_isatty_r>
 8009c46:	b128      	cbz	r0, 8009c54 <__smakebuf_r+0x74>
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	f023 0303 	bic.w	r3, r3, #3
 8009c4e:	f043 0301 	orr.w	r3, r3, #1
 8009c52:	81a3      	strh	r3, [r4, #12]
 8009c54:	89a0      	ldrh	r0, [r4, #12]
 8009c56:	4305      	orrs	r5, r0
 8009c58:	81a5      	strh	r5, [r4, #12]
 8009c5a:	e7cd      	b.n	8009bf8 <__smakebuf_r+0x18>
 8009c5c:	080091b1 	.word	0x080091b1

08009c60 <__malloc_lock>:
 8009c60:	4801      	ldr	r0, [pc, #4]	; (8009c68 <__malloc_lock+0x8>)
 8009c62:	f7ff bbb6 	b.w	80093d2 <__retarget_lock_acquire_recursive>
 8009c66:	bf00      	nop
 8009c68:	200069b4 	.word	0x200069b4

08009c6c <__malloc_unlock>:
 8009c6c:	4801      	ldr	r0, [pc, #4]	; (8009c74 <__malloc_unlock+0x8>)
 8009c6e:	f7ff bbb1 	b.w	80093d4 <__retarget_lock_release_recursive>
 8009c72:	bf00      	nop
 8009c74:	200069b4 	.word	0x200069b4

08009c78 <_free_r>:
 8009c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c7a:	2900      	cmp	r1, #0
 8009c7c:	d044      	beq.n	8009d08 <_free_r+0x90>
 8009c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c82:	9001      	str	r0, [sp, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f1a1 0404 	sub.w	r4, r1, #4
 8009c8a:	bfb8      	it	lt
 8009c8c:	18e4      	addlt	r4, r4, r3
 8009c8e:	f7ff ffe7 	bl	8009c60 <__malloc_lock>
 8009c92:	4a1e      	ldr	r2, [pc, #120]	; (8009d0c <_free_r+0x94>)
 8009c94:	9801      	ldr	r0, [sp, #4]
 8009c96:	6813      	ldr	r3, [r2, #0]
 8009c98:	b933      	cbnz	r3, 8009ca8 <_free_r+0x30>
 8009c9a:	6063      	str	r3, [r4, #4]
 8009c9c:	6014      	str	r4, [r2, #0]
 8009c9e:	b003      	add	sp, #12
 8009ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ca4:	f7ff bfe2 	b.w	8009c6c <__malloc_unlock>
 8009ca8:	42a3      	cmp	r3, r4
 8009caa:	d908      	bls.n	8009cbe <_free_r+0x46>
 8009cac:	6825      	ldr	r5, [r4, #0]
 8009cae:	1961      	adds	r1, r4, r5
 8009cb0:	428b      	cmp	r3, r1
 8009cb2:	bf01      	itttt	eq
 8009cb4:	6819      	ldreq	r1, [r3, #0]
 8009cb6:	685b      	ldreq	r3, [r3, #4]
 8009cb8:	1949      	addeq	r1, r1, r5
 8009cba:	6021      	streq	r1, [r4, #0]
 8009cbc:	e7ed      	b.n	8009c9a <_free_r+0x22>
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	b10b      	cbz	r3, 8009cc8 <_free_r+0x50>
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	d9fa      	bls.n	8009cbe <_free_r+0x46>
 8009cc8:	6811      	ldr	r1, [r2, #0]
 8009cca:	1855      	adds	r5, r2, r1
 8009ccc:	42a5      	cmp	r5, r4
 8009cce:	d10b      	bne.n	8009ce8 <_free_r+0x70>
 8009cd0:	6824      	ldr	r4, [r4, #0]
 8009cd2:	4421      	add	r1, r4
 8009cd4:	1854      	adds	r4, r2, r1
 8009cd6:	42a3      	cmp	r3, r4
 8009cd8:	6011      	str	r1, [r2, #0]
 8009cda:	d1e0      	bne.n	8009c9e <_free_r+0x26>
 8009cdc:	681c      	ldr	r4, [r3, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	6053      	str	r3, [r2, #4]
 8009ce2:	4421      	add	r1, r4
 8009ce4:	6011      	str	r1, [r2, #0]
 8009ce6:	e7da      	b.n	8009c9e <_free_r+0x26>
 8009ce8:	d902      	bls.n	8009cf0 <_free_r+0x78>
 8009cea:	230c      	movs	r3, #12
 8009cec:	6003      	str	r3, [r0, #0]
 8009cee:	e7d6      	b.n	8009c9e <_free_r+0x26>
 8009cf0:	6825      	ldr	r5, [r4, #0]
 8009cf2:	1961      	adds	r1, r4, r5
 8009cf4:	428b      	cmp	r3, r1
 8009cf6:	bf04      	itt	eq
 8009cf8:	6819      	ldreq	r1, [r3, #0]
 8009cfa:	685b      	ldreq	r3, [r3, #4]
 8009cfc:	6063      	str	r3, [r4, #4]
 8009cfe:	bf04      	itt	eq
 8009d00:	1949      	addeq	r1, r1, r5
 8009d02:	6021      	streq	r1, [r4, #0]
 8009d04:	6054      	str	r4, [r2, #4]
 8009d06:	e7ca      	b.n	8009c9e <_free_r+0x26>
 8009d08:	b003      	add	sp, #12
 8009d0a:	bd30      	pop	{r4, r5, pc}
 8009d0c:	200069b8 	.word	0x200069b8

08009d10 <_read_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4d07      	ldr	r5, [pc, #28]	; (8009d30 <_read_r+0x20>)
 8009d14:	4604      	mov	r4, r0
 8009d16:	4608      	mov	r0, r1
 8009d18:	4611      	mov	r1, r2
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	602a      	str	r2, [r5, #0]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f7f7 fc1a 	bl	8001558 <_read>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_read_r+0x1e>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_read_r+0x1e>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	200069c0 	.word	0x200069c0

08009d34 <_fstat_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d07      	ldr	r5, [pc, #28]	; (8009d54 <_fstat_r+0x20>)
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	4611      	mov	r1, r2
 8009d40:	602b      	str	r3, [r5, #0]
 8009d42:	f7f7 fc32 	bl	80015aa <_fstat>
 8009d46:	1c43      	adds	r3, r0, #1
 8009d48:	d102      	bne.n	8009d50 <_fstat_r+0x1c>
 8009d4a:	682b      	ldr	r3, [r5, #0]
 8009d4c:	b103      	cbz	r3, 8009d50 <_fstat_r+0x1c>
 8009d4e:	6023      	str	r3, [r4, #0]
 8009d50:	bd38      	pop	{r3, r4, r5, pc}
 8009d52:	bf00      	nop
 8009d54:	200069c0 	.word	0x200069c0

08009d58 <_isatty_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d06      	ldr	r5, [pc, #24]	; (8009d74 <_isatty_r+0x1c>)
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	602b      	str	r3, [r5, #0]
 8009d64:	f7f7 fc31 	bl	80015ca <_isatty>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_isatty_r+0x1a>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_isatty_r+0x1a>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	200069c0 	.word	0x200069c0

08009d78 <_init>:
 8009d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7a:	bf00      	nop
 8009d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7e:	bc08      	pop	{r3}
 8009d80:	469e      	mov	lr, r3
 8009d82:	4770      	bx	lr

08009d84 <_fini>:
 8009d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d86:	bf00      	nop
 8009d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d8a:	bc08      	pop	{r3}
 8009d8c:	469e      	mov	lr, r3
 8009d8e:	4770      	bx	lr
