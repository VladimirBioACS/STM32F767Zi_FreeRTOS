
STM32F767Zi_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b298  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000abc  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf54  0800bf54  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf54  0800bf54  0001bf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf5c  0800bf5c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf5c  0800bf5c  0001bf5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf60  0800bf60  0001bf60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800bf64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000837c  20000080  0800bfe4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200083fc  0800bfe4  000283fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a2a  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000491c  00000000  00000000  00047ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  0004c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b70  00000000  00000000  0004e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006ca1  00000000  00000000  0004fc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000242c2  00000000  00000000  00056911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bb6c  00000000  00000000  0007abd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019673f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f90  00000000  00000000  00196790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b480 	.word	0x0800b480

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800b480 	.word	0x0800b480

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f002 fb05 	bl	8002b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f8b5 	bl	80006cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  xTraceInitialize();
 8000562:	f001 fa69 	bl	8001a38 <xTraceInitialize>
//  vTraceEnable(TRC_START);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 fa97 	bl	8000a98 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800056a:	f000 fa67 	bl	8000a3c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800056e:	f000 f91d 	bl	80007ac <MX_ADC1_Init>
  MX_TIM13_Init();
 8000572:	f000 f9e5 	bl	8000940 <MX_TIM13_Init>
  MX_ADC2_Init();
 8000576:	f000 f96d 	bl	8000854 <MX_ADC2_Init>
  MX_TIM10_Init();
 800057a:	f000 f9bd 	bl	80008f8 <MX_TIM10_Init>
  MX_USART3_UART_Init();
 800057e:	f000 fa2d 	bl	80009dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8000582:	4832      	ldr	r0, [pc, #200]	; (800064c <main+0xf8>)
 8000584:	f002 fb86 	bl	8002c94 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000588:	4831      	ldr	r0, [pc, #196]	; (8000650 <main+0xfc>)
 800058a:	f002 fb83 	bl	8002c94 <HAL_ADC_Start>

  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800058e:	2100      	movs	r1, #0
 8000590:	4830      	ldr	r0, [pc, #192]	; (8000654 <main+0x100>)
 8000592:	f004 fd15 	bl	8004fc0 <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000596:	f006 fb91 	bl	8006cbc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of msg_Queue */
  msg_QueueHandle = osMessageQueueNew (16, sizeof(QUEUE_t), &msg_Queue_attributes);
 800059a:	4a2f      	ldr	r2, [pc, #188]	; (8000658 <main+0x104>)
 800059c:	217a      	movs	r1, #122	; 0x7a
 800059e:	2010      	movs	r0, #16
 80005a0:	f006 fdea 	bl	8007178 <osMessageQueueNew>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a2d      	ldr	r2, [pc, #180]	; (800065c <main+0x108>)
 80005a8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005aa:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <main+0x10c>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	482d      	ldr	r0, [pc, #180]	; (8000664 <main+0x110>)
 80005b0:	f006 fbee 	bl	8006d90 <osThreadNew>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a2c      	ldr	r2, [pc, #176]	; (8000668 <main+0x114>)
 80005b8:	6013      	str	r3, [r2, #0]

  /* creation of BlinkyTask */
  BlinkyTaskHandle = osThreadNew(StartBlinkyTask, NULL, &BlinkyTask_attributes);
 80005ba:	4a2c      	ldr	r2, [pc, #176]	; (800066c <main+0x118>)
 80005bc:	2100      	movs	r1, #0
 80005be:	482c      	ldr	r0, [pc, #176]	; (8000670 <main+0x11c>)
 80005c0:	f006 fbe6 	bl	8006d90 <osThreadNew>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a2b      	ldr	r2, [pc, #172]	; (8000674 <main+0x120>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* creation of adcReadValueT */
  adcReadValueTHandle = osThreadNew(adcReadValueTask, NULL, &adcReadValueT_attributes);
 80005ca:	4a2b      	ldr	r2, [pc, #172]	; (8000678 <main+0x124>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	482b      	ldr	r0, [pc, #172]	; (800067c <main+0x128>)
 80005d0:	f006 fbde 	bl	8006d90 <osThreadNew>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a2a      	ldr	r2, [pc, #168]	; (8000680 <main+0x12c>)
 80005d8:	6013      	str	r3, [r2, #0]

  /* creation of readTempT */
  readTempTHandle = osThreadNew(readTempTask, NULL, &readTempT_attributes);
 80005da:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <main+0x130>)
 80005dc:	2100      	movs	r1, #0
 80005de:	482a      	ldr	r0, [pc, #168]	; (8000688 <main+0x134>)
 80005e0:	f006 fbd6 	bl	8006d90 <osThreadNew>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a29      	ldr	r2, [pc, #164]	; (800068c <main+0x138>)
 80005e8:	6013      	str	r3, [r2, #0]

  /* creation of pwmLedBrightnes */
  pwmLedBrightnesHandle = osThreadNew(pwmLedBrightnessTask, NULL, &pwmLedBrightnes_attributes);
 80005ea:	4a29      	ldr	r2, [pc, #164]	; (8000690 <main+0x13c>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	4829      	ldr	r0, [pc, #164]	; (8000694 <main+0x140>)
 80005f0:	f006 fbce 	bl	8006d90 <osThreadNew>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a28      	ldr	r2, [pc, #160]	; (8000698 <main+0x144>)
 80005f8:	6013      	str	r3, [r2, #0]

  /* creation of usartDebugPrint */
  usartDebugPrintHandle = osThreadNew(usartDebugPrintTask, NULL, &usartDebugPrint_attributes);
 80005fa:	4a28      	ldr	r2, [pc, #160]	; (800069c <main+0x148>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	4828      	ldr	r0, [pc, #160]	; (80006a0 <main+0x14c>)
 8000600:	f006 fbc6 	bl	8006d90 <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <main+0x150>)
 8000608:	6013      	str	r3, [r2, #0]

  /* creation of checkISRStateT */
  checkISRStateTHandle = osThreadNew(checkISRStateTask, NULL, &checkISRStateT_attributes);
 800060a:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <main+0x154>)
 800060c:	2100      	movs	r1, #0
 800060e:	4827      	ldr	r0, [pc, #156]	; (80006ac <main+0x158>)
 8000610:	f006 fbbe 	bl	8006d90 <osThreadNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a26      	ldr	r2, [pc, #152]	; (80006b0 <main+0x15c>)
 8000618:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  EventGroup1 = osEventFlagsNew(NULL);
 800061a:	2000      	movs	r0, #0
 800061c:	f006 fc8c 	bl	8006f38 <osEventFlagsNew>
 8000620:	4603      	mov	r3, r0
 8000622:	4a24      	ldr	r2, [pc, #144]	; (80006b4 <main+0x160>)
 8000624:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  xTaskCreate(
 8000626:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <main+0x164>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2308      	movs	r3, #8
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	4922      	ldr	r1, [pc, #136]	; (80006bc <main+0x168>)
 8000634:	4822      	ldr	r0, [pc, #136]	; (80006c0 <main+0x16c>)
 8000636:	f008 fc1a 	bl	8008e6e <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of ISREvent */
  ISREventHandle = osEventFlagsNew(&ISREvent_attributes);
 800063a:	4822      	ldr	r0, [pc, #136]	; (80006c4 <main+0x170>)
 800063c:	f006 fc7c 	bl	8006f38 <osEventFlagsNew>
 8000640:	4603      	mov	r3, r0
 8000642:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <main+0x174>)
 8000644:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000646:	f006 fb6d 	bl	8006d24 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	e7fe      	b.n	800064a <main+0xf6>
 800064c:	2000009c 	.word	0x2000009c
 8000650:	200000e4 	.word	0x200000e4
 8000654:	20000178 	.word	0x20000178
 8000658:	0800be8c 	.word	0x0800be8c
 800065c:	20001730 	.word	0x20001730
 8000660:	0800bd90 	.word	0x0800bd90
 8000664:	08000ca9 	.word	0x08000ca9
 8000668:	20000754 	.word	0x20000754
 800066c:	0800bdb4 	.word	0x0800bdb4
 8000670:	08000cd5 	.word	0x08000cd5
 8000674:	20000758 	.word	0x20000758
 8000678:	0800bdd8 	.word	0x0800bdd8
 800067c:	08000cf5 	.word	0x08000cf5
 8000680:	2000075c 	.word	0x2000075c
 8000684:	0800bdfc 	.word	0x0800bdfc
 8000688:	08000d35 	.word	0x08000d35
 800068c:	20000a20 	.word	0x20000a20
 8000690:	0800be20 	.word	0x0800be20
 8000694:	08000ddd 	.word	0x08000ddd
 8000698:	20000ce4 	.word	0x20000ce4
 800069c:	0800be44 	.word	0x0800be44
 80006a0:	08000e69 	.word	0x08000e69
 80006a4:	20000fa8 	.word	0x20000fa8
 80006a8:	0800be68 	.word	0x0800be68
 80006ac:	08000e99 	.word	0x08000e99
 80006b0:	2000126c 	.word	0x2000126c
 80006b4:	20001f50 	.word	0x20001f50
 80006b8:	20001f4c 	.word	0x20001f4c
 80006bc:	0800b514 	.word	0x0800b514
 80006c0:	08000cb9 	.word	0x08000cb9
 80006c4:	0800bea4 	.word	0x0800bea4
 80006c8:	20001f24 	.word	0x20001f24

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2234      	movs	r2, #52	; 0x34
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f00a fdbc 	bl	800b258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f0:	f003 fa36 	bl	8003b60 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <SystemClock_Config+0xd8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a2a      	ldr	r2, [pc, #168]	; (80007a4 <SystemClock_Config+0xd8>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xd8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <SystemClock_Config+0xdc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <SystemClock_Config+0xdc>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xdc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000728:	2303      	movs	r3, #3
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000732:	2301      	movs	r3, #1
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000736:	2310      	movs	r3, #16
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000744:	230f      	movs	r3, #15
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000748:	2390      	movs	r3, #144	; 0x90
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000750:	2305      	movs	r3, #5
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4618      	mov	r0, r3
 800075e:	f003 fa0f 	bl	8003b80 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000768:	f000 fc0e 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000778:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2103      	movs	r1, #3
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fca6 	bl	80040dc <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000796:	f000 fbf7 	bl	8000f88 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <MX_ADC1_Init+0xa0>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007dc:	2201      	movs	r2, #1
 80007de:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007f0:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_ADC1_Init+0xa4>)
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ADC1_Init+0x9c>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC1_Init+0x9c>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_ADC1_Init+0x9c>)
 8000810:	f002 f9fc 	bl	8002c0c <HAL_ADC_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800081a:	f000 fbb5 	bl	8000f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800081e:	2303      	movs	r3, #3
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000822:	2301      	movs	r3, #1
 8000824:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_ADC1_Init+0x9c>)
 8000830:	f002 fb0c 	bl	8002e4c <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 fba5 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000009c 	.word	0x2000009c
 800084c:	40012000 	.word	0x40012000
 8000850:	0f000001 	.word	0x0f000001

08000854 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_ADC2_Init+0x98>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <MX_ADC2_Init+0x9c>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ADC2_Init+0x98>)
 800086e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000872:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_ADC2_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ADC2_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_ADC2_Init+0x98>)
 8000882:	2201      	movs	r2, #1
 8000884:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_ADC2_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC2_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_ADC2_Init+0x98>)
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_ADC2_Init+0xa0>)
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC2_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_ADC2_Init+0x98>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_ADC2_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC2_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_ADC2_Init+0x98>)
 80008b6:	f002 f9a9 	bl	8002c0c <HAL_ADC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 fb62 	bl	8000f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008c4:	230a      	movs	r3, #10
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC2_Init+0x98>)
 80008d6:	f002 fab9 	bl	8002e4c <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80008e0:	f000 fb52 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200000e4 	.word	0x200000e4
 80008f0:	40012100 	.word	0x40012100
 80008f4:	0f000001 	.word	0x0f000001

080008f8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_TIM10_Init+0x40>)
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <MX_TIM10_Init+0x44>)
 8000900:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <MX_TIM10_Init+0x40>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_TIM10_Init+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 956;
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_TIM10_Init+0x40>)
 8000910:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000914:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_TIM10_Init+0x40>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_TIM10_Init+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_TIM10_Init+0x40>)
 8000924:	f004 fa1a 	bl	8004d5c <HAL_TIM_Base_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800092e:	f000 fb2b 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000012c 	.word	0x2000012c
 800093c:	40014400 	.word	0x40014400

08000940 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]
 8000956:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_TIM13_Init+0x94>)
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <MX_TIM13_Init+0x98>)
 800095c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM13_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_TIM13_Init+0x94>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1023;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM13_Init+0x94>)
 800096c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000970:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_TIM13_Init+0x94>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_TIM13_Init+0x94>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800097e:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_TIM13_Init+0x94>)
 8000980:	f004 f9ec 	bl	8004d5c <HAL_TIM_Base_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800098a:	f000 fafd 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800098e:	4811      	ldr	r0, [pc, #68]	; (80009d4 <MX_TIM13_Init+0x94>)
 8000990:	f004 fab4 	bl	8004efc <HAL_TIM_PWM_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800099a:	f000 faf5 	bl	8000f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099e:	2360      	movs	r3, #96	; 0x60
 80009a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	4807      	ldr	r0, [pc, #28]	; (80009d4 <MX_TIM13_Init+0x94>)
 80009b6:	f004 fd1d 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80009c0:	f000 fae2 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <MX_TIM13_Init+0x94>)
 80009c6:	f000 fbbd 	bl	8001144 <HAL_TIM_MspPostInit>

}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000178 	.word	0x20000178
 80009d8:	40001c00 	.word	0x40001c00

080009dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <MX_USART3_UART_Init+0x5c>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a20:	f005 f965 	bl	8005cee <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a2a:	f000 faad 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001c4 	.word	0x200001c4
 8000a38:	40004800 	.word	0x40004800

08000a3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	2206      	movs	r2, #6
 8000a4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a50:	2202      	movs	r2, #2
 8000a52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a80:	f002 ff26 	bl	80038d0 <HAL_PCD_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 fa7d 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000024c 	.word	0x2000024c

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a4a      	ldr	r2, [pc, #296]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b48      	ldr	r3, [pc, #288]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	4b45      	ldr	r3, [pc, #276]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a44      	ldr	r2, [pc, #272]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b3f      	ldr	r3, [pc, #252]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a3e      	ldr	r2, [pc, #248]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a38      	ldr	r2, [pc, #224]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a32      	ldr	r2, [pc, #200]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b26:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a2c      	ldr	r2, [pc, #176]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b2a      	ldr	r3, [pc, #168]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b44:	4826      	ldr	r0, [pc, #152]	; (8000be0 <MX_GPIO_Init+0x148>)
 8000b46:	f002 fe77 	bl	8003838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2140      	movs	r1, #64	; 0x40
 8000b4e:	4825      	ldr	r0, [pc, #148]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b50:	f002 fe72 	bl	8003838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481f      	ldr	r0, [pc, #124]	; (8000be8 <MX_GPIO_Init+0x150>)
 8000b6c:	f002 fca0 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b70:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4815      	ldr	r0, [pc, #84]	; (8000be0 <MX_GPIO_Init+0x148>)
 8000b8a:	f002 fc91 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b8e:	2340      	movs	r3, #64	; 0x40
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000ba6:	f002 fc83 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000bbe:	f002 fc77 	bl	80034b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2105      	movs	r1, #5
 8000bc6:	2028      	movs	r0, #40	; 0x28
 8000bc8:	f002 fc48 	bl	800345c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bcc:	2028      	movs	r0, #40	; 0x28
 8000bce:	f002 fc61 	bl	8003494 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3730      	adds	r7, #48	; 0x30
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40021800 	.word	0x40021800
 8000be8:	40020800 	.word	0x40020800

08000bec <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
#if (FREERTOS_PROFILER == 1)
void configureTimerForRunTimeStats(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <configureTimerForRunTimeStats+0x14>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim10);
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <configureTimerForRunTimeStats+0x18>)
 8000bf8:	f004 f908 	bl	8004e0c <HAL_TIM_Base_Start_IT>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20001f48 	.word	0x20001f48
 8000c04:	2000012c 	.word	0x2000012c

08000c08 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <getRunTimeCounterValue+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20001f48 	.word	0x20001f48

08000c20 <HAL_GPIO_EXTI_Callback>:
  * @brief User button IRQ callback function
  * @param uint16_t GPIO_Pin
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == USER_Btn_Pin)
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c30:	d10a      	bne.n	8000c48 <HAL_GPIO_EXTI_Callback+0x28>
  {
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c38:	f002 fe17 	bl	800386a <HAL_GPIO_TogglePin>
    osEventFlagsSet(EventGroup1, LED_ISR_FLAG);
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2151      	movs	r1, #81	; 0x51
 8000c42:	4618      	mov	r0, r3
 8000c44:	f006 f9ca 	bl	8006fdc <osEventFlagsSet>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40020400 	.word	0x40020400
 8000c54:	20001f50 	.word	0x20001f50

08000c58 <getTemperature>:
  * @brief calculates temperature from TM35 sensor ADC raw value
  * @param uint16_t adc_raw_value
  * @retval None
  */
static uint16_t getTemperature(uint16_t adc_raw_value)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
	return (adc_raw_value / TM35_MV_TO_C); /* 10mV / 1C degree*/
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <getTemperature+0x24>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	08db      	lsrs	r3, r3, #3
 8000c6c:	b29b      	uxth	r3, r3
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	cccccccd 	.word	0xcccccccd

08000c80 <printUsartMessage>:
  * @brief print message via USART interface
  * @param const char* message
  * @retval None
  */
static void printUsartMessage(char* message)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(
	     &huart3,
	     (uint8_t*)message,
	     strlen(message),
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff fad9 	bl	8000240 <strlen>
 8000c8e:	4603      	mov	r3, r0
	HAL_UART_Transmit(
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	2301      	movs	r3, #1
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <printUsartMessage+0x24>)
 8000c98:	f005 f877 	bl	8005d8a <HAL_UART_Transmit>
	     1
	     );
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200001c4 	.word	0x200001c4

08000ca8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  (void) argument;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f006 f913 	bl	8006edc <osDelay>
 8000cb6:	e7fb      	b.n	8000cb0 <StartDefaultTask+0x8>

08000cb8 <ledBlinkBlue>:
* @brief Function implementing the ledBlinkBlue thread (native FreeRTOS API).
* @param argument: Not used
* @retval None
*/
void ledBlinkBlue(void *pvParameters)
 {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	(void) pvParameters;
	for(;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <ledBlinkBlue+0x18>)
 8000cc4:	f002 fdd1 	bl	800386a <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 8000cc8:	2064      	movs	r0, #100	; 0x64
 8000cca:	f008 faad 	bl	8009228 <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cce:	e7f7      	b.n	8000cc0 <ledBlinkBlue+0x8>
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <StartBlinkyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask */
void StartBlinkyTask(void *argument)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask */
  (void) argument;
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <StartBlinkyTask+0x1c>)
 8000ce0:	f002 fdc3 	bl	800386a <HAL_GPIO_TogglePin>
	osDelay(500);
 8000ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce8:	f006 f8f8 	bl	8006edc <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000cec:	e7f6      	b.n	8000cdc <StartBlinkyTask+0x8>
 8000cee:	bf00      	nop
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <adcReadValueTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adcReadValueTask */
void adcReadValueTask(void *argument)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0a2      	sub	sp, #136	; 0x88
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  (void) argument;
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {
	uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000cfc:	480b      	ldr	r0, [pc, #44]	; (8000d2c <adcReadValueTask+0x38>)
 8000cfe:	f002 f897 	bl	8002e30 <HAL_ADC_GetValue>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

	message.adc_val = adc_value;
 8000d08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000d0c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

	osMessageQueuePut(msg_QueueHandle,
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <adcReadValueTask+0x3c>)
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	f107 010c 	add.w	r1, r7, #12
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f006 fab1 	bl	8007284 <osMessageQueuePut>
			&message,
			0,
			osWaitForever);

    osDelay(10);
 8000d22:	200a      	movs	r0, #10
 8000d24:	f006 f8da 	bl	8006edc <osDelay>
  {
 8000d28:	e7e8      	b.n	8000cfc <adcReadValueTask+0x8>
 8000d2a:	bf00      	nop
 8000d2c:	2000009c 	.word	0x2000009c
 8000d30:	20001730 	.word	0x20001730

08000d34 <readTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readTempTask */
void readTempTask(void *argument)
{
 8000d34:	b5b0      	push	{r4, r5, r7, lr}
 8000d36:	b0a2      	sub	sp, #136	; 0x88
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  (void) argument;
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {
	uint16_t adc_voltage = (ADC_VREF * (uint16_t)HAL_ADC_GetValue(&hadc2)) / ADC_RESOLUTION;
 8000d3c:	4823      	ldr	r0, [pc, #140]	; (8000dcc <readTempTask+0x98>)
 8000d3e:	f002 f877 	bl	8002e30 <HAL_ADC_GetValue>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000d4c:	fb02 f303 	mul.w	r3, r2, r3
 8000d50:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <readTempTask+0x9c>)
 8000d52:	fb82 1203 	smull	r1, r2, r2, r3
 8000d56:	441a      	add	r2, r3
 8000d58:	12d2      	asrs	r2, r2, #11
 8000d5a:	17db      	asrs	r3, r3, #31
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint16_t tempC = getTemperature(adc_voltage); /* 10mV / 1C degree*/
 8000d62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff76 	bl	8000c58 <getTemperature>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

	itoa(tempC, message.msg_buf, 10);
 8000d72:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000d76:	f107 0108 	add.w	r1, r7, #8
 8000d7a:	220a      	movs	r2, #10
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f00a fa59 	bl	800b234 <itoa>
	strcat(message.msg_buf, " C :[temperature value]\r\n\0");
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fa5a 	bl	8000240 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	4413      	add	r3, r2
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <readTempTask+0xa0>)
 8000d98:	461d      	mov	r5, r3
 8000d9a:	4614      	mov	r4, r2
 8000d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9e:	6028      	str	r0, [r5, #0]
 8000da0:	6069      	str	r1, [r5, #4]
 8000da2:	60aa      	str	r2, [r5, #8]
 8000da4:	60eb      	str	r3, [r5, #12]
 8000da6:	cc03      	ldmia	r4!, {r0, r1}
 8000da8:	6128      	str	r0, [r5, #16]
 8000daa:	6169      	str	r1, [r5, #20]
 8000dac:	8823      	ldrh	r3, [r4, #0]
 8000dae:	832b      	strh	r3, [r5, #24]

	osMessageQueuePut(msg_QueueHandle,
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <readTempTask+0xa4>)
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	f107 0108 	add.w	r1, r7, #8
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f006 fa61 	bl	8007284 <osMessageQueuePut>
			&message,
			0,
			osWaitForever
			);

    osDelay(10);
 8000dc2:	200a      	movs	r0, #10
 8000dc4:	f006 f88a 	bl	8006edc <osDelay>
  {
 8000dc8:	e7b8      	b.n	8000d3c <readTempTask+0x8>
 8000dca:	bf00      	nop
 8000dcc:	200000e4 	.word	0x200000e4
 8000dd0:	80080081 	.word	0x80080081
 8000dd4:	0800b520 	.word	0x0800b520
 8000dd8:	20001730 	.word	0x20001730

08000ddc <pwmLedBrightnessTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pwmLedBrightnessTask */
void pwmLedBrightnessTask(void *argument)
{
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b0a2      	sub	sp, #136	; 0x88
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  QUEUE_t message;

  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(msg_QueueHandle,
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <pwmLedBrightnessTask+0x80>)
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	f107 010c 	add.w	r1, r7, #12
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	2200      	movs	r2, #0
 8000df2:	f006 fabb 	bl	800736c <osMessageQueueGet>
			&message,
			0,
			osWaitForever);


	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, message.adc_val);
 8000df6:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <pwmLedBrightnessTask+0x84>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34


	itoa(message.adc_val, message.msg_buf, 10);
 8000e00:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000e04:	4618      	mov	r0, r3
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	220a      	movs	r2, #10
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f00a fa11 	bl	800b234 <itoa>
	strcat(message.msg_buf, " :[potentiometer value]\r\n\0");
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fa12 	bl	8000240 <strlen>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4413      	add	r3, r2
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <pwmLedBrightnessTask+0x88>)
 8000e28:	461d      	mov	r5, r3
 8000e2a:	4614      	mov	r4, r2
 8000e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2e:	6028      	str	r0, [r5, #0]
 8000e30:	6069      	str	r1, [r5, #4]
 8000e32:	60aa      	str	r2, [r5, #8]
 8000e34:	60eb      	str	r3, [r5, #12]
 8000e36:	cc03      	ldmia	r4!, {r0, r1}
 8000e38:	6128      	str	r0, [r5, #16]
 8000e3a:	6169      	str	r1, [r5, #20]
 8000e3c:	8823      	ldrh	r3, [r4, #0]
 8000e3e:	832b      	strh	r3, [r5, #24]

	osMessageQueuePut(msg_QueueHandle,
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <pwmLedBrightnessTask+0x80>)
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	f107 010c 	add.w	r1, r7, #12
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f006 fa19 	bl	8007284 <osMessageQueuePut>
			&message,
			0,
			osWaitForever
			);

    osDelay(10);
 8000e52:	200a      	movs	r0, #10
 8000e54:	f006 f842 	bl	8006edc <osDelay>
	osMessageQueueGet(msg_QueueHandle,
 8000e58:	e7c4      	b.n	8000de4 <pwmLedBrightnessTask+0x8>
 8000e5a:	bf00      	nop
 8000e5c:	20001730 	.word	0x20001730
 8000e60:	20000178 	.word	0x20000178
 8000e64:	0800b53c 	.word	0x0800b53c

08000e68 <usartDebugPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usartDebugPrintTask */
void usartDebugPrintTask(void *argument)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0a2      	sub	sp, #136	; 0x88
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  QUEUE_t message;
//	char msg[20] = "test\r\n\0";
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(msg_QueueHandle,
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <usartDebugPrintTask+0x2c>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f107 010c 	add.w	r1, r7, #12
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f006 fa75 	bl	800736c <osMessageQueueGet>
			&message,
			0,
			osWaitForever
			);

	printUsartMessage(&message.msg_buf);
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fefa 	bl	8000c80 <printUsartMessage>

    osDelay(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f006 f825 	bl	8006edc <osDelay>
	osMessageQueueGet(msg_QueueHandle,
 8000e92:	e7ed      	b.n	8000e70 <usartDebugPrintTask+0x8>
 8000e94:	20001730 	.word	0x20001730

08000e98 <checkISRStateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_checkISRStateTask */
void checkISRStateTask(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0a4      	sub	sp, #144	; 0x90
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN checkISRStateTask */
  (void) argument;

  GPIO_PinState led_gpio_state;

  const char* led_on = "Pin state HIGH [Flag from ISR]\r\n\0";
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <checkISRStateTask+0xb4>)
 8000ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const char* led_off = "Pin state LOW [Flag from ISR]\r\n\0";
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <checkISRStateTask+0xb8>)
 8000ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const char* led_unknown = "Pin state UNKNOWN [Flag from ISR]\r\n\0";
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <checkISRStateTask+0xbc>)
 8000eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {

	osEventFlagsWait(EventGroup1,
 8000eb2:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <checkISRStateTask+0xc0>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2151      	movs	r1, #81	; 0x51
 8000ebe:	f006 f8e5 	bl	800708c <osEventFlagsWait>
			LED_ISR_FLAG,
			osFlagsWaitAll,
			osWaitForever
			);

	led_gpio_state = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000ec2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec6:	4825      	ldr	r0, [pc, #148]	; (8000f5c <checkISRStateTask+0xc4>)
 8000ec8:	f002 fc9e 	bl	8003808 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

	switch(led_gpio_state)
 8000ed2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d012      	beq.n	8000f00 <checkISRStateTask+0x68>
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d121      	bne.n	8000f22 <checkISRStateTask+0x8a>
	{
	case GPIO_PIN_SET:
		strcpy(message.msg_buf, led_on);
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f00a fa28 	bl	800b33c <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <checkISRStateTask+0xc8>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	f107 0108 	add.w	r1, r7, #8
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f006 f9c3 	bl	8007284 <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000efe:	e021      	b.n	8000f44 <checkISRStateTask+0xac>

	case GPIO_PIN_RESET:
		strcpy(message.msg_buf, led_off);
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00a fa17 	bl	800b33c <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <checkISRStateTask+0xc8>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	f107 0108 	add.w	r1, r7, #8
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f006 f9b2 	bl	8007284 <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000f20:	e010      	b.n	8000f44 <checkISRStateTask+0xac>

	default:
		strcpy(message.msg_buf, led_unknown);
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f00a fa06 	bl	800b33c <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <checkISRStateTask+0xc8>)
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	f107 0108 	add.w	r1, r7, #8
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f006 f9a1 	bl	8007284 <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000f42:	bf00      	nop
	}

    osDelay(10);
 8000f44:	200a      	movs	r0, #10
 8000f46:	f005 ffc9 	bl	8006edc <osDelay>
	osEventFlagsWait(EventGroup1,
 8000f4a:	e7b2      	b.n	8000eb2 <checkISRStateTask+0x1a>
 8000f4c:	0800b558 	.word	0x0800b558
 8000f50:	0800b57c 	.word	0x0800b57c
 8000f54:	0800b5a0 	.word	0x0800b5a0
 8000f58:	20001f50 	.word	0x20001f50
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	20001730 	.word	0x20001730

08000f64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f76:	f001 fe05 	bl	8002b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40010400 	.word	0x40010400

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	210f      	movs	r1, #15
 8000fce:	f06f 0001 	mvn.w	r0, #1
 8000fd2:	f002 fa43 	bl	800345c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a2a      	ldr	r2, [pc, #168]	; (80010ac <HAL_ADC_MspInit+0xc8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d124      	bne.n	8001050 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001006:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 800100c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = Potentiometer_AIN_Pin;
 8001036:	2308      	movs	r3, #8
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103a:	2303      	movs	r3, #3
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Potentiometer_AIN_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	481a      	ldr	r0, [pc, #104]	; (80010b4 <HAL_ADC_MspInit+0xd0>)
 800104a:	f002 fa31 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800104e:	e028      	b.n	80010a2 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <HAL_ADC_MspInit+0xd4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d123      	bne.n	80010a2 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_ADC_MspInit+0xcc>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LM35_sensor_AIN_Pin;
 800108a:	2301      	movs	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108e:	2303      	movs	r3, #3
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LM35_sensor_AIN_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4807      	ldr	r0, [pc, #28]	; (80010bc <HAL_ADC_MspInit+0xd8>)
 800109e:	f002 fa07 	bl	80034b0 <HAL_GPIO_Init>
}
 80010a2:	bf00      	nop
 80010a4:	3730      	adds	r7, #48	; 0x30
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40012000 	.word	0x40012000
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40012100 	.word	0x40012100
 80010bc:	40020800 	.word	0x40020800

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1a      	ldr	r2, [pc, #104]	; (8001138 <HAL_TIM_Base_MspInit+0x78>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d114      	bne.n	80010fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	2019      	movs	r0, #25
 80010f0:	f002 f9b4 	bl	800345c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010f4:	2019      	movs	r0, #25
 80010f6:	f002 f9cd 	bl	8003494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80010fa:	e018      	b.n	800112e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM13)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_TIM_Base_MspInit+0x80>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d113      	bne.n	800112e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_TIM_Base_MspInit+0x7c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 15, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	210f      	movs	r1, #15
 8001122:	202c      	movs	r0, #44	; 0x2c
 8001124:	f002 f99a 	bl	800345c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001128:	202c      	movs	r0, #44	; 0x2c
 800112a:	f002 f9b3 	bl	8003494 <HAL_NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40014400 	.word	0x40014400
 800113c:	40023800 	.word	0x40023800
 8001140:	40001c00 	.word	0x40001c00

08001144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <HAL_TIM_MspPostInit+0x64>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d11b      	bne.n	800119e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_TIM_MspPostInit+0x68>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a10      	ldr	r2, [pc, #64]	; (80011ac <HAL_TIM_MspPostInit+0x68>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_TIM_MspPostInit+0x68>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800117e:	2340      	movs	r3, #64	; 0x40
 8001180:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800118e:	2309      	movs	r3, #9
 8001190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_TIM_MspPostInit+0x6c>)
 800119a:	f002 f989 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40001c00 	.word	0x40001c00
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000

080011b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ae      	sub	sp, #184	; 0xb8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2290      	movs	r2, #144	; 0x90
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00a f83f 	bl	800b258 <memset>
  if(huart->Instance==USART3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a22      	ldr	r2, [pc, #136]	; (8001268 <HAL_UART_MspInit+0xb4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d13c      	bne.n	800125e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 80011ea:	2320      	movs	r3, #32
 80011ec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 f98a 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011fe:	f7ff fec3 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_UART_MspInit+0xb8>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a19      	ldr	r2, [pc, #100]	; (800126c <HAL_UART_MspInit+0xb8>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_UART_MspInit+0xb8>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_UART_MspInit+0xb8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <HAL_UART_MspInit+0xb8>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_UART_MspInit+0xb8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001232:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800124c:	2307      	movs	r3, #7
 800124e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001252:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_UART_MspInit+0xbc>)
 800125a:	f002 f929 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	37b8      	adds	r7, #184	; 0xb8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40004800 	.word	0x40004800
 800126c:	40023800 	.word	0x40023800
 8001270:	40020c00 	.word	0x40020c00

08001274 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0ae      	sub	sp, #184	; 0xb8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2290      	movs	r2, #144	; 0x90
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f009 ffdf 	bl	800b258 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012a2:	d159      	bne.n	8001358 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 f929 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012c0:	f7ff fe62 	bl	8000f88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <HAL_PCD_MspInit+0xec>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a25      	ldr	r2, [pc, #148]	; (8001360 <HAL_PCD_MspInit+0xec>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_PCD_MspInit+0xec>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 80012dc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012f6:	230a      	movs	r3, #10
 80012f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001300:	4619      	mov	r1, r3
 8001302:	4818      	ldr	r0, [pc, #96]	; (8001364 <HAL_PCD_MspInit+0xf0>)
 8001304:	f002 f8d4 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001320:	4619      	mov	r1, r3
 8001322:	4810      	ldr	r0, [pc, #64]	; (8001364 <HAL_PCD_MspInit+0xf0>)
 8001324:	f002 f8c4 	bl	80034b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_PCD_MspInit+0xec>)
 800132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_PCD_MspInit+0xec>)
 800132e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001332:	6353      	str	r3, [r2, #52]	; 0x34
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_PCD_MspInit+0xec>)
 8001336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_PCD_MspInit+0xec>)
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_PCD_MspInit+0xec>)
 8001346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134a:	6453      	str	r3, [r2, #68]	; 0x44
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <HAL_PCD_MspInit+0xec>)
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	37b8      	adds	r7, #184	; 0xb8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_InitTick+0xd0>)
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	4a2e      	ldr	r2, [pc, #184]	; (8001438 <HAL_InitTick+0xd0>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	6453      	str	r3, [r2, #68]	; 0x44
 8001384:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <HAL_InitTick+0xd0>)
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001390:	f107 020c 	add.w	r2, r7, #12
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f003 f884 	bl	80044a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80013a0:	f003 f86e 	bl	8004480 <HAL_RCC_GetPCLK2Freq>
 80013a4:	4603      	mov	r3, r0
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ac:	4a23      	ldr	r2, [pc, #140]	; (800143c <HAL_InitTick+0xd4>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	0c9b      	lsrs	r3, r3, #18
 80013b4:	3b01      	subs	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <HAL_InitTick+0xd8>)
 80013ba:	4a22      	ldr	r2, [pc, #136]	; (8001444 <HAL_InitTick+0xdc>)
 80013bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_InitTick+0xd8>)
 80013c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c4:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 80013c6:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_InitTick+0xd8>)
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_InitTick+0xd8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_InitTick+0xd8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_InitTick+0xd8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim8);
 80013de:	4818      	ldr	r0, [pc, #96]	; (8001440 <HAL_InitTick+0xd8>)
 80013e0:	f003 fcbc 	bl	8004d5c <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11b      	bne.n	800142a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 80013f2:	4813      	ldr	r0, [pc, #76]	; (8001440 <HAL_InitTick+0xd8>)
 80013f4:	f003 fd0a 	bl	8004e0c <HAL_TIM_Base_Start_IT>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80013fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001402:	2b00      	cmp	r3, #0
 8001404:	d111      	bne.n	800142a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001406:	202c      	movs	r0, #44	; 0x2c
 8001408:	f002 f844 	bl	8003494 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	d808      	bhi.n	8001424 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8001412:	2200      	movs	r2, #0
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	202c      	movs	r0, #44	; 0x2c
 8001418:	f002 f820 	bl	800345c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_InitTick+0xe0>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e002      	b.n	800142a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800142a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800142e:	4618      	mov	r0, r3
 8001430:	3730      	adds	r7, #48	; 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	431bde83 	.word	0x431bde83
 8001440:	20001f54 	.word	0x20001f54
 8001444:	40010400 	.word	0x40010400
 8001448:	20000010 	.word	0x20000010

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler+0x4>

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
#if (FREERTOS_PROFILER == 1)
  ulHighFrequencyTimerTicks++;
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	4a03      	ldr	r2, [pc, #12]	; (8001490 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001484:	6013      	str	r3, [r2, #0]
#endif
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001486:	4803      	ldr	r0, [pc, #12]	; (8001494 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001488:	f003 fe94 	bl	80051b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20001f48 	.word	0x20001f48
 8001494:	2000012c 	.word	0x2000012c

08001498 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800149c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014a0:	f002 f9fe 	bl	80038a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <TIM8_UP_TIM13_IRQHandler+0x14>)
 80014ae:	f003 fe81 	bl	80051b4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80014b4:	f003 fe7e 	bl	80051b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20001f54 	.word	0x20001f54
 80014c0:	20000178 	.word	0x20000178

080014c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ee:	490e      	ldr	r1, [pc, #56]	; (8001528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f0:	4a0e      	ldr	r2, [pc, #56]	; (800152c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001504:	4c0b      	ldr	r4, [pc, #44]	; (8001534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001512:	f7ff ffd7 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f009 fe51 	bl	800b1bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff f81b 	bl	8000554 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800152c:	0800bf64 	.word	0x0800bf64
  ldr r2, =_sbss
 8001530:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001534:	200083fc 	.word	0x200083fc

08001538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC_IRQHandler>

0800153a <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f007 fa8a 	bl	8008a5c <uxQueueGetQueueNumber>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(pvQueue);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f007 fa98 	bl	8008a90 <ucQueueGetQueueType>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(pvTask));
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f008 fc10 	bl	8009d98 <uxTaskGetTaskNumber>
 8001578:	4603      	mov	r3, r0
 800157a:	b29b      	uxth	r3, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(pvTask));
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f008 fc03 	bl	8009d98 <uxTaskGetTaskNumber>
 8001592:	4603      	mov	r3, r0
 8001594:	0c1b      	lsrs	r3, r3, #16
 8001596:	b29b      	uxth	r3, r3
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber(pvTask), uiValue));
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f008 fbf3 	bl	8009d98 <uxTaskGetTaskNumber>
 80015b2:	4602      	mov	r2, r0
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <prvTraceSetTaskNumberLow16+0x2c>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	887a      	ldrh	r2, [r7, #2]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f008 fc00 	bl	8009dc4 <vTaskSetTaskNumber>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	ffff0000 	.word	0xffff0000

080015d0 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber(pvTask), uiValue));
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f008 fbdb 	bl	8009d98 <uxTaskGetTaskNumber>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	4313      	orrs	r3, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f008 fbe8 	bl	8009dc4 <vTaskSetTaskNumber>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff98 	bl	800153a <prvTraceGetQueueNumber>
 800160a:	4603      	mov	r3, r0
 800160c:	b29b      	uxth	r3, r3
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ff8b 	bl	800153a <prvTraceGetQueueNumber>
 8001624:	4603      	mov	r3, r0
 8001626:	0c1b      	lsrs	r3, r3, #16
 8001628:	b29b      	uxth	r3, r3
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff7a 	bl	800153a <prvTraceGetQueueNumber>
 8001646:	4602      	mov	r2, r0
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <prvTraceSetQueueNumberLow16+0x2c>)
 800164a:	4013      	ands	r3, r2
 800164c:	887a      	ldrh	r2, [r7, #2]
 800164e:	4313      	orrs	r3, r2
 8001650:	4619      	mov	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f007 fa0e 	bl	8008a74 <vQueueSetQueueNumber>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	ffff0000 	.word	0xffff0000

08001664 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff62 	bl	800153a <prvTraceGetQueueNumber>
 8001676:	4603      	mov	r3, r0
 8001678:	b29a      	uxth	r2, r3
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	4313      	orrs	r3, r2
 8001680:	4619      	mov	r1, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f007 f9f6 	bl	8008a74 <vQueueSetQueueNumber>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8001694:	f008 fc86 	bl	8009fa4 <xTaskGetCurrentTaskHandle>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}

0800169e <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80016b8:	4b64      	ldr	r3, [pc, #400]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2209      	movs	r2, #9
 80016be:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 80016c0:	4b62      	ldr	r3, [pc, #392]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	220a      	movs	r2, #10
 80016c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 80016ca:	4b60      	ldr	r3, [pc, #384]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	220a      	movs	r2, #10
 80016d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 80016d4:	4b5d      	ldr	r3, [pc, #372]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	220a      	movs	r2, #10
 80016da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	220f      	movs	r2, #15
 80016e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 80016e8:	4b58      	ldr	r3, [pc, #352]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2205      	movs	r2, #5
 80016ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 80016f2:	4b56      	ldr	r3, [pc, #344]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2205      	movs	r2, #5
 80016f8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80016fc:	4b53      	ldr	r3, [pc, #332]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2205      	movs	r2, #5
 8001702:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2205      	movs	r2, #5
 800170c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8001710:	4b4e      	ldr	r3, [pc, #312]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2205      	movs	r2, #5
 8001716:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	220f      	movs	r2, #15
 8001720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8001724:	4b49      	ldr	r3, [pc, #292]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	220f      	movs	r2, #15
 800172a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	220f      	movs	r2, #15
 8001734:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8001738:	4b44      	ldr	r3, [pc, #272]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	220f      	movs	r2, #15
 800173e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8001742:	4b42      	ldr	r3, [pc, #264]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	220f      	movs	r2, #15
 8001748:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 800174c:	4b3f      	ldr	r3, [pc, #252]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	220f      	movs	r2, #15
 8001752:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8001756:	4b3d      	ldr	r3, [pc, #244]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	220f      	movs	r2, #15
 800175c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8001760:	4b3a      	ldr	r3, [pc, #232]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	220f      	movs	r2, #15
 8001766:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	220f      	movs	r2, #15
 8001770:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8001774:	4b35      	ldr	r3, [pc, #212]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2210      	movs	r2, #16
 800177a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800177e:	4b33      	ldr	r3, [pc, #204]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2210      	movs	r2, #16
 8001784:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8001788:	4b30      	ldr	r3, [pc, #192]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2210      	movs	r2, #16
 800178e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8001792:	4b2e      	ldr	r3, [pc, #184]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2213      	movs	r2, #19
 8001798:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2211      	movs	r2, #17
 80017a2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 80017a6:	4b29      	ldr	r3, [pc, #164]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2210      	movs	r2, #16
 80017ac:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 80017b0:	4b26      	ldr	r3, [pc, #152]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2213      	movs	r2, #19
 80017b6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2213      	movs	r2, #19
 80017c0:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2213      	movs	r2, #19
 80017ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	22a0      	movs	r2, #160	; 0xa0
 80017de:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017ea:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017f6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f240 22fd 	movw	r2, #765	; 0x2fd
 8001802:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f240 3252 	movw	r2, #850	; 0x352
 800180e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f240 32a2 	movw	r2, #930	; 0x3a2
 800181a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f240 4201 	movw	r2, #1025	; 0x401
 8001826:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001832:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800183e:	64da      	str	r2, [r3, #76]	; 0x4c

	return TRC_SUCCESS;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	200039bc 	.word	0x200039bc

08001850 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 800185a:	4b40      	ldr	r3, [pc, #256]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800185c:	2200      	movs	r2, #0
 800185e:	825a      	strh	r2, [r3, #18]
 8001860:	4b3e      	ldr	r3, [pc, #248]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001862:	8a5a      	ldrh	r2, [r3, #18]
 8001864:	4b3d      	ldr	r3, [pc, #244]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001866:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8001868:	4b3c      	ldr	r3, [pc, #240]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800186a:	220a      	movs	r2, #10
 800186c:	829a      	strh	r2, [r3, #20]
 800186e:	4b3b      	ldr	r3, [pc, #236]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001870:	8a9a      	ldrh	r2, [r3, #20]
 8001872:	4b3a      	ldr	r3, [pc, #232]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001874:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8001876:	4b39      	ldr	r3, [pc, #228]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001878:	2214      	movs	r2, #20
 800187a:	82da      	strh	r2, [r3, #22]
 800187c:	4b37      	ldr	r3, [pc, #220]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800187e:	8ada      	ldrh	r2, [r3, #22]
 8001880:	4b36      	ldr	r3, [pc, #216]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001882:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8001884:	4b35      	ldr	r3, [pc, #212]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001886:	221e      	movs	r2, #30
 8001888:	831a      	strh	r2, [r3, #24]
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800188c:	8b1a      	ldrh	r2, [r3, #24]
 800188e:	4b33      	ldr	r3, [pc, #204]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001890:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001894:	222d      	movs	r2, #45	; 0x2d
 8001896:	835a      	strh	r2, [r3, #26]
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800189a:	8b5a      	ldrh	r2, [r3, #26]
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800189e:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 80018a0:	4b2e      	ldr	r3, [pc, #184]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018a2:	2232      	movs	r2, #50	; 0x32
 80018a4:	839a      	strh	r2, [r3, #28]
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018a8:	8b9a      	ldrh	r2, [r3, #28]
 80018aa:	4b2c      	ldr	r3, [pc, #176]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018ac:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018b0:	2237      	movs	r2, #55	; 0x37
 80018b2:	83da      	strh	r2, [r3, #30]
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018b6:	8bda      	ldrh	r2, [r3, #30]
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018ba:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018be:	223c      	movs	r2, #60	; 0x3c
 80018c0:	841a      	strh	r2, [r3, #32]
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018c4:	8c1a      	ldrh	r2, [r3, #32]
 80018c6:	4b25      	ldr	r3, [pc, #148]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018c8:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018cc:	2241      	movs	r2, #65	; 0x41
 80018ce:	845a      	strh	r2, [r3, #34]	; 0x22
 80018d0:	4b22      	ldr	r3, [pc, #136]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018d2:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018d6:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018da:	2209      	movs	r2, #9
 80018dc:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018e0:	2213      	movs	r2, #19
 80018e2:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018e6:	221d      	movs	r2, #29
 80018e8:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018ec:	222c      	movs	r2, #44	; 0x2c
 80018ee:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018f2:	2231      	movs	r2, #49	; 0x31
 80018f4:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018f8:	2236      	movs	r2, #54	; 0x36
 80018fa:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80018fe:	223b      	movs	r2, #59	; 0x3b
 8001900:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001904:	2240      	movs	r2, #64	; 0x40
 8001906:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800190a:	2245      	movs	r2, #69	; 0x45
 800190c:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	e009      	b.n	8001928 <xTraceKernelPortInitObjectHandleStack+0xd8>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8001914:	4a11      	ldr	r2, [pc, #68]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3318      	adds	r3, #24
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	2200      	movs	r2, #0
 8001920:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3301      	adds	r3, #1
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b08      	cmp	r3, #8
 800192c:	d9f2      	bls.n	8001914 <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	e008      	b.n	8001946 <xTraceKernelPortInitObjectHandleStack+0xf6>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8001934:	4a09      	ldr	r2, [pc, #36]	; (800195c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	3348      	adds	r3, #72	; 0x48
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3301      	adds	r3, #1
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b45      	cmp	r3, #69	; 0x45
 800194a:	d9f3      	bls.n	8001934 <xTraceKernelPortInitObjectHandleStack+0xe4>
	}

	return TRC_SUCCESS;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20001fd0 	.word	0x20001fd0

08001960 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d827      	bhi.n	80019c0 <pszTraceGetErrorNotEnoughHandles+0x60>
 8001970:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <pszTraceGetErrorNotEnoughHandles+0x18>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	080019ad 	.word	0x080019ad
 800197c:	080019a5 	.word	0x080019a5
 8001980:	080019a9 	.word	0x080019a9
 8001984:	0800199d 	.word	0x0800199d
 8001988:	080019a1 	.word	0x080019a1
 800198c:	080019b1 	.word	0x080019b1
 8001990:	080019b5 	.word	0x080019b5
 8001994:	080019b9 	.word	0x080019b9
 8001998:	080019bd 	.word	0x080019bd
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <pszTraceGetErrorNotEnoughHandles+0x70>)
 800199e:	e010      	b.n	80019c2 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <pszTraceGetErrorNotEnoughHandles+0x74>)
 80019a2:	e00e      	b.n	80019c2 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <pszTraceGetErrorNotEnoughHandles+0x78>)
 80019a6:	e00c      	b.n	80019c2 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <pszTraceGetErrorNotEnoughHandles+0x7c>)
 80019aa:	e00a      	b.n	80019c2 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <pszTraceGetErrorNotEnoughHandles+0x80>)
 80019ae:	e008      	b.n	80019c2 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <pszTraceGetErrorNotEnoughHandles+0x84>)
 80019b2:	e006      	b.n	80019c2 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <pszTraceGetErrorNotEnoughHandles+0x88>)
 80019b6:	e004      	b.n	80019c2 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <pszTraceGetErrorNotEnoughHandles+0x8c>)
 80019ba:	e002      	b.n	80019c2 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <pszTraceGetErrorNotEnoughHandles+0x90>)
 80019be:	e000      	b.n	80019c2 <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	0800b5d0 	.word	0x0800b5d0
 80019d4:	0800b618 	.word	0x0800b618
 80019d8:	0800b660 	.word	0x0800b660
 80019dc:	0800b6b4 	.word	0x0800b6b4
 80019e0:	0800b700 	.word	0x0800b700
 80019e4:	0800b74c 	.word	0x0800b74c
 80019e8:	0800b798 	.word	0x0800b798
 80019ec:	0800b7ec 	.word	0x0800b7ec
 80019f0:	0800b844 	.word	0x0800b844
 80019f4:	0800b8a0 	.word	0x0800b8a0

080019f8 <xTraceDisable>:
	return TRC_SUCCESS;
}


traceResult xTraceDisable(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	prvTraceStop();
 80019fc:	f000 f804 	bl	8001a08 <prvTraceStop>

	return TRC_SUCCESS;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <prvTraceStop+0x28>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <prvTraceStop+0x28>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <prvTraceStop+0x2c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <prvTraceStop+0x2c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4798      	blx	r3
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200039bc 	.word	0x200039bc
 8001a34:	20001fc4 	.word	0x20001fc4

08001a38 <xTraceInitialize>:
	return trcStr;
}
#endif

traceResult xTraceInitialize(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8001a3e:	4b97      	ldr	r3, [pc, #604]	; (8001c9c <xTraceInitialize+0x264>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <xTraceInitialize+0x12>
	{
		return TRC_SUCCESS;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e124      	b.n	8001c94 <xTraceInitialize+0x25c>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 8001a4a:	4b95      	ldr	r3, [pc, #596]	; (8001ca0 <xTraceInitialize+0x268>)
 8001a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a50:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 8001a52:	4b94      	ldr	r3, [pc, #592]	; (8001ca4 <xTraceInitialize+0x26c>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 8001a58:	4b93      	ldr	r3, [pc, #588]	; (8001ca8 <xTraceInitialize+0x270>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	tasksNotIncluded = 0;
 8001a5e:	4b93      	ldr	r3, [pc, #588]	; (8001cac <xTraceInitialize+0x274>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	e00d      	b.n	8001a86 <xTraceInitialize+0x4e>
	{
		tasksInStackMonitor[i].tcb = 0;
 8001a6a:	4a91      	ldr	r2, [pc, #580]	; (8001cb0 <xTraceInitialize+0x278>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2100      	movs	r1, #0
 8001a70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
 8001a74:	4a8e      	ldr	r2, [pc, #568]	; (8001cb0 <xTraceInitialize+0x278>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3301      	adds	r3, #1
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b09      	cmp	r3, #9
 8001a8a:	d9ee      	bls.n	8001a6a <xTraceInitialize+0x32>
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8001a8c:	4b89      	ldr	r3, [pc, #548]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001a8e:	4a8a      	ldr	r2, [pc, #552]	; (8001cb8 <xTraceInitialize+0x280>)
 8001a90:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 8001a92:	4b8a      	ldr	r3, [pc, #552]	; (8001cbc <xTraceInitialize+0x284>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a8a      	ldr	r2, [pc, #552]	; (8001cc0 <xTraceInitialize+0x288>)
 8001a98:	6013      	str	r3, [r2, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 8001a9a:	488a      	ldr	r0, [pc, #552]	; (8001cc4 <xTraceInitialize+0x28c>)
 8001a9c:	f7ff fdff 	bl	800169e <xTraceKernelPortInitialize>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <xTraceInitialize+0x72>
	{
		return TRC_FAIL;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0f4      	b.n	8001c94 <xTraceInitialize+0x25c>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8001aaa:	4b82      	ldr	r3, [pc, #520]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f641 1204 	movw	r2, #6404	; 0x1904
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f009 fbcf 	bl	800b258 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8001aba:	4b7e      	ldr	r3, [pc, #504]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8001ac2:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8001ac4:	4b7b      	ldr	r3, [pc, #492]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2207      	movs	r2, #7
 8001aca:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8001acc:	4b79      	ldr	r3, [pc, #484]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8001ad4:	4b77      	ldr	r3, [pc, #476]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f641 1204 	movw	r2, #6404	; 0x1904
 8001adc:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8001ade:	4b75      	ldr	r3, [pc, #468]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ae6:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8001ae8:	4b72      	ldr	r3, [pc, #456]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8001af2:	4b70      	ldr	r3, [pc, #448]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8001afa:	4b6e      	ldr	r3, [pc, #440]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 8001b02:	f7ff fdd7 	bl	80016b4 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8001b06:	4b6b      	ldr	r3, [pc, #428]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 8001b0e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8001b12:	4b68      	ldr	r3, [pc, #416]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b1a:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8001b1e:	4b65      	ldr	r3, [pc, #404]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8001b28:	4b62      	ldr	r3, [pc, #392]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 8001b30:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8001b34:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b3c:	2250      	movs	r2, #80	; 0x50
 8001b3e:	4962      	ldr	r1, [pc, #392]	; (8001cc8 <xTraceInitialize+0x290>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fd33 	bl	80025ac <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8001b46:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 8001b4e:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 8001b52:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5a:	220a      	movs	r2, #10
 8001b5c:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
	RecorderDataPtr->endmarker1 = 0x0B;
 8001b60:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b68:	220b      	movs	r2, #11
 8001b6a:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
	RecorderDataPtr->endmarker2 = 0x0C;
 8001b6e:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b76:	220c      	movs	r2, #12
 8001b78:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
	RecorderDataPtr->endmarker3 = 0x0D;
 8001b7c:	4b4d      	ldr	r3, [pc, #308]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b84:	220d      	movs	r2, #13
 8001b86:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
	RecorderDataPtr->endmarker4 = 0x71;
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b92:	2271      	movs	r2, #113	; 0x71
 8001b94:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
	RecorderDataPtr->endmarker5 = 0x72;
 8001b98:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba0:	2272      	movs	r2, #114	; 0x72
 8001ba2:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
	RecorderDataPtr->endmarker6 = 0x73;
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bae:	2273      	movs	r2, #115	; 0x73
 8001bb0:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
	RecorderDataPtr->endmarker7 = 0x74;
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbc:	2274      	movs	r2, #116	; 0x74
 8001bbe:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
	RecorderDataPtr->endmarker8 = 0xF1;
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	22f1      	movs	r2, #241	; 0xf1
 8001bcc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
	RecorderDataPtr->endmarker9 = 0xF2;
 8001bd0:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd8:	22f2      	movs	r2, #242	; 0xf2
 8001bda:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
	RecorderDataPtr->endmarker10 = 0xF3;
 8001bde:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be6:	22f3      	movs	r2, #243	; 0xf3
 8001be8:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
	RecorderDataPtr->endmarker11 = 0xF4;
 8001bec:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	22f4      	movs	r2, #244	; 0xf4
 8001bf6:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 8001bfa:	f7ff fe29 	bl	8001850 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	22f4      	movs	r2, #244	; 0xf4
 8001c04:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	22f3      	movs	r2, #243	; 0xf3
 8001c0c:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	22f2      	movs	r2, #242	; 0xf2
 8001c14:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	22f1      	movs	r2, #241	; 0xf1
 8001c1c:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2274      	movs	r2, #116	; 0x74
 8001c24:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2273      	movs	r2, #115	; 0x73
 8001c2c:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2272      	movs	r2, #114	; 0x72
 8001c34:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8001c36:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2271      	movs	r2, #113	; 0x71
 8001c3c:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2204      	movs	r2, #4
 8001c44:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2202      	movs	r2, #2
 8001c54:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <xTraceInitialize+0x270>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <xTraceInitialize+0x250>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <xTraceInitialize+0x270>)
 8001c70:	6811      	ldr	r1, [r2, #0]
 8001c72:	2250      	movs	r2, #80	; 0x50
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fc99 	bl	80025ac <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <xTraceInitialize+0x27c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		prvTraceStop();
 8001c84:	f7ff fec0 	bl	8001a08 <prvTraceStop>
	}

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 8001c88:	f000 feb6 	bl	80029f8 <xTraceHardwarePortInitCortexM>
#endif

	RecorderInitialized = 1;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <xTraceInitialize+0x264>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200039c0 	.word	0x200039c0
 8001ca0:	20001fcc 	.word	0x20001fcc
 8001ca4:	20001fce 	.word	0x20001fce
 8001ca8:	20002060 	.word	0x20002060
 8001cac:	200020b4 	.word	0x200020b4
 8001cb0:	20002064 	.word	0x20002064
 8001cb4:	200039bc 	.word	0x200039bc
 8001cb8:	200020b8 	.word	0x200020b8
 8001cbc:	e0001004 	.word	0xe0001004
 8001cc0:	20001fc8 	.word	0x20001fc8
 8001cc4:	20001fa0 	.word	0x20001fa0
 8001cc8:	0800ba9c 	.word	0x0800ba9c

08001ccc <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d044      	beq.n	8001d66 <prvTraceStoreTaskReady+0x9a>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <prvTraceStoreTaskReady+0xa8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d042      	beq.n	8001d6a <prvTraceStoreTaskReady+0x9e>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <prvTraceStoreTaskReady+0xac>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <prvTraceStoreTaskReady+0x28>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8001cec:	4823      	ldr	r0, [pc, #140]	; (8001d7c <prvTraceStoreTaskReady+0xb0>)
 8001cee:	f000 fcdd 	bl	80026ac <prvTraceError>
		return;
 8001cf2:	e03b      	b.n	8001d6c <prvTraceStoreTaskReady+0xa0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8001cf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f383 8810 	msr	PRIMASK, r3
}
 8001d08:	bf00      	nop
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <prvTraceStoreTaskReady+0xac>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <prvTraceStoreTaskReady+0xac>)
 8001d12:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <prvTraceStoreTaskReady+0xb4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d018      	beq.n	8001d50 <prvTraceStoreTaskReady+0x84>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001d1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d22:	f000 fd9f 	bl	8002864 <prvTraceGetDTS>
 8001d26:	4603      	mov	r3, r0
 8001d28:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8001d2e:	f000 fb27 	bl	8002380 <prvTraceNextFreeEventBufferSlot>
 8001d32:	6178      	str	r0, [r7, #20]
		if (tr != (void*)0)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00a      	beq.n	8001d50 <prvTraceStoreTaskReady+0x84>
		{
			tr->type = DIV_TASK_READY;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	8b7a      	ldrh	r2, [r7, #26]
 8001d44:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	7e7a      	ldrb	r2, [r7, #25]
 8001d4a:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8001d4c:	f000 fd62 	bl	8002814 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <prvTraceStoreTaskReady+0xac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <prvTraceStoreTaskReady+0xac>)
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f383 8810 	msr	PRIMASK, r3
}
 8001d64:	e002      	b.n	8001d6c <prvTraceStoreTaskReady+0xa0>
		return;
 8001d66:	bf00      	nop
 8001d68:	e000      	b.n	8001d6c <prvTraceStoreTaskReady+0xa0>
		return;
 8001d6a:	bf00      	nop
}
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000000c 	.word	0x2000000c
 8001d78:	20001fb8 	.word	0x20001fb8
 8001d7c:	0800bab0 	.word	0x0800bab0
 8001d80:	200039bc 	.word	0x200039bc

08001d84 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	; 0x38
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 8001d90:	4b46      	ldr	r3, [pc, #280]	; (8001eac <vTraceStoreMemMangEvent+0x128>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 8084 	beq.w	8001ea2 <vTraceStoreMemMangEvent+0x11e>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da03      	bge.n	8001da8 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	425b      	negs	r3, r3
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
 8001da6:	e001      	b.n	8001dac <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dac:	f3ef 8310 	mrs	r3, PRIMASK
 8001db0:	61bb      	str	r3, [r7, #24]
  return(result);
 8001db2:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
 8001db6:	2301      	movs	r3, #1
 8001db8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f383 8810 	msr	PRIMASK, r3
}
 8001dc0:	bf00      	nop
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <vTraceStoreMemMangEvent+0x12c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a39      	ldr	r2, [pc, #228]	; (8001eb0 <vTraceStoreMemMangEvent+0x12c>)
 8001dca:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d015      	beq.n	8001dfe <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <vTraceStoreMemMangEvent+0x128>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4b34      	ldr	r3, [pc, #208]	; (8001eac <vTraceStoreMemMangEvent+0x128>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	440a      	add	r2, r1
 8001de0:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8001de2:	4b32      	ldr	r3, [pc, #200]	; (8001eac <vTraceStoreMemMangEvent+0x128>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001de8:	4b30      	ldr	r3, [pc, #192]	; (8001eac <vTraceStoreMemMangEvent+0x128>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d905      	bls.n	8001dfe <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 8001df2:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <vTraceStoreMemMangEvent+0x128>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <vTraceStoreMemMangEvent+0x128>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <vTraceStoreMemMangEvent+0x128>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d041      	beq.n	8001e8c <vTraceStoreMemMangEvent+0x108>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8001e08:	20ff      	movs	r0, #255	; 0xff
 8001e0a:	f000 fd2b 	bl	8002864 <prvTraceGetDTS>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8001e14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e1a:	f000 f90f 	bl	800203c <prvTraceGetParam>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8001e22:	f000 faad 	bl	8002380 <prvTraceNextFreeEventBufferSlot>
 8001e26:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != (void*)0)
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d02e      	beq.n	8001e8c <vTraceStoreMemMangEvent+0x108>
		{
			ms->dts = dts1;
 8001e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001e34:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001e40:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001e42:	f000 fce7 	bl	8002814 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e4c:	f000 f8f6 	bl	800203c <prvTraceGetParam>
 8001e50:	4603      	mov	r3, r0
 8001e52:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8001e5a:	f000 fa91 	bl	8002380 <prvTraceNextFreeEventBufferSlot>
 8001e5e:	6238      	str	r0, [r7, #32]
			if (ma != (void*)0)
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d012      	beq.n	8001e8c <vTraceStoreMemMangEvent+0x108>
			{
				ma->addr_low = addr_low;
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001e6a:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001e72:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 8001e88:	f000 fcc4 	bl	8002814 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <vTraceStoreMemMangEvent+0x12c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <vTraceStoreMemMangEvent+0x12c>)
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f383 8810 	msr	PRIMASK, r3
}
 8001ea0:	e000      	b.n	8001ea4 <vTraceStoreMemMangEvent+0x120>
		return;
 8001ea2:	bf00      	nop
}
 8001ea4:	3738      	adds	r7, #56	; 0x38
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200039bc 	.word	0x200039bc
 8001eb0:	20001fb8 	.word	0x20001fb8

08001eb4 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <prvTraceStoreKernelCall+0xa8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <prvTraceStoreKernelCall+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8001eca:	4825      	ldr	r0, [pc, #148]	; (8001f60 <prvTraceStoreKernelCall+0xac>)
 8001ecc:	f000 fbee 	bl	80026ac <prvTraceError>
		return;
 8001ed0:	e040      	b.n	8001f54 <prvTraceStoreKernelCall+0xa0>
	}

	if (handle_of_last_logged_task == 0)
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <prvTraceStoreKernelCall+0xb0>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d03b      	beq.n	8001f52 <prvTraceStoreKernelCall+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eda:	f3ef 8310 	mrs	r3, PRIMASK
 8001ede:	617b      	str	r3, [r7, #20]
  return(result);
 8001ee0:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f383 8810 	msr	PRIMASK, r3
}
 8001eee:	bf00      	nop
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <prvTraceStoreKernelCall+0xa8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <prvTraceStoreKernelCall+0xa8>)
 8001ef8:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <prvTraceStoreKernelCall+0xb4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <prvTraceStoreKernelCall+0x88>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001f04:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f08:	f000 fcac 	bl	8002864 <prvTraceGetDTS>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8001f16:	f000 fa33 	bl	8002380 <prvTraceNextFreeEventBufferSlot>
 8001f1a:	61f8      	str	r0, [r7, #28]
		if (kse != (void*)0)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <prvTraceStoreKernelCall+0x88>
		{
			kse->dts = dts1;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001f26:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001f36:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8001f38:	f000 fc6c 	bl	8002814 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <prvTraceStoreKernelCall+0xa8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <prvTraceStoreKernelCall+0xa8>)
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f383 8810 	msr	PRIMASK, r3
}
 8001f50:	e000      	b.n	8001f54 <prvTraceStoreKernelCall+0xa0>
		return;
 8001f52:	bf00      	nop
}
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20001fb8 	.word	0x20001fb8
 8001f60:	0800bae8 	.word	0x0800bae8
 8001f64:	20001fc0 	.word	0x20001fc0
 8001f68:	200039bc 	.word	0x200039bc

08001f6c <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <prvTraceStoreKernelCallWithParam+0xc0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <prvTraceStoreKernelCallWithParam+0x20>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8001f84:	482a      	ldr	r0, [pc, #168]	; (8002030 <prvTraceStoreKernelCallWithParam+0xc4>)
 8001f86:	f000 fb91 	bl	80026ac <prvTraceError>
		return;
 8001f8a:	e04b      	b.n	8002024 <prvTraceStoreKernelCallWithParam+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f90:	617b      	str	r3, [r7, #20]
  return(result);
 8001f92:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
 8001f96:	2301      	movs	r3, #1
 8001f98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	f383 8810 	msr	PRIMASK, r3
}
 8001fa0:	bf00      	nop
 8001fa2:	4b22      	ldr	r3, [pc, #136]	; (800202c <prvTraceStoreKernelCallWithParam+0xc0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a20      	ldr	r2, [pc, #128]	; (800202c <prvTraceStoreKernelCallWithParam+0xc0>)
 8001faa:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <prvTraceStoreKernelCallWithParam+0xc8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d02b      	beq.n	800200e <prvTraceStoreKernelCallWithParam+0xa2>
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <prvTraceStoreKernelCallWithParam+0xcc>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d027      	beq.n	800200e <prvTraceStoreKernelCallWithParam+0xa2>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8001fbe:	20ff      	movs	r0, #255	; 0xff
 8001fc0:	f000 fc50 	bl	8002864 <prvTraceGetDTS>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8001fca:	6839      	ldr	r1, [r7, #0]
 8001fcc:	20ff      	movs	r0, #255	; 0xff
 8001fce:	f000 f835 	bl	800203c <prvTraceGetParam>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8001fde:	f000 f9cf 	bl	8002380 <prvTraceNextFreeEventBufferSlot>
 8001fe2:	61f8      	str	r0, [r7, #28]
		if (kse != (void*)0)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d011      	beq.n	800200e <prvTraceStoreKernelCallWithParam+0xa2>
		{
			kse->dts = dts2;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ff0:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002000:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002008:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 800200a:	f000 fc03 	bl	8002814 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <prvTraceStoreKernelCallWithParam+0xc0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3b01      	subs	r3, #1
 8002014:	4a05      	ldr	r2, [pc, #20]	; (800202c <prvTraceStoreKernelCallWithParam+0xc0>)
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f383 8810 	msr	PRIMASK, r3
}
 8002022:	bf00      	nop
}
 8002024:	3728      	adds	r7, #40	; 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20001fb8 	.word	0x20001fb8
 8002030:	0800bb20 	.word	0x0800bb20
 8002034:	200039bc 	.word	0x200039bc
 8002038:	20001fc0 	.word	0x20001fc0

0800203c <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d801      	bhi.n	8002052 <prvTraceGetParam+0x16>
	{
		return param;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	e01d      	b.n	800208e <prvTraceGetParam+0x52>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8002052:	f000 f995 	bl	8002380 <prvTraceNextFreeEventBufferSlot>
 8002056:	60f8      	str	r0, [r7, #12]
		if (xps != (void*)0)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d014      	beq.n	8002088 <prvTraceGetParam+0x4c>
		{
			xps->type = DIV_XPS;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	43da      	mvns	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4013      	ands	r3, r2
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b2da      	uxtb	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	43da      	mvns	r2, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4013      	ands	r3, r2
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8002084:	f000 fbc6 	bl	8002814 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4013      	ands	r3, r2
	}
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <prvTraceStoreKernelCallWithNumericParamOnly+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 80020ae:	4825      	ldr	r0, [pc, #148]	; (8002144 <prvTraceStoreKernelCallWithNumericParamOnly+0xac>)
 80020b0:	f000 fafc 	bl	80026ac <prvTraceError>
		return;
 80020b4:	e041      	b.n	800213a <prvTraceStoreKernelCallWithNumericParamOnly+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020b6:	f3ef 8310 	mrs	r3, PRIMASK
 80020ba:	613b      	str	r3, [r7, #16]
  return(result);
 80020bc:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 80020be:	623b      	str	r3, [r7, #32]
 80020c0:	2301      	movs	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f383 8810 	msr	PRIMASK, r3
}
 80020ca:	bf00      	nop
 80020cc:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 80020d4:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d021      	beq.n	8002124 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01d      	beq.n	8002124 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 80020e8:	20ff      	movs	r0, #255	; 0xff
 80020ea:	f000 fbbb 	bl	8002864 <prvTraceGetDTS>
 80020ee:	4603      	mov	r3, r0
 80020f0:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020f8:	f7ff ffa0 	bl	800203c <prvTraceGetParam>
 80020fc:	4603      	mov	r3, r0
 80020fe:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8002100:	f000 f93e 	bl	8002380 <prvTraceNextFreeEventBufferSlot>
 8002104:	61b8      	str	r0, [r7, #24]
		if (kse != (void*)0)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
		{
			kse->dts = dts6;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	7ffa      	ldrb	r2, [r7, #31]
 8002110:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800211e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8002120:	f000 fb78 	bl	8002814 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3b01      	subs	r3, #1
 800212a:	4a05      	ldr	r2, [pc, #20]	; (8002140 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f383 8810 	msr	PRIMASK, r3
}
 8002138:	bf00      	nop
}
 800213a:	3728      	adds	r7, #40	; 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20001fb8 	.word	0x20001fb8
 8002144:	0800bb58 	.word	0x0800bb58
 8002148:	200039bc 	.word	0x200039bc
 800214c:	20001fc0 	.word	0x20001fc0

08002150 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800215a:	f3ef 8310 	mrs	r3, PRIMASK
 800215e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002160:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	2301      	movs	r3, #1
 8002166:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f383 8810 	msr	PRIMASK, r3
}
 800216e:	bf00      	nop
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <prvTraceStoreTaskswitch+0xc4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	4a27      	ldr	r2, [pc, #156]	; (8002214 <prvTraceStoreTaskswitch+0xc4>)
 8002178:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <prvTraceStoreTaskswitch+0xc8>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	79fa      	ldrb	r2, [r7, #7]
 8002180:	429a      	cmp	r2, r3
 8002182:	d038      	beq.n	80021f6 <prvTraceStoreTaskswitch+0xa6>
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <prvTraceStoreTaskswitch+0xcc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	2b00      	cmp	r3, #0
 800218c:	d033      	beq.n	80021f6 <prvTraceStoreTaskswitch+0xa6>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <prvTraceStoreTaskswitch+0xd0>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8002194:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002198:	f000 fb64 	bl	8002864 <prvTraceGetDTS>
 800219c:	4603      	mov	r3, r0
 800219e:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 80021a0:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <prvTraceStoreTaskswitch+0xc8>)
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 80021a6:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <prvTraceStoreTaskswitch+0xc8>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 80021ac:	f000 f8e8 	bl	8002380 <prvTraceNextFreeEventBufferSlot>
 80021b0:	6178      	str	r0, [r7, #20]

		if (ts != (void*)0)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01e      	beq.n	80021f6 <prvTraceStoreTaskswitch+0xa6>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <prvTraceStoreTaskswitch+0xc8>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	2003      	movs	r0, #3
 80021c0:	f000 f89e 	bl	8002300 <prvTraceGetObjectState>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d103      	bne.n	80021d2 <prvTraceStoreTaskswitch+0x82>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2207      	movs	r2, #7
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e002      	b.n	80021d8 <prvTraceStoreTaskswitch+0x88>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2206      	movs	r2, #6
 80021d6:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	8b7a      	ldrh	r2, [r7, #26]
 80021dc:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	7e7a      	ldrb	r2, [r7, #25]
 80021e2:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <prvTraceStoreTaskswitch+0xc8>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	4619      	mov	r1, r3
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 f863 	bl	80022b8 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 80021f2:	f000 fb0f 	bl	8002814 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 80021f6:	4b07      	ldr	r3, [pc, #28]	; (8002214 <prvTraceStoreTaskswitch+0xc4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	4a05      	ldr	r2, [pc, #20]	; (8002214 <prvTraceStoreTaskswitch+0xc4>)
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f383 8810 	msr	PRIMASK, r3
}
 800220a:	bf00      	nop
}
 800220c:	bf00      	nop
 800220e:	3720      	adds	r7, #32
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20001fb8 	.word	0x20001fb8
 8002218:	20001fc0 	.word	0x20001fc0
 800221c:	200039bc 	.word	0x200039bc
 8002220:	20001fa4 	.word	0x20001fa4

08002224 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
 800222e:	460b      	mov	r3, r1
 8002230:	71bb      	strb	r3, [r7, #6]
 8002232:	4613      	mov	r3, r2
 8002234:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <prvTraceSetPriorityProperty+0x48>)
 8002238:	681c      	ldr	r4, [r3, #0]
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	79bb      	ldrb	r3, [r7, #6]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f8c1 	bl	80023c8 <uiIndexOfObject>
 8002246:	4603      	mov	r3, r0
 8002248:	4619      	mov	r1, r3
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <prvTraceSetPriorityProperty+0x48>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	4413      	add	r3, r2
 8002252:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002256:	440b      	add	r3, r1
 8002258:	3301      	adds	r3, #1
 800225a:	4423      	add	r3, r4
 800225c:	797a      	ldrb	r2, [r7, #5]
 800225e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bd90      	pop	{r4, r7, pc}
 800226a:	bf00      	nop
 800226c:	200039bc 	.word	0x200039bc

08002270 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	460a      	mov	r2, r1
 800227a:	71fb      	strb	r3, [r7, #7]
 800227c:	4613      	mov	r3, r2
 800227e:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <prvTraceGetPriorityProperty+0x44>)
 8002282:	681c      	ldr	r4, [r3, #0]
 8002284:	79fa      	ldrb	r2, [r7, #7]
 8002286:	79bb      	ldrb	r3, [r7, #6]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f89c 	bl	80023c8 <uiIndexOfObject>
 8002290:	4603      	mov	r3, r0
 8002292:	4619      	mov	r1, r3
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <prvTraceGetPriorityProperty+0x44>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	4413      	add	r3, r2
 800229c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022a0:	440b      	add	r3, r1
 80022a2:	3301      	adds	r3, #1
 80022a4:	4423      	add	r3, r4
 80022a6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd90      	pop	{r4, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200039bc 	.word	0x200039bc

080022b8 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	460b      	mov	r3, r1
 80022c4:	71bb      	strb	r3, [r7, #6]
 80022c6:	4613      	mov	r3, r2
 80022c8:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <prvTraceSetObjectState+0x44>)
 80022cc:	681c      	ldr	r4, [r3, #0]
 80022ce:	79fa      	ldrb	r2, [r7, #7]
 80022d0:	79bb      	ldrb	r3, [r7, #6]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f877 	bl	80023c8 <uiIndexOfObject>
 80022da:	4603      	mov	r3, r0
 80022dc:	4619      	mov	r1, r3
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <prvTraceSetObjectState+0x44>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4413      	add	r3, r2
 80022e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022ea:	440b      	add	r3, r1
 80022ec:	4423      	add	r3, r4
 80022ee:	797a      	ldrb	r2, [r7, #5]
 80022f0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	200039bc 	.word	0x200039bc

08002300 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	460a      	mov	r2, r1
 800230a:	71fb      	strb	r3, [r7, #7]
 800230c:	4613      	mov	r3, r2
 800230e:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <prvTraceGetObjectState+0x40>)
 8002312:	681c      	ldr	r4, [r3, #0]
 8002314:	79fa      	ldrb	r2, [r7, #7]
 8002316:	79bb      	ldrb	r3, [r7, #6]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f854 	bl	80023c8 <uiIndexOfObject>
 8002320:	4603      	mov	r3, r0
 8002322:	4619      	mov	r1, r3
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <prvTraceGetObjectState+0x40>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	4413      	add	r3, r2
 800232c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002330:	440b      	add	r3, r1
 8002332:	4423      	add	r3, r4
 8002334:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bd90      	pop	{r4, r7, pc}
 8002340:	200039bc 	.word	0x200039bc

08002344 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <prvTraceSetTaskInstanceFinished+0x38>)
 8002350:	681c      	ldr	r4, [r3, #0]
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	2103      	movs	r1, #3
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f836 	bl	80023c8 <uiIndexOfObject>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <prvTraceSetTaskInstanceFinished+0x38>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8002368:	4413      	add	r3, r2
 800236a:	4423      	add	r3, r4
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bd90      	pop	{r4, r7, pc}
 800237a:	bf00      	nop
 800237c:	200039bc 	.word	0x200039bc

08002380 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <prvTraceNextFreeEventBufferSlot+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 800238e:	2300      	movs	r3, #0
 8002390:	e014      	b.n	80023bc <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <prvTraceNextFreeEventBufferSlot+0x40>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239c:	d304      	bcc.n	80023a8 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 800239e:	4809      	ldr	r0, [pc, #36]	; (80023c4 <prvTraceNextFreeEventBufferSlot+0x44>)
 80023a0:	f000 f984 	bl	80026ac <prvTraceError>
		return (void*)0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e009      	b.n	80023bc <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <prvTraceNextFreeEventBufferSlot+0x40>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <prvTraceNextFreeEventBufferSlot+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80023b8:	4413      	add	r3, r2
 80023ba:	3304      	adds	r3, #4
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	200039bc 	.word	0x200039bc
 80023c4:	0800bb90 	.word	0x0800bb90

080023c8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	460a      	mov	r2, r1
 80023d2:	71fb      	strb	r3, [r7, #7]
 80023d4:	4613      	mov	r3, r2
 80023d6:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80023d8:	79bb      	ldrb	r3, [r7, #6]
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d823      	bhi.n	8002426 <uiIndexOfObject+0x5e>
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <uiIndexOfObject+0x5e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <uiIndexOfObject+0x70>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	79bb      	ldrb	r3, [r7, #6]
 80023ea:	4413      	add	r3, r2
 80023ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80023f0:	79fa      	ldrb	r2, [r7, #7]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d817      	bhi.n	8002426 <uiIndexOfObject+0x5e>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <uiIndexOfObject+0x70>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	3338      	adds	r3, #56	; 0x38
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <uiIndexOfObject+0x70>)
 8002406:	6819      	ldr	r1, [r3, #0]
 8002408:	79bb      	ldrb	r3, [r7, #6]
 800240a:	440b      	add	r3, r1
 800240c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8002410:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8002416:	b29b      	uxth	r3, r3
 8002418:	fb11 f303 	smulbb	r3, r1, r3
 800241c:	b29b      	uxth	r3, r3
 800241e:	4413      	add	r3, r2
 8002420:	81fb      	strh	r3, [r7, #14]
		return index;
 8002422:	89fb      	ldrh	r3, [r7, #14]
 8002424:	e003      	b.n	800242e <uiIndexOfObject+0x66>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <uiIndexOfObject+0x74>)
 8002428:	f000 f940 	bl	80026ac <prvTraceError>
	return 0;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200039bc 	.word	0x200039bc
 800243c:	0800bbb8 	.word	0x0800bbb8

08002440 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800244a:	f3ef 8310 	mrs	r3, PRIMASK
 800244e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002450:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	2301      	movs	r3, #1
 8002456:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f383 8810 	msr	PRIMASK, r3
}
 800245e:	bf00      	nop
 8002460:	4b40      	ldr	r3, [pc, #256]	; (8002564 <prvTraceGetObjectHandle+0x124>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	4a3f      	ldr	r2, [pc, #252]	; (8002564 <prvTraceGetObjectHandle+0x124>)
 8002468:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	4a3e      	ldr	r2, [pc, #248]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 800246e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002472:	461a      	mov	r2, r3
 8002474:	4b3d      	ldr	r3, [pc, #244]	; (800256c <prvTraceGetObjectHandle+0x12c>)
 8002476:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8002478:	4b3c      	ldr	r3, [pc, #240]	; (800256c <prvTraceGetObjectHandle+0x12c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a3a      	ldr	r2, [pc, #232]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 800247e:	4413      	add	r3, r2
 8002480:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002484:	2b00      	cmp	r3, #0
 8002486:	d114      	bne.n	80024b2 <prvTraceGetObjectHandle+0x72>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8002488:	4b38      	ldr	r3, [pc, #224]	; (800256c <prvTraceGetObjectHandle+0x12c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	4935      	ldr	r1, [pc, #212]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 8002492:	3308      	adds	r3, #8
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	440b      	add	r3, r1
 8002498:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 800249a:	b2db      	uxtb	r3, r3
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <prvTraceGetObjectHandle+0x12c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 80024a4:	3201      	adds	r2, #1
 80024a6:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 80024a8:	4a2f      	ldr	r2, [pc, #188]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 80024aa:	4413      	add	r3, r2
 80024ac:	460a      	mov	r2, r1
 80024ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 80024b2:	4b2e      	ldr	r3, [pc, #184]	; (800256c <prvTraceGetObjectHandle+0x12c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a2c      	ldr	r2, [pc, #176]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 80024b8:	4413      	add	r3, r2
 80024ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80024be:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	4a29      	ldr	r2, [pc, #164]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 80024c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	4927      	ldr	r1, [pc, #156]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 80024cc:	3310      	adds	r3, #16
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	440b      	add	r3, r1
 80024d2:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d90a      	bls.n	80024ee <prvTraceGetObjectHandle+0xae>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fa40 	bl	8001960 <pszTraceGetErrorNotEnoughHandles>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f8e2 	bl	80026ac <prvTraceError>
		handle = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	77fb      	strb	r3, [r7, #31]
 80024ec:	e029      	b.n	8002542 <prvTraceGetObjectHandle+0x102>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 80024f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80024f6:	3201      	adds	r2, #1
 80024f8:	b291      	uxth	r1, r2
 80024fa:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 80024fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	4a19      	ldr	r2, [pc, #100]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 8002504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002508:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4a16      	ldr	r2, [pc, #88]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 800250e:	3308      	adds	r3, #8
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8002516:	1acb      	subs	r3, r1, r3
 8002518:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	4a12      	ldr	r2, [pc, #72]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 800251e:	3318      	adds	r3, #24
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	88db      	ldrh	r3, [r3, #6]
 8002526:	461a      	mov	r2, r3
		if (hndCount >
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	4293      	cmp	r3, r2
 800252c:	dd09      	ble.n	8002542 <prvTraceGetObjectHandle+0x102>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8002532:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8002534:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <prvTraceGetObjectHandle+0x128>)
 8002538:	3318      	adds	r3, #24
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	460a      	mov	r2, r1
 8002540:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <prvTraceGetObjectHandle+0x124>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3b01      	subs	r3, #1
 8002548:	4a06      	ldr	r2, [pc, #24]	; (8002564 <prvTraceGetObjectHandle+0x124>)
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f383 8810 	msr	PRIMASK, r3
}
 8002556:	bf00      	nop

	return handle;
 8002558:	7ffb      	ldrb	r3, [r7, #31]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20001fb8 	.word	0x20001fb8
 8002568:	20001fd0 	.word	0x20001fd0
 800256c:	200039c4 	.word	0x200039c4

08002570 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	460a      	mov	r2, r1
 800257a:	71fb      	strb	r3, [r7, #7]
 800257c:	4613      	mov	r3, r2
 800257e:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8002580:	79fa      	ldrb	r2, [r7, #7]
 8002582:	79bb      	ldrb	r3, [r7, #6]
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ff1e 	bl	80023c8 <uiIndexOfObject>
 800258c:	4603      	mov	r3, r0
 800258e:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <prvMarkObjectAsUsed+0x38>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	89fb      	ldrh	r3, [r7, #14]
 8002596:	4413      	add	r3, r2
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200039bc 	.word	0x200039bc

080025ac <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e010      	b.n	80025e0 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	441a      	add	r2, r3
 80025c4:	68f9      	ldr	r1, [r7, #12]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	440b      	add	r3, r1
 80025ca:	7812      	ldrb	r2, [r2, #0]
 80025cc:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d3ea      	bcc.n	80025be <prvStrncpy+0x12>
			break;
	}
}
 80025e8:	e000      	b.n	80025ec <prvStrncpy+0x40>
			break;
 80025ea:	bf00      	nop
}
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	603a      	str	r2, [r7, #0]
 8002602:	71fb      	strb	r3, [r7, #7]
 8002604:	460b      	mov	r3, r1
 8002606:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	if (name == (void*)0)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <prvTraceSetObjectName+0x1a>
	{
		name = "";
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <prvTraceSetObjectName+0x9c>)
 8002610:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d903      	bls.n	8002620 <prvTraceSetObjectName+0x28>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8002618:	481f      	ldr	r0, [pc, #124]	; (8002698 <prvTraceSetObjectName+0xa0>)
 800261a:	f000 f847 	bl	80026ac <prvTraceError>
		return;
 800261e:	e036      	b.n	800268e <prvTraceSetObjectName+0x96>
	}

	if (handle == 0)
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8002626:	481d      	ldr	r0, [pc, #116]	; (800269c <prvTraceSetObjectName+0xa4>)
 8002628:	f000 f840 	bl	80026ac <prvTraceError>
		return;
 800262c:	e02f      	b.n	800268e <prvTraceSetObjectName+0x96>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <prvTraceSetObjectName+0xa8>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	4413      	add	r3, r2
 8002636:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800263a:	79ba      	ldrb	r2, [r7, #6]
 800263c:	429a      	cmp	r2, r3
 800263e:	d908      	bls.n	8002652 <prvTraceSetObjectName+0x5a>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff f98c 	bl	8001960 <pszTraceGetErrorNotEnoughHandles>
 8002648:	4603      	mov	r3, r0
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f82e 	bl	80026ac <prvTraceError>
 8002650:	e01d      	b.n	800268e <prvTraceSetObjectName+0x96>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8002652:	79fa      	ldrb	r2, [r7, #7]
 8002654:	79bb      	ldrb	r3, [r7, #6]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff feb5 	bl	80023c8 <uiIndexOfObject>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <prvTraceSetObjectName+0xac>)
 8002664:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <prvTraceSetObjectName+0xb0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <prvTraceSetObjectName+0x96>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <prvTraceSetObjectName+0xa8>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <prvTraceSetObjectName+0xac>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	3388      	adds	r3, #136	; 0x88
 8002678:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <prvTraceSetObjectName+0xa8>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	4413      	add	r3, r2
 8002682:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8002686:	461a      	mov	r2, r3
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	f7ff ff8f 	bl	80025ac <prvStrncpy>
		}
	}
}
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	0800bc28 	.word	0x0800bc28
 8002698:	0800bc2c 	.word	0x0800bc2c
 800269c:	0800bc5c 	.word	0x0800bc5c
 80026a0:	200039bc 	.word	0x200039bc
 80026a4:	200039c8 	.word	0x200039c8
 80026a8:	20002060 	.word	0x20002060

080026ac <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <prvTraceError+0x50>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <prvTraceError+0x14>
	{
		xTraceDisable();
 80026bc:	f7ff f99c 	bl	80019f8 <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <prvTraceError+0x54>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d115      	bne.n	80026f4 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <prvTraceError+0x54>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != (void*)0)
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <prvTraceError+0x50>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00e      	beq.n	80026f4 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <prvTraceError+0x50>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <prvTraceError+0x54>)
 80026e0:	6811      	ldr	r1, [r2, #0]
 80026e2:	2250      	movs	r2, #80	; 0x50
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff61 	bl	80025ac <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <prvTraceError+0x50>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200039bc 	.word	0x200039bc
 8002700:	20002060 	.word	0x20002060

08002704 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 8002716:	e071      	b.n	80027fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8002718:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4413      	add	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8002724:	4b3a      	ldr	r3, [pc, #232]	; (8002810 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8002732:	2b98      	cmp	r3, #152	; 0x98
 8002734:	d929      	bls.n	800278a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8002736:	4b36      	ldr	r3, [pc, #216]	; (8002810 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8002744:	2ba7      	cmp	r3, #167	; 0xa7
 8002746:	d820      	bhi.n	800278a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8002748:	4b31      	ldr	r3, [pc, #196]	; (8002810 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8002756:	3368      	adds	r3, #104	; 0x68
 8002758:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	441a      	add	r2, r3
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	429a      	cmp	r2, r3
 8002768:	d244      	bcs.n	80027f4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 800276a:	4b29      	ldr	r3, [pc, #164]	; (8002810 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002776:	4413      	add	r3, r2
 8002778:	1d18      	adds	r0, r3, #4
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	3301      	adds	r3, #1
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	461a      	mov	r2, r3
 8002782:	2100      	movs	r1, #0
 8002784:	f008 fd68 	bl	800b258 <memset>
		{
 8002788:	e034      	b.n	80027f4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 800278a:	4b21      	ldr	r3, [pc, #132]	; (8002810 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8002798:	2b01      	cmp	r3, #1
 800279a:	d12c      	bne.n	80027f6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d20d      	bcs.n	80027c6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	2208      	movs	r2, #8
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f008 fd4a 	bl	800b258 <memset>
 80027c4:	e017      	b.n	80027f6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f603 1354 	addw	r3, r3, #2388	; 0x954
 80027ce:	2204      	movs	r2, #4
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f008 fd40 	bl	800b258 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80027e4:	4413      	add	r3, r2
 80027e6:	3304      	adds	r3, #4
 80027e8:	2204      	movs	r2, #4
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f008 fd33 	bl	800b258 <memset>
 80027f2:	e000      	b.n	80027f6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
 80027f4:	bf00      	nop
			}
		}
		i++;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3301      	adds	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	429a      	cmp	r2, r3
 8002802:	d389      	bcc.n	8002718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14>
	}
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200039bc 	.word	0x200039bc

08002814 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <prvTraceUpdateCounters+0x4c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01b      	beq.n	800285a <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <prvTraceUpdateCounters+0x4c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	3201      	adds	r2, #1
 800282a:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <prvTraceUpdateCounters+0x4c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	3201      	adds	r2, #1
 8002834:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <prvTraceUpdateCounters+0x4c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002840:	d307      	bcc.n	8002852 <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <prvTraceUpdateCounters+0x4c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2201      	movs	r2, #1
 8002848:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <prvTraceUpdateCounters+0x4c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8002852:	2001      	movs	r0, #1
 8002854:	f7ff ff56 	bl	8002704 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8002858:	e000      	b.n	800285c <prvTraceUpdateCounters+0x48>
		return;
 800285a:	bf00      	nop
#endif
}
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200039bc 	.word	0x200039bc

08002864 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 800287a:	4b58      	ldr	r3, [pc, #352]	; (80029dc <prvTraceGetDTS+0x178>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	2b00      	cmp	r3, #0
 8002882:	d116      	bne.n	80028b2 <prvTraceGetDTS+0x4e>
	{	
		if (timestampFrequency != 0)
 8002884:	4b56      	ldr	r3, [pc, #344]	; (80029e0 <prvTraceGetDTS+0x17c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <prvTraceGetDTS+0x36>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 800288c:	4b54      	ldr	r3, [pc, #336]	; (80029e0 <prvTraceGetDTS+0x17c>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b52      	ldr	r3, [pc, #328]	; (80029dc <prvTraceGetDTS+0x178>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0892      	lsrs	r2, r2, #2
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
 8002898:	e00b      	b.n	80028b2 <prvTraceGetDTS+0x4e>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 800289a:	4b52      	ldr	r3, [pc, #328]	; (80029e4 <prvTraceGetDTS+0x180>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <prvTraceGetDTS+0x184>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d005      	beq.n	80028b2 <prvTraceGetDTS+0x4e>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 80028a6:	4b51      	ldr	r3, [pc, #324]	; (80029ec <prvTraceGetDTS+0x188>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <prvTraceGetDTS+0x178>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0892      	lsrs	r2, r2, #2
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f8d6 	bl	8002a68 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <prvTraceGetDTS+0x18c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a49      	ldr	r2, [pc, #292]	; (80029f0 <prvTraceGetDTS+0x18c>)
 80028ca:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 80028cc:	4b43      	ldr	r3, [pc, #268]	; (80029dc <prvTraceGetDTS+0x178>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d043      	beq.n	800295e <prvTraceGetDTS+0xfa>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 80028d6:	4b41      	ldr	r3, [pc, #260]	; (80029dc <prvTraceGetDTS+0x178>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d91d      	bls.n	800291e <prvTraceGetDTS+0xba>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 80028e2:	4b3e      	ldr	r3, [pc, #248]	; (80029dc <prvTraceGetDTS+0x178>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e8:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <prvTraceGetDTS+0x178>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f4:	4b39      	ldr	r3, [pc, #228]	; (80029dc <prvTraceGetDTS+0x178>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	440a      	add	r2, r1
 80028fa:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 80028fc:	4b37      	ldr	r3, [pc, #220]	; (80029dc <prvTraceGetDTS+0x178>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002902:	4b36      	ldr	r3, [pc, #216]	; (80029dc <prvTraceGetDTS+0x178>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	fbb3 f0f2 	udiv	r0, r3, r2
 800290e:	fb00 f202 	mul.w	r2, r0, r2
 8002912:	1a9a      	subs	r2, r3, r2
 8002914:	4b31      	ldr	r3, [pc, #196]	; (80029dc <prvTraceGetDTS+0x178>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	440a      	add	r2, r1
 800291a:	629a      	str	r2, [r3, #40]	; 0x28
 800291c:	e007      	b.n	800292e <prvTraceGetDTS+0xca>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 800291e:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <prvTraceGetDTS+0x178>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <prvTraceGetDTS+0x178>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	440a      	add	r2, r1
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <prvTraceGetDTS+0x178>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002934:	4b29      	ldr	r3, [pc, #164]	; (80029dc <prvTraceGetDTS+0x178>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	429a      	cmp	r2, r3
 800293c:	d313      	bcc.n	8002966 <prvTraceGetDTS+0x102>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 800293e:	4b27      	ldr	r3, [pc, #156]	; (80029dc <prvTraceGetDTS+0x178>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	3201      	adds	r2, #1
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <prvTraceGetDTS+0x178>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800294e:	4b23      	ldr	r3, [pc, #140]	; (80029dc <prvTraceGetDTS+0x178>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002954:	4b21      	ldr	r3, [pc, #132]	; (80029dc <prvTraceGetDTS+0x178>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1a8a      	subs	r2, r1, r2
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
 800295c:	e003      	b.n	8002966 <prvTraceGetDTS+0x102>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 800295e:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <prvTraceGetDTS+0x178>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	429a      	cmp	r2, r3
 800296c:	d92c      	bls.n	80029c8 <prvTraceGetDTS+0x164>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 800296e:	f7ff fd07 	bl	8002380 <prvTraceNextFreeEventBufferSlot>
 8002972:	6178      	str	r0, [r7, #20]

		if (xts != (void*)0)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d026      	beq.n	80029c8 <prvTraceGetDTS+0x164>
		{
			if (param_maxDTS == 0xFFFF)
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002980:	4293      	cmp	r3, r2
 8002982:	d10b      	bne.n	800299c <prvTraceGetDTS+0x138>
			{
				xts->type = (uint8_t)XTS16;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	22a9      	movs	r2, #169	; 0xa9
 8002988:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	b29a      	uxth	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2200      	movs	r2, #0
 8002998:	705a      	strb	r2, [r3, #1]
 800299a:	e013      	b.n	80029c4 <prvTraceGetDTS+0x160>
			}
			else if (param_maxDTS == 0xFF)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	2bff      	cmp	r3, #255	; 0xff
 80029a0:	d10d      	bne.n	80029be <prvTraceGetDTS+0x15a>
			{
				xts->type = (uint8_t)XTS8;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	22a8      	movs	r2, #168	; 0xa8
 80029a6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	0e1b      	lsrs	r3, r3, #24
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	705a      	strb	r2, [r3, #1]
 80029bc:	e002      	b.n	80029c4 <prvTraceGetDTS+0x160>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 80029be:	480d      	ldr	r0, [pc, #52]	; (80029f4 <prvTraceGetDTS+0x190>)
 80029c0:	f7ff fe74 	bl	80026ac <prvTraceError>
			}
			prvTraceUpdateCounters();
 80029c4:	f7ff ff26 	bl	8002814 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	4013      	ands	r3, r2
 80029d0:	b29b      	uxth	r3, r3
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200039bc 	.word	0x200039bc
 80029e0:	20001fbc 	.word	0x20001fbc
 80029e4:	e0001004 	.word	0xe0001004
 80029e8:	20001fc8 	.word	0x20001fc8
 80029ec:	20000000 	.word	0x20000000
 80029f0:	200039cc 	.word	0x200039cc
 80029f4:	0800bc8c 	.word	0x0800bc8c

080029f8 <xTraceHardwarePortInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if (((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) || (TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M_NRF_SD)) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void xTraceHardwarePortInitCortexM(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <xTraceHardwarePortInitCortexM+0x54>)
 80029fe:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <xTraceHardwarePortInitCortexM+0x58>)
 8002a00:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8002a02:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <xTraceHardwarePortInitCortexM+0x5c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <xTraceHardwarePortInitCortexM+0x5c>)
 8002a08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <xTraceHardwarePortInitCortexM+0x5c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <xTraceHardwarePortInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8002a16:	4810      	ldr	r0, [pc, #64]	; (8002a58 <xTraceHardwarePortInitCortexM+0x60>)
 8002a18:	f7ff fe48 	bl	80026ac <prvTraceError>
			break;
 8002a1c:	e013      	b.n	8002a46 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <xTraceHardwarePortInitCortexM+0x64>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <xTraceHardwarePortInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8002a2a:	480d      	ldr	r0, [pc, #52]	; (8002a60 <xTraceHardwarePortInitCortexM+0x68>)
 8002a2c:	f7ff fe3e 	bl	80026ac <prvTraceError>
			break;
 8002a30:	e009      	b.n	8002a46 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <xTraceHardwarePortInitCortexM+0x6c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <xTraceHardwarePortInitCortexM+0x64>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <xTraceHardwarePortInitCortexM+0x64>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e0001fb0 	.word	0xe0001fb0
 8002a50:	c5acce55 	.word	0xc5acce55
 8002a54:	e000edfc 	.word	0xe000edfc
 8002a58:	0800bcf8 	.word	0x0800bcf8
 8002a5c:	e0001000 	.word	0xe0001000
 8002a60:	0800bd24 	.word	0x0800bd24
 8002a64:	e0001004 	.word	0xe0001004

08002a68 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <prvTracePortGetTimeStamp+0x80>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d028      	beq.n	8002adc <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <prvTracePortGetTimeStamp+0x84>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	601a      	str	r2, [r3, #0]
		return;
 8002a92:	e023      	b.n	8002adc <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <prvTracePortGetTimeStamp+0x88>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <prvTracePortGetTimeStamp+0x8c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	1ad2      	subs	r2, r2, r3
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <prvTracePortGetTimeStamp+0x90>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <prvTracePortGetTimeStamp+0x90>)
 8002ab8:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <prvTracePortGetTimeStamp+0x84>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <prvTracePortGetTimeStamp+0x84>)
 8002ac4:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <prvTracePortGetTimeStamp+0x84>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8002ad4:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <prvTracePortGetTimeStamp+0x8c>)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e000      	b.n	8002ade <prvTracePortGetTimeStamp+0x76>
		return;
 8002adc:	bf00      	nop
}
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	20001fac 	.word	0x20001fac
 8002aec:	20001fb0 	.word	0x20001fb0
 8002af0:	e0001004 	.word	0xe0001004
 8002af4:	200039d0 	.word	0x200039d0
 8002af8:	200039d4 	.word	0x200039d4

08002afc <prvAddTaskToStackMonitor>:
#ifndef TRC_CFG_ALLOW_TASK_DELETE
#define TRC_CFG_ALLOW_TASK_DELETE 1
#endif

void prvAddTaskToStackMonitor(void* task)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	int i;
	int foundEmptySlot = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]

	// find an empty slot
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e017      	b.n	8002b3e <prvAddTaskToStackMonitor+0x42>
	{
		if (tasksInStackMonitor[i].tcb == 0)
 8002b0e:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <prvAddTaskToStackMonitor+0x64>)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10e      	bne.n	8002b38 <prvAddTaskToStackMonitor+0x3c>
		{
			tasksInStackMonitor[i].tcb = task;
 8002b1a:	4911      	ldr	r1, [pc, #68]	; (8002b60 <prvAddTaskToStackMonitor+0x64>)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 8002b24:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <prvAddTaskToStackMonitor+0x64>)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	605a      	str	r2, [r3, #4]
			foundEmptySlot = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
			break;
 8002b36:	e005      	b.n	8002b44 <prvAddTaskToStackMonitor+0x48>
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	dde4      	ble.n	8002b0e <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d104      	bne.n	8002b54 <prvAddTaskToStackMonitor+0x58>
	{
		tasksNotIncluded++;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <prvAddTaskToStackMonitor+0x68>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <prvAddTaskToStackMonitor+0x68>)
 8002b52:	6013      	str	r3, [r2, #0]
	}
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	20002064 	.word	0x20002064
 8002b64:	200020b4 	.word	0x200020b4

08002b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	f000 fc6a 	bl	8003446 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b72:	200f      	movs	r0, #15
 8002b74:	f7fe fbf8 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b78:	f7fe fa0c 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_IncTick+0x20>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_IncTick+0x24>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <HAL_IncTick+0x24>)
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000014 	.word	0x20000014
 8002ba8:	200039d8 	.word	0x200039d8

08002bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_GetTick+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	200039d8 	.word	0x200039d8

08002bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bcc:	f7ff ffee 	bl	8002bac <HAL_GetTick>
 8002bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d005      	beq.n	8002bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_Delay+0x44>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bea:	bf00      	nop
 8002bec:	f7ff ffde 	bl	8002bac <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d8f7      	bhi.n	8002bec <HAL_Delay+0x28>
  {
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000014 	.word	0x20000014

08002c0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e031      	b.n	8002c86 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe f9da 	bl	8000fe4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_ADC_Init+0x84>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	f043 0202 	orr.w	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fa4c 	bl	80030f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f023 0303 	bic.w	r3, r3, #3
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
 8002c76:	e001      	b.n	8002c7c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	ffffeefd 	.word	0xffffeefd

08002c94 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_Start+0x1a>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e0ad      	b.n	8002e0a <HAL_ADC_Start+0x176>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d018      	beq.n	8002cf6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_ADC_Start+0x184>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a50      	ldr	r2, [pc, #320]	; (8002e1c <HAL_ADC_Start+0x188>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0c9a      	lsrs	r2, r3, #18
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002ce8:	e002      	b.n	8002cf0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f9      	bne.n	8002cea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d175      	bne.n	8002df0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d08:	4b45      	ldr	r3, [pc, #276]	; (8002e20 <HAL_ADC_Start+0x18c>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3e:	d106      	bne.n	8002d4e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	f023 0206 	bic.w	r2, r3, #6
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44
 8002d4c:	e002      	b.n	8002d54 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d64:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002d66:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <HAL_ADC_Start+0x190>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d143      	bne.n	8002e08 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	e03a      	b.n	8002e08 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <HAL_ADC_Start+0x194>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d10e      	bne.n	8002dba <HAL_ADC_Start+0x126>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002db8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_ADC_Start+0x190>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d120      	bne.n	8002e08 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <HAL_ADC_Start+0x198>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d11b      	bne.n	8002e08 <HAL_ADC_Start+0x174>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d114      	bne.n	8002e08 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	e00b      	b.n	8002e08 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	f043 0210 	orr.w	r2, r3, #16
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	431bde83 	.word	0x431bde83
 8002e20:	fffff8fe 	.word	0xfffff8fe
 8002e24:	40012300 	.word	0x40012300
 8002e28:	40012000 	.word	0x40012000
 8002e2c:	40012200 	.word	0x40012200

08002e30 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x1c>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e136      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x28a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b09      	cmp	r3, #9
 8002e76:	d93a      	bls.n	8002eee <HAL_ADC_ConfigChannel+0xa2>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e80:	d035      	beq.n	8002eee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68d9      	ldr	r1, [r3, #12]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	3b1e      	subs	r3, #30
 8002e98:	2207      	movs	r2, #7
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a8d      	ldr	r2, [pc, #564]	; (80030e4 <HAL_ADC_ConfigChannel+0x298>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68d9      	ldr	r1, [r3, #12]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	061a      	lsls	r2, r3, #24
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ec6:	e035      	b.n	8002f34 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68d9      	ldr	r1, [r3, #12]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4403      	add	r3, r0
 8002ee0:	3b1e      	subs	r3, #30
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eec:	e022      	b.n	8002f34 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6919      	ldr	r1, [r3, #16]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	2207      	movs	r2, #7
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	400a      	ands	r2, r1
 8002f10:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6919      	ldr	r1, [r3, #16]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	4618      	mov	r0, r3
 8002f24:	4603      	mov	r3, r0
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4403      	add	r3, r0
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b06      	cmp	r3, #6
 8002f3a:	d824      	bhi.n	8002f86 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b05      	subs	r3, #5
 8002f4e:	221f      	movs	r2, #31
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43da      	mvns	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	3b05      	subs	r3, #5
 8002f78:	fa00 f203 	lsl.w	r2, r0, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	635a      	str	r2, [r3, #52]	; 0x34
 8002f84:	e04c      	b.n	8003020 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d824      	bhi.n	8002fd8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3b23      	subs	r3, #35	; 0x23
 8002fa0:	221f      	movs	r2, #31
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	400a      	ands	r2, r1
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3b23      	subs	r3, #35	; 0x23
 8002fca:	fa00 f203 	lsl.w	r2, r0, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd6:	e023      	b.n	8003020 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3b41      	subs	r3, #65	; 0x41
 8002fea:	221f      	movs	r2, #31
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	4618      	mov	r0, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	3b41      	subs	r3, #65	; 0x41
 8003014:	fa00 f203 	lsl.w	r2, r0, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a30      	ldr	r2, [pc, #192]	; (80030e8 <HAL_ADC_ConfigChannel+0x29c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10a      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1f4>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003032:	d105      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003034:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4a2c      	ldr	r2, [pc, #176]	; (80030ec <HAL_ADC_ConfigChannel+0x2a0>)
 800303a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800303e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a28      	ldr	r2, [pc, #160]	; (80030e8 <HAL_ADC_ConfigChannel+0x29c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d10f      	bne.n	800306a <HAL_ADC_ConfigChannel+0x21e>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b12      	cmp	r3, #18
 8003050:	d10b      	bne.n	800306a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003052:	4b26      	ldr	r3, [pc, #152]	; (80030ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4a25      	ldr	r2, [pc, #148]	; (80030ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003058:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800305c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800305e:	4b23      	ldr	r3, [pc, #140]	; (80030ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4a22      	ldr	r2, [pc, #136]	; (80030ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003064:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003068:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <HAL_ADC_ConfigChannel+0x29c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d12b      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x280>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <HAL_ADC_ConfigChannel+0x298>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x23a>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b11      	cmp	r3, #17
 8003084:	d122      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003086:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a18      	ldr	r2, [pc, #96]	; (80030ec <HAL_ADC_ConfigChannel+0x2a0>)
 800308c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003090:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003092:	4b16      	ldr	r3, [pc, #88]	; (80030ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4a15      	ldr	r2, [pc, #84]	; (80030ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800309c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <HAL_ADC_ConfigChannel+0x298>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d111      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_ADC_ConfigChannel+0x2a4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	0c9a      	lsrs	r2, r3, #18
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030be:	e002      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f9      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	10000012 	.word	0x10000012
 80030e8:	40012000 	.word	0x40012000
 80030ec:	40012300 	.word	0x40012300
 80030f0:	20000000 	.word	0x20000000
 80030f4:	431bde83 	.word	0x431bde83

080030f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003100:	4b78      	ldr	r3, [pc, #480]	; (80032e4 <ADC_Init+0x1ec>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a77      	ldr	r2, [pc, #476]	; (80032e4 <ADC_Init+0x1ec>)
 8003106:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800310a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800310c:	4b75      	ldr	r3, [pc, #468]	; (80032e4 <ADC_Init+0x1ec>)
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4973      	ldr	r1, [pc, #460]	; (80032e4 <ADC_Init+0x1ec>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	021a      	lsls	r2, r3, #8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800314c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6899      	ldr	r1, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <ADC_Init+0x1f0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d022      	beq.n	80031d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800319a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6899      	ldr	r1, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	e00f      	b.n	80031f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0202 	bic.w	r2, r2, #2
 8003200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	005a      	lsls	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01b      	beq.n	8003258 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800323e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	3b01      	subs	r3, #1
 800324c:	035a      	lsls	r2, r3, #13
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	e007      	b.n	8003268 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003266:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	3b01      	subs	r3, #1
 8003284:	051a      	lsls	r2, r3, #20
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800329c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6899      	ldr	r1, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032aa:	025a      	lsls	r2, r3, #9
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6899      	ldr	r1, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	029a      	lsls	r2, r3, #10
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	40012300 	.word	0x40012300
 80032e8:	0f000001 	.word	0x0f000001

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <__NVIC_SetPriorityGrouping+0x40>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003316:	4313      	orrs	r3, r2
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	; (800332c <__NVIC_SetPriorityGrouping+0x40>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00
 8003330:	05fa0000 	.word	0x05fa0000

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ff4c 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800346e:	f7ff ff61 	bl	8003334 <__NVIC_GetPriorityGrouping>
 8003472:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	6978      	ldr	r0, [r7, #20]
 800347a:	f7ff ffb1 	bl	80033e0 <NVIC_EncodePriority>
 800347e:	4602      	mov	r2, r0
 8003480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff ff80 	bl	800338c <__NVIC_SetPriority>
}
 800348c:	bf00      	nop
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff ff54 	bl	8003350 <__NVIC_EnableIRQ>
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	e175      	b.n	80037bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80034d0:	2201      	movs	r2, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	f040 8164 	bne.w	80037b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d005      	beq.n	8003506 <HAL_GPIO_Init+0x56>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d130      	bne.n	8003568 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	2203      	movs	r2, #3
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800353c:	2201      	movs	r2, #1
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 0201 	and.w	r2, r3, #1
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b03      	cmp	r3, #3
 8003572:	d017      	beq.n	80035a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2203      	movs	r2, #3
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d123      	bne.n	80035f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	08da      	lsrs	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3208      	adds	r2, #8
 80035b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	220f      	movs	r2, #15
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	08da      	lsrs	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3208      	adds	r2, #8
 80035f2:	69b9      	ldr	r1, [r7, #24]
 80035f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0203 	and.w	r2, r3, #3
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80be 	beq.w	80037b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363a:	4b66      	ldr	r3, [pc, #408]	; (80037d4 <HAL_GPIO_Init+0x324>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	4a65      	ldr	r2, [pc, #404]	; (80037d4 <HAL_GPIO_Init+0x324>)
 8003640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003644:	6453      	str	r3, [r2, #68]	; 0x44
 8003646:	4b63      	ldr	r3, [pc, #396]	; (80037d4 <HAL_GPIO_Init+0x324>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003652:	4a61      	ldr	r2, [pc, #388]	; (80037d8 <HAL_GPIO_Init+0x328>)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	220f      	movs	r2, #15
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a58      	ldr	r2, [pc, #352]	; (80037dc <HAL_GPIO_Init+0x32c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d037      	beq.n	80036ee <HAL_GPIO_Init+0x23e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a57      	ldr	r2, [pc, #348]	; (80037e0 <HAL_GPIO_Init+0x330>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d031      	beq.n	80036ea <HAL_GPIO_Init+0x23a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a56      	ldr	r2, [pc, #344]	; (80037e4 <HAL_GPIO_Init+0x334>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02b      	beq.n	80036e6 <HAL_GPIO_Init+0x236>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a55      	ldr	r2, [pc, #340]	; (80037e8 <HAL_GPIO_Init+0x338>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d025      	beq.n	80036e2 <HAL_GPIO_Init+0x232>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a54      	ldr	r2, [pc, #336]	; (80037ec <HAL_GPIO_Init+0x33c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d01f      	beq.n	80036de <HAL_GPIO_Init+0x22e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a53      	ldr	r2, [pc, #332]	; (80037f0 <HAL_GPIO_Init+0x340>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d019      	beq.n	80036da <HAL_GPIO_Init+0x22a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_GPIO_Init+0x344>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_GPIO_Init+0x226>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a51      	ldr	r2, [pc, #324]	; (80037f8 <HAL_GPIO_Init+0x348>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00d      	beq.n	80036d2 <HAL_GPIO_Init+0x222>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a50      	ldr	r2, [pc, #320]	; (80037fc <HAL_GPIO_Init+0x34c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <HAL_GPIO_Init+0x21e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4f      	ldr	r2, [pc, #316]	; (8003800 <HAL_GPIO_Init+0x350>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_GPIO_Init+0x21a>
 80036c6:	2309      	movs	r3, #9
 80036c8:	e012      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036ca:	230a      	movs	r3, #10
 80036cc:	e010      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036ce:	2308      	movs	r3, #8
 80036d0:	e00e      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036d2:	2307      	movs	r3, #7
 80036d4:	e00c      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036d6:	2306      	movs	r3, #6
 80036d8:	e00a      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036da:	2305      	movs	r3, #5
 80036dc:	e008      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036de:	2304      	movs	r3, #4
 80036e0:	e006      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e004      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036ee:	2300      	movs	r3, #0
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	f002 0203 	and.w	r2, r2, #3
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	4093      	lsls	r3, r2
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003700:	4935      	ldr	r1, [pc, #212]	; (80037d8 <HAL_GPIO_Init+0x328>)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800370e:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <HAL_GPIO_Init+0x354>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003732:	4a34      	ldr	r2, [pc, #208]	; (8003804 <HAL_GPIO_Init+0x354>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003738:	4b32      	ldr	r3, [pc, #200]	; (8003804 <HAL_GPIO_Init+0x354>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800375c:	4a29      	ldr	r2, [pc, #164]	; (8003804 <HAL_GPIO_Init+0x354>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003762:	4b28      	ldr	r3, [pc, #160]	; (8003804 <HAL_GPIO_Init+0x354>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003786:	4a1f      	ldr	r2, [pc, #124]	; (8003804 <HAL_GPIO_Init+0x354>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_GPIO_Init+0x354>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <HAL_GPIO_Init+0x354>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3301      	adds	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	f67f ae86 	bls.w	80034d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40013800 	.word	0x40013800
 80037dc:	40020000 	.word	0x40020000
 80037e0:	40020400 	.word	0x40020400
 80037e4:	40020800 	.word	0x40020800
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40021400 	.word	0x40021400
 80037f4:	40021800 	.word	0x40021800
 80037f8:	40021c00 	.word	0x40021c00
 80037fc:	40022000 	.word	0x40022000
 8003800:	40022400 	.word	0x40022400
 8003804:	40013c00 	.word	0x40013c00

08003808 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	887b      	ldrh	r3, [r7, #2]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	e001      	b.n	800382a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	807b      	strh	r3, [r7, #2]
 8003844:	4613      	mov	r3, r2
 8003846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003848:	787b      	ldrb	r3, [r7, #1]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003854:	e003      	b.n	800385e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003856:	887b      	ldrh	r3, [r7, #2]
 8003858:	041a      	lsls	r2, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	619a      	str	r2, [r3, #24]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	460b      	mov	r3, r1
 8003874:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800387c:	887a      	ldrh	r2, [r7, #2]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4013      	ands	r3, r2
 8003882:	041a      	lsls	r2, r3, #16
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	43d9      	mvns	r1, r3
 8003888:	887b      	ldrh	r3, [r7, #2]
 800388a:	400b      	ands	r3, r1
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	619a      	str	r2, [r3, #24]
}
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d006      	beq.n	80038c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038b6:	4a05      	ldr	r2, [pc, #20]	; (80038cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd f9ae 	bl	8000c20 <HAL_GPIO_EXTI_Callback>
  }
}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40013c00 	.word	0x40013c00

080038d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038d2:	b08f      	sub	sp, #60	; 0x3c
 80038d4:	af0a      	add	r7, sp, #40	; 0x28
 80038d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e116      	b.n	8003b10 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7fd fcb9 	bl	8001274 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2203      	movs	r2, #3
 8003906:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f002 ff27 	bl	8006774 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	687e      	ldr	r6, [r7, #4]
 800392e:	466d      	mov	r5, sp
 8003930:	f106 0410 	add.w	r4, r6, #16
 8003934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003940:	e885 0003 	stmia.w	r5, {r0, r1}
 8003944:	1d33      	adds	r3, r6, #4
 8003946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003948:	6838      	ldr	r0, [r7, #0]
 800394a:	f002 febb 	bl	80066c4 <USB_CoreInit>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0d7      	b.n	8003b10 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f002 ff15 	bl	8006796 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]
 8003970:	e04a      	b.n	8003a08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	333d      	adds	r3, #61	; 0x3d
 8003982:	2201      	movs	r2, #1
 8003984:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003986:	7bfa      	ldrb	r2, [r7, #15]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	333c      	adds	r3, #60	; 0x3c
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800399a:	7bfa      	ldrb	r2, [r7, #15]
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	b298      	uxth	r0, r3
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3344      	adds	r3, #68	; 0x44
 80039ae:	4602      	mov	r2, r0
 80039b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	3340      	adds	r3, #64	; 0x40
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039c6:	7bfa      	ldrb	r2, [r7, #15]
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	3348      	adds	r3, #72	; 0x48
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	334c      	adds	r3, #76	; 0x4c
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039ee:	7bfa      	ldrb	r2, [r7, #15]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	3354      	adds	r3, #84	; 0x54
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	3301      	adds	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d3af      	bcc.n	8003972 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e044      	b.n	8003aa2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a18:	7bfa      	ldrb	r2, [r7, #15]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a2e:	7bfa      	ldrb	r2, [r7, #15]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a5a:	7bfa      	ldrb	r2, [r7, #15]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	73fb      	strb	r3, [r7, #15]
 8003aa2:	7bfa      	ldrb	r2, [r7, #15]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d3b5      	bcc.n	8003a18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	687e      	ldr	r6, [r7, #4]
 8003ab4:	466d      	mov	r5, sp
 8003ab6:	f106 0410 	add.w	r4, r6, #16
 8003aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ac6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003aca:	1d33      	adds	r3, r6, #4
 8003acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ace:	6838      	ldr	r0, [r7, #0]
 8003ad0:	f002 feae 	bl	8006830 <USB_DevInit>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e014      	b.n	8003b10 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d102      	bne.n	8003b04 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f80a 	bl	8003b18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 f86c 	bl	8006be6 <USB_DevDisconnect>

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_PCDEx_ActivateLPM+0x44>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	10000003 	.word	0x10000003

08003b60 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6e:	6013      	str	r3, [r2, #0]
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40007000 	.word	0x40007000

08003b80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e29b      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8087 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ba4:	4b96      	ldr	r3, [pc, #600]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d00c      	beq.n	8003bca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb0:	4b93      	ldr	r3, [pc, #588]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d112      	bne.n	8003be2 <HAL_RCC_OscConfig+0x62>
 8003bbc:	4b90      	ldr	r3, [pc, #576]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc8:	d10b      	bne.n	8003be2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bca:	4b8d      	ldr	r3, [pc, #564]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d06c      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x130>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d168      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e275      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x7a>
 8003bec:	4b84      	ldr	r3, [pc, #528]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a83      	ldr	r2, [pc, #524]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e02e      	b.n	8003c58 <HAL_RCC_OscConfig+0xd8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x9c>
 8003c02:	4b7f      	ldr	r3, [pc, #508]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7e      	ldr	r2, [pc, #504]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b7c      	ldr	r3, [pc, #496]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7b      	ldr	r2, [pc, #492]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e01d      	b.n	8003c58 <HAL_RCC_OscConfig+0xd8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCC_OscConfig+0xc0>
 8003c26:	4b76      	ldr	r3, [pc, #472]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a75      	ldr	r2, [pc, #468]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	4b73      	ldr	r3, [pc, #460]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a72      	ldr	r2, [pc, #456]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCC_OscConfig+0xd8>
 8003c40:	4b6f      	ldr	r3, [pc, #444]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a6e      	ldr	r2, [pc, #440]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	4b6c      	ldr	r3, [pc, #432]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a6b      	ldr	r2, [pc, #428]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d013      	beq.n	8003c88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fe ffa4 	bl	8002bac <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c68:	f7fe ffa0 	bl	8002bac <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e229      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7a:	4b61      	ldr	r3, [pc, #388]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0xe8>
 8003c86:	e014      	b.n	8003cb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fe ff90 	bl	8002bac <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fe ff8c 	bl	8002bac <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e215      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca2:	4b57      	ldr	r3, [pc, #348]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x110>
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d069      	beq.n	8003d92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cbe:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cca:	4b4d      	ldr	r3, [pc, #308]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d11c      	bne.n	8003d10 <HAL_RCC_OscConfig+0x190>
 8003cd6:	4b4a      	ldr	r3, [pc, #296]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d116      	bne.n	8003d10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce2:	4b47      	ldr	r3, [pc, #284]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <HAL_RCC_OscConfig+0x17a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d001      	beq.n	8003cfa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e1e9      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfa:	4b41      	ldr	r3, [pc, #260]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	493d      	ldr	r1, [pc, #244]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0e:	e040      	b.n	8003d92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d023      	beq.n	8003d60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a38      	ldr	r2, [pc, #224]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fe ff42 	bl	8002bac <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2c:	f7fe ff3e 	bl	8002bac <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e1c7      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3e:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4a:	4b2d      	ldr	r3, [pc, #180]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4929      	ldr	r1, [pc, #164]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
 8003d5e:	e018      	b.n	8003d92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d60:	4b27      	ldr	r3, [pc, #156]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a26      	ldr	r2, [pc, #152]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fe ff1e 	bl	8002bac <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d74:	f7fe ff1a 	bl	8002bac <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e1a3      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d038      	beq.n	8003e10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d019      	beq.n	8003dda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da6:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db2:	f7fe fefb 	bl	8002bac <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dba:	f7fe fef7 	bl	8002bac <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e180      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x23a>
 8003dd8:	e01a      	b.n	8003e10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dde:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <HAL_RCC_OscConfig+0x280>)
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fe fee1 	bl	8002bac <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dee:	f7fe fedd 	bl	8002bac <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d903      	bls.n	8003e04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e166      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
 8003e00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	4b92      	ldr	r3, [pc, #584]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ee      	bne.n	8003dee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80a4 	beq.w	8003f66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1e:	4b8c      	ldr	r3, [pc, #560]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10d      	bne.n	8003e46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2a:	4b89      	ldr	r3, [pc, #548]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	4a88      	ldr	r2, [pc, #544]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6413      	str	r3, [r2, #64]	; 0x40
 8003e36:	4b86      	ldr	r3, [pc, #536]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e46:	4b83      	ldr	r3, [pc, #524]	; (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d118      	bne.n	8003e84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e52:	4b80      	ldr	r3, [pc, #512]	; (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a7f      	ldr	r2, [pc, #508]	; (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe fea5 	bl	8002bac <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fe fea1 	bl	8002bac <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b64      	cmp	r3, #100	; 0x64
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e12a      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e78:	4b76      	ldr	r3, [pc, #472]	; (8004054 <HAL_RCC_OscConfig+0x4d4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCC_OscConfig+0x31a>
 8003e8c:	4b70      	ldr	r3, [pc, #448]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a6f      	ldr	r2, [pc, #444]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	e02d      	b.n	8003ef6 <HAL_RCC_OscConfig+0x376>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x33c>
 8003ea2:	4b6b      	ldr	r3, [pc, #428]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	4a6a      	ldr	r2, [pc, #424]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70
 8003eae:	4b68      	ldr	r3, [pc, #416]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a67      	ldr	r2, [pc, #412]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	f023 0304 	bic.w	r3, r3, #4
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	e01c      	b.n	8003ef6 <HAL_RCC_OscConfig+0x376>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d10c      	bne.n	8003ede <HAL_RCC_OscConfig+0x35e>
 8003ec4:	4b62      	ldr	r3, [pc, #392]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a61      	ldr	r2, [pc, #388]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	4b5f      	ldr	r3, [pc, #380]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a5e      	ldr	r2, [pc, #376]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
 8003edc:	e00b      	b.n	8003ef6 <HAL_RCC_OscConfig+0x376>
 8003ede:	4b5c      	ldr	r3, [pc, #368]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a5b      	ldr	r2, [pc, #364]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	4b59      	ldr	r3, [pc, #356]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a58      	ldr	r2, [pc, #352]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	f023 0304 	bic.w	r3, r3, #4
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d015      	beq.n	8003f2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efe:	f7fe fe55 	bl	8002bac <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fe fe51 	bl	8002bac <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0d8      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	4b4c      	ldr	r3, [pc, #304]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ee      	beq.n	8003f06 <HAL_RCC_OscConfig+0x386>
 8003f28:	e014      	b.n	8003f54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2a:	f7fe fe3f 	bl	8002bac <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f32:	f7fe fe3b 	bl	8002bac <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0c2      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	4b41      	ldr	r3, [pc, #260]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ee      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5a:	4b3d      	ldr	r3, [pc, #244]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	4a3c      	ldr	r2, [pc, #240]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80ae 	beq.w	80040cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f70:	4b37      	ldr	r3, [pc, #220]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d06d      	beq.n	8004058 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d14b      	bne.n	800401c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a31      	ldr	r2, [pc, #196]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fe fe0c 	bl	8002bac <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fe fe08 	bl	8002bac <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e091      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	4b29      	ldr	r3, [pc, #164]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	019b      	lsls	r3, r3, #6
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	491b      	ldr	r1, [pc, #108]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8003fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fe fdda 	bl	8002bac <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe fdd6 	bl	8002bac <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e05f      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x47c>
 800401a:	e057      	b.n	80040cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe fdc0 	bl	8002bac <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fe fdbc 	bl	8002bac <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e045      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	4b03      	ldr	r3, [pc, #12]	; (8004050 <HAL_RCC_OscConfig+0x4d0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x4b0>
 800404e:	e03d      	b.n	80040cc <HAL_RCC_OscConfig+0x54c>
 8004050:	40023800 	.word	0x40023800
 8004054:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004058:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <HAL_RCC_OscConfig+0x558>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d030      	beq.n	80040c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d129      	bne.n	80040c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d122      	bne.n	80040c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004088:	4013      	ands	r3, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800408e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004090:	4293      	cmp	r3, r2
 8004092:	d119      	bne.n	80040c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	3b01      	subs	r3, #1
 80040a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d10f      	bne.n	80040c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40023800 	.word	0x40023800

080040dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0d0      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f4:	4b6a      	ldr	r3, [pc, #424]	; (80042a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d910      	bls.n	8004124 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b67      	ldr	r3, [pc, #412]	; (80042a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 020f 	bic.w	r2, r3, #15
 800410a:	4965      	ldr	r1, [pc, #404]	; (80042a0 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b63      	ldr	r3, [pc, #396]	; (80042a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0b8      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800413c:	4b59      	ldr	r3, [pc, #356]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a58      	ldr	r2, [pc, #352]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004146:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004154:	4b53      	ldr	r3, [pc, #332]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a52      	ldr	r2, [pc, #328]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 800415a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800415e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4b50      	ldr	r3, [pc, #320]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	494d      	ldr	r1, [pc, #308]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d040      	beq.n	8004200 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d115      	bne.n	80041be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419e:	4b41      	ldr	r3, [pc, #260]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e073      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ae:	4b3d      	ldr	r3, [pc, #244]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e06b      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041be:	4b39      	ldr	r3, [pc, #228]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 0203 	bic.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4936      	ldr	r1, [pc, #216]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d0:	f7fe fcec 	bl	8002bac <HAL_GetTick>
 80041d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d8:	f7fe fce8 	bl	8002bac <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e053      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	4b2d      	ldr	r3, [pc, #180]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 020c 	and.w	r2, r3, #12
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d1eb      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004200:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d210      	bcs.n	8004230 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 020f 	bic.w	r2, r3, #15
 8004216:	4922      	ldr	r1, [pc, #136]	; (80042a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e032      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4916      	ldr	r1, [pc, #88]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	490e      	ldr	r1, [pc, #56]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800426e:	f000 f821 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004272:	4602      	mov	r2, r0
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	490a      	ldr	r1, [pc, #40]	; (80042a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004280:	5ccb      	ldrb	r3, [r1, r3]
 8004282:	fa22 f303 	lsr.w	r3, r2, r3
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1d0>)
 8004288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800428a:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1d4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fd f86a 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023c00 	.word	0x40023c00
 80042a4:	40023800 	.word	0x40023800
 80042a8:	0800beb4 	.word	0x0800beb4
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20000010 	.word	0x20000010

080042b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b090      	sub	sp, #64	; 0x40
 80042ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	637b      	str	r3, [r7, #52]	; 0x34
 80042c0:	2300      	movs	r3, #0
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c4:	2300      	movs	r3, #0
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042cc:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d00d      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x40>
 80042d8:	2b08      	cmp	r3, #8
 80042da:	f200 80a1 	bhi.w	8004420 <HAL_RCC_GetSysClockFreq+0x16c>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x34>
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d003      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0x3a>
 80042e6:	e09b      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e8:	4b53      	ldr	r3, [pc, #332]	; (8004438 <HAL_RCC_GetSysClockFreq+0x184>)
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ec:	e09b      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ee:	4b53      	ldr	r3, [pc, #332]	; (800443c <HAL_RCC_GetSysClockFreq+0x188>)
 80042f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042f2:	e098      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f4:	4b4f      	ldr	r3, [pc, #316]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042fe:	4b4d      	ldr	r3, [pc, #308]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d028      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430a:	4b4a      	ldr	r3, [pc, #296]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	099b      	lsrs	r3, r3, #6
 8004310:	2200      	movs	r2, #0
 8004312:	623b      	str	r3, [r7, #32]
 8004314:	627a      	str	r2, [r7, #36]	; 0x24
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800431c:	2100      	movs	r1, #0
 800431e:	4b47      	ldr	r3, [pc, #284]	; (800443c <HAL_RCC_GetSysClockFreq+0x188>)
 8004320:	fb03 f201 	mul.w	r2, r3, r1
 8004324:	2300      	movs	r3, #0
 8004326:	fb00 f303 	mul.w	r3, r0, r3
 800432a:	4413      	add	r3, r2
 800432c:	4a43      	ldr	r2, [pc, #268]	; (800443c <HAL_RCC_GetSysClockFreq+0x188>)
 800432e:	fba0 1202 	umull	r1, r2, r0, r2
 8004332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004334:	460a      	mov	r2, r1
 8004336:	62ba      	str	r2, [r7, #40]	; 0x28
 8004338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433a:	4413      	add	r3, r2
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004340:	2200      	movs	r2, #0
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	61fa      	str	r2, [r7, #28]
 8004346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800434a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800434e:	f7fb ff7f 	bl	8000250 <__aeabi_uldivmod>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4613      	mov	r3, r2
 8004358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435a:	e053      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435c:	4b35      	ldr	r3, [pc, #212]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	099b      	lsrs	r3, r3, #6
 8004362:	2200      	movs	r2, #0
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	617a      	str	r2, [r7, #20]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800436e:	f04f 0b00 	mov.w	fp, #0
 8004372:	4652      	mov	r2, sl
 8004374:	465b      	mov	r3, fp
 8004376:	f04f 0000 	mov.w	r0, #0
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	0159      	lsls	r1, r3, #5
 8004380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004384:	0150      	lsls	r0, r2, #5
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	ebb2 080a 	subs.w	r8, r2, sl
 800438e:	eb63 090b 	sbc.w	r9, r3, fp
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800439e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043a6:	ebb2 0408 	subs.w	r4, r2, r8
 80043aa:	eb63 0509 	sbc.w	r5, r3, r9
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	00eb      	lsls	r3, r5, #3
 80043b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043bc:	00e2      	lsls	r2, r4, #3
 80043be:	4614      	mov	r4, r2
 80043c0:	461d      	mov	r5, r3
 80043c2:	eb14 030a 	adds.w	r3, r4, sl
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	eb45 030b 	adc.w	r3, r5, fp
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043da:	4629      	mov	r1, r5
 80043dc:	028b      	lsls	r3, r1, #10
 80043de:	4621      	mov	r1, r4
 80043e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e4:	4621      	mov	r1, r4
 80043e6:	028a      	lsls	r2, r1, #10
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ee:	2200      	movs	r2, #0
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	60fa      	str	r2, [r7, #12]
 80043f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f8:	f7fb ff2a 	bl	8000250 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4613      	mov	r3, r2
 8004402:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	3301      	adds	r3, #1
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800441e:	e002      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCC_GetSysClockFreq+0x184>)
 8004422:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004428:	4618      	mov	r0, r3
 800442a:	3740      	adds	r7, #64	; 0x40
 800442c:	46bd      	mov	sp, r7
 800442e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800
 8004438:	00f42400 	.word	0x00f42400
 800443c:	017d7840 	.word	0x017d7840

08004440 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004444:	4b03      	ldr	r3, [pc, #12]	; (8004454 <HAL_RCC_GetHCLKFreq+0x14>)
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000000 	.word	0x20000000

08004458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800445c:	f7ff fff0 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	0a9b      	lsrs	r3, r3, #10
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4903      	ldr	r1, [pc, #12]	; (800447c <HAL_RCC_GetPCLK1Freq+0x24>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	0800bec4 	.word	0x0800bec4

08004480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004484:	f7ff ffdc 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 8004488:	4602      	mov	r2, r0
 800448a:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	0b5b      	lsrs	r3, r3, #13
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	4903      	ldr	r1, [pc, #12]	; (80044a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004496:	5ccb      	ldrb	r3, [r1, r3]
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40023800 	.word	0x40023800
 80044a4:	0800bec4 	.word	0x0800bec4

080044a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	220f      	movs	r2, #15
 80044b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0203 	and.w	r2, r3, #3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044c4:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_GetClockConfig+0x5c>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	08db      	lsrs	r3, r3, #3
 80044e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <HAL_RCC_GetClockConfig+0x60>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 020f 	and.w	r2, r3, #15
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	601a      	str	r2, [r3, #0]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800
 8004508:	40023c00 	.word	0x40023c00

0800450c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d012      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004534:	4b69      	ldr	r3, [pc, #420]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4a68      	ldr	r2, [pc, #416]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800453e:	6093      	str	r3, [r2, #8]
 8004540:	4b66      	ldr	r3, [pc, #408]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	4964      	ldr	r1, [pc, #400]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004556:	2301      	movs	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d017      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004566:	4b5d      	ldr	r3, [pc, #372]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004574:	4959      	ldr	r1, [pc, #356]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004584:	d101      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004586:	2301      	movs	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004592:	2301      	movs	r3, #1
 8004594:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d017      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045a2:	4b4e      	ldr	r3, [pc, #312]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	494a      	ldr	r1, [pc, #296]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c0:	d101      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045c2:	2301      	movs	r3, #1
 80045c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045de:	2301      	movs	r3, #1
 80045e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 808b 	beq.w	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045f0:	4b3a      	ldr	r3, [pc, #232]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	4a39      	ldr	r2, [pc, #228]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6413      	str	r3, [r2, #64]	; 0x40
 80045fc:	4b37      	ldr	r3, [pc, #220]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004608:	4b35      	ldr	r3, [pc, #212]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a34      	ldr	r2, [pc, #208]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800460e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004614:	f7fe faca 	bl	8002bac <HAL_GetTick>
 8004618:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461c:	f7fe fac6 	bl	8002bac <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	; 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e38f      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800462e:	4b2c      	ldr	r3, [pc, #176]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800463a:	4b28      	ldr	r3, [pc, #160]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004642:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d035      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	d02e      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004658:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004660:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004666:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	4a1a      	ldr	r2, [pc, #104]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004678:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800467a:	4a18      	ldr	r2, [pc, #96]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004680:	4b16      	ldr	r3, [pc, #88]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d114      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fe fa8e 	bl	8002bac <HAL_GetTick>
 8004690:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004692:	e00a      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f7fe fa8a 	bl	8002bac <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e351      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046aa:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ee      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c2:	d111      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046d2:	400b      	ands	r3, r1
 80046d4:	4901      	ldr	r1, [pc, #4]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
 80046da:	e00b      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046dc:	40023800 	.word	0x40023800
 80046e0:	40007000 	.word	0x40007000
 80046e4:	0ffffcff 	.word	0x0ffffcff
 80046e8:	4bac      	ldr	r3, [pc, #688]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	4aab      	ldr	r2, [pc, #684]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046f2:	6093      	str	r3, [r2, #8]
 80046f4:	4ba9      	ldr	r3, [pc, #676]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004700:	49a6      	ldr	r1, [pc, #664]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004702:	4313      	orrs	r3, r2
 8004704:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	d010      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004712:	4ba2      	ldr	r3, [pc, #648]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004718:	4aa0      	ldr	r2, [pc, #640]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800471a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800471e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004722:	4b9e      	ldr	r3, [pc, #632]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004724:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	499b      	ldr	r1, [pc, #620]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004740:	4b96      	ldr	r3, [pc, #600]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800474e:	4993      	ldr	r1, [pc, #588]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004762:	4b8e      	ldr	r3, [pc, #568]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004770:	498a      	ldr	r1, [pc, #552]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004784:	4b85      	ldr	r3, [pc, #532]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004792:	4982      	ldr	r1, [pc, #520]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047a6:	4b7d      	ldr	r3, [pc, #500]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4979      	ldr	r1, [pc, #484]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047c8:	4b74      	ldr	r3, [pc, #464]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f023 0203 	bic.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	4971      	ldr	r1, [pc, #452]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047ea:	4b6c      	ldr	r3, [pc, #432]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f0:	f023 020c 	bic.w	r2, r3, #12
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	4968      	ldr	r1, [pc, #416]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800480c:	4b63      	ldr	r3, [pc, #396]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	4960      	ldr	r1, [pc, #384]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800482e:	4b5b      	ldr	r3, [pc, #364]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483c:	4957      	ldr	r1, [pc, #348]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004850:	4b52      	ldr	r3, [pc, #328]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	494f      	ldr	r1, [pc, #316]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004872:	4b4a      	ldr	r3, [pc, #296]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004878:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004880:	4946      	ldr	r1, [pc, #280]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004894:	4b41      	ldr	r3, [pc, #260]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a2:	493e      	ldr	r1, [pc, #248]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048b6:	4b39      	ldr	r3, [pc, #228]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c4:	4935      	ldr	r1, [pc, #212]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048d8:	4b30      	ldr	r3, [pc, #192]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e6:	492d      	ldr	r1, [pc, #180]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d011      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048fa:	4b28      	ldr	r3, [pc, #160]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004908:	4924      	ldr	r1, [pc, #144]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004918:	d101      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800491a:	2301      	movs	r3, #1
 800491c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800492a:	2301      	movs	r3, #1
 800492c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800493a:	4b18      	ldr	r3, [pc, #96]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004940:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004948:	4914      	ldr	r1, [pc, #80]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00b      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800496c:	490b      	ldr	r1, [pc, #44]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00f      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004990:	4902      	ldr	r1, [pc, #8]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004998:	e002      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00b      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049ac:	4b8a      	ldr	r3, [pc, #552]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	4986      	ldr	r1, [pc, #536]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00b      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049d0:	4b81      	ldr	r3, [pc, #516]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e0:	497d      	ldr	r1, [pc, #500]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d006      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80d6 	beq.w	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049fc:	4b76      	ldr	r3, [pc, #472]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a75      	ldr	r2, [pc, #468]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a08:	f7fe f8d0 	bl	8002bac <HAL_GetTick>
 8004a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a10:	f7fe f8cc 	bl	8002bac <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b64      	cmp	r3, #100	; 0x64
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e195      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a22:	4b6d      	ldr	r3, [pc, #436]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d021      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d11d      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a42:	4b65      	ldr	r3, [pc, #404]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a50:	4b61      	ldr	r3, [pc, #388]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a56:	0e1b      	lsrs	r3, r3, #24
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	019a      	lsls	r2, r3, #6
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	071b      	lsls	r3, r3, #28
 8004a76:	4958      	ldr	r1, [pc, #352]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d004      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d02e      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aa8:	d129      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aaa:	4b4b      	ldr	r3, [pc, #300]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ab8:	4b47      	ldr	r3, [pc, #284]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004abe:	0f1b      	lsrs	r3, r3, #28
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	019a      	lsls	r2, r3, #6
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	061b      	lsls	r3, r3, #24
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	071b      	lsls	r3, r3, #28
 8004ade:	493e      	ldr	r1, [pc, #248]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ae6:	4b3c      	ldr	r3, [pc, #240]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aec:	f023 021f 	bic.w	r2, r3, #31
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	3b01      	subs	r3, #1
 8004af6:	4938      	ldr	r1, [pc, #224]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01d      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b0a:	4b33      	ldr	r3, [pc, #204]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b10:	0e1b      	lsrs	r3, r3, #24
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b18:	4b2f      	ldr	r3, [pc, #188]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1e:	0f1b      	lsrs	r3, r3, #28
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	019a      	lsls	r2, r3, #6
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	041b      	lsls	r3, r3, #16
 8004b32:	431a      	orrs	r2, r3
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	071b      	lsls	r3, r3, #28
 8004b3e:	4926      	ldr	r1, [pc, #152]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	019a      	lsls	r2, r3, #6
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	071b      	lsls	r3, r3, #28
 8004b6e:	491a      	ldr	r1, [pc, #104]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b76:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b82:	f7fe f813 	bl	8002bac <HAL_GetTick>
 8004b86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b88:	e008      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b8a:	f7fe f80f 	bl	8002bac <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b64      	cmp	r3, #100	; 0x64
 8004b96:	d901      	bls.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e0d8      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	f040 80ce 	bne.w	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbc:	f7fd fff6 	bl	8002bac <HAL_GetTick>
 8004bc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bc2:	e00b      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bc4:	f7fd fff2 	bl	8002bac <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d904      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e0bb      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bdc:	4b5e      	ldr	r3, [pc, #376]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be8:	d0ec      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d02e      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d12a      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c12:	4b51      	ldr	r3, [pc, #324]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c20:	4b4d      	ldr	r3, [pc, #308]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	0f1b      	lsrs	r3, r3, #28
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	019a      	lsls	r2, r3, #6
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	071b      	lsls	r3, r3, #28
 8004c46:	4944      	ldr	r1, [pc, #272]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c4e:	4b42      	ldr	r3, [pc, #264]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	493d      	ldr	r1, [pc, #244]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d022      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c7c:	d11d      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c7e:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	0e1b      	lsrs	r3, r3, #24
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c8c:	4b32      	ldr	r3, [pc, #200]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	0f1b      	lsrs	r3, r3, #28
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	019a      	lsls	r2, r3, #6
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	041b      	lsls	r3, r3, #16
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	071b      	lsls	r3, r3, #28
 8004cb2:	4929      	ldr	r1, [pc, #164]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d028      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	0e1b      	lsrs	r3, r3, #24
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cd4:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	0c1b      	lsrs	r3, r3, #16
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	019a      	lsls	r2, r3, #6
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	431a      	orrs	r2, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	061b      	lsls	r3, r3, #24
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	071b      	lsls	r3, r3, #28
 8004cfa:	4917      	ldr	r1, [pc, #92]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d02:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4911      	ldr	r1, [pc, #68]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d24:	f7fd ff42 	bl	8002bac <HAL_GetTick>
 8004d28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d2c:	f7fd ff3e 	bl	8002bac <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e007      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d4a:	d1ef      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800

08004d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e049      	b.n	8004e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc f99c 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f000 fc66 	bl	800566c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d001      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e054      	b.n	8004ece <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <HAL_TIM_Base_Start_IT+0xd0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d022      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4e:	d01d      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1f      	ldr	r2, [pc, #124]	; (8004ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1e      	ldr	r2, [pc, #120]	; (8004eec <HAL_TIM_Base_Start_IT+0xe0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ef0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1b      	ldr	r2, [pc, #108]	; (8004ef4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d115      	bne.n	8004eb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_TIM_Base_Start_IT+0xec>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b06      	cmp	r3, #6
 8004e9c:	d015      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0xbe>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea4:	d011      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	e008      	b.n	8004eca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e000      	b.n	8004ecc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40010400 	.word	0x40010400
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40001800 	.word	0x40001800
 8004ef8:	00010007 	.word	0x00010007

08004efc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e049      	b.n	8004fa2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f841 	bl	8004faa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f000 fb96 	bl	800566c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
	...

08004fc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <HAL_TIM_PWM_Start+0x24>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	e03c      	b.n	800505e <HAL_TIM_PWM_Start+0x9e>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d109      	bne.n	8004ffe <HAL_TIM_PWM_Start+0x3e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	bf14      	ite	ne
 8004ff6:	2301      	movne	r3, #1
 8004ff8:	2300      	moveq	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	e02f      	b.n	800505e <HAL_TIM_PWM_Start+0x9e>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d109      	bne.n	8005018 <HAL_TIM_PWM_Start+0x58>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	bf14      	ite	ne
 8005010:	2301      	movne	r3, #1
 8005012:	2300      	moveq	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	e022      	b.n	800505e <HAL_TIM_PWM_Start+0x9e>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d109      	bne.n	8005032 <HAL_TIM_PWM_Start+0x72>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b01      	cmp	r3, #1
 8005028:	bf14      	ite	ne
 800502a:	2301      	movne	r3, #1
 800502c:	2300      	moveq	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	e015      	b.n	800505e <HAL_TIM_PWM_Start+0x9e>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b10      	cmp	r3, #16
 8005036:	d109      	bne.n	800504c <HAL_TIM_PWM_Start+0x8c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	e008      	b.n	800505e <HAL_TIM_PWM_Start+0x9e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e092      	b.n	800518c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <HAL_TIM_PWM_Start+0xb6>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005074:	e023      	b.n	80050be <HAL_TIM_PWM_Start+0xfe>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d104      	bne.n	8005086 <HAL_TIM_PWM_Start+0xc6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005084:	e01b      	b.n	80050be <HAL_TIM_PWM_Start+0xfe>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d104      	bne.n	8005096 <HAL_TIM_PWM_Start+0xd6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005094:	e013      	b.n	80050be <HAL_TIM_PWM_Start+0xfe>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b0c      	cmp	r3, #12
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_PWM_Start+0xe6>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a4:	e00b      	b.n	80050be <HAL_TIM_PWM_Start+0xfe>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_PWM_Start+0xf6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b4:	e003      	b.n	80050be <HAL_TIM_PWM_Start+0xfe>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2201      	movs	r2, #1
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fdce 	bl	8005c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a30      	ldr	r2, [pc, #192]	; (8005194 <HAL_TIM_PWM_Start+0x1d4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIM_PWM_Start+0x120>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a2f      	ldr	r2, [pc, #188]	; (8005198 <HAL_TIM_PWM_Start+0x1d8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d101      	bne.n	80050e4 <HAL_TIM_PWM_Start+0x124>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <HAL_TIM_PWM_Start+0x126>
 80050e4:	2300      	movs	r3, #0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a25      	ldr	r2, [pc, #148]	; (8005194 <HAL_TIM_PWM_Start+0x1d4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d022      	beq.n	800514a <HAL_TIM_PWM_Start+0x18a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510c:	d01d      	beq.n	800514a <HAL_TIM_PWM_Start+0x18a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a22      	ldr	r2, [pc, #136]	; (800519c <HAL_TIM_PWM_Start+0x1dc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d018      	beq.n	800514a <HAL_TIM_PWM_Start+0x18a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a20      	ldr	r2, [pc, #128]	; (80051a0 <HAL_TIM_PWM_Start+0x1e0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_TIM_PWM_Start+0x18a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <HAL_TIM_PWM_Start+0x1e4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <HAL_TIM_PWM_Start+0x18a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a19      	ldr	r2, [pc, #100]	; (8005198 <HAL_TIM_PWM_Start+0x1d8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_TIM_PWM_Start+0x18a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1b      	ldr	r2, [pc, #108]	; (80051a8 <HAL_TIM_PWM_Start+0x1e8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_TIM_PWM_Start+0x18a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a19      	ldr	r2, [pc, #100]	; (80051ac <HAL_TIM_PWM_Start+0x1ec>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d115      	bne.n	8005176 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <HAL_TIM_PWM_Start+0x1f0>)
 8005152:	4013      	ands	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b06      	cmp	r3, #6
 800515a:	d015      	beq.n	8005188 <HAL_TIM_PWM_Start+0x1c8>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005162:	d011      	beq.n	8005188 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0201 	orr.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005174:	e008      	b.n	8005188 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e000      	b.n	800518a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005188:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40010000 	.word	0x40010000
 8005198:	40010400 	.word	0x40010400
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40001800 	.word	0x40001800
 80051b0:	00010007 	.word	0x00010007

080051b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d122      	bne.n	8005210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d11b      	bne.n	8005210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0202 	mvn.w	r2, #2
 80051e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa1a 	bl	8005630 <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa0c 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fa1d 	bl	8005644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b04      	cmp	r3, #4
 800521c:	d122      	bne.n	8005264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b04      	cmp	r3, #4
 800522a:	d11b      	bne.n	8005264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0204 	mvn.w	r2, #4
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9f0 	bl	8005630 <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9e2 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9f3 	bl	8005644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b08      	cmp	r3, #8
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b08      	cmp	r3, #8
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0208 	mvn.w	r2, #8
 8005288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2204      	movs	r2, #4
 800528e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f9c6 	bl	8005630 <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f9b8 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f9c9 	bl	8005644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b10      	cmp	r3, #16
 80052c4:	d122      	bne.n	800530c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d11b      	bne.n	800530c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0210 	mvn.w	r2, #16
 80052dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2208      	movs	r2, #8
 80052e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f99c 	bl	8005630 <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f98e 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f99f 	bl	8005644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	d10e      	bne.n	8005338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d107      	bne.n	8005338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0201 	mvn.w	r2, #1
 8005330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fb fe16 	bl	8000f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b80      	cmp	r3, #128	; 0x80
 8005344:	d10e      	bne.n	8005364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005350:	2b80      	cmp	r3, #128	; 0x80
 8005352:	d107      	bne.n	8005364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800535c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fcb1 	bl	8005cc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005372:	d10e      	bne.n	8005392 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	2b80      	cmp	r3, #128	; 0x80
 8005380:	d107      	bne.n	8005392 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800538a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fca4 	bl	8005cda <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d10e      	bne.n	80053be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d107      	bne.n	80053be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f94d 	bl	8005658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d10e      	bne.n	80053ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d107      	bne.n	80053ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f06f 0220 	mvn.w	r2, #32
 80053e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fc64 	bl	8005cb2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800540e:	2302      	movs	r3, #2
 8005410:	e0ff      	b.n	8005612 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b14      	cmp	r3, #20
 800541e:	f200 80f0 	bhi.w	8005602 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005422:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	0800547d 	.word	0x0800547d
 800542c:	08005603 	.word	0x08005603
 8005430:	08005603 	.word	0x08005603
 8005434:	08005603 	.word	0x08005603
 8005438:	080054bd 	.word	0x080054bd
 800543c:	08005603 	.word	0x08005603
 8005440:	08005603 	.word	0x08005603
 8005444:	08005603 	.word	0x08005603
 8005448:	080054ff 	.word	0x080054ff
 800544c:	08005603 	.word	0x08005603
 8005450:	08005603 	.word	0x08005603
 8005454:	08005603 	.word	0x08005603
 8005458:	0800553f 	.word	0x0800553f
 800545c:	08005603 	.word	0x08005603
 8005460:	08005603 	.word	0x08005603
 8005464:	08005603 	.word	0x08005603
 8005468:	08005581 	.word	0x08005581
 800546c:	08005603 	.word	0x08005603
 8005470:	08005603 	.word	0x08005603
 8005474:	08005603 	.word	0x08005603
 8005478:	080055c1 	.word	0x080055c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 f992 	bl	80057ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0208 	orr.w	r2, r2, #8
 8005496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0204 	bic.w	r2, r2, #4
 80054a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6999      	ldr	r1, [r3, #24]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	619a      	str	r2, [r3, #24]
      break;
 80054ba:	e0a5      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 f9e4 	bl	8005890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6999      	ldr	r1, [r3, #24]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	619a      	str	r2, [r3, #24]
      break;
 80054fc:	e084      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fa3b 	bl	8005980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0208 	orr.w	r2, r2, #8
 8005518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0204 	bic.w	r2, r2, #4
 8005528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69d9      	ldr	r1, [r3, #28]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	61da      	str	r2, [r3, #28]
      break;
 800553c:	e064      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fa91 	bl	8005a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69d9      	ldr	r1, [r3, #28]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	021a      	lsls	r2, r3, #8
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	61da      	str	r2, [r3, #28]
      break;
 800557e:	e043      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fac8 	bl	8005b1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0204 	bic.w	r2, r2, #4
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055be:	e023      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fafa 	bl	8005bc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005600:	e002      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
      break;
 8005606:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop

0800561c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a40      	ldr	r2, [pc, #256]	; (8005780 <TIM_Base_SetConfig+0x114>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d013      	beq.n	80056ac <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568a:	d00f      	beq.n	80056ac <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a3d      	ldr	r2, [pc, #244]	; (8005784 <TIM_Base_SetConfig+0x118>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00b      	beq.n	80056ac <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3c      	ldr	r2, [pc, #240]	; (8005788 <TIM_Base_SetConfig+0x11c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d007      	beq.n	80056ac <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3b      	ldr	r2, [pc, #236]	; (800578c <TIM_Base_SetConfig+0x120>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3a      	ldr	r2, [pc, #232]	; (8005790 <TIM_Base_SetConfig+0x124>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d108      	bne.n	80056be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a2f      	ldr	r2, [pc, #188]	; (8005780 <TIM_Base_SetConfig+0x114>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d02b      	beq.n	800571e <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d027      	beq.n	800571e <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2c      	ldr	r2, [pc, #176]	; (8005784 <TIM_Base_SetConfig+0x118>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d023      	beq.n	800571e <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2b      	ldr	r2, [pc, #172]	; (8005788 <TIM_Base_SetConfig+0x11c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01f      	beq.n	800571e <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2a      	ldr	r2, [pc, #168]	; (800578c <TIM_Base_SetConfig+0x120>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01b      	beq.n	800571e <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a29      	ldr	r2, [pc, #164]	; (8005790 <TIM_Base_SetConfig+0x124>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d017      	beq.n	800571e <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a28      	ldr	r2, [pc, #160]	; (8005794 <TIM_Base_SetConfig+0x128>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d013      	beq.n	800571e <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a27      	ldr	r2, [pc, #156]	; (8005798 <TIM_Base_SetConfig+0x12c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00f      	beq.n	800571e <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a26      	ldr	r2, [pc, #152]	; (800579c <TIM_Base_SetConfig+0x130>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00b      	beq.n	800571e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a25      	ldr	r2, [pc, #148]	; (80057a0 <TIM_Base_SetConfig+0x134>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d007      	beq.n	800571e <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a24      	ldr	r2, [pc, #144]	; (80057a4 <TIM_Base_SetConfig+0x138>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d003      	beq.n	800571e <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a23      	ldr	r2, [pc, #140]	; (80057a8 <TIM_Base_SetConfig+0x13c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d108      	bne.n	8005730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a0a      	ldr	r2, [pc, #40]	; (8005780 <TIM_Base_SetConfig+0x114>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_Base_SetConfig+0xf8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a0c      	ldr	r2, [pc, #48]	; (8005790 <TIM_Base_SetConfig+0x124>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d103      	bne.n	800576c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	615a      	str	r2, [r3, #20]
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40010000 	.word	0x40010000
 8005784:	40000400 	.word	0x40000400
 8005788:	40000800 	.word	0x40000800
 800578c:	40000c00 	.word	0x40000c00
 8005790:	40010400 	.word	0x40010400
 8005794:	40014000 	.word	0x40014000
 8005798:	40014400 	.word	0x40014400
 800579c:	40014800 	.word	0x40014800
 80057a0:	40001800 	.word	0x40001800
 80057a4:	40001c00 	.word	0x40001c00
 80057a8:	40002000 	.word	0x40002000

080057ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0201 	bic.w	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4b2b      	ldr	r3, [pc, #172]	; (8005884 <TIM_OC1_SetConfig+0xd8>)
 80057d8:	4013      	ands	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f023 0302 	bic.w	r3, r3, #2
 80057f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a21      	ldr	r2, [pc, #132]	; (8005888 <TIM_OC1_SetConfig+0xdc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_OC1_SetConfig+0x64>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a20      	ldr	r2, [pc, #128]	; (800588c <TIM_OC1_SetConfig+0xe0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d10c      	bne.n	800582a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f023 0308 	bic.w	r3, r3, #8
 8005816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f023 0304 	bic.w	r3, r3, #4
 8005828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a16      	ldr	r2, [pc, #88]	; (8005888 <TIM_OC1_SetConfig+0xdc>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d003      	beq.n	800583a <TIM_OC1_SetConfig+0x8e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a15      	ldr	r2, [pc, #84]	; (800588c <TIM_OC1_SetConfig+0xe0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d111      	bne.n	800585e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	621a      	str	r2, [r3, #32]
}
 8005878:	bf00      	nop
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	fffeff8f 	.word	0xfffeff8f
 8005888:	40010000 	.word	0x40010000
 800588c:	40010400 	.word	0x40010400

08005890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f023 0210 	bic.w	r2, r3, #16
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4b2e      	ldr	r3, [pc, #184]	; (8005974 <TIM_OC2_SetConfig+0xe4>)
 80058bc:	4013      	ands	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0320 	bic.w	r3, r3, #32
 80058da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a23      	ldr	r2, [pc, #140]	; (8005978 <TIM_OC2_SetConfig+0xe8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC2_SetConfig+0x68>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a22      	ldr	r2, [pc, #136]	; (800597c <TIM_OC2_SetConfig+0xec>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d10d      	bne.n	8005914 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a18      	ldr	r2, [pc, #96]	; (8005978 <TIM_OC2_SetConfig+0xe8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC2_SetConfig+0x94>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a17      	ldr	r2, [pc, #92]	; (800597c <TIM_OC2_SetConfig+0xec>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d113      	bne.n	800594c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800592a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	feff8fff 	.word	0xfeff8fff
 8005978:	40010000 	.word	0x40010000
 800597c:	40010400 	.word	0x40010400

08005980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4b2d      	ldr	r3, [pc, #180]	; (8005a60 <TIM_OC3_SetConfig+0xe0>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a22      	ldr	r2, [pc, #136]	; (8005a64 <TIM_OC3_SetConfig+0xe4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_OC3_SetConfig+0x66>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a21      	ldr	r2, [pc, #132]	; (8005a68 <TIM_OC3_SetConfig+0xe8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d10d      	bne.n	8005a02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a17      	ldr	r2, [pc, #92]	; (8005a64 <TIM_OC3_SetConfig+0xe4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_OC3_SetConfig+0x92>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <TIM_OC3_SetConfig+0xe8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d113      	bne.n	8005a3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	621a      	str	r2, [r3, #32]
}
 8005a54:	bf00      	nop
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	fffeff8f 	.word	0xfffeff8f
 8005a64:	40010000 	.word	0x40010000
 8005a68:	40010400 	.word	0x40010400

08005a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4b1e      	ldr	r3, [pc, #120]	; (8005b10 <TIM_OC4_SetConfig+0xa4>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	031b      	lsls	r3, r3, #12
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <TIM_OC4_SetConfig+0xa8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC4_SetConfig+0x68>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a12      	ldr	r2, [pc, #72]	; (8005b18 <TIM_OC4_SetConfig+0xac>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d109      	bne.n	8005ae8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	feff8fff 	.word	0xfeff8fff
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40010400 	.word	0x40010400

08005b1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4b1b      	ldr	r3, [pc, #108]	; (8005bb4 <TIM_OC5_SetConfig+0x98>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a12      	ldr	r2, [pc, #72]	; (8005bb8 <TIM_OC5_SetConfig+0x9c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_OC5_SetConfig+0x5e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <TIM_OC5_SetConfig+0xa0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d109      	bne.n	8005b8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	621a      	str	r2, [r3, #32]
}
 8005ba8:	bf00      	nop
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	fffeff8f 	.word	0xfffeff8f
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40010400 	.word	0x40010400

08005bc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4b1c      	ldr	r3, [pc, #112]	; (8005c5c <TIM_OC6_SetConfig+0x9c>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	051b      	lsls	r3, r3, #20
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a13      	ldr	r2, [pc, #76]	; (8005c60 <TIM_OC6_SetConfig+0xa0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_OC6_SetConfig+0x60>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <TIM_OC6_SetConfig+0xa4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d109      	bne.n	8005c34 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	029b      	lsls	r3, r3, #10
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	feff8fff 	.word	0xfeff8fff
 8005c60:	40010000 	.word	0x40010000
 8005c64:	40010400 	.word	0x40010400

08005c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 031f 	and.w	r3, r3, #31
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1a      	ldr	r2, [r3, #32]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	401a      	ands	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a1a      	ldr	r2, [r3, #32]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 031f 	and.w	r3, r3, #31
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e040      	b.n	8005d82 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d106      	bne.n	8005d16 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fb fa4f 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2224      	movs	r2, #36	; 0x24
 8005d1a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0201 	bic.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f8af 	bl	8005e90 <UART_SetConfig>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e022      	b.n	8005d82 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fb07 	bl	8006358 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0201 	orr.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fb8e 	bl	800649c <UART_CheckIdleState>
 8005d80:	4603      	mov	r3, r0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b08a      	sub	sp, #40	; 0x28
 8005d8e:	af02      	add	r7, sp, #8
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	603b      	str	r3, [r7, #0]
 8005d96:	4613      	mov	r3, r2
 8005d98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d171      	bne.n	8005e86 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <HAL_UART_Transmit+0x24>
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e06a      	b.n	8005e88 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2221      	movs	r2, #33	; 0x21
 8005dbe:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dc0:	f7fc fef4 	bl	8002bac <HAL_GetTick>
 8005dc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	88fa      	ldrh	r2, [r7, #6]
 8005dca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	88fa      	ldrh	r2, [r7, #6]
 8005dd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dde:	d108      	bne.n	8005df2 <HAL_UART_Transmit+0x68>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e003      	b.n	8005dfa <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dfa:	e02c      	b.n	8005e56 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2200      	movs	r2, #0
 8005e04:	2180      	movs	r1, #128	; 0x80
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fb95 	bl	8006536 <UART_WaitOnFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e038      	b.n	8005e88 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10b      	bne.n	8005e34 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	3302      	adds	r3, #2
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	e007      	b.n	8005e44 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	781a      	ldrb	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	3301      	adds	r3, #1
 8005e42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1cc      	bne.n	8005dfc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2140      	movs	r1, #64	; 0x40
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 fb62 	bl	8006536 <UART_WaitOnFlagUntilTimeout>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e005      	b.n	8005e88 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e000      	b.n	8005e88 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005e86:	2302      	movs	r3, #2
  }
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	4ba6      	ldr	r3, [pc, #664]	; (8006154 <UART_SetConfig+0x2c4>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	6979      	ldr	r1, [r7, #20]
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a94      	ldr	r2, [pc, #592]	; (8006158 <UART_SetConfig+0x2c8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d120      	bne.n	8005f4e <UART_SetConfig+0xbe>
 8005f0c:	4b93      	ldr	r3, [pc, #588]	; (800615c <UART_SetConfig+0x2cc>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d816      	bhi.n	8005f48 <UART_SetConfig+0xb8>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <UART_SetConfig+0x90>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f31 	.word	0x08005f31
 8005f24:	08005f3d 	.word	0x08005f3d
 8005f28:	08005f37 	.word	0x08005f37
 8005f2c:	08005f43 	.word	0x08005f43
 8005f30:	2301      	movs	r3, #1
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e150      	b.n	80061d8 <UART_SetConfig+0x348>
 8005f36:	2302      	movs	r3, #2
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e14d      	b.n	80061d8 <UART_SetConfig+0x348>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e14a      	b.n	80061d8 <UART_SetConfig+0x348>
 8005f42:	2308      	movs	r3, #8
 8005f44:	77fb      	strb	r3, [r7, #31]
 8005f46:	e147      	b.n	80061d8 <UART_SetConfig+0x348>
 8005f48:	2310      	movs	r3, #16
 8005f4a:	77fb      	strb	r3, [r7, #31]
 8005f4c:	e144      	b.n	80061d8 <UART_SetConfig+0x348>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a83      	ldr	r2, [pc, #524]	; (8006160 <UART_SetConfig+0x2d0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d132      	bne.n	8005fbe <UART_SetConfig+0x12e>
 8005f58:	4b80      	ldr	r3, [pc, #512]	; (800615c <UART_SetConfig+0x2cc>)
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	2b0c      	cmp	r3, #12
 8005f64:	d828      	bhi.n	8005fb8 <UART_SetConfig+0x128>
 8005f66:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <UART_SetConfig+0xdc>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005fa1 	.word	0x08005fa1
 8005f70:	08005fb9 	.word	0x08005fb9
 8005f74:	08005fb9 	.word	0x08005fb9
 8005f78:	08005fb9 	.word	0x08005fb9
 8005f7c:	08005fad 	.word	0x08005fad
 8005f80:	08005fb9 	.word	0x08005fb9
 8005f84:	08005fb9 	.word	0x08005fb9
 8005f88:	08005fb9 	.word	0x08005fb9
 8005f8c:	08005fa7 	.word	0x08005fa7
 8005f90:	08005fb9 	.word	0x08005fb9
 8005f94:	08005fb9 	.word	0x08005fb9
 8005f98:	08005fb9 	.word	0x08005fb9
 8005f9c:	08005fb3 	.word	0x08005fb3
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	e118      	b.n	80061d8 <UART_SetConfig+0x348>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	77fb      	strb	r3, [r7, #31]
 8005faa:	e115      	b.n	80061d8 <UART_SetConfig+0x348>
 8005fac:	2304      	movs	r3, #4
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e112      	b.n	80061d8 <UART_SetConfig+0x348>
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e10f      	b.n	80061d8 <UART_SetConfig+0x348>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e10c      	b.n	80061d8 <UART_SetConfig+0x348>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a68      	ldr	r2, [pc, #416]	; (8006164 <UART_SetConfig+0x2d4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d120      	bne.n	800600a <UART_SetConfig+0x17a>
 8005fc8:	4b64      	ldr	r3, [pc, #400]	; (800615c <UART_SetConfig+0x2cc>)
 8005fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fd2:	2b30      	cmp	r3, #48	; 0x30
 8005fd4:	d013      	beq.n	8005ffe <UART_SetConfig+0x16e>
 8005fd6:	2b30      	cmp	r3, #48	; 0x30
 8005fd8:	d814      	bhi.n	8006004 <UART_SetConfig+0x174>
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d009      	beq.n	8005ff2 <UART_SetConfig+0x162>
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d810      	bhi.n	8006004 <UART_SetConfig+0x174>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <UART_SetConfig+0x15c>
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d006      	beq.n	8005ff8 <UART_SetConfig+0x168>
 8005fea:	e00b      	b.n	8006004 <UART_SetConfig+0x174>
 8005fec:	2300      	movs	r3, #0
 8005fee:	77fb      	strb	r3, [r7, #31]
 8005ff0:	e0f2      	b.n	80061d8 <UART_SetConfig+0x348>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	77fb      	strb	r3, [r7, #31]
 8005ff6:	e0ef      	b.n	80061d8 <UART_SetConfig+0x348>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e0ec      	b.n	80061d8 <UART_SetConfig+0x348>
 8005ffe:	2308      	movs	r3, #8
 8006000:	77fb      	strb	r3, [r7, #31]
 8006002:	e0e9      	b.n	80061d8 <UART_SetConfig+0x348>
 8006004:	2310      	movs	r3, #16
 8006006:	77fb      	strb	r3, [r7, #31]
 8006008:	e0e6      	b.n	80061d8 <UART_SetConfig+0x348>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a56      	ldr	r2, [pc, #344]	; (8006168 <UART_SetConfig+0x2d8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d120      	bne.n	8006056 <UART_SetConfig+0x1c6>
 8006014:	4b51      	ldr	r3, [pc, #324]	; (800615c <UART_SetConfig+0x2cc>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800601e:	2bc0      	cmp	r3, #192	; 0xc0
 8006020:	d013      	beq.n	800604a <UART_SetConfig+0x1ba>
 8006022:	2bc0      	cmp	r3, #192	; 0xc0
 8006024:	d814      	bhi.n	8006050 <UART_SetConfig+0x1c0>
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d009      	beq.n	800603e <UART_SetConfig+0x1ae>
 800602a:	2b80      	cmp	r3, #128	; 0x80
 800602c:	d810      	bhi.n	8006050 <UART_SetConfig+0x1c0>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <UART_SetConfig+0x1a8>
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d006      	beq.n	8006044 <UART_SetConfig+0x1b4>
 8006036:	e00b      	b.n	8006050 <UART_SetConfig+0x1c0>
 8006038:	2300      	movs	r3, #0
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e0cc      	b.n	80061d8 <UART_SetConfig+0x348>
 800603e:	2302      	movs	r3, #2
 8006040:	77fb      	strb	r3, [r7, #31]
 8006042:	e0c9      	b.n	80061d8 <UART_SetConfig+0x348>
 8006044:	2304      	movs	r3, #4
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e0c6      	b.n	80061d8 <UART_SetConfig+0x348>
 800604a:	2308      	movs	r3, #8
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e0c3      	b.n	80061d8 <UART_SetConfig+0x348>
 8006050:	2310      	movs	r3, #16
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e0c0      	b.n	80061d8 <UART_SetConfig+0x348>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a44      	ldr	r2, [pc, #272]	; (800616c <UART_SetConfig+0x2dc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d125      	bne.n	80060ac <UART_SetConfig+0x21c>
 8006060:	4b3e      	ldr	r3, [pc, #248]	; (800615c <UART_SetConfig+0x2cc>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606e:	d017      	beq.n	80060a0 <UART_SetConfig+0x210>
 8006070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006074:	d817      	bhi.n	80060a6 <UART_SetConfig+0x216>
 8006076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607a:	d00b      	beq.n	8006094 <UART_SetConfig+0x204>
 800607c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006080:	d811      	bhi.n	80060a6 <UART_SetConfig+0x216>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <UART_SetConfig+0x1fe>
 8006086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608a:	d006      	beq.n	800609a <UART_SetConfig+0x20a>
 800608c:	e00b      	b.n	80060a6 <UART_SetConfig+0x216>
 800608e:	2300      	movs	r3, #0
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e0a1      	b.n	80061d8 <UART_SetConfig+0x348>
 8006094:	2302      	movs	r3, #2
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e09e      	b.n	80061d8 <UART_SetConfig+0x348>
 800609a:	2304      	movs	r3, #4
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e09b      	b.n	80061d8 <UART_SetConfig+0x348>
 80060a0:	2308      	movs	r3, #8
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e098      	b.n	80061d8 <UART_SetConfig+0x348>
 80060a6:	2310      	movs	r3, #16
 80060a8:	77fb      	strb	r3, [r7, #31]
 80060aa:	e095      	b.n	80061d8 <UART_SetConfig+0x348>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a2f      	ldr	r2, [pc, #188]	; (8006170 <UART_SetConfig+0x2e0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d125      	bne.n	8006102 <UART_SetConfig+0x272>
 80060b6:	4b29      	ldr	r3, [pc, #164]	; (800615c <UART_SetConfig+0x2cc>)
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060c4:	d017      	beq.n	80060f6 <UART_SetConfig+0x266>
 80060c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ca:	d817      	bhi.n	80060fc <UART_SetConfig+0x26c>
 80060cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d0:	d00b      	beq.n	80060ea <UART_SetConfig+0x25a>
 80060d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d6:	d811      	bhi.n	80060fc <UART_SetConfig+0x26c>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <UART_SetConfig+0x254>
 80060dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e0:	d006      	beq.n	80060f0 <UART_SetConfig+0x260>
 80060e2:	e00b      	b.n	80060fc <UART_SetConfig+0x26c>
 80060e4:	2301      	movs	r3, #1
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e076      	b.n	80061d8 <UART_SetConfig+0x348>
 80060ea:	2302      	movs	r3, #2
 80060ec:	77fb      	strb	r3, [r7, #31]
 80060ee:	e073      	b.n	80061d8 <UART_SetConfig+0x348>
 80060f0:	2304      	movs	r3, #4
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e070      	b.n	80061d8 <UART_SetConfig+0x348>
 80060f6:	2308      	movs	r3, #8
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e06d      	b.n	80061d8 <UART_SetConfig+0x348>
 80060fc:	2310      	movs	r3, #16
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e06a      	b.n	80061d8 <UART_SetConfig+0x348>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1b      	ldr	r2, [pc, #108]	; (8006174 <UART_SetConfig+0x2e4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d138      	bne.n	800617e <UART_SetConfig+0x2ee>
 800610c:	4b13      	ldr	r3, [pc, #76]	; (800615c <UART_SetConfig+0x2cc>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800611a:	d017      	beq.n	800614c <UART_SetConfig+0x2bc>
 800611c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006120:	d82a      	bhi.n	8006178 <UART_SetConfig+0x2e8>
 8006122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006126:	d00b      	beq.n	8006140 <UART_SetConfig+0x2b0>
 8006128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800612c:	d824      	bhi.n	8006178 <UART_SetConfig+0x2e8>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <UART_SetConfig+0x2aa>
 8006132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006136:	d006      	beq.n	8006146 <UART_SetConfig+0x2b6>
 8006138:	e01e      	b.n	8006178 <UART_SetConfig+0x2e8>
 800613a:	2300      	movs	r3, #0
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e04b      	b.n	80061d8 <UART_SetConfig+0x348>
 8006140:	2302      	movs	r3, #2
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e048      	b.n	80061d8 <UART_SetConfig+0x348>
 8006146:	2304      	movs	r3, #4
 8006148:	77fb      	strb	r3, [r7, #31]
 800614a:	e045      	b.n	80061d8 <UART_SetConfig+0x348>
 800614c:	2308      	movs	r3, #8
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e042      	b.n	80061d8 <UART_SetConfig+0x348>
 8006152:	bf00      	nop
 8006154:	efff69f3 	.word	0xefff69f3
 8006158:	40011000 	.word	0x40011000
 800615c:	40023800 	.word	0x40023800
 8006160:	40004400 	.word	0x40004400
 8006164:	40004800 	.word	0x40004800
 8006168:	40004c00 	.word	0x40004c00
 800616c:	40005000 	.word	0x40005000
 8006170:	40011400 	.word	0x40011400
 8006174:	40007800 	.word	0x40007800
 8006178:	2310      	movs	r3, #16
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	e02c      	b.n	80061d8 <UART_SetConfig+0x348>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a72      	ldr	r2, [pc, #456]	; (800634c <UART_SetConfig+0x4bc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d125      	bne.n	80061d4 <UART_SetConfig+0x344>
 8006188:	4b71      	ldr	r3, [pc, #452]	; (8006350 <UART_SetConfig+0x4c0>)
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006192:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006196:	d017      	beq.n	80061c8 <UART_SetConfig+0x338>
 8006198:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800619c:	d817      	bhi.n	80061ce <UART_SetConfig+0x33e>
 800619e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a2:	d00b      	beq.n	80061bc <UART_SetConfig+0x32c>
 80061a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a8:	d811      	bhi.n	80061ce <UART_SetConfig+0x33e>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <UART_SetConfig+0x326>
 80061ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061b2:	d006      	beq.n	80061c2 <UART_SetConfig+0x332>
 80061b4:	e00b      	b.n	80061ce <UART_SetConfig+0x33e>
 80061b6:	2300      	movs	r3, #0
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e00d      	b.n	80061d8 <UART_SetConfig+0x348>
 80061bc:	2302      	movs	r3, #2
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e00a      	b.n	80061d8 <UART_SetConfig+0x348>
 80061c2:	2304      	movs	r3, #4
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e007      	b.n	80061d8 <UART_SetConfig+0x348>
 80061c8:	2308      	movs	r3, #8
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e004      	b.n	80061d8 <UART_SetConfig+0x348>
 80061ce:	2310      	movs	r3, #16
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e001      	b.n	80061d8 <UART_SetConfig+0x348>
 80061d4:	2310      	movs	r3, #16
 80061d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e0:	d15b      	bne.n	800629a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80061e2:	7ffb      	ldrb	r3, [r7, #31]
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d828      	bhi.n	800623a <UART_SetConfig+0x3aa>
 80061e8:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <UART_SetConfig+0x360>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006215 	.word	0x08006215
 80061f4:	0800621d 	.word	0x0800621d
 80061f8:	08006225 	.word	0x08006225
 80061fc:	0800623b 	.word	0x0800623b
 8006200:	0800622b 	.word	0x0800622b
 8006204:	0800623b 	.word	0x0800623b
 8006208:	0800623b 	.word	0x0800623b
 800620c:	0800623b 	.word	0x0800623b
 8006210:	08006233 	.word	0x08006233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006214:	f7fe f920 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8006218:	61b8      	str	r0, [r7, #24]
        break;
 800621a:	e013      	b.n	8006244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800621c:	f7fe f930 	bl	8004480 <HAL_RCC_GetPCLK2Freq>
 8006220:	61b8      	str	r0, [r7, #24]
        break;
 8006222:	e00f      	b.n	8006244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006224:	4b4b      	ldr	r3, [pc, #300]	; (8006354 <UART_SetConfig+0x4c4>)
 8006226:	61bb      	str	r3, [r7, #24]
        break;
 8006228:	e00c      	b.n	8006244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800622a:	f7fe f843 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800622e:	61b8      	str	r0, [r7, #24]
        break;
 8006230:	e008      	b.n	8006244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006236:	61bb      	str	r3, [r7, #24]
        break;
 8006238:	e004      	b.n	8006244 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	77bb      	strb	r3, [r7, #30]
        break;
 8006242:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d074      	beq.n	8006334 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	005a      	lsls	r2, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	441a      	add	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	fbb2 f3f3 	udiv	r3, r2, r3
 800625e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b0f      	cmp	r3, #15
 8006264:	d916      	bls.n	8006294 <UART_SetConfig+0x404>
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800626c:	d212      	bcs.n	8006294 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f023 030f 	bic.w	r3, r3, #15
 8006276:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	b29b      	uxth	r3, r3
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	b29a      	uxth	r2, r3
 8006284:	89fb      	ldrh	r3, [r7, #14]
 8006286:	4313      	orrs	r3, r2
 8006288:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	89fa      	ldrh	r2, [r7, #14]
 8006290:	60da      	str	r2, [r3, #12]
 8006292:	e04f      	b.n	8006334 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	77bb      	strb	r3, [r7, #30]
 8006298:	e04c      	b.n	8006334 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800629a:	7ffb      	ldrb	r3, [r7, #31]
 800629c:	2b08      	cmp	r3, #8
 800629e:	d828      	bhi.n	80062f2 <UART_SetConfig+0x462>
 80062a0:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <UART_SetConfig+0x418>)
 80062a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a6:	bf00      	nop
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	080062d5 	.word	0x080062d5
 80062b0:	080062dd 	.word	0x080062dd
 80062b4:	080062f3 	.word	0x080062f3
 80062b8:	080062e3 	.word	0x080062e3
 80062bc:	080062f3 	.word	0x080062f3
 80062c0:	080062f3 	.word	0x080062f3
 80062c4:	080062f3 	.word	0x080062f3
 80062c8:	080062eb 	.word	0x080062eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062cc:	f7fe f8c4 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 80062d0:	61b8      	str	r0, [r7, #24]
        break;
 80062d2:	e013      	b.n	80062fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d4:	f7fe f8d4 	bl	8004480 <HAL_RCC_GetPCLK2Freq>
 80062d8:	61b8      	str	r0, [r7, #24]
        break;
 80062da:	e00f      	b.n	80062fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062dc:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <UART_SetConfig+0x4c4>)
 80062de:	61bb      	str	r3, [r7, #24]
        break;
 80062e0:	e00c      	b.n	80062fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062e2:	f7fd ffe7 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 80062e6:	61b8      	str	r0, [r7, #24]
        break;
 80062e8:	e008      	b.n	80062fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ee:	61bb      	str	r3, [r7, #24]
        break;
 80062f0:	e004      	b.n	80062fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	77bb      	strb	r3, [r7, #30]
        break;
 80062fa:	bf00      	nop
    }

    if (pclk != 0U)
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d018      	beq.n	8006334 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	085a      	lsrs	r2, r3, #1
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	441a      	add	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	fbb2 f3f3 	udiv	r3, r2, r3
 8006314:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b0f      	cmp	r3, #15
 800631a:	d909      	bls.n	8006330 <UART_SetConfig+0x4a0>
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006322:	d205      	bcs.n	8006330 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	b29a      	uxth	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60da      	str	r2, [r3, #12]
 800632e:	e001      	b.n	8006334 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006340:	7fbb      	ldrb	r3, [r7, #30]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40007c00 	.word	0x40007c00
 8006350:	40023800 	.word	0x40023800
 8006354:	00f42400 	.word	0x00f42400

08006358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	f003 0310 	and.w	r3, r3, #16
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01a      	beq.n	800646e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006456:	d10a      	bne.n	800646e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064ac:	f7fc fb7e 	bl	8002bac <HAL_GetTick>
 80064b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d10e      	bne.n	80064de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f831 	bl	8006536 <UART_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e027      	b.n	800652e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d10e      	bne.n	800650a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f81b 	bl	8006536 <UART_WaitOnFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e011      	b.n	800652e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2220      	movs	r2, #32
 8006514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b09c      	sub	sp, #112	; 0x70
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	4613      	mov	r3, r2
 8006544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006546:	e0a7      	b.n	8006698 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	f000 80a3 	beq.w	8006698 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006552:	f7fc fb2b 	bl	8002bac <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800655e:	429a      	cmp	r2, r3
 8006560:	d302      	bcc.n	8006568 <UART_WaitOnFlagUntilTimeout+0x32>
 8006562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006564:	2b00      	cmp	r3, #0
 8006566:	d13f      	bne.n	80065e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006578:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800657c:	667b      	str	r3, [r7, #100]	; 0x64
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006588:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800658c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e6      	bne.n	8006568 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	663b      	str	r3, [r7, #96]	; 0x60
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80065bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e5      	bne.n	800659a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e068      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d050      	beq.n	8006698 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006604:	d148      	bne.n	8006698 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800660e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006624:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800662e:	637b      	str	r3, [r7, #52]	; 0x34
 8006630:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e6      	bne.n	8006610 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	613b      	str	r3, [r7, #16]
   return(result);
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	66bb      	str	r3, [r7, #104]	; 0x68
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3308      	adds	r3, #8
 8006660:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006662:	623a      	str	r2, [r7, #32]
 8006664:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	69f9      	ldr	r1, [r7, #28]
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e5      	bne.n	8006642 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e010      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69da      	ldr	r2, [r3, #28]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	4013      	ands	r3, r2
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bf0c      	ite	eq
 80066a8:	2301      	moveq	r3, #1
 80066aa:	2300      	movne	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	f43f af48 	beq.w	8006548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3770      	adds	r7, #112	; 0x70
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066c4:	b084      	sub	sp, #16
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	f107 001c 	add.w	r0, r7, #28
 80066d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d120      	bne.n	800671e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	4b20      	ldr	r3, [pc, #128]	; (8006770 <USB_CoreInit+0xac>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d105      	bne.n	8006712 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa96 	bl	8006c44 <USB_CoreReset>
 8006718:	4603      	mov	r3, r0
 800671a:	73fb      	strb	r3, [r7, #15]
 800671c:	e010      	b.n	8006740 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa8a 	bl	8006c44 <USB_CoreReset>
 8006730:	4603      	mov	r3, r0
 8006732:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	2b01      	cmp	r3, #1
 8006744:	d10b      	bne.n	800675e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f043 0206 	orr.w	r2, r3, #6
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f043 0220 	orr.w	r2, r3, #32
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800676a:	b004      	add	sp, #16
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	ffbdffbf 	.word	0xffbdffbf

08006774 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f023 0201 	bic.w	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	460b      	mov	r3, r1
 80067a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d115      	bne.n	80067e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067c4:	2001      	movs	r0, #1
 80067c6:	f7fc f9fd 	bl	8002bc4 <HAL_Delay>
      ms++;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3301      	adds	r3, #1
 80067ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fa29 	bl	8006c28 <USB_GetMode>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d01e      	beq.n	800681a <USB_SetCurrentMode+0x84>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b31      	cmp	r3, #49	; 0x31
 80067e0:	d9f0      	bls.n	80067c4 <USB_SetCurrentMode+0x2e>
 80067e2:	e01a      	b.n	800681a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d115      	bne.n	8006816 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067f6:	2001      	movs	r0, #1
 80067f8:	f7fc f9e4 	bl	8002bc4 <HAL_Delay>
      ms++;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa10 	bl	8006c28 <USB_GetMode>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <USB_SetCurrentMode+0x84>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b31      	cmp	r3, #49	; 0x31
 8006812:	d9f0      	bls.n	80067f6 <USB_SetCurrentMode+0x60>
 8006814:	e001      	b.n	800681a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e005      	b.n	8006826 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b32      	cmp	r3, #50	; 0x32
 800681e:	d101      	bne.n	8006824 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006830:	b084      	sub	sp, #16
 8006832:	b580      	push	{r7, lr}
 8006834:	b086      	sub	sp, #24
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800683e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800684a:	2300      	movs	r3, #0
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	e009      	b.n	8006864 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3340      	adds	r3, #64	; 0x40
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	2200      	movs	r2, #0
 800685c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	3301      	adds	r3, #1
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b0e      	cmp	r3, #14
 8006868:	d9f2      	bls.n	8006850 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800686a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d11c      	bne.n	80068aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800687e:	f043 0302 	orr.w	r3, r3, #2
 8006882:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	e005      	b.n	80068b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068bc:	461a      	mov	r2, r3
 80068be:	2300      	movs	r3, #0
 80068c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c8:	4619      	mov	r1, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d0:	461a      	mov	r2, r3
 80068d2:	680b      	ldr	r3, [r1, #0]
 80068d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d10c      	bne.n	80068f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d104      	bne.n	80068ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068e2:	2100      	movs	r1, #0
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f965 	bl	8006bb4 <USB_SetDevSpeed>
 80068ea:	e008      	b.n	80068fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068ec:	2101      	movs	r1, #1
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f960 	bl	8006bb4 <USB_SetDevSpeed>
 80068f4:	e003      	b.n	80068fe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068f6:	2103      	movs	r1, #3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f95b 	bl	8006bb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068fe:	2110      	movs	r1, #16
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f8f3 	bl	8006aec <USB_FlushTxFifo>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f91f 	bl	8006b54 <USB_FlushRxFifo>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006926:	461a      	mov	r2, r3
 8006928:	2300      	movs	r3, #0
 800692a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006932:	461a      	mov	r2, r3
 8006934:	2300      	movs	r3, #0
 8006936:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693e:	461a      	mov	r2, r3
 8006940:	2300      	movs	r3, #0
 8006942:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006944:	2300      	movs	r3, #0
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	e043      	b.n	80069d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800695c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006960:	d118      	bne.n	8006994 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006974:	461a      	mov	r2, r3
 8006976:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	e013      	b.n	80069a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698a:	461a      	mov	r2, r3
 800698c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	e008      	b.n	80069a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a0:	461a      	mov	r2, r3
 80069a2:	2300      	movs	r3, #0
 80069a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b2:	461a      	mov	r2, r3
 80069b4:	2300      	movs	r3, #0
 80069b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	461a      	mov	r2, r3
 80069c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	3301      	adds	r3, #1
 80069d0:	613b      	str	r3, [r7, #16]
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d3b7      	bcc.n	800694a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069da:	2300      	movs	r3, #0
 80069dc:	613b      	str	r3, [r7, #16]
 80069de:	e043      	b.n	8006a68 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069f6:	d118      	bne.n	8006a2a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	e013      	b.n	8006a3c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a20:	461a      	mov	r2, r3
 8006a22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	e008      	b.n	8006a3c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a36:	461a      	mov	r2, r3
 8006a38:	2300      	movs	r3, #0
 8006a3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	461a      	mov	r2, r3
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3301      	adds	r3, #1
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d3b7      	bcc.n	80069e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d105      	bne.n	8006aa4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	f043 0210 	orr.w	r2, r3, #16
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699a      	ldr	r2, [r3, #24]
 8006aa8:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <USB_DevInit+0x2b4>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	f043 0208 	orr.w	r2, r3, #8
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d105      	bne.n	8006ad4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699a      	ldr	r2, [r3, #24]
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <USB_DevInit+0x2b8>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ae0:	b004      	add	sp, #16
 8006ae2:	4770      	bx	lr
 8006ae4:	803c3800 	.word	0x803c3800
 8006ae8:	40000004 	.word	0x40000004

08006aec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3301      	adds	r3, #1
 8006afe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4a13      	ldr	r2, [pc, #76]	; (8006b50 <USB_FlushTxFifo+0x64>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d901      	bls.n	8006b0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e01b      	b.n	8006b44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	daf2      	bge.n	8006afa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	019b      	lsls	r3, r3, #6
 8006b1c:	f043 0220 	orr.w	r2, r3, #32
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3301      	adds	r3, #1
 8006b28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a08      	ldr	r2, [pc, #32]	; (8006b50 <USB_FlushTxFifo+0x64>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d901      	bls.n	8006b36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e006      	b.n	8006b44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d0f0      	beq.n	8006b24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	00030d40 	.word	0x00030d40

08006b54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a11      	ldr	r2, [pc, #68]	; (8006bb0 <USB_FlushRxFifo+0x5c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e018      	b.n	8006ba4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	daf2      	bge.n	8006b60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2210      	movs	r2, #16
 8006b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4a08      	ldr	r2, [pc, #32]	; (8006bb0 <USB_FlushRxFifo+0x5c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d901      	bls.n	8006b96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e006      	b.n	8006ba4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0310 	and.w	r3, r3, #16
 8006b9e:	2b10      	cmp	r3, #16
 8006ba0:	d0f0      	beq.n	8006b84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	00030d40 	.word	0x00030d40

08006bb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	68f9      	ldr	r1, [r7, #12]
 8006bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b085      	sub	sp, #20
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c00:	f023 0303 	bic.w	r3, r3, #3
 8006c04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c14:	f043 0302 	orr.w	r3, r3, #2
 8006c18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	f003 0301 	and.w	r3, r3, #1
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4a13      	ldr	r2, [pc, #76]	; (8006ca8 <USB_CoreReset+0x64>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d901      	bls.n	8006c62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e01b      	b.n	8006c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	daf2      	bge.n	8006c50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f043 0201 	orr.w	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a09      	ldr	r2, [pc, #36]	; (8006ca8 <USB_CoreReset+0x64>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d901      	bls.n	8006c8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e006      	b.n	8006c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d0f0      	beq.n	8006c7a <USB_CoreReset+0x36>

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	00030d40 	.word	0x00030d40

08006cac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006cb0:	bf00      	nop
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
	...

08006cbc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cc2:	f3ef 8305 	mrs	r3, IPSR
 8006cc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10f      	bne.n	8006cee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cce:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd2:	607b      	str	r3, [r7, #4]
  return(result);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d105      	bne.n	8006ce6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cda:	f3ef 8311 	mrs	r3, BASEPRI
 8006cde:	603b      	str	r3, [r7, #0]
  return(result);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <osKernelInitialize+0x3a>
 8006ce6:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <osKernelInitialize+0x64>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d103      	bne.n	8006cf6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006cee:	f06f 0305 	mvn.w	r3, #5
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e00c      	b.n	8006d10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006cf6:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <osKernelInitialize+0x64>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d105      	bne.n	8006d0a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006cfe:	4b08      	ldr	r3, [pc, #32]	; (8006d20 <osKernelInitialize+0x64>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	e002      	b.n	8006d10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006d10:	68fb      	ldr	r3, [r7, #12]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	200039dc 	.word	0x200039dc

08006d24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d2a:	f3ef 8305 	mrs	r3, IPSR
 8006d2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10f      	bne.n	8006d56 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d36:	f3ef 8310 	mrs	r3, PRIMASK
 8006d3a:	607b      	str	r3, [r7, #4]
  return(result);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d105      	bne.n	8006d4e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d42:	f3ef 8311 	mrs	r3, BASEPRI
 8006d46:	603b      	str	r3, [r7, #0]
  return(result);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <osKernelStart+0x3a>
 8006d4e:	4b0f      	ldr	r3, [pc, #60]	; (8006d8c <osKernelStart+0x68>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d103      	bne.n	8006d5e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006d56:	f06f 0305 	mvn.w	r3, #5
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e010      	b.n	8006d80 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <osKernelStart+0x68>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d109      	bne.n	8006d7a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d66:	f7ff ffa1 	bl	8006cac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d6a:	4b08      	ldr	r3, [pc, #32]	; (8006d8c <osKernelStart+0x68>)
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d70:	f002 fac8 	bl	8009304 <vTaskStartScheduler>
      stat = osOK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e002      	b.n	8006d80 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006d80:	68fb      	ldr	r3, [r7, #12]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	200039dc 	.word	0x200039dc

08006d90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b090      	sub	sp, #64	; 0x40
 8006d94:	af04      	add	r7, sp, #16
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da0:	f3ef 8305 	mrs	r3, IPSR
 8006da4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006da6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 808f 	bne.w	8006ecc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dae:	f3ef 8310 	mrs	r3, PRIMASK
 8006db2:	61bb      	str	r3, [r7, #24]
  return(result);
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d105      	bne.n	8006dc6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dba:	f3ef 8311 	mrs	r3, BASEPRI
 8006dbe:	617b      	str	r3, [r7, #20]
  return(result);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <osThreadNew+0x3e>
 8006dc6:	4b44      	ldr	r3, [pc, #272]	; (8006ed8 <osThreadNew+0x148>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d07e      	beq.n	8006ecc <osThreadNew+0x13c>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d07b      	beq.n	8006ecc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006dd8:	2318      	movs	r3, #24
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006de0:	f04f 33ff 	mov.w	r3, #4294967295
 8006de4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d045      	beq.n	8006e78 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <osThreadNew+0x6a>
        name = attr->name;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <osThreadNew+0x90>
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	2b38      	cmp	r3, #56	; 0x38
 8006e12:	d805      	bhi.n	8006e20 <osThreadNew+0x90>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <osThreadNew+0x94>
        return (NULL);
 8006e20:	2300      	movs	r3, #0
 8006e22:	e054      	b.n	8006ece <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	089b      	lsrs	r3, r3, #2
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00e      	beq.n	8006e5a <osThreadNew+0xca>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	2bbf      	cmp	r3, #191	; 0xbf
 8006e42:	d90a      	bls.n	8006e5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d006      	beq.n	8006e5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <osThreadNew+0xca>
        mem = 1;
 8006e54:	2301      	movs	r3, #1
 8006e56:	623b      	str	r3, [r7, #32]
 8006e58:	e010      	b.n	8006e7c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10c      	bne.n	8006e7c <osThreadNew+0xec>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d108      	bne.n	8006e7c <osThreadNew+0xec>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d104      	bne.n	8006e7c <osThreadNew+0xec>
          mem = 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	623b      	str	r3, [r7, #32]
 8006e76:	e001      	b.n	8006e7c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d110      	bne.n	8006ea4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e8a:	9202      	str	r2, [sp, #8]
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f001 ff85 	bl	8008da8 <xTaskCreateStatic>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	e013      	b.n	8006ecc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d110      	bne.n	8006ecc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	f107 0310 	add.w	r3, r7, #16
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f001 ffd6 	bl	8008e6e <xTaskCreate>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d001      	beq.n	8006ecc <osThreadNew+0x13c>
          hTask = NULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ecc:	693b      	ldr	r3, [r7, #16]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3730      	adds	r7, #48	; 0x30
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	200039dc 	.word	0x200039dc

08006edc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ee4:	f3ef 8305 	mrs	r3, IPSR
 8006ee8:	613b      	str	r3, [r7, #16]
  return(result);
 8006eea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10f      	bne.n	8006f10 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ef4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d105      	bne.n	8006f08 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006efc:	f3ef 8311 	mrs	r3, BASEPRI
 8006f00:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d007      	beq.n	8006f18 <osDelay+0x3c>
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <osDelay+0x58>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d103      	bne.n	8006f18 <osDelay+0x3c>
    stat = osErrorISR;
 8006f10:	f06f 0305 	mvn.w	r3, #5
 8006f14:	617b      	str	r3, [r7, #20]
 8006f16:	e007      	b.n	8006f28 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f002 f980 	bl	8009228 <vTaskDelay>
    }
  }

  return (stat);
 8006f28:	697b      	ldr	r3, [r7, #20]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	200039dc 	.word	0x200039dc

08006f38 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b088      	sub	sp, #32
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f44:	f3ef 8305 	mrs	r3, IPSR
 8006f48:	617b      	str	r3, [r7, #20]
  return(result);
 8006f4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d13d      	bne.n	8006fcc <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f50:	f3ef 8310 	mrs	r3, PRIMASK
 8006f54:	613b      	str	r3, [r7, #16]
  return(result);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d105      	bne.n	8006f68 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f60:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <osEventFlagsNew+0x38>
 8006f68:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <osEventFlagsNew+0xa0>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d02d      	beq.n	8006fcc <osEventFlagsNew+0x94>
    mem = -1;
 8006f70:	f04f 33ff 	mov.w	r3, #4294967295
 8006f74:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d015      	beq.n	8006fa8 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d006      	beq.n	8006f92 <osEventFlagsNew+0x5a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b1f      	cmp	r3, #31
 8006f8a:	d902      	bls.n	8006f92 <osEventFlagsNew+0x5a>
        mem = 1;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	61bb      	str	r3, [r7, #24]
 8006f90:	e00c      	b.n	8006fac <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d108      	bne.n	8006fac <osEventFlagsNew+0x74>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d104      	bne.n	8006fac <osEventFlagsNew+0x74>
          mem = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	e001      	b.n	8006fac <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d106      	bne.n	8006fc0 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fa7e 	bl	80074b8 <xEventGroupCreateStatic>
 8006fbc:	61f8      	str	r0, [r7, #28]
 8006fbe:	e005      	b.n	8006fcc <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8006fc6:	f000 fab2 	bl	800752e <xEventGroupCreate>
 8006fca:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006fcc:	69fb      	ldr	r3, [r7, #28]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200039dc 	.word	0x200039dc

08006fdc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d004      	beq.n	8006ffa <osEventFlagsSet+0x1e>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006ffa:	f06f 0303 	mvn.w	r3, #3
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	e03a      	b.n	8007078 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007002:	f3ef 8305 	mrs	r3, IPSR
 8007006:	617b      	str	r3, [r7, #20]
  return(result);
 8007008:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10f      	bne.n	800702e <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800700e:	f3ef 8310 	mrs	r3, PRIMASK
 8007012:	613b      	str	r3, [r7, #16]
  return(result);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d105      	bne.n	8007026 <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800701a:	f3ef 8311 	mrs	r3, BASEPRI
 800701e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d021      	beq.n	800706a <osEventFlagsSet+0x8e>
 8007026:	4b17      	ldr	r3, [pc, #92]	; (8007084 <osEventFlagsSet+0xa8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b02      	cmp	r3, #2
 800702c:	d11d      	bne.n	800706a <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800702e:	2300      	movs	r3, #0
 8007030:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007032:	f107 0308 	add.w	r3, r7, #8
 8007036:	461a      	mov	r2, r3
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	69b8      	ldr	r0, [r7, #24]
 800703c:	f000 fc26 	bl	800788c <xEventGroupSetBitsFromISR>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d103      	bne.n	800704e <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8007046:	f06f 0302 	mvn.w	r3, #2
 800704a:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800704c:	e013      	b.n	8007076 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00e      	beq.n	8007076 <osEventFlagsSet+0x9a>
 8007058:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <osEventFlagsSet+0xac>)
 800705a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007068:	e005      	b.n	8007076 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	69b8      	ldr	r0, [r7, #24]
 800706e:	f000 fb4f 	bl	8007710 <xEventGroupSetBits>
 8007072:	61f8      	str	r0, [r7, #28]
 8007074:	e000      	b.n	8007078 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007076:	bf00      	nop
  }

  return (rflags);
 8007078:	69fb      	ldr	r3, [r7, #28]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	200039dc 	.word	0x200039dc
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b08e      	sub	sp, #56	; 0x38
 8007090:	af02      	add	r7, sp, #8
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <osEventFlagsWait+0x22>
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80070ae:	f06f 0303 	mvn.w	r3, #3
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
 80070b4:	e059      	b.n	800716a <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070b6:	f3ef 8305 	mrs	r3, IPSR
 80070ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80070bc:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10f      	bne.n	80070e2 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070c2:	f3ef 8310 	mrs	r3, PRIMASK
 80070c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070ce:	f3ef 8311 	mrs	r3, BASEPRI
 80070d2:	617b      	str	r3, [r7, #20]
  return(result);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <osEventFlagsWait+0x5e>
 80070da:	4b26      	ldr	r3, [pc, #152]	; (8007174 <osEventFlagsWait+0xe8>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d103      	bne.n	80070ea <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 80070e2:	f06f 0305 	mvn.w	r3, #5
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
 80070e8:	e03f      	b.n	800716a <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 80070f4:	2301      	movs	r3, #1
 80070f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f8:	e001      	b.n	80070fe <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8007108:	2300      	movs	r3, #0
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28
 800710c:	e001      	b.n	8007112 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 800710e:	2301      	movs	r3, #1
 8007110:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	6a38      	ldr	r0, [r7, #32]
 800711e:	f000 fa21 	bl	8007564 <xEventGroupWaitBits>
 8007122:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00e      	beq.n	800714c <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	429a      	cmp	r2, r3
 8007134:	d019      	beq.n	800716a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 800713c:	f06f 0301 	mvn.w	r3, #1
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
 8007142:	e012      	b.n	800716a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007144:	f06f 0302 	mvn.w	r3, #2
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
 800714a:	e00e      	b.n	800716a <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	4013      	ands	r3, r2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 800715c:	f06f 0301 	mvn.w	r3, #1
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
 8007162:	e002      	b.n	800716a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007164:	f06f 0302 	mvn.w	r3, #2
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800716c:	4618      	mov	r0, r3
 800716e:	3730      	adds	r7, #48	; 0x30
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	200039dc 	.word	0x200039dc

08007178 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007178:	b580      	push	{r7, lr}
 800717a:	b08c      	sub	sp, #48	; 0x30
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007184:	2300      	movs	r3, #0
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007188:	f3ef 8305 	mrs	r3, IPSR
 800718c:	61bb      	str	r3, [r7, #24]
  return(result);
 800718e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007190:	2b00      	cmp	r3, #0
 8007192:	d16f      	bne.n	8007274 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007194:	f3ef 8310 	mrs	r3, PRIMASK
 8007198:	617b      	str	r3, [r7, #20]
  return(result);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d105      	bne.n	80071ac <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071a0:	f3ef 8311 	mrs	r3, BASEPRI
 80071a4:	613b      	str	r3, [r7, #16]
  return(result);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <osMessageQueueNew+0x3c>
 80071ac:	4b34      	ldr	r3, [pc, #208]	; (8007280 <osMessageQueueNew+0x108>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d05f      	beq.n	8007274 <osMessageQueueNew+0xfc>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d05c      	beq.n	8007274 <osMessageQueueNew+0xfc>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d059      	beq.n	8007274 <osMessageQueueNew+0xfc>
    mem = -1;
 80071c0:	f04f 33ff 	mov.w	r3, #4294967295
 80071c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d029      	beq.n	8007220 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d012      	beq.n	80071fa <osMessageQueueNew+0x82>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	2b4f      	cmp	r3, #79	; 0x4f
 80071da:	d90e      	bls.n	80071fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	695a      	ldr	r2, [r3, #20]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	fb01 f303 	mul.w	r3, r1, r3
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d302      	bcc.n	80071fa <osMessageQueueNew+0x82>
        mem = 1;
 80071f4:	2301      	movs	r3, #1
 80071f6:	623b      	str	r3, [r7, #32]
 80071f8:	e014      	b.n	8007224 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d110      	bne.n	8007224 <osMessageQueueNew+0xac>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10c      	bne.n	8007224 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800720e:	2b00      	cmp	r3, #0
 8007210:	d108      	bne.n	8007224 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <osMessageQueueNew+0xac>
          mem = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	623b      	str	r3, [r7, #32]
 800721e:	e001      	b.n	8007224 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d10b      	bne.n	8007242 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691a      	ldr	r2, [r3, #16]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	2100      	movs	r1, #0
 8007234:	9100      	str	r1, [sp, #0]
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 fc59 	bl	8007af0 <xQueueGenericCreateStatic>
 800723e:	6278      	str	r0, [r7, #36]	; 0x24
 8007240:	e008      	b.n	8007254 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d105      	bne.n	8007254 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007248:	2200      	movs	r2, #0
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fcf3 	bl	8007c38 <xQueueGenericCreate>
 8007252:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <osMessageQueueNew+0xf0>
        name = attr->name;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	e001      	b.n	800726c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007268:	2300      	movs	r3, #0
 800726a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800726c:	69f9      	ldr	r1, [r7, #28]
 800726e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007270:	f001 fd2c 	bl	8008ccc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007276:	4618      	mov	r0, r3
 8007278:	3728      	adds	r7, #40	; 0x28
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	200039dc 	.word	0x200039dc

08007284 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	; 0x28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	4613      	mov	r3, r2
 8007292:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007298:	2300      	movs	r3, #0
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800729c:	f3ef 8305 	mrs	r3, IPSR
 80072a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80072a2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10f      	bne.n	80072c8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072a8:	f3ef 8310 	mrs	r3, PRIMASK
 80072ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d105      	bne.n	80072c0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072b4:	f3ef 8311 	mrs	r3, BASEPRI
 80072b8:	617b      	str	r3, [r7, #20]
  return(result);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d02c      	beq.n	800731a <osMessageQueuePut+0x96>
 80072c0:	4b28      	ldr	r3, [pc, #160]	; (8007364 <osMessageQueuePut+0xe0>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d128      	bne.n	800731a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <osMessageQueuePut+0x56>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <osMessageQueuePut+0x56>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80072da:	f06f 0303 	mvn.w	r3, #3
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072e0:	e039      	b.n	8007356 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80072e6:	f107 0210 	add.w	r2, r7, #16
 80072ea:	2300      	movs	r3, #0
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	6a38      	ldr	r0, [r7, #32]
 80072f0:	f000 ffae 	bl	8008250 <xQueueGenericSendFromISR>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d003      	beq.n	8007302 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80072fa:	f06f 0302 	mvn.w	r3, #2
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007300:	e029      	b.n	8007356 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d026      	beq.n	8007356 <osMessageQueuePut+0xd2>
 8007308:	4b17      	ldr	r3, [pc, #92]	; (8007368 <osMessageQueuePut+0xe4>)
 800730a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007318:	e01d      	b.n	8007356 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <osMessageQueuePut+0xa2>
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d103      	bne.n	800732e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007326:	f06f 0303 	mvn.w	r3, #3
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
 800732c:	e014      	b.n	8007358 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800732e:	2300      	movs	r3, #0
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	68b9      	ldr	r1, [r7, #8]
 8007334:	6a38      	ldr	r0, [r7, #32]
 8007336:	f000 fd75 	bl	8007e24 <xQueueGenericSend>
 800733a:	4603      	mov	r3, r0
 800733c:	2b01      	cmp	r3, #1
 800733e:	d00b      	beq.n	8007358 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007346:	f06f 0301 	mvn.w	r3, #1
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
 800734c:	e004      	b.n	8007358 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800734e:	f06f 0302 	mvn.w	r3, #2
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
 8007354:	e000      	b.n	8007358 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007356:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800735a:	4618      	mov	r0, r3
 800735c:	3728      	adds	r7, #40	; 0x28
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	200039dc 	.word	0x200039dc
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	; 0x28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800737e:	2300      	movs	r3, #0
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007382:	f3ef 8305 	mrs	r3, IPSR
 8007386:	61fb      	str	r3, [r7, #28]
  return(result);
 8007388:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10f      	bne.n	80073ae <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800738e:	f3ef 8310 	mrs	r3, PRIMASK
 8007392:	61bb      	str	r3, [r7, #24]
  return(result);
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d105      	bne.n	80073a6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800739a:	f3ef 8311 	mrs	r3, BASEPRI
 800739e:	617b      	str	r3, [r7, #20]
  return(result);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d02c      	beq.n	8007400 <osMessageQueueGet+0x94>
 80073a6:	4b28      	ldr	r3, [pc, #160]	; (8007448 <osMessageQueueGet+0xdc>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d128      	bne.n	8007400 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <osMessageQueueGet+0x54>
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <osMessageQueueGet+0x54>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80073c0:	f06f 0303 	mvn.w	r3, #3
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80073c6:	e038      	b.n	800743a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80073c8:	2300      	movs	r3, #0
 80073ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80073cc:	f107 0310 	add.w	r3, r7, #16
 80073d0:	461a      	mov	r2, r3
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	6a38      	ldr	r0, [r7, #32]
 80073d6:	f001 fa55 	bl	8008884 <xQueueReceiveFromISR>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d003      	beq.n	80073e8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80073e0:	f06f 0302 	mvn.w	r3, #2
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80073e6:	e028      	b.n	800743a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d025      	beq.n	800743a <osMessageQueueGet+0xce>
 80073ee:	4b17      	ldr	r3, [pc, #92]	; (800744c <osMessageQueueGet+0xe0>)
 80073f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80073fe:	e01c      	b.n	800743a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <osMessageQueueGet+0xa0>
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d103      	bne.n	8007414 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800740c:	f06f 0303 	mvn.w	r3, #3
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
 8007412:	e013      	b.n	800743c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	6a38      	ldr	r0, [r7, #32]
 800741a:	f001 f829 	bl	8008470 <xQueueReceive>
 800741e:	4603      	mov	r3, r0
 8007420:	2b01      	cmp	r3, #1
 8007422:	d00b      	beq.n	800743c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800742a:	f06f 0301 	mvn.w	r3, #1
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
 8007430:	e004      	b.n	800743c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007432:	f06f 0302 	mvn.w	r3, #2
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
 8007438:	e000      	b.n	800743c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800743a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800743e:	4618      	mov	r0, r3
 8007440:	3728      	adds	r7, #40	; 0x28
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	200039dc 	.word	0x200039dc
 800744c:	e000ed04 	.word	0xe000ed04

08007450 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4a07      	ldr	r2, [pc, #28]	; (800747c <vApplicationGetIdleTaskMemory+0x2c>)
 8007460:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	4a06      	ldr	r2, [pc, #24]	; (8007480 <vApplicationGetIdleTaskMemory+0x30>)
 8007466:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2280      	movs	r2, #128	; 0x80
 800746c:	601a      	str	r2, [r3, #0]
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	200039e0 	.word	0x200039e0
 8007480:	20003aa0 	.word	0x20003aa0

08007484 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4a07      	ldr	r2, [pc, #28]	; (80074b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007494:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4a06      	ldr	r2, [pc, #24]	; (80074b4 <vApplicationGetTimerTaskMemory+0x30>)
 800749a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074a2:	601a      	str	r2, [r3, #0]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	20003ca0 	.word	0x20003ca0
 80074b4:	20003d60 	.word	0x20003d60

080074b8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10c      	bne.n	80074e0 <xEventGroupCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ca:	b672      	cpsid	i
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	b662      	cpsie	i
 80074da:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80074e0:	2320      	movs	r3, #32
 80074e2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d00c      	beq.n	8007504 <xEventGroupCreateStatic+0x4c>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	b672      	cpsid	i
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	b662      	cpsie	i
 80074fe:	60fb      	str	r3, [r7, #12]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <xEventGroupCreateStatic+0x4a>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <xEventGroupCreateStatic+0x6c>
		{
			pxEventBits->uxEventBits = 0;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	3304      	adds	r3, #4
 8007518:	4618      	mov	r0, r3
 800751a:	f000 f9cb 	bl	80078b4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2201      	movs	r2, #1
 8007522:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8007524:	697b      	ldr	r3, [r7, #20]
	}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007534:	2020      	movs	r0, #32
 8007536:	f003 fc45 	bl	800adc4 <pvPortMalloc>
 800753a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3304      	adds	r3, #4
 800754c:	4618      	mov	r0, r3
 800754e:	f000 f9b1 	bl	80078b4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007558:	687b      	ldr	r3, [r7, #4]
	}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b090      	sub	sp, #64	; 0x40
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800757a:	2300      	movs	r3, #0
 800757c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10c      	bne.n	800759e <xEventGroupWaitBits+0x3a>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	b672      	cpsid	i
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	b662      	cpsie	i
 8007598:	623b      	str	r3, [r7, #32]
}
 800759a:	bf00      	nop
 800759c:	e7fe      	b.n	800759c <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00c      	beq.n	80075c2 <xEventGroupWaitBits+0x5e>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	b672      	cpsid	i
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	b662      	cpsie	i
 80075bc:	61fb      	str	r3, [r7, #28]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10c      	bne.n	80075e2 <xEventGroupWaitBits+0x7e>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	b672      	cpsid	i
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	b662      	cpsie	i
 80075dc:	61bb      	str	r3, [r7, #24]
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <xEventGroupWaitBits+0x7c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075e2:	f002 fcef 	bl	8009fc4 <xTaskGetSchedulerState>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <xEventGroupWaitBits+0x8e>
 80075ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <xEventGroupWaitBits+0x92>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <xEventGroupWaitBits+0x94>
 80075f6:	2300      	movs	r3, #0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10c      	bne.n	8007616 <xEventGroupWaitBits+0xb2>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	b672      	cpsid	i
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	b662      	cpsie	i
 8007610:	617b      	str	r3, [r7, #20]
}
 8007612:	bf00      	nop
 8007614:	e7fe      	b.n	8007614 <xEventGroupWaitBits+0xb0>
	}
	#endif

	vTaskSuspendAll();
 8007616:	f001 ff0d 	bl	8009434 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007626:	f000 f90f 	bl	8007848 <prvTestWaitCondition>
 800762a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00e      	beq.n	8007650 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007636:	2300      	movs	r3, #0
 8007638:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d028      	beq.n	8007692 <xEventGroupWaitBits+0x12e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	43db      	mvns	r3, r3
 8007648:	401a      	ands	r2, r3
 800764a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e020      	b.n	8007692 <xEventGroupWaitBits+0x12e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007652:	2b00      	cmp	r3, #0
 8007654:	d104      	bne.n	8007660 <xEventGroupWaitBits+0xfc>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800765a:	2301      	movs	r3, #1
 800765c:	633b      	str	r3, [r7, #48]	; 0x30
 800765e:	e018      	b.n	8007692 <xEventGroupWaitBits+0x12e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <xEventGroupWaitBits+0x10a>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800766c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <xEventGroupWaitBits+0x118>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800767a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800767c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767e:	1d18      	adds	r0, r3, #4
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	4313      	orrs	r3, r2
 8007686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007688:	4619      	mov	r1, r3
 800768a:	f002 f95d 	bl	8009948 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007692:	f001 fedd 	bl	8009450 <xTaskResumeAll>
 8007696:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800769a:	2b00      	cmp	r3, #0
 800769c:	d031      	beq.n	8007702 <xEventGroupWaitBits+0x19e>
	{
		if( xAlreadyYielded == pdFALSE )
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d107      	bne.n	80076b4 <xEventGroupWaitBits+0x150>
		{
			portYIELD_WITHIN_API();
 80076a4:	4b19      	ldr	r3, [pc, #100]	; (800770c <xEventGroupWaitBits+0x1a8>)
 80076a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80076b4:	f002 fd58 	bl	800a168 <uxTaskResetEventItemValue>
 80076b8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80076ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11a      	bne.n	80076fa <xEventGroupWaitBits+0x196>
		{
			taskENTER_CRITICAL();
 80076c4:	f003 fa54 	bl	800ab70 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80076c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80076d4:	f000 f8b8 	bl	8007848 <prvTestWaitCondition>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <xEventGroupWaitBits+0x18e>
				{
					if( xClearOnExit != pdFALSE )
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <xEventGroupWaitBits+0x18e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80076e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	43db      	mvns	r3, r3
 80076ec:	401a      	ands	r2, r3
 80076ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80076f2:	2301      	movs	r3, #1
 80076f4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80076f6:	f003 fa6f 	bl	800abd8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80076fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007700:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007704:	4618      	mov	r0, r3
 8007706:	3740      	adds	r7, #64	; 0x40
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	e000ed04 	.word	0xe000ed04

08007710 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08e      	sub	sp, #56	; 0x38
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800771a:	2300      	movs	r3, #0
 800771c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007722:	2300      	movs	r3, #0
 8007724:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10c      	bne.n	8007746 <xEventGroupSetBits+0x36>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	b672      	cpsid	i
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	b662      	cpsie	i
 8007740:	613b      	str	r3, [r7, #16]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00c      	beq.n	800776a <xEventGroupSetBits+0x5a>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	b672      	cpsid	i
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	b662      	cpsie	i
 8007764:	60fb      	str	r3, [r7, #12]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	3304      	adds	r3, #4
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	3308      	adds	r3, #8
 8007774:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007776:	f001 fe5d 	bl	8009434 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	431a      	orrs	r2, r3
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800778c:	e03c      	b.n	8007808 <xEventGroupSetBits+0xf8>
		{
			pxNext = listGET_NEXT( pxListItem );
 800778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80077a4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80077ac:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d108      	bne.n	80077ca <xEventGroupSetBits+0xba>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <xEventGroupSetBits+0xcc>
				{
					xMatchFound = pdTRUE;
 80077c4:	2301      	movs	r3, #1
 80077c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077c8:	e008      	b.n	80077dc <xEventGroupSetBits+0xcc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	4013      	ands	r3, r2
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d101      	bne.n	80077dc <xEventGroupSetBits+0xcc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80077d8:	2301      	movs	r3, #1
 80077da:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d010      	beq.n	8007804 <xEventGroupSetBits+0xf4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <xEventGroupSetBits+0xe4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80077ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077fc:	4619      	mov	r1, r3
 80077fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007800:	f002 f9c6 	bl	8009b90 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	429a      	cmp	r2, r3
 800780e:	d1be      	bne.n	800778e <xEventGroupSetBits+0x7e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	43db      	mvns	r3, r3
 8007818:	401a      	ands	r2, r3
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800781e:	f001 fe17 	bl	8009450 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	681b      	ldr	r3, [r3, #0]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3738      	adds	r7, #56	; 0x38
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff ff68 	bl	8007710 <xEventGroupSetBits>
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d107      	bne.n	800786e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4013      	ands	r3, r2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00a      	beq.n	800787e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e007      	b.n	800787e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4013      	ands	r3, r2
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	429a      	cmp	r2, r3
 8007878:	d101      	bne.n	800787e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800787a:	2301      	movs	r3, #1
 800787c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800787e:	697b      	ldr	r3, [r7, #20]
}
 8007880:	4618      	mov	r0, r3
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	68f9      	ldr	r1, [r7, #12]
 800789e:	4804      	ldr	r0, [pc, #16]	; (80078b0 <xEventGroupSetBitsFromISR+0x24>)
 80078a0:	f003 f82a 	bl	800a8f8 <xTimerPendFunctionCallFromISR>
 80078a4:	6178      	str	r0, [r7, #20]

		return xReturn;
 80078a6:	697b      	ldr	r3, [r7, #20]
	}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	0800782f 	.word	0x0800782f

080078b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f103 0208 	add.w	r2, r3, #8
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f04f 32ff 	mov.w	r2, #4294967295
 80078cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f103 0208 	add.w	r2, r3, #8
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f103 0208 	add.w	r2, r3, #8
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800790e:	b480      	push	{r7}
 8007910:	b085      	sub	sp, #20
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	601a      	str	r2, [r3, #0]
}
 800794a:	bf00      	nop
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d103      	bne.n	8007976 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	e00c      	b.n	8007990 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3308      	adds	r3, #8
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	e002      	b.n	8007984 <vListInsert+0x2e>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	429a      	cmp	r2, r3
 800798e:	d2f6      	bcs.n	800797e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	601a      	str	r2, [r3, #0]
}
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6892      	ldr	r2, [r2, #8]
 80079de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6852      	ldr	r2, [r2, #4]
 80079e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d103      	bne.n	80079fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	1e5a      	subs	r2, r3, #1
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10c      	bne.n	8007a4a <xQueueGenericReset+0x2e>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	b672      	cpsid	i
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	b662      	cpsie	i
 8007a44:	60bb      	str	r3, [r7, #8]
}
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007a4a:	f003 f891 	bl	800ab70 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a5a:	fb01 f303 	mul.w	r3, r1, r3
 8007a5e:	441a      	add	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	68f9      	ldr	r1, [r7, #12]
 8007a7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a80:	fb01 f303 	mul.w	r3, r1, r3
 8007a84:	441a      	add	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	22ff      	movs	r2, #255	; 0xff
 8007a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	22ff      	movs	r2, #255	; 0xff
 8007a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d114      	bne.n	8007aca <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01a      	beq.n	8007ade <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3310      	adds	r3, #16
 8007aac:	4618      	mov	r0, r3
 8007aae:	f001 fff5 	bl	8009a9c <xTaskRemoveFromEventList>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d012      	beq.n	8007ade <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ab8:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <xQueueGenericReset+0xd0>)
 8007aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	e009      	b.n	8007ade <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3310      	adds	r3, #16
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff fef0 	bl	80078b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3324      	adds	r3, #36	; 0x24
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff feeb 	bl	80078b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ade:	f003 f87b 	bl	800abd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ae2:	2301      	movs	r3, #1
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	e000ed04 	.word	0xe000ed04

08007af0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08e      	sub	sp, #56	; 0x38
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10c      	bne.n	8007b1e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	b672      	cpsid	i
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	b662      	cpsie	i
 8007b18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10c      	bne.n	8007b3e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	b672      	cpsid	i
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	b662      	cpsie	i
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <xQueueGenericCreateStatic+0x5a>
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <xQueueGenericCreateStatic+0x5e>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e000      	b.n	8007b50 <xQueueGenericCreateStatic+0x60>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10c      	bne.n	8007b6e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	b672      	cpsid	i
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	b662      	cpsie	i
 8007b68:	623b      	str	r3, [r7, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <xQueueGenericCreateStatic+0x8a>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <xQueueGenericCreateStatic+0x8e>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <xQueueGenericCreateStatic+0x90>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10c      	bne.n	8007b9e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	b672      	cpsid	i
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	b662      	cpsie	i
 8007b98:	61fb      	str	r3, [r7, #28]
}
 8007b9a:	bf00      	nop
 8007b9c:	e7fe      	b.n	8007b9c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b9e:	2350      	movs	r3, #80	; 0x50
 8007ba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b50      	cmp	r3, #80	; 0x50
 8007ba6:	d00c      	beq.n	8007bc2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	b672      	cpsid	i
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	b662      	cpsie	i
 8007bbc:	61bb      	str	r3, [r7, #24]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00e      	beq.n	8007bec <xQueueGenericCreateStatic+0xfc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	4613      	mov	r3, r2
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f889 	bl	8007cfc <prvInitialiseNewQueue>
 8007bea:	e01c      	b.n	8007c26 <xQueueGenericCreateStatic+0x136>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8007bec:	f7f9 fd50 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7f9 fcc6 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <xQueueGenericCreateStatic+0x140>)
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	4013      	ands	r3, r2
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00e      	beq.n	8007c26 <xQueueGenericCreateStatic+0x136>
 8007c08:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007c0c:	4a09      	ldr	r2, [pc, #36]	; (8007c34 <xQueueGenericCreateStatic+0x144>)
 8007c0e:	5cd3      	ldrb	r3, [r2, r3]
 8007c10:	3340      	adds	r3, #64	; 0x40
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	4618      	mov	r0, r3
 8007c16:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007c1a:	4a06      	ldr	r2, [pc, #24]	; (8007c34 <xQueueGenericCreateStatic+0x144>)
 8007c1c:	5cd3      	ldrb	r3, [r2, r3]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	4619      	mov	r1, r3
 8007c22:	f7fa f947 	bl	8001eb4 <prvTraceStoreKernelCall>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3730      	adds	r7, #48	; 0x30
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20001fcc 	.word	0x20001fcc
 8007c34:	20000004 	.word	0x20000004

08007c38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10c      	bne.n	8007c66 <xQueueGenericCreate+0x2e>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	b672      	cpsid	i
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	b662      	cpsie	i
 8007c60:	613b      	str	r3, [r7, #16]
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	e004      	b.n	8007c7c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	fb02 f303 	mul.w	r3, r2, r3
 8007c7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	3350      	adds	r3, #80	; 0x50
 8007c80:	4618      	mov	r0, r3
 8007c82:	f003 f89f 	bl	800adc4 <pvPortMalloc>
 8007c86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d012      	beq.n	8007cb4 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	3350      	adds	r3, #80	; 0x50
 8007c96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ca0:	79fa      	ldrb	r2, [r7, #7]
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 f825 	bl	8007cfc <prvInitialiseNewQueue>
 8007cb2:	e01a      	b.n	8007cea <xQueueGenericCreate+0xb2>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8007cb4:	f7f9 fcec 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7f9 fc62 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	4b0b      	ldr	r3, [pc, #44]	; (8007cf4 <xQueueGenericCreate+0xbc>)
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00c      	beq.n	8007cea <xQueueGenericCreate+0xb2>
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <xQueueGenericCreate+0xc0>)
 8007cd4:	5cd3      	ldrb	r3, [r2, r3]
 8007cd6:	3340      	adds	r3, #64	; 0x40
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	4618      	mov	r0, r3
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	4a06      	ldr	r2, [pc, #24]	; (8007cf8 <xQueueGenericCreate+0xc0>)
 8007ce0:	5cd3      	ldrb	r3, [r2, r3]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f7fa f8e5 	bl	8001eb4 <prvTraceStoreKernelCall>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cea:	69bb      	ldr	r3, [r7, #24]
	}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3720      	adds	r7, #32
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20001fcc 	.word	0x20001fcc
 8007cf8:	20000004 	.word	0x20000004

08007cfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007cfc:	b5b0      	push	{r4, r5, r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d103      	bne.n	8007d18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	6a3a      	ldr	r2, [r7, #32]
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	e002      	b.n	8007d1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	6a38      	ldr	r0, [r7, #32]
 8007d2e:	f7ff fe75 	bl	8007a1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8007d3a:	6a38      	ldr	r0, [r7, #32]
 8007d3c:	f7f9 fc09 	bl	8001552 <prvTraceGetQueueType>
 8007d40:	4603      	mov	r3, r0
 8007d42:	461a      	mov	r2, r3
 8007d44:	4b34      	ldr	r3, [pc, #208]	; (8007e18 <prvInitialiseNewQueue+0x11c>)
 8007d46:	5c9b      	ldrb	r3, [r3, r2]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fa fb79 	bl	8002440 <prvTraceGetObjectHandle>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	4619      	mov	r1, r3
 8007d54:	6a38      	ldr	r0, [r7, #32]
 8007d56:	f7f9 fc6d 	bl	8001634 <prvTraceSetQueueNumberLow16>
 8007d5a:	4b30      	ldr	r3, [pc, #192]	; (8007e1c <prvInitialiseNewQueue+0x120>)
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6a38      	ldr	r0, [r7, #32]
 8007d62:	f7f9 fc7f 	bl	8001664 <prvTraceSetQueueNumberHigh16>
 8007d66:	6a38      	ldr	r0, [r7, #32]
 8007d68:	f7f9 fbf3 	bl	8001552 <prvTraceGetQueueType>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	461a      	mov	r2, r3
 8007d70:	4b29      	ldr	r3, [pc, #164]	; (8007e18 <prvInitialiseNewQueue+0x11c>)
 8007d72:	5c9c      	ldrb	r4, [r3, r2]
 8007d74:	6a38      	ldr	r0, [r7, #32]
 8007d76:	f7f9 fc41 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	4619      	mov	r1, r3
 8007d80:	4620      	mov	r0, r4
 8007d82:	f7fa fbf5 	bl	8002570 <prvMarkObjectAsUsed>
 8007d86:	f7f9 fc83 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7f9 fbf9 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8007d92:	4603      	mov	r3, r0
 8007d94:	461a      	mov	r2, r3
 8007d96:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <prvInitialiseNewQueue+0x124>)
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d025      	beq.n	8007dee <prvInitialiseNewQueue+0xf2>
 8007da2:	6a38      	ldr	r0, [r7, #32]
 8007da4:	f7f9 fc37 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	4b1c      	ldr	r3, [pc, #112]	; (8007e20 <prvInitialiseNewQueue+0x124>)
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	4013      	ands	r3, r2
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01a      	beq.n	8007dee <prvInitialiseNewQueue+0xf2>
 8007db8:	6a38      	ldr	r0, [r7, #32]
 8007dba:	f7f9 fbca 	bl	8001552 <prvTraceGetQueueType>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <prvInitialiseNewQueue+0x11c>)
 8007dc4:	5c9b      	ldrb	r3, [r3, r2]
 8007dc6:	3318      	adds	r3, #24
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	461d      	mov	r5, r3
 8007dcc:	6a38      	ldr	r0, [r7, #32]
 8007dce:	f7f9 fbc0 	bl	8001552 <prvTraceGetQueueType>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	4b10      	ldr	r3, [pc, #64]	; (8007e18 <prvInitialiseNewQueue+0x11c>)
 8007dd8:	5c9c      	ldrb	r4, [r3, r2]
 8007dda:	6a38      	ldr	r0, [r7, #32]
 8007ddc:	f7f9 fc0e 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8007de0:	4603      	mov	r3, r0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	4621      	mov	r1, r4
 8007de8:	4628      	mov	r0, r5
 8007dea:	f7fa f863 	bl	8001eb4 <prvTraceStoreKernelCall>
 8007dee:	6a38      	ldr	r0, [r7, #32]
 8007df0:	f7f9 fbaf 	bl	8001552 <prvTraceGetQueueType>
 8007df4:	4603      	mov	r3, r0
 8007df6:	461a      	mov	r2, r3
 8007df8:	4b07      	ldr	r3, [pc, #28]	; (8007e18 <prvInitialiseNewQueue+0x11c>)
 8007dfa:	5c9c      	ldrb	r4, [r3, r2]
 8007dfc:	6a38      	ldr	r0, [r7, #32]
 8007dfe:	f7f9 fbfd 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8007e02:	4603      	mov	r3, r0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2200      	movs	r2, #0
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f7fa fa54 	bl	80022b8 <prvTraceSetObjectState>
}
 8007e10:	bf00      	nop
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bdb0      	pop	{r4, r5, r7, pc}
 8007e18:	20000004 	.word	0x20000004
 8007e1c:	20001fce 	.word	0x20001fce
 8007e20:	20001fcc 	.word	0x20001fcc

08007e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e24:	b5b0      	push	{r4, r5, r7, lr}
 8007e26:	b08e      	sub	sp, #56	; 0x38
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e32:	2300      	movs	r3, #0
 8007e34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10c      	bne.n	8007e5a <xQueueGenericSend+0x36>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	b672      	cpsid	i
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	b662      	cpsie	i
 8007e54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d103      	bne.n	8007e68 <xQueueGenericSend+0x44>
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <xQueueGenericSend+0x48>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <xQueueGenericSend+0x4a>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10c      	bne.n	8007e8c <xQueueGenericSend+0x68>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	b672      	cpsid	i
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	b662      	cpsie	i
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e88:	bf00      	nop
 8007e8a:	e7fe      	b.n	8007e8a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d103      	bne.n	8007e9a <xQueueGenericSend+0x76>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <xQueueGenericSend+0x7a>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <xQueueGenericSend+0x7c>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10c      	bne.n	8007ebe <xQueueGenericSend+0x9a>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	b672      	cpsid	i
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	b662      	cpsie	i
 8007eb8:	623b      	str	r3, [r7, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ebe:	f002 f881 	bl	8009fc4 <xTaskGetSchedulerState>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d102      	bne.n	8007ece <xQueueGenericSend+0xaa>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <xQueueGenericSend+0xae>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <xQueueGenericSend+0xb0>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10c      	bne.n	8007ef2 <xQueueGenericSend+0xce>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	b672      	cpsid	i
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	b662      	cpsie	i
 8007eec:	61fb      	str	r3, [r7, #28]
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ef2:	f002 fe3d 	bl	800ab70 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d303      	bcc.n	8007f0a <xQueueGenericSend+0xe6>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	f040 8084 	bne.w	8008012 <xQueueGenericSend+0x1ee>
			{
				traceQUEUE_SEND( pxQueue );
 8007f0a:	f7f9 fbc1 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7f9 fb37 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8007f16:	4603      	mov	r3, r0
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4ba6      	ldr	r3, [pc, #664]	; (80081b4 <xQueueGenericSend+0x390>)
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d02a      	beq.n	8007f7c <xQueueGenericSend+0x158>
 8007f26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f28:	f7f9 fb75 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	461a      	mov	r2, r3
 8007f30:	4ba0      	ldr	r3, [pc, #640]	; (80081b4 <xQueueGenericSend+0x390>)
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	4013      	ands	r3, r2
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01f      	beq.n	8007f7c <xQueueGenericSend+0x158>
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <xQueueGenericSend+0x134>
 8007f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f44:	f7f9 fb05 	bl	8001552 <prvTraceGetQueueType>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	4b9a      	ldr	r3, [pc, #616]	; (80081b8 <xQueueGenericSend+0x394>)
 8007f4e:	5c9b      	ldrb	r3, [r3, r2]
 8007f50:	3320      	adds	r3, #32
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	461d      	mov	r5, r3
 8007f56:	e000      	b.n	8007f5a <xQueueGenericSend+0x136>
 8007f58:	2525      	movs	r5, #37	; 0x25
 8007f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f5c:	f7f9 faf9 	bl	8001552 <prvTraceGetQueueType>
 8007f60:	4603      	mov	r3, r0
 8007f62:	461a      	mov	r2, r3
 8007f64:	4b94      	ldr	r3, [pc, #592]	; (80081b8 <xQueueGenericSend+0x394>)
 8007f66:	5c9c      	ldrb	r4, [r3, r2]
 8007f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f6a:	f7f9 fb47 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	461a      	mov	r2, r3
 8007f74:	4621      	mov	r1, r4
 8007f76:	4628      	mov	r0, r5
 8007f78:	f7f9 ff9c 	bl	8001eb4 <prvTraceStoreKernelCall>
 8007f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f7e:	f7f9 fae8 	bl	8001552 <prvTraceGetQueueType>
 8007f82:	4603      	mov	r3, r0
 8007f84:	461a      	mov	r2, r3
 8007f86:	4b8c      	ldr	r3, [pc, #560]	; (80081b8 <xQueueGenericSend+0x394>)
 8007f88:	5c9c      	ldrb	r4, [r3, r2]
 8007f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f8c:	f7f9 fb36 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8007f90:	4603      	mov	r3, r0
 8007f92:	b2dd      	uxtb	r5, r3
 8007f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f96:	f7f9 fadc 	bl	8001552 <prvTraceGetQueueType>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	4b86      	ldr	r3, [pc, #536]	; (80081b8 <xQueueGenericSend+0x394>)
 8007fa0:	5c9b      	ldrb	r3, [r3, r2]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d005      	beq.n	8007fb2 <xQueueGenericSend+0x18e>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	3301      	adds	r3, #1
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	e000      	b.n	8007fb4 <xQueueGenericSend+0x190>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f7fa f97d 	bl	80022b8 <prvTraceSetObjectState>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	68b9      	ldr	r1, [r7, #8]
 8007fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fc4:	f000 fd71 	bl	8008aaa <prvCopyDataToQueue>
 8007fc8:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d010      	beq.n	8007ff4 <xQueueGenericSend+0x1d0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	3324      	adds	r3, #36	; 0x24
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f001 fd60 	bl	8009a9c <xTaskRemoveFromEventList>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d013      	beq.n	800800a <xQueueGenericSend+0x1e6>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fe2:	4b76      	ldr	r3, [pc, #472]	; (80081bc <xQueueGenericSend+0x398>)
 8007fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	e00a      	b.n	800800a <xQueueGenericSend+0x1e6>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d007      	beq.n	800800a <xQueueGenericSend+0x1e6>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ffa:	4b70      	ldr	r3, [pc, #448]	; (80081bc <xQueueGenericSend+0x398>)
 8007ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800800a:	f002 fde5 	bl	800abd8 <vPortExitCritical>
				return pdPASS;
 800800e:	2301      	movs	r3, #1
 8008010:	e115      	b.n	800823e <xQueueGenericSend+0x41a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d13c      	bne.n	8008092 <xQueueGenericSend+0x26e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008018:	f002 fdde 	bl	800abd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800801c:	f7f9 fb38 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8008020:	4603      	mov	r3, r0
 8008022:	4618      	mov	r0, r3
 8008024:	f7f9 faae 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8008028:	4603      	mov	r3, r0
 800802a:	461a      	mov	r2, r3
 800802c:	4b61      	ldr	r3, [pc, #388]	; (80081b4 <xQueueGenericSend+0x390>)
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	4013      	ands	r3, r2
 8008032:	b29b      	uxth	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d02a      	beq.n	800808e <xQueueGenericSend+0x26a>
 8008038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800803a:	f7f9 faec 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 800803e:	4603      	mov	r3, r0
 8008040:	461a      	mov	r2, r3
 8008042:	4b5c      	ldr	r3, [pc, #368]	; (80081b4 <xQueueGenericSend+0x390>)
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	4013      	ands	r3, r2
 8008048:	b29b      	uxth	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01f      	beq.n	800808e <xQueueGenericSend+0x26a>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <xQueueGenericSend+0x246>
 8008054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008056:	f7f9 fa7c 	bl	8001552 <prvTraceGetQueueType>
 800805a:	4603      	mov	r3, r0
 800805c:	461a      	mov	r2, r3
 800805e:	4b56      	ldr	r3, [pc, #344]	; (80081b8 <xQueueGenericSend+0x394>)
 8008060:	5c9b      	ldrb	r3, [r3, r2]
 8008062:	3348      	adds	r3, #72	; 0x48
 8008064:	b2db      	uxtb	r3, r3
 8008066:	461d      	mov	r5, r3
 8008068:	e000      	b.n	800806c <xQueueGenericSend+0x248>
 800806a:	254d      	movs	r5, #77	; 0x4d
 800806c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800806e:	f7f9 fa70 	bl	8001552 <prvTraceGetQueueType>
 8008072:	4603      	mov	r3, r0
 8008074:	461a      	mov	r2, r3
 8008076:	4b50      	ldr	r3, [pc, #320]	; (80081b8 <xQueueGenericSend+0x394>)
 8008078:	5c9c      	ldrb	r4, [r3, r2]
 800807a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800807c:	f7f9 fabe 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8008080:	4603      	mov	r3, r0
 8008082:	b2db      	uxtb	r3, r3
 8008084:	461a      	mov	r2, r3
 8008086:	4621      	mov	r1, r4
 8008088:	4628      	mov	r0, r5
 800808a:	f7f9 ff13 	bl	8001eb4 <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 800808e:	2300      	movs	r3, #0
 8008090:	e0d5      	b.n	800823e <xQueueGenericSend+0x41a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008094:	2b00      	cmp	r3, #0
 8008096:	d106      	bne.n	80080a6 <xQueueGenericSend+0x282>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008098:	f107 0314 	add.w	r3, r7, #20
 800809c:	4618      	mov	r0, r3
 800809e:	f001 fdf3 	bl	8009c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080a2:	2301      	movs	r3, #1
 80080a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080a6:	f002 fd97 	bl	800abd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080aa:	f001 f9c3 	bl	8009434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080ae:	f002 fd5f 	bl	800ab70 <vPortEnterCritical>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080b8:	b25b      	sxtb	r3, r3
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080be:	d103      	bne.n	80080c8 <xQueueGenericSend+0x2a4>
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080ce:	b25b      	sxtb	r3, r3
 80080d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d4:	d103      	bne.n	80080de <xQueueGenericSend+0x2ba>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080de:	f002 fd7b 	bl	800abd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080e2:	1d3a      	adds	r2, r7, #4
 80080e4:	f107 0314 	add.w	r3, r7, #20
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 fde2 	bl	8009cb4 <xTaskCheckForTimeOut>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d164      	bne.n	80081c0 <xQueueGenericSend+0x39c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080f8:	f000 fdcf 	bl	8008c9a <prvIsQueueFull>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d051      	beq.n	80081a6 <xQueueGenericSend+0x382>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8008102:	f7f9 fac5 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8008106:	4603      	mov	r3, r0
 8008108:	4618      	mov	r0, r3
 800810a:	f7f9 fa3b 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 800810e:	4603      	mov	r3, r0
 8008110:	461a      	mov	r2, r3
 8008112:	4b28      	ldr	r3, [pc, #160]	; (80081b4 <xQueueGenericSend+0x390>)
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	4013      	ands	r3, r2
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d02a      	beq.n	8008174 <xQueueGenericSend+0x350>
 800811e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008120:	f7f9 fa79 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 8008124:	4603      	mov	r3, r0
 8008126:	461a      	mov	r2, r3
 8008128:	4b22      	ldr	r3, [pc, #136]	; (80081b4 <xQueueGenericSend+0x390>)
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	4013      	ands	r3, r2
 800812e:	b29b      	uxth	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01f      	beq.n	8008174 <xQueueGenericSend+0x350>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <xQueueGenericSend+0x32c>
 800813a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800813c:	f7f9 fa09 	bl	8001552 <prvTraceGetQueueType>
 8008140:	4603      	mov	r3, r0
 8008142:	461a      	mov	r2, r3
 8008144:	4b1c      	ldr	r3, [pc, #112]	; (80081b8 <xQueueGenericSend+0x394>)
 8008146:	5c9b      	ldrb	r3, [r3, r2]
 8008148:	3370      	adds	r3, #112	; 0x70
 800814a:	b2db      	uxtb	r3, r3
 800814c:	461d      	mov	r5, r3
 800814e:	e000      	b.n	8008152 <xQueueGenericSend+0x32e>
 8008150:	2575      	movs	r5, #117	; 0x75
 8008152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008154:	f7f9 f9fd 	bl	8001552 <prvTraceGetQueueType>
 8008158:	4603      	mov	r3, r0
 800815a:	461a      	mov	r2, r3
 800815c:	4b16      	ldr	r3, [pc, #88]	; (80081b8 <xQueueGenericSend+0x394>)
 800815e:	5c9c      	ldrb	r4, [r3, r2]
 8008160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008162:	f7f9 fa4b 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8008166:	4603      	mov	r3, r0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	461a      	mov	r2, r3
 800816c:	4621      	mov	r1, r4
 800816e:	4628      	mov	r0, r5
 8008170:	f7f9 fea0 	bl	8001eb4 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	3310      	adds	r3, #16
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	4611      	mov	r1, r2
 800817c:	4618      	mov	r0, r3
 800817e:	f001 fbbd 	bl	80098fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008184:	f000 fd21 	bl	8008bca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008188:	f001 f962 	bl	8009450 <xTaskResumeAll>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	f47f aeaf 	bne.w	8007ef2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008194:	4b09      	ldr	r3, [pc, #36]	; (80081bc <xQueueGenericSend+0x398>)
 8008196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	e6a5      	b.n	8007ef2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081a8:	f000 fd0f 	bl	8008bca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ac:	f001 f950 	bl	8009450 <xTaskResumeAll>
 80081b0:	e69f      	b.n	8007ef2 <xQueueGenericSend+0xce>
 80081b2:	bf00      	nop
 80081b4:	20001fcc 	.word	0x20001fcc
 80081b8:	20000004 	.word	0x20000004
 80081bc:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081c2:	f000 fd02 	bl	8008bca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081c6:	f001 f943 	bl	8009450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80081ca:	f7f9 fa61 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 80081ce:	4603      	mov	r3, r0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7f9 f9d7 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 80081d6:	4603      	mov	r3, r0
 80081d8:	461a      	mov	r2, r3
 80081da:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <xQueueGenericSend+0x424>)
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	4013      	ands	r3, r2
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d02a      	beq.n	800823c <xQueueGenericSend+0x418>
 80081e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081e8:	f7f9 fa15 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 80081ec:	4603      	mov	r3, r0
 80081ee:	461a      	mov	r2, r3
 80081f0:	4b15      	ldr	r3, [pc, #84]	; (8008248 <xQueueGenericSend+0x424>)
 80081f2:	881b      	ldrh	r3, [r3, #0]
 80081f4:	4013      	ands	r3, r2
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01f      	beq.n	800823c <xQueueGenericSend+0x418>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <xQueueGenericSend+0x3f4>
 8008202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008204:	f7f9 f9a5 	bl	8001552 <prvTraceGetQueueType>
 8008208:	4603      	mov	r3, r0
 800820a:	461a      	mov	r2, r3
 800820c:	4b0f      	ldr	r3, [pc, #60]	; (800824c <xQueueGenericSend+0x428>)
 800820e:	5c9b      	ldrb	r3, [r3, r2]
 8008210:	3348      	adds	r3, #72	; 0x48
 8008212:	b2db      	uxtb	r3, r3
 8008214:	461d      	mov	r5, r3
 8008216:	e000      	b.n	800821a <xQueueGenericSend+0x3f6>
 8008218:	254d      	movs	r5, #77	; 0x4d
 800821a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800821c:	f7f9 f999 	bl	8001552 <prvTraceGetQueueType>
 8008220:	4603      	mov	r3, r0
 8008222:	461a      	mov	r2, r3
 8008224:	4b09      	ldr	r3, [pc, #36]	; (800824c <xQueueGenericSend+0x428>)
 8008226:	5c9c      	ldrb	r4, [r3, r2]
 8008228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800822a:	f7f9 f9e7 	bl	80015fc <prvTraceGetQueueNumberLow16>
 800822e:	4603      	mov	r3, r0
 8008230:	b2db      	uxtb	r3, r3
 8008232:	461a      	mov	r2, r3
 8008234:	4621      	mov	r1, r4
 8008236:	4628      	mov	r0, r5
 8008238:	f7f9 fe3c 	bl	8001eb4 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 800823c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800823e:	4618      	mov	r0, r3
 8008240:	3738      	adds	r7, #56	; 0x38
 8008242:	46bd      	mov	sp, r7
 8008244:	bdb0      	pop	{r4, r5, r7, pc}
 8008246:	bf00      	nop
 8008248:	20001fcc 	.word	0x20001fcc
 800824c:	20000004 	.word	0x20000004

08008250 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008250:	b5b0      	push	{r4, r5, r7, lr}
 8008252:	b08e      	sub	sp, #56	; 0x38
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10c      	bne.n	8008282 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	b672      	cpsid	i
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	b662      	cpsie	i
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d103      	bne.n	8008290 <xQueueGenericSendFromISR+0x40>
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <xQueueGenericSendFromISR+0x44>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <xQueueGenericSendFromISR+0x46>
 8008294:	2300      	movs	r3, #0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10c      	bne.n	80082b4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	b672      	cpsid	i
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	b662      	cpsie	i
 80082ae:	623b      	str	r3, [r7, #32]
}
 80082b0:	bf00      	nop
 80082b2:	e7fe      	b.n	80082b2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d103      	bne.n	80082c2 <xQueueGenericSendFromISR+0x72>
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d101      	bne.n	80082c6 <xQueueGenericSendFromISR+0x76>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <xQueueGenericSendFromISR+0x78>
 80082c6:	2300      	movs	r3, #0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10c      	bne.n	80082e6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d0:	b672      	cpsid	i
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	b662      	cpsie	i
 80082e0:	61fb      	str	r3, [r7, #28]
}
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082e6:	f002 fd29 	bl	800ad3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082ea:	f3ef 8211 	mrs	r2, BASEPRI
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	b672      	cpsid	i
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	b662      	cpsie	i
 8008302:	61ba      	str	r2, [r7, #24]
 8008304:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008306:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008308:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008312:	429a      	cmp	r2, r3
 8008314:	d302      	bcc.n	800831c <xQueueGenericSendFromISR+0xcc>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b02      	cmp	r3, #2
 800831a:	d16c      	bne.n	80083f6 <xQueueGenericSendFromISR+0x1a6>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008328:	f7f9 f975 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 800832c:	4603      	mov	r3, r0
 800832e:	461a      	mov	r2, r3
 8008330:	4b4d      	ldr	r3, [pc, #308]	; (8008468 <xQueueGenericSendFromISR+0x218>)
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	4013      	ands	r3, r2
 8008336:	b29b      	uxth	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01f      	beq.n	800837c <xQueueGenericSendFromISR+0x12c>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <xQueueGenericSendFromISR+0x108>
 8008342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008344:	f7f9 f905 	bl	8001552 <prvTraceGetQueueType>
 8008348:	4603      	mov	r3, r0
 800834a:	461a      	mov	r2, r3
 800834c:	4b47      	ldr	r3, [pc, #284]	; (800846c <xQueueGenericSendFromISR+0x21c>)
 800834e:	5c9b      	ldrb	r3, [r3, r2]
 8008350:	3330      	adds	r3, #48	; 0x30
 8008352:	b2db      	uxtb	r3, r3
 8008354:	461d      	mov	r5, r3
 8008356:	e000      	b.n	800835a <xQueueGenericSendFromISR+0x10a>
 8008358:	2535      	movs	r5, #53	; 0x35
 800835a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800835c:	f7f9 f8f9 	bl	8001552 <prvTraceGetQueueType>
 8008360:	4603      	mov	r3, r0
 8008362:	461a      	mov	r2, r3
 8008364:	4b41      	ldr	r3, [pc, #260]	; (800846c <xQueueGenericSendFromISR+0x21c>)
 8008366:	5c9c      	ldrb	r4, [r3, r2]
 8008368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800836a:	f7f9 f947 	bl	80015fc <prvTraceGetQueueNumberLow16>
 800836e:	4603      	mov	r3, r0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	461a      	mov	r2, r3
 8008374:	4621      	mov	r1, r4
 8008376:	4628      	mov	r0, r5
 8008378:	f7f9 fd9c 	bl	8001eb4 <prvTraceStoreKernelCall>
 800837c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800837e:	f7f9 f8e8 	bl	8001552 <prvTraceGetQueueType>
 8008382:	4603      	mov	r3, r0
 8008384:	461a      	mov	r2, r3
 8008386:	4b39      	ldr	r3, [pc, #228]	; (800846c <xQueueGenericSendFromISR+0x21c>)
 8008388:	5c9c      	ldrb	r4, [r3, r2]
 800838a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800838c:	f7f9 f936 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8008390:	4603      	mov	r3, r0
 8008392:	b2d9      	uxtb	r1, r3
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	b2db      	uxtb	r3, r3
 800839a:	3301      	adds	r3, #1
 800839c:	b2db      	uxtb	r3, r3
 800839e:	461a      	mov	r2, r3
 80083a0:	4620      	mov	r0, r4
 80083a2:	f7f9 ff89 	bl	80022b8 <prvTraceSetObjectState>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ac:	f000 fb7d 	bl	8008aaa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80083b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b8:	d112      	bne.n	80083e0 <xQueueGenericSendFromISR+0x190>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d016      	beq.n	80083f0 <xQueueGenericSendFromISR+0x1a0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	3324      	adds	r3, #36	; 0x24
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 fb68 	bl	8009a9c <xTaskRemoveFromEventList>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00e      	beq.n	80083f0 <xQueueGenericSendFromISR+0x1a0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <xQueueGenericSendFromISR+0x1a0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	e007      	b.n	80083f0 <xQueueGenericSendFromISR+0x1a0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083e4:	3301      	adds	r3, #1
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	b25a      	sxtb	r2, r3
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083f0:	2301      	movs	r3, #1
 80083f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80083f4:	e02c      	b.n	8008450 <xQueueGenericSendFromISR+0x200>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80083f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083f8:	f7f9 f90d 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 80083fc:	4603      	mov	r3, r0
 80083fe:	461a      	mov	r2, r3
 8008400:	4b19      	ldr	r3, [pc, #100]	; (8008468 <xQueueGenericSendFromISR+0x218>)
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	4013      	ands	r3, r2
 8008406:	b29b      	uxth	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d01f      	beq.n	800844c <xQueueGenericSendFromISR+0x1fc>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <xQueueGenericSendFromISR+0x1d8>
 8008412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008414:	f7f9 f89d 	bl	8001552 <prvTraceGetQueueType>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	4b13      	ldr	r3, [pc, #76]	; (800846c <xQueueGenericSendFromISR+0x21c>)
 800841e:	5c9b      	ldrb	r3, [r3, r2]
 8008420:	3358      	adds	r3, #88	; 0x58
 8008422:	b2db      	uxtb	r3, r3
 8008424:	461d      	mov	r5, r3
 8008426:	e000      	b.n	800842a <xQueueGenericSendFromISR+0x1da>
 8008428:	255d      	movs	r5, #93	; 0x5d
 800842a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800842c:	f7f9 f891 	bl	8001552 <prvTraceGetQueueType>
 8008430:	4603      	mov	r3, r0
 8008432:	461a      	mov	r2, r3
 8008434:	4b0d      	ldr	r3, [pc, #52]	; (800846c <xQueueGenericSendFromISR+0x21c>)
 8008436:	5c9c      	ldrb	r4, [r3, r2]
 8008438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800843a:	f7f9 f8df 	bl	80015fc <prvTraceGetQueueNumberLow16>
 800843e:	4603      	mov	r3, r0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	461a      	mov	r2, r3
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f7f9 fd34 	bl	8001eb4 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 800844c:	2300      	movs	r3, #0
 800844e:	637b      	str	r3, [r7, #52]	; 0x34
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800845a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800845c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800845e:	4618      	mov	r0, r3
 8008460:	3738      	adds	r7, #56	; 0x38
 8008462:	46bd      	mov	sp, r7
 8008464:	bdb0      	pop	{r4, r5, r7, pc}
 8008466:	bf00      	nop
 8008468:	20001fcc 	.word	0x20001fcc
 800846c:	20000004 	.word	0x20000004

08008470 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008470:	b5b0      	push	{r4, r5, r7, lr}
 8008472:	b08c      	sub	sp, #48	; 0x30
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800847c:	2300      	movs	r3, #0
 800847e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10c      	bne.n	80084a4 <xQueueReceive+0x34>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	b672      	cpsid	i
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	b662      	cpsie	i
 800849e:	623b      	str	r3, [r7, #32]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d103      	bne.n	80084b2 <xQueueReceive+0x42>
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <xQueueReceive+0x46>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e000      	b.n	80084b8 <xQueueReceive+0x48>
 80084b6:	2300      	movs	r3, #0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10c      	bne.n	80084d6 <xQueueReceive+0x66>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	b672      	cpsid	i
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	b662      	cpsie	i
 80084d0:	61fb      	str	r3, [r7, #28]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084d6:	f001 fd75 	bl	8009fc4 <xTaskGetSchedulerState>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d102      	bne.n	80084e6 <xQueueReceive+0x76>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <xQueueReceive+0x7a>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <xQueueReceive+0x7c>
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10c      	bne.n	800850a <xQueueReceive+0x9a>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	b672      	cpsid	i
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	b662      	cpsie	i
 8008504:	61bb      	str	r3, [r7, #24]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800850a:	f002 fb31 	bl	800ab70 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	2b00      	cmp	r3, #0
 8008518:	d07b      	beq.n	8008612 <xQueueReceive+0x1a2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800851e:	f000 fb2e 	bl	8008b7e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8008522:	f7f9 f8b5 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8008526:	4603      	mov	r3, r0
 8008528:	4618      	mov	r0, r3
 800852a:	f7f9 f82b 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 800852e:	4603      	mov	r3, r0
 8008530:	461a      	mov	r2, r3
 8008532:	4bac      	ldr	r3, [pc, #688]	; (80087e4 <xQueueReceive+0x374>)
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	4013      	ands	r3, r2
 8008538:	b29b      	uxth	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d025      	beq.n	800858a <xQueueReceive+0x11a>
 800853e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008540:	f7f9 f869 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 8008544:	4603      	mov	r3, r0
 8008546:	461a      	mov	r2, r3
 8008548:	4ba6      	ldr	r3, [pc, #664]	; (80087e4 <xQueueReceive+0x374>)
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	4013      	ands	r3, r2
 800854e:	b29b      	uxth	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01a      	beq.n	800858a <xQueueReceive+0x11a>
 8008554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008556:	f7f8 fffc 	bl	8001552 <prvTraceGetQueueType>
 800855a:	4603      	mov	r3, r0
 800855c:	461a      	mov	r2, r3
 800855e:	4ba2      	ldr	r3, [pc, #648]	; (80087e8 <xQueueReceive+0x378>)
 8008560:	5c9b      	ldrb	r3, [r3, r2]
 8008562:	3328      	adds	r3, #40	; 0x28
 8008564:	b2db      	uxtb	r3, r3
 8008566:	461d      	mov	r5, r3
 8008568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800856a:	f7f8 fff2 	bl	8001552 <prvTraceGetQueueType>
 800856e:	4603      	mov	r3, r0
 8008570:	461a      	mov	r2, r3
 8008572:	4b9d      	ldr	r3, [pc, #628]	; (80087e8 <xQueueReceive+0x378>)
 8008574:	5c9c      	ldrb	r4, [r3, r2]
 8008576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008578:	f7f9 f840 	bl	80015fc <prvTraceGetQueueNumberLow16>
 800857c:	4603      	mov	r3, r0
 800857e:	b2db      	uxtb	r3, r3
 8008580:	461a      	mov	r2, r3
 8008582:	4621      	mov	r1, r4
 8008584:	4628      	mov	r0, r5
 8008586:	f7f9 fc95 	bl	8001eb4 <prvTraceStoreKernelCall>
 800858a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800858c:	f7f8 ffe1 	bl	8001552 <prvTraceGetQueueType>
 8008590:	4603      	mov	r3, r0
 8008592:	461a      	mov	r2, r3
 8008594:	4b94      	ldr	r3, [pc, #592]	; (80087e8 <xQueueReceive+0x378>)
 8008596:	5c9c      	ldrb	r4, [r3, r2]
 8008598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800859a:	f7f9 f82f 	bl	80015fc <prvTraceGetQueueNumberLow16>
 800859e:	4603      	mov	r3, r0
 80085a0:	b2dd      	uxtb	r5, r3
 80085a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085a4:	f7f8 ffd5 	bl	8001552 <prvTraceGetQueueType>
 80085a8:	4603      	mov	r3, r0
 80085aa:	461a      	mov	r2, r3
 80085ac:	4b8e      	ldr	r3, [pc, #568]	; (80087e8 <xQueueReceive+0x378>)
 80085ae:	5c9b      	ldrb	r3, [r3, r2]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d108      	bne.n	80085c6 <xQueueReceive+0x156>
 80085b4:	f7f9 f86c 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 80085b8:	4603      	mov	r3, r0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7f8 ffd5 	bl	800156a <prvTraceGetTaskNumberLow16>
 80085c0:	4603      	mov	r3, r0
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	e004      	b.n	80085d0 <xQueueReceive+0x160>
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	3b01      	subs	r3, #1
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	461a      	mov	r2, r3
 80085d2:	4629      	mov	r1, r5
 80085d4:	4620      	mov	r0, r4
 80085d6:	f7f9 fe6f 	bl	80022b8 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	1e5a      	subs	r2, r3, #1
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00f      	beq.n	800860a <xQueueReceive+0x19a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	3310      	adds	r3, #16
 80085ee:	4618      	mov	r0, r3
 80085f0:	f001 fa54 	bl	8009a9c <xTaskRemoveFromEventList>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d007      	beq.n	800860a <xQueueReceive+0x19a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085fa:	4b7c      	ldr	r3, [pc, #496]	; (80087ec <xQueueReceive+0x37c>)
 80085fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800860a:	f002 fae5 	bl	800abd8 <vPortExitCritical>
				return pdPASS;
 800860e:	2301      	movs	r3, #1
 8008610:	e12f      	b.n	8008872 <xQueueReceive+0x402>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d137      	bne.n	8008688 <xQueueReceive+0x218>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008618:	f002 fade 	bl	800abd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800861c:	f7f9 f838 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8008620:	4603      	mov	r3, r0
 8008622:	4618      	mov	r0, r3
 8008624:	f7f8 ffae 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8008628:	4603      	mov	r3, r0
 800862a:	461a      	mov	r2, r3
 800862c:	4b6d      	ldr	r3, [pc, #436]	; (80087e4 <xQueueReceive+0x374>)
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	4013      	ands	r3, r2
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d025      	beq.n	8008684 <xQueueReceive+0x214>
 8008638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800863a:	f7f8 ffec 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 800863e:	4603      	mov	r3, r0
 8008640:	461a      	mov	r2, r3
 8008642:	4b68      	ldr	r3, [pc, #416]	; (80087e4 <xQueueReceive+0x374>)
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	4013      	ands	r3, r2
 8008648:	b29b      	uxth	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d01a      	beq.n	8008684 <xQueueReceive+0x214>
 800864e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008650:	f7f8 ff7f 	bl	8001552 <prvTraceGetQueueType>
 8008654:	4603      	mov	r3, r0
 8008656:	461a      	mov	r2, r3
 8008658:	4b63      	ldr	r3, [pc, #396]	; (80087e8 <xQueueReceive+0x378>)
 800865a:	5c9b      	ldrb	r3, [r3, r2]
 800865c:	3350      	adds	r3, #80	; 0x50
 800865e:	b2db      	uxtb	r3, r3
 8008660:	461d      	mov	r5, r3
 8008662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008664:	f7f8 ff75 	bl	8001552 <prvTraceGetQueueType>
 8008668:	4603      	mov	r3, r0
 800866a:	461a      	mov	r2, r3
 800866c:	4b5e      	ldr	r3, [pc, #376]	; (80087e8 <xQueueReceive+0x378>)
 800866e:	5c9c      	ldrb	r4, [r3, r2]
 8008670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008672:	f7f8 ffc3 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8008676:	4603      	mov	r3, r0
 8008678:	b2db      	uxtb	r3, r3
 800867a:	461a      	mov	r2, r3
 800867c:	4621      	mov	r1, r4
 800867e:	4628      	mov	r0, r5
 8008680:	f7f9 fc18 	bl	8001eb4 <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8008684:	2300      	movs	r3, #0
 8008686:	e0f4      	b.n	8008872 <xQueueReceive+0x402>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868a:	2b00      	cmp	r3, #0
 800868c:	d106      	bne.n	800869c <xQueueReceive+0x22c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800868e:	f107 0310 	add.w	r3, r7, #16
 8008692:	4618      	mov	r0, r3
 8008694:	f001 faf8 	bl	8009c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008698:	2301      	movs	r3, #1
 800869a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800869c:	f002 fa9c 	bl	800abd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086a0:	f000 fec8 	bl	8009434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086a4:	f002 fa64 	bl	800ab70 <vPortEnterCritical>
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ae:	b25b      	sxtb	r3, r3
 80086b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b4:	d103      	bne.n	80086be <xQueueReceive+0x24e>
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086c4:	b25b      	sxtb	r3, r3
 80086c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ca:	d103      	bne.n	80086d4 <xQueueReceive+0x264>
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086d4:	f002 fa80 	bl	800abd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086d8:	1d3a      	adds	r2, r7, #4
 80086da:	f107 0310 	add.w	r3, r7, #16
 80086de:	4611      	mov	r1, r2
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 fae7 	bl	8009cb4 <xTaskCheckForTimeOut>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f040 8081 	bne.w	80087f0 <xQueueReceive+0x380>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086f0:	f000 fabd 	bl	8008c6e <prvIsQueueEmpty>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d06e      	beq.n	80087d8 <xQueueReceive+0x368>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80086fa:	f7f8 ffc9 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 80086fe:	4603      	mov	r3, r0
 8008700:	4618      	mov	r0, r3
 8008702:	f7f8 ff3f 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8008706:	4603      	mov	r3, r0
 8008708:	461a      	mov	r2, r3
 800870a:	4b36      	ldr	r3, [pc, #216]	; (80087e4 <xQueueReceive+0x374>)
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	4013      	ands	r3, r2
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d025      	beq.n	8008762 <xQueueReceive+0x2f2>
 8008716:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008718:	f7f8 ff7d 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 800871c:	4603      	mov	r3, r0
 800871e:	461a      	mov	r2, r3
 8008720:	4b30      	ldr	r3, [pc, #192]	; (80087e4 <xQueueReceive+0x374>)
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	4013      	ands	r3, r2
 8008726:	b29b      	uxth	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d01a      	beq.n	8008762 <xQueueReceive+0x2f2>
 800872c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800872e:	f7f8 ff10 	bl	8001552 <prvTraceGetQueueType>
 8008732:	4603      	mov	r3, r0
 8008734:	461a      	mov	r2, r3
 8008736:	4b2c      	ldr	r3, [pc, #176]	; (80087e8 <xQueueReceive+0x378>)
 8008738:	5c9b      	ldrb	r3, [r3, r2]
 800873a:	3368      	adds	r3, #104	; 0x68
 800873c:	b2db      	uxtb	r3, r3
 800873e:	461d      	mov	r5, r3
 8008740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008742:	f7f8 ff06 	bl	8001552 <prvTraceGetQueueType>
 8008746:	4603      	mov	r3, r0
 8008748:	461a      	mov	r2, r3
 800874a:	4b27      	ldr	r3, [pc, #156]	; (80087e8 <xQueueReceive+0x378>)
 800874c:	5c9c      	ldrb	r4, [r3, r2]
 800874e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008750:	f7f8 ff54 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8008754:	4603      	mov	r3, r0
 8008756:	b2db      	uxtb	r3, r3
 8008758:	461a      	mov	r2, r3
 800875a:	4621      	mov	r1, r4
 800875c:	4628      	mov	r0, r5
 800875e:	f7f9 fba9 	bl	8001eb4 <prvTraceStoreKernelCall>
 8008762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008764:	f7f8 fef5 	bl	8001552 <prvTraceGetQueueType>
 8008768:	4603      	mov	r3, r0
 800876a:	461a      	mov	r2, r3
 800876c:	4b1e      	ldr	r3, [pc, #120]	; (80087e8 <xQueueReceive+0x378>)
 800876e:	5c9b      	ldrb	r3, [r3, r2]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d018      	beq.n	80087a6 <xQueueReceive+0x336>
 8008774:	f7f8 ff8c 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8008778:	4603      	mov	r3, r0
 800877a:	4618      	mov	r0, r3
 800877c:	f7f8 ff02 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	4b17      	ldr	r3, [pc, #92]	; (80087e4 <xQueueReceive+0x374>)
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	4013      	ands	r3, r2
 800878a:	b29b      	uxth	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00a      	beq.n	80087a6 <xQueueReceive+0x336>
 8008790:	f7f8 ff7e 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8008794:	4603      	mov	r3, r0
 8008796:	4618      	mov	r0, r3
 8008798:	f7f8 fee7 	bl	800156a <prvTraceGetTaskNumberLow16>
 800879c:	4603      	mov	r3, r0
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7f9 fdcf 	bl	8002344 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	3324      	adds	r3, #36	; 0x24
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 f8a4 	bl	80098fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087b6:	f000 fa08 	bl	8008bca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087ba:	f000 fe49 	bl	8009450 <xTaskResumeAll>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f47f aea2 	bne.w	800850a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80087c6:	4b09      	ldr	r3, [pc, #36]	; (80087ec <xQueueReceive+0x37c>)
 80087c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	e698      	b.n	800850a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087da:	f000 f9f6 	bl	8008bca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087de:	f000 fe37 	bl	8009450 <xTaskResumeAll>
 80087e2:	e692      	b.n	800850a <xQueueReceive+0x9a>
 80087e4:	20001fcc 	.word	0x20001fcc
 80087e8:	20000004 	.word	0x20000004
 80087ec:	e000ed04 	.word	0xe000ed04
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087f2:	f000 f9ea 	bl	8008bca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087f6:	f000 fe2b 	bl	8009450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087fc:	f000 fa37 	bl	8008c6e <prvIsQueueEmpty>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	f43f ae81 	beq.w	800850a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008808:	f7f8 ff42 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 800880c:	4603      	mov	r3, r0
 800880e:	4618      	mov	r0, r3
 8008810:	f7f8 feb8 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8008814:	4603      	mov	r3, r0
 8008816:	461a      	mov	r2, r3
 8008818:	4b18      	ldr	r3, [pc, #96]	; (800887c <xQueueReceive+0x40c>)
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	4013      	ands	r3, r2
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d025      	beq.n	8008870 <xQueueReceive+0x400>
 8008824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008826:	f7f8 fef6 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 800882a:	4603      	mov	r3, r0
 800882c:	461a      	mov	r2, r3
 800882e:	4b13      	ldr	r3, [pc, #76]	; (800887c <xQueueReceive+0x40c>)
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	4013      	ands	r3, r2
 8008834:	b29b      	uxth	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d01a      	beq.n	8008870 <xQueueReceive+0x400>
 800883a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800883c:	f7f8 fe89 	bl	8001552 <prvTraceGetQueueType>
 8008840:	4603      	mov	r3, r0
 8008842:	461a      	mov	r2, r3
 8008844:	4b0e      	ldr	r3, [pc, #56]	; (8008880 <xQueueReceive+0x410>)
 8008846:	5c9b      	ldrb	r3, [r3, r2]
 8008848:	3350      	adds	r3, #80	; 0x50
 800884a:	b2db      	uxtb	r3, r3
 800884c:	461d      	mov	r5, r3
 800884e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008850:	f7f8 fe7f 	bl	8001552 <prvTraceGetQueueType>
 8008854:	4603      	mov	r3, r0
 8008856:	461a      	mov	r2, r3
 8008858:	4b09      	ldr	r3, [pc, #36]	; (8008880 <xQueueReceive+0x410>)
 800885a:	5c9c      	ldrb	r4, [r3, r2]
 800885c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800885e:	f7f8 fecd 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8008862:	4603      	mov	r3, r0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	461a      	mov	r2, r3
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f7f9 fb22 	bl	8001eb4 <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8008870:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008872:	4618      	mov	r0, r3
 8008874:	3730      	adds	r7, #48	; 0x30
 8008876:	46bd      	mov	sp, r7
 8008878:	bdb0      	pop	{r4, r5, r7, pc}
 800887a:	bf00      	nop
 800887c:	20001fcc 	.word	0x20001fcc
 8008880:	20000004 	.word	0x20000004

08008884 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008884:	b5b0      	push	{r4, r5, r7, lr}
 8008886:	b08e      	sub	sp, #56	; 0x38
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10c      	bne.n	80088b4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	b672      	cpsid	i
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	b662      	cpsie	i
 80088ae:	623b      	str	r3, [r7, #32]
}
 80088b0:	bf00      	nop
 80088b2:	e7fe      	b.n	80088b2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d103      	bne.n	80088c2 <xQueueReceiveFromISR+0x3e>
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <xQueueReceiveFromISR+0x42>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e000      	b.n	80088c8 <xQueueReceiveFromISR+0x44>
 80088c6:	2300      	movs	r3, #0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10c      	bne.n	80088e6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	b672      	cpsid	i
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	b662      	cpsie	i
 80088e0:	61fb      	str	r3, [r7, #28]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088e6:	f002 fa29 	bl	800ad3c <vPortValidateInterruptPriority>
	__asm volatile
 80088ea:	f3ef 8211 	mrs	r2, BASEPRI
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	b672      	cpsid	i
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	b662      	cpsie	i
 8008902:	61ba      	str	r2, [r7, #24]
 8008904:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008906:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008908:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	2b00      	cmp	r3, #0
 8008914:	d06a      	beq.n	80089ec <xQueueReceiveFromISR+0x168>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800891c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8008920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008922:	f7f8 fe78 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 8008926:	4603      	mov	r3, r0
 8008928:	461a      	mov	r2, r3
 800892a:	4b4a      	ldr	r3, [pc, #296]	; (8008a54 <xQueueReceiveFromISR+0x1d0>)
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	4013      	ands	r3, r2
 8008930:	b29b      	uxth	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01a      	beq.n	800896c <xQueueReceiveFromISR+0xe8>
 8008936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008938:	f7f8 fe0b 	bl	8001552 <prvTraceGetQueueType>
 800893c:	4603      	mov	r3, r0
 800893e:	461a      	mov	r2, r3
 8008940:	4b45      	ldr	r3, [pc, #276]	; (8008a58 <xQueueReceiveFromISR+0x1d4>)
 8008942:	5c9b      	ldrb	r3, [r3, r2]
 8008944:	3338      	adds	r3, #56	; 0x38
 8008946:	b2db      	uxtb	r3, r3
 8008948:	461d      	mov	r5, r3
 800894a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800894c:	f7f8 fe01 	bl	8001552 <prvTraceGetQueueType>
 8008950:	4603      	mov	r3, r0
 8008952:	461a      	mov	r2, r3
 8008954:	4b40      	ldr	r3, [pc, #256]	; (8008a58 <xQueueReceiveFromISR+0x1d4>)
 8008956:	5c9c      	ldrb	r4, [r3, r2]
 8008958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800895a:	f7f8 fe4f 	bl	80015fc <prvTraceGetQueueNumberLow16>
 800895e:	4603      	mov	r3, r0
 8008960:	b2db      	uxtb	r3, r3
 8008962:	461a      	mov	r2, r3
 8008964:	4621      	mov	r1, r4
 8008966:	4628      	mov	r0, r5
 8008968:	f7f9 faa4 	bl	8001eb4 <prvTraceStoreKernelCall>
 800896c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800896e:	f7f8 fdf0 	bl	8001552 <prvTraceGetQueueType>
 8008972:	4603      	mov	r3, r0
 8008974:	461a      	mov	r2, r3
 8008976:	4b38      	ldr	r3, [pc, #224]	; (8008a58 <xQueueReceiveFromISR+0x1d4>)
 8008978:	5c9c      	ldrb	r4, [r3, r2]
 800897a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800897c:	f7f8 fe3e 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8008980:	4603      	mov	r3, r0
 8008982:	b2d9      	uxtb	r1, r3
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008988:	b2db      	uxtb	r3, r3
 800898a:	3b01      	subs	r3, #1
 800898c:	b2db      	uxtb	r3, r3
 800898e:	461a      	mov	r2, r3
 8008990:	4620      	mov	r0, r4
 8008992:	f7f9 fc91 	bl	80022b8 <prvTraceSetObjectState>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008996:	68b9      	ldr	r1, [r7, #8]
 8008998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800899a:	f000 f8f0 	bl	8008b7e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	1e5a      	subs	r2, r3, #1
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80089a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ae:	d112      	bne.n	80089d6 <xQueueReceiveFromISR+0x152>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d016      	beq.n	80089e6 <xQueueReceiveFromISR+0x162>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	3310      	adds	r3, #16
 80089bc:	4618      	mov	r0, r3
 80089be:	f001 f86d 	bl	8009a9c <xTaskRemoveFromEventList>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00e      	beq.n	80089e6 <xQueueReceiveFromISR+0x162>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00b      	beq.n	80089e6 <xQueueReceiveFromISR+0x162>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	e007      	b.n	80089e6 <xQueueReceiveFromISR+0x162>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80089d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089da:	3301      	adds	r3, #1
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	b25a      	sxtb	r2, r3
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80089e6:	2301      	movs	r3, #1
 80089e8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ea:	e027      	b.n	8008a3c <xQueueReceiveFromISR+0x1b8>
		}
		else
		{
			xReturn = pdFAIL;
 80089ec:	2300      	movs	r3, #0
 80089ee:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 80089f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089f2:	f7f8 fe10 	bl	8001616 <prvTraceGetQueueNumberHigh16>
 80089f6:	4603      	mov	r3, r0
 80089f8:	461a      	mov	r2, r3
 80089fa:	4b16      	ldr	r3, [pc, #88]	; (8008a54 <xQueueReceiveFromISR+0x1d0>)
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	4013      	ands	r3, r2
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d01a      	beq.n	8008a3c <xQueueReceiveFromISR+0x1b8>
 8008a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a08:	f7f8 fda3 	bl	8001552 <prvTraceGetQueueType>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	461a      	mov	r2, r3
 8008a10:	4b11      	ldr	r3, [pc, #68]	; (8008a58 <xQueueReceiveFromISR+0x1d4>)
 8008a12:	5c9b      	ldrb	r3, [r3, r2]
 8008a14:	3360      	adds	r3, #96	; 0x60
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	461d      	mov	r5, r3
 8008a1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a1c:	f7f8 fd99 	bl	8001552 <prvTraceGetQueueType>
 8008a20:	4603      	mov	r3, r0
 8008a22:	461a      	mov	r2, r3
 8008a24:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <xQueueReceiveFromISR+0x1d4>)
 8008a26:	5c9c      	ldrb	r4, [r3, r2]
 8008a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a2a:	f7f8 fde7 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	461a      	mov	r2, r3
 8008a34:	4621      	mov	r1, r4
 8008a36:	4628      	mov	r0, r5
 8008a38:	f7f9 fa3c 	bl	8001eb4 <prvTraceStoreKernelCall>
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f383 8811 	msr	BASEPRI, r3
}
 8008a46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3738      	adds	r7, #56	; 0x38
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bdb0      	pop	{r4, r5, r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20001fcc 	.word	0x20001fcc
 8008a58:	20000004 	.word	0x20000004

08008a5c <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b086      	sub	sp, #24
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10d      	bne.n	8008ae4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d14d      	bne.n	8008b6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f001 fa93 	bl	800a000 <xTaskPriorityDisinherit>
 8008ada:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	609a      	str	r2, [r3, #8]
 8008ae2:	e043      	b.n	8008b6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d119      	bne.n	8008b1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6858      	ldr	r0, [r3, #4]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	461a      	mov	r2, r3
 8008af4:	68b9      	ldr	r1, [r7, #8]
 8008af6:	f002 fba1 	bl	800b23c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	685a      	ldr	r2, [r3, #4]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	441a      	add	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d32b      	bcc.n	8008b6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	605a      	str	r2, [r3, #4]
 8008b1c:	e026      	b.n	8008b6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	68d8      	ldr	r0, [r3, #12]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	461a      	mov	r2, r3
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	f002 fb87 	bl	800b23c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	68da      	ldr	r2, [r3, #12]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	425b      	negs	r3, r3
 8008b38:	441a      	add	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d207      	bcs.n	8008b5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	689a      	ldr	r2, [r3, #8]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	425b      	negs	r3, r3
 8008b54:	441a      	add	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d105      	bne.n	8008b6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b74:	697b      	ldr	r3, [r7, #20]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d018      	beq.n	8008bc2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b98:	441a      	add	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d303      	bcc.n	8008bb2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68d9      	ldr	r1, [r3, #12]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bba:	461a      	mov	r2, r3
 8008bbc:	6838      	ldr	r0, [r7, #0]
 8008bbe:	f002 fb3d 	bl	800b23c <memcpy>
	}
}
 8008bc2:	bf00      	nop
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008bd2:	f001 ffcd 	bl	800ab70 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bdc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bde:	e011      	b.n	8008c04 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d012      	beq.n	8008c0e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3324      	adds	r3, #36	; 0x24
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 ff55 	bl	8009a9c <xTaskRemoveFromEventList>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bf8:	f001 f8c2 	bl	8009d80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	dce9      	bgt.n	8008be0 <prvUnlockQueue+0x16>
 8008c0c:	e000      	b.n	8008c10 <prvUnlockQueue+0x46>
					break;
 8008c0e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	22ff      	movs	r2, #255	; 0xff
 8008c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c18:	f001 ffde 	bl	800abd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c1c:	f001 ffa8 	bl	800ab70 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c26:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c28:	e011      	b.n	8008c4e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d012      	beq.n	8008c58 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	3310      	adds	r3, #16
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 ff30 	bl	8009a9c <xTaskRemoveFromEventList>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c42:	f001 f89d 	bl	8009d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dce9      	bgt.n	8008c2a <prvUnlockQueue+0x60>
 8008c56:	e000      	b.n	8008c5a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c58:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	22ff      	movs	r2, #255	; 0xff
 8008c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c62:	f001 ffb9 	bl	800abd8 <vPortExitCritical>
}
 8008c66:	bf00      	nop
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c76:	f001 ff7b 	bl	800ab70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c82:	2301      	movs	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	e001      	b.n	8008c8c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c8c:	f001 ffa4 	bl	800abd8 <vPortExitCritical>

	return xReturn;
 8008c90:	68fb      	ldr	r3, [r7, #12]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ca2:	f001 ff65 	bl	800ab70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d102      	bne.n	8008cb8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	e001      	b.n	8008cbc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cbc:	f001 ff8c 	bl	800abd8 <vPortExitCritical>

	return xReturn;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ccc:	b590      	push	{r4, r7, lr}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	e025      	b.n	8008d28 <vQueueAddToRegistry+0x5c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008cdc:	4a16      	ldr	r2, [pc, #88]	; (8008d38 <vQueueAddToRegistry+0x6c>)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d11c      	bne.n	8008d22 <vQueueAddToRegistry+0x56>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ce8:	4913      	ldr	r1, [pc, #76]	; (8008d38 <vQueueAddToRegistry+0x6c>)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008cf2:	4a11      	ldr	r2, [pc, #68]	; (8008d38 <vQueueAddToRegistry+0x6c>)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7f8 fc27 	bl	8001552 <prvTraceGetQueueType>
 8008d04:	4603      	mov	r3, r0
 8008d06:	461a      	mov	r2, r3
 8008d08:	4b0c      	ldr	r3, [pc, #48]	; (8008d3c <vQueueAddToRegistry+0x70>)
 8008d0a:	5c9c      	ldrb	r4, [r3, r2]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7f8 fc75 	bl	80015fc <prvTraceGetQueueNumberLow16>
 8008d12:	4603      	mov	r3, r0
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7f9 fc6c 	bl	80025f8 <prvTraceSetObjectName>
				break;
 8008d20:	e006      	b.n	8008d30 <vQueueAddToRegistry+0x64>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3301      	adds	r3, #1
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b07      	cmp	r3, #7
 8008d2c:	d9d6      	bls.n	8008cdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d2e:	bf00      	nop
 8008d30:	bf00      	nop
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd90      	pop	{r4, r7, pc}
 8008d38:	20004160 	.word	0x20004160
 8008d3c:	20000004 	.word	0x20000004

08008d40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d50:	f001 ff0e 	bl	800ab70 <vPortEnterCritical>
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d5a:	b25b      	sxtb	r3, r3
 8008d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d60:	d103      	bne.n	8008d6a <vQueueWaitForMessageRestricted+0x2a>
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d70:	b25b      	sxtb	r3, r3
 8008d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d76:	d103      	bne.n	8008d80 <vQueueWaitForMessageRestricted+0x40>
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d80:	f001 ff2a 	bl	800abd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d106      	bne.n	8008d9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	3324      	adds	r3, #36	; 0x24
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	68b9      	ldr	r1, [r7, #8]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f000 fe17 	bl	80099c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d9a:	6978      	ldr	r0, [r7, #20]
 8008d9c:	f7ff ff15 	bl	8008bca <prvUnlockQueue>
	}
 8008da0:	bf00      	nop
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08e      	sub	sp, #56	; 0x38
 8008dac:	af04      	add	r7, sp, #16
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10c      	bne.n	8008dd6 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	b672      	cpsid	i
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	b662      	cpsie	i
 8008dd0:	623b      	str	r3, [r7, #32]
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10c      	bne.n	8008df6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	b672      	cpsid	i
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	b662      	cpsie	i
 8008df0:	61fb      	str	r3, [r7, #28]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008df6:	23c0      	movs	r3, #192	; 0xc0
 8008df8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	2bc0      	cmp	r3, #192	; 0xc0
 8008dfe:	d00c      	beq.n	8008e1a <xTaskCreateStatic+0x72>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	b672      	cpsid	i
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	b662      	cpsie	i
 8008e14:	61bb      	str	r3, [r7, #24]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d01e      	beq.n	8008e60 <xTaskCreateStatic+0xb8>
 8008e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01b      	beq.n	8008e60 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	9303      	str	r3, [sp, #12]
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	9302      	str	r3, [sp, #8]
 8008e42:	f107 0314 	add.w	r3, r7, #20
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	68b9      	ldr	r1, [r7, #8]
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 f850 	bl	8008ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e5a:	f000 f8f9 	bl	8009050 <prvAddNewTaskToReadyList>
 8008e5e:	e001      	b.n	8008e64 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e64:	697b      	ldr	r3, [r7, #20]
	}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3728      	adds	r7, #40	; 0x28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b08c      	sub	sp, #48	; 0x30
 8008e72:	af04      	add	r7, sp, #16
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	603b      	str	r3, [r7, #0]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e7e:	88fb      	ldrh	r3, [r7, #6]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f001 ff9e 	bl	800adc4 <pvPortMalloc>
 8008e88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00e      	beq.n	8008eae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e90:	20c0      	movs	r0, #192	; 0xc0
 8008e92:	f001 ff97 	bl	800adc4 <pvPortMalloc>
 8008e96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ea4:	e005      	b.n	8008eb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ea6:	6978      	ldr	r0, [r7, #20]
 8008ea8:	f002 f866 	bl	800af78 <vPortFree>
 8008eac:	e001      	b.n	8008eb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d017      	beq.n	8008ee8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ec0:	88fa      	ldrh	r2, [r7, #6]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	9303      	str	r3, [sp, #12]
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	9302      	str	r3, [sp, #8]
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 f80e 	bl	8008ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008edc:	69f8      	ldr	r0, [r7, #28]
 8008ede:	f000 f8b7 	bl	8009050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	e002      	b.n	8008eee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8008eec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008eee:	69bb      	ldr	r3, [r7, #24]
	}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3720      	adds	r7, #32
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	461a      	mov	r2, r3
 8008f10:	21a5      	movs	r1, #165	; 0xa5
 8008f12:	f002 f9a1 	bl	800b258 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008f20:	440b      	add	r3, r1
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	f023 0307 	bic.w	r3, r3, #7
 8008f2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	f003 0307 	and.w	r3, r3, #7
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00c      	beq.n	8008f54 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	b672      	cpsid	i
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	b662      	cpsie	i
 8008f4e:	617b      	str	r3, [r7, #20]
}
 8008f50:	bf00      	nop
 8008f52:	e7fe      	b.n	8008f52 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d01f      	beq.n	8008f9a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	61fb      	str	r3, [r7, #28]
 8008f5e:	e012      	b.n	8008f86 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	4413      	add	r3, r2
 8008f66:	7819      	ldrb	r1, [r3, #0]
 8008f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	3334      	adds	r3, #52	; 0x34
 8008f70:	460a      	mov	r2, r1
 8008f72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	4413      	add	r3, r2
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d006      	beq.n	8008f8e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	3301      	adds	r3, #1
 8008f84:	61fb      	str	r3, [r7, #28]
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	2b0f      	cmp	r3, #15
 8008f8a:	d9e9      	bls.n	8008f60 <prvInitialiseNewTask+0x68>
 8008f8c:	e000      	b.n	8008f90 <prvInitialiseNewTask+0x98>
			{
				break;
 8008f8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f98:	e003      	b.n	8008fa2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	2b37      	cmp	r3, #55	; 0x37
 8008fa6:	d901      	bls.n	8008fac <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fa8:	2337      	movs	r3, #55	; 0x37
 8008faa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fba:	2200      	movs	r2, #0
 8008fbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fe fc96 	bl	80078f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	3318      	adds	r3, #24
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe fc91 	bl	80078f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fea:	2200      	movs	r2, #0
 8008fec:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	3358      	adds	r3, #88	; 0x58
 8009002:	2260      	movs	r2, #96	; 0x60
 8009004:	2100      	movs	r1, #0
 8009006:	4618      	mov	r0, r3
 8009008:	f002 f926 	bl	800b258 <memset>
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	4a0d      	ldr	r2, [pc, #52]	; (8009044 <prvInitialiseNewTask+0x14c>)
 8009010:	65da      	str	r2, [r3, #92]	; 0x5c
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	4a0c      	ldr	r2, [pc, #48]	; (8009048 <prvInitialiseNewTask+0x150>)
 8009016:	661a      	str	r2, [r3, #96]	; 0x60
 8009018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901a:	4a0c      	ldr	r2, [pc, #48]	; (800904c <prvInitialiseNewTask+0x154>)
 800901c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	68f9      	ldr	r1, [r7, #12]
 8009022:	69b8      	ldr	r0, [r7, #24]
 8009024:	f001 fc88 	bl	800a938 <pxPortInitialiseStack>
 8009028:	4602      	mov	r2, r0
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800902e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009038:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800903a:	bf00      	nop
 800903c:	3720      	adds	r7, #32
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	0800beec 	.word	0x0800beec
 8009048:	0800bf0c 	.word	0x0800bf0c
 800904c:	0800becc 	.word	0x0800becc

08009050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009058:	f001 fd8a 	bl	800ab70 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800905c:	4b69      	ldr	r3, [pc, #420]	; (8009204 <prvAddNewTaskToReadyList+0x1b4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3301      	adds	r3, #1
 8009062:	4a68      	ldr	r2, [pc, #416]	; (8009204 <prvAddNewTaskToReadyList+0x1b4>)
 8009064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009066:	4b68      	ldr	r3, [pc, #416]	; (8009208 <prvAddNewTaskToReadyList+0x1b8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800906e:	4a66      	ldr	r2, [pc, #408]	; (8009208 <prvAddNewTaskToReadyList+0x1b8>)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009074:	4b63      	ldr	r3, [pc, #396]	; (8009204 <prvAddNewTaskToReadyList+0x1b4>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d110      	bne.n	800909e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800907c:	f000 fece 	bl	8009e1c <prvInitialiseTaskLists>
 8009080:	e00d      	b.n	800909e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009082:	4b62      	ldr	r3, [pc, #392]	; (800920c <prvAddNewTaskToReadyList+0x1bc>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d109      	bne.n	800909e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800908a:	4b5f      	ldr	r3, [pc, #380]	; (8009208 <prvAddNewTaskToReadyList+0x1b8>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	429a      	cmp	r2, r3
 8009096:	d802      	bhi.n	800909e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009098:	4a5b      	ldr	r2, [pc, #364]	; (8009208 <prvAddNewTaskToReadyList+0x1b8>)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800909e:	4b5c      	ldr	r3, [pc, #368]	; (8009210 <prvAddNewTaskToReadyList+0x1c0>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3301      	adds	r3, #1
 80090a4:	4a5a      	ldr	r2, [pc, #360]	; (8009210 <prvAddNewTaskToReadyList+0x1c0>)
 80090a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090a8:	4b59      	ldr	r3, [pc, #356]	; (8009210 <prvAddNewTaskToReadyList+0x1c0>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d062      	beq.n	800917c <prvAddNewTaskToReadyList+0x12c>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d049      	beq.n	8009150 <prvAddNewTaskToReadyList+0x100>
 80090bc:	2003      	movs	r0, #3
 80090be:	f7f9 f9bf 	bl	8002440 <prvTraceGetObjectHandle>
 80090c2:	4603      	mov	r3, r0
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7f8 fa69 	bl	80015a0 <prvTraceSetTaskNumberLow16>
 80090ce:	4b51      	ldr	r3, [pc, #324]	; (8009214 <prvAddNewTaskToReadyList+0x1c4>)
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7f8 fa7b 	bl	80015d0 <prvTraceSetTaskNumberHigh16>
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7f8 fa45 	bl	800156a <prvTraceGetTaskNumberLow16>
 80090e0:	4603      	mov	r3, r0
 80090e2:	b2d9      	uxtb	r1, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3334      	adds	r3, #52	; 0x34
 80090e8:	461a      	mov	r2, r3
 80090ea:	2003      	movs	r0, #3
 80090ec:	f7f9 fa84 	bl	80025f8 <prvTraceSetObjectName>
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7f8 fa3a 	bl	800156a <prvTraceGetTaskNumberLow16>
 80090f6:	4603      	mov	r3, r0
 80090f8:	b2d9      	uxtb	r1, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	2003      	movs	r0, #3
 8009104:	f7f9 f88e 	bl	8002224 <prvTraceSetPriorityProperty>
 8009108:	f7f8 fac2 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 800910c:	4603      	mov	r3, r0
 800910e:	4618      	mov	r0, r3
 8009110:	f7f8 fa38 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8009114:	4603      	mov	r3, r0
 8009116:	461a      	mov	r2, r3
 8009118:	4b3f      	ldr	r3, [pc, #252]	; (8009218 <prvAddNewTaskToReadyList+0x1c8>)
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	4013      	ands	r3, r2
 800911e:	b29b      	uxth	r3, r3
 8009120:	2b00      	cmp	r3, #0
 8009122:	d028      	beq.n	8009176 <prvAddNewTaskToReadyList+0x126>
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f7f8 fa2d 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 800912a:	4603      	mov	r3, r0
 800912c:	461a      	mov	r2, r3
 800912e:	4b3a      	ldr	r3, [pc, #232]	; (8009218 <prvAddNewTaskToReadyList+0x1c8>)
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	4013      	ands	r3, r2
 8009134:	b29b      	uxth	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d01d      	beq.n	8009176 <prvAddNewTaskToReadyList+0x126>
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7f8 fa15 	bl	800156a <prvTraceGetTaskNumberLow16>
 8009140:	4603      	mov	r3, r0
 8009142:	b2db      	uxtb	r3, r3
 8009144:	461a      	mov	r2, r3
 8009146:	2103      	movs	r1, #3
 8009148:	201b      	movs	r0, #27
 800914a:	f7f8 feb3 	bl	8001eb4 <prvTraceStoreKernelCall>
 800914e:	e012      	b.n	8009176 <prvAddNewTaskToReadyList+0x126>
 8009150:	f7f8 fa9e 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8009154:	4603      	mov	r3, r0
 8009156:	4618      	mov	r0, r3
 8009158:	f7f8 fa14 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 800915c:	4603      	mov	r3, r0
 800915e:	461a      	mov	r2, r3
 8009160:	4b2d      	ldr	r3, [pc, #180]	; (8009218 <prvAddNewTaskToReadyList+0x1c8>)
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	4013      	ands	r3, r2
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d004      	beq.n	8009176 <prvAddNewTaskToReadyList+0x126>
 800916c:	2200      	movs	r2, #0
 800916e:	2103      	movs	r1, #3
 8009170:	201b      	movs	r0, #27
 8009172:	f7f8 fe9f 	bl	8001eb4 <prvTraceStoreKernelCall>
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7f9 fcc0 	bl	8002afc <prvAddTaskToStackMonitor>

		prvAddTaskToReadyList( pxNewTCB );
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7f8 fa01 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8009182:	4603      	mov	r3, r0
 8009184:	461a      	mov	r2, r3
 8009186:	4b24      	ldr	r3, [pc, #144]	; (8009218 <prvAddNewTaskToReadyList+0x1c8>)
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	4013      	ands	r3, r2
 800918c:	b29b      	uxth	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d007      	beq.n	80091a2 <prvAddNewTaskToReadyList+0x152>
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7f8 f9e9 	bl	800156a <prvTraceGetTaskNumberLow16>
 8009198:	4603      	mov	r3, r0
 800919a:	b2db      	uxtb	r3, r3
 800919c:	4618      	mov	r0, r3
 800919e:	f7f8 fd95 	bl	8001ccc <prvTraceStoreTaskReady>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a6:	4b1d      	ldr	r3, [pc, #116]	; (800921c <prvAddNewTaskToReadyList+0x1cc>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d903      	bls.n	80091b6 <prvAddNewTaskToReadyList+0x166>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b2:	4a1a      	ldr	r2, [pc, #104]	; (800921c <prvAddNewTaskToReadyList+0x1cc>)
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ba:	4613      	mov	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4a17      	ldr	r2, [pc, #92]	; (8009220 <prvAddNewTaskToReadyList+0x1d0>)
 80091c4:	441a      	add	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3304      	adds	r3, #4
 80091ca:	4619      	mov	r1, r3
 80091cc:	4610      	mov	r0, r2
 80091ce:	f7fe fb9e 	bl	800790e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80091d2:	f001 fd01 	bl	800abd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091d6:	4b0d      	ldr	r3, [pc, #52]	; (800920c <prvAddNewTaskToReadyList+0x1bc>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00e      	beq.n	80091fc <prvAddNewTaskToReadyList+0x1ac>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091de:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <prvAddNewTaskToReadyList+0x1b8>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d207      	bcs.n	80091fc <prvAddNewTaskToReadyList+0x1ac>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091ec:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <prvAddNewTaskToReadyList+0x1d4>)
 80091ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091fc:	bf00      	nop
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	20004674 	.word	0x20004674
 8009208:	200041a0 	.word	0x200041a0
 800920c:	20004680 	.word	0x20004680
 8009210:	20004690 	.word	0x20004690
 8009214:	20001fce 	.word	0x20001fce
 8009218:	20001fcc 	.word	0x20001fcc
 800921c:	2000467c 	.word	0x2000467c
 8009220:	200041a4 	.word	0x200041a4
 8009224:	e000ed04 	.word	0xe000ed04

08009228 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009230:	2300      	movs	r3, #0
 8009232:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d04d      	beq.n	80092d6 <vTaskDelay+0xae>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800923a:	4b2e      	ldr	r3, [pc, #184]	; (80092f4 <vTaskDelay+0xcc>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00c      	beq.n	800925c <vTaskDelay+0x34>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	b672      	cpsid	i
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	b662      	cpsie	i
 8009256:	60bb      	str	r3, [r7, #8]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800925c:	f000 f8ea 	bl	8009434 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8009260:	4b25      	ldr	r3, [pc, #148]	; (80092f8 <vTaskDelay+0xd0>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4618      	mov	r0, r3
 8009266:	f7f8 f98d 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 800926a:	4603      	mov	r3, r0
 800926c:	461a      	mov	r2, r3
 800926e:	4b23      	ldr	r3, [pc, #140]	; (80092fc <vTaskDelay+0xd4>)
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	4013      	ands	r3, r2
 8009274:	b29b      	uxth	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00d      	beq.n	8009296 <vTaskDelay+0x6e>
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	2089      	movs	r0, #137	; 0x89
 800927e:	f7f8 ff0b 	bl	8002098 <prvTraceStoreKernelCallWithNumericParamOnly>
 8009282:	4b1d      	ldr	r3, [pc, #116]	; (80092f8 <vTaskDelay+0xd0>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f7f8 f96f 	bl	800156a <prvTraceGetTaskNumberLow16>
 800928c:	4603      	mov	r3, r0
 800928e:	b2db      	uxtb	r3, r3
 8009290:	4618      	mov	r0, r3
 8009292:	f7f9 f857 	bl	8002344 <prvTraceSetTaskInstanceFinished>
 8009296:	f7f8 f9fb 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 800929a:	4603      	mov	r3, r0
 800929c:	4618      	mov	r0, r3
 800929e:	f7f8 f971 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b15      	ldr	r3, [pc, #84]	; (80092fc <vTaskDelay+0xd4>)
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	4013      	ands	r3, r2
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <vTaskDelay+0xa0>
 80092b2:	f7f8 f9ed 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 80092b6:	4603      	mov	r3, r0
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7f8 f956 	bl	800156a <prvTraceGetTaskNumberLow16>
 80092be:	4603      	mov	r3, r0
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7f9 f83e 	bl	8002344 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092c8:	2100      	movs	r1, #0
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 ff64 	bl	800a198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092d0:	f000 f8be 	bl	8009450 <xTaskResumeAll>
 80092d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d107      	bne.n	80092ec <vTaskDelay+0xc4>
		{
			portYIELD_WITHIN_API();
 80092dc:	4b08      	ldr	r3, [pc, #32]	; (8009300 <vTaskDelay+0xd8>)
 80092de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092ec:	bf00      	nop
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	2000469c 	.word	0x2000469c
 80092f8:	200041a0 	.word	0x200041a0
 80092fc:	20001fcc 	.word	0x20001fcc
 8009300:	e000ed04 	.word	0xe000ed04

08009304 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08a      	sub	sp, #40	; 0x28
 8009308:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800930e:	2300      	movs	r3, #0
 8009310:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009312:	463a      	mov	r2, r7
 8009314:	1d39      	adds	r1, r7, #4
 8009316:	f107 0308 	add.w	r3, r7, #8
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe f898 	bl	8007450 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	9202      	str	r2, [sp, #8]
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	2300      	movs	r3, #0
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	2300      	movs	r3, #0
 8009330:	460a      	mov	r2, r1
 8009332:	4936      	ldr	r1, [pc, #216]	; (800940c <vTaskStartScheduler+0x108>)
 8009334:	4836      	ldr	r0, [pc, #216]	; (8009410 <vTaskStartScheduler+0x10c>)
 8009336:	f7ff fd37 	bl	8008da8 <xTaskCreateStatic>
 800933a:	4603      	mov	r3, r0
 800933c:	4a35      	ldr	r2, [pc, #212]	; (8009414 <vTaskStartScheduler+0x110>)
 800933e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009340:	4b34      	ldr	r3, [pc, #208]	; (8009414 <vTaskStartScheduler+0x110>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009348:	2301      	movs	r3, #1
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	e001      	b.n	8009352 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800934e:	2300      	movs	r3, #0
 8009350:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d102      	bne.n	800935e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009358:	f000 ff72 	bl	800a240 <xTimerCreateTimerTask>
 800935c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d13e      	bne.n	80093e2 <vTaskStartScheduler+0xde>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	b672      	cpsid	i
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	b662      	cpsie	i
 8009378:	613b      	str	r3, [r7, #16]
}
 800937a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800937c:	4b26      	ldr	r3, [pc, #152]	; (8009418 <vTaskStartScheduler+0x114>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3358      	adds	r3, #88	; 0x58
 8009382:	4a26      	ldr	r2, [pc, #152]	; (800941c <vTaskStartScheduler+0x118>)
 8009384:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009386:	4b26      	ldr	r3, [pc, #152]	; (8009420 <vTaskStartScheduler+0x11c>)
 8009388:	f04f 32ff 	mov.w	r2, #4294967295
 800938c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800938e:	4b25      	ldr	r3, [pc, #148]	; (8009424 <vTaskStartScheduler+0x120>)
 8009390:	2201      	movs	r2, #1
 8009392:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009394:	4b24      	ldr	r3, [pc, #144]	; (8009428 <vTaskStartScheduler+0x124>)
 8009396:	2200      	movs	r2, #0
 8009398:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800939a:	f7f7 fc27 	bl	8000bec <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 800939e:	4b23      	ldr	r3, [pc, #140]	; (800942c <vTaskStartScheduler+0x128>)
 80093a0:	2201      	movs	r2, #1
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f7f8 f974 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 80093a8:	4603      	mov	r3, r0
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7f8 f8ea 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 80093b0:	4603      	mov	r3, r0
 80093b2:	461a      	mov	r2, r3
 80093b4:	4b1e      	ldr	r3, [pc, #120]	; (8009430 <vTaskStartScheduler+0x12c>)
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	4013      	ands	r3, r2
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00a      	beq.n	80093d6 <vTaskStartScheduler+0xd2>
 80093c0:	f7f8 f966 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 80093c4:	4603      	mov	r3, r0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7f8 f8cf 	bl	800156a <prvTraceGetTaskNumberLow16>
 80093cc:	4603      	mov	r3, r0
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7f8 febd 	bl	8002150 <prvTraceStoreTaskswitch>
 80093d6:	4b15      	ldr	r3, [pc, #84]	; (800942c <vTaskStartScheduler+0x128>)
 80093d8:	2202      	movs	r2, #2
 80093da:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093dc:	f001 fb38 	bl	800aa50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093e0:	e010      	b.n	8009404 <vTaskStartScheduler+0x100>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e8:	d10c      	bne.n	8009404 <vTaskStartScheduler+0x100>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	b672      	cpsid	i
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	b662      	cpsie	i
 80093fe:	60fb      	str	r3, [r7, #12]
}
 8009400:	bf00      	nop
 8009402:	e7fe      	b.n	8009402 <vTaskStartScheduler+0xfe>
}
 8009404:	bf00      	nop
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	0800bd50 	.word	0x0800bd50
 8009410:	08009ded 	.word	0x08009ded
 8009414:	20004698 	.word	0x20004698
 8009418:	200041a0 	.word	0x200041a0
 800941c:	2000001c 	.word	0x2000001c
 8009420:	20004694 	.word	0x20004694
 8009424:	20004680 	.word	0x20004680
 8009428:	20004678 	.word	0x20004678
 800942c:	20001fb4 	.word	0x20001fb4
 8009430:	20001fcc 	.word	0x20001fcc

08009434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009434:	b480      	push	{r7}
 8009436:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009438:	4b04      	ldr	r3, [pc, #16]	; (800944c <vTaskSuspendAll+0x18>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3301      	adds	r3, #1
 800943e:	4a03      	ldr	r2, [pc, #12]	; (800944c <vTaskSuspendAll+0x18>)
 8009440:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009442:	bf00      	nop
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	2000469c 	.word	0x2000469c

08009450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800945a:	2300      	movs	r3, #0
 800945c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800945e:	4b4c      	ldr	r3, [pc, #304]	; (8009590 <xTaskResumeAll+0x140>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10c      	bne.n	8009480 <xTaskResumeAll+0x30>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946a:	b672      	cpsid	i
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	b662      	cpsie	i
 800947a:	603b      	str	r3, [r7, #0]
}
 800947c:	bf00      	nop
 800947e:	e7fe      	b.n	800947e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009480:	f001 fb76 	bl	800ab70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009484:	4b42      	ldr	r3, [pc, #264]	; (8009590 <xTaskResumeAll+0x140>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3b01      	subs	r3, #1
 800948a:	4a41      	ldr	r2, [pc, #260]	; (8009590 <xTaskResumeAll+0x140>)
 800948c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800948e:	4b40      	ldr	r3, [pc, #256]	; (8009590 <xTaskResumeAll+0x140>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d175      	bne.n	8009582 <xTaskResumeAll+0x132>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009496:	4b3f      	ldr	r3, [pc, #252]	; (8009594 <xTaskResumeAll+0x144>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d071      	beq.n	8009582 <xTaskResumeAll+0x132>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800949e:	e042      	b.n	8009526 <xTaskResumeAll+0xd6>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a0:	4b3d      	ldr	r3, [pc, #244]	; (8009598 <xTaskResumeAll+0x148>)
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	3318      	adds	r3, #24
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fe fa8b 	bl	80079c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3304      	adds	r3, #4
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe fa86 	bl	80079c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7f8 f861 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 80094c2:	4603      	mov	r3, r0
 80094c4:	461a      	mov	r2, r3
 80094c6:	4b35      	ldr	r3, [pc, #212]	; (800959c <xTaskResumeAll+0x14c>)
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	4013      	ands	r3, r2
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d007      	beq.n	80094e2 <xTaskResumeAll+0x92>
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7f8 f849 	bl	800156a <prvTraceGetTaskNumberLow16>
 80094d8:	4603      	mov	r3, r0
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	4618      	mov	r0, r3
 80094de:	f7f8 fbf5 	bl	8001ccc <prvTraceStoreTaskReady>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e6:	4b2e      	ldr	r3, [pc, #184]	; (80095a0 <xTaskResumeAll+0x150>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d903      	bls.n	80094f6 <xTaskResumeAll+0xa6>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f2:	4a2b      	ldr	r2, [pc, #172]	; (80095a0 <xTaskResumeAll+0x150>)
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fa:	4613      	mov	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4a28      	ldr	r2, [pc, #160]	; (80095a4 <xTaskResumeAll+0x154>)
 8009504:	441a      	add	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3304      	adds	r3, #4
 800950a:	4619      	mov	r1, r3
 800950c:	4610      	mov	r0, r2
 800950e:	f7fe f9fe 	bl	800790e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009516:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <xTaskResumeAll+0x158>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951c:	429a      	cmp	r2, r3
 800951e:	d302      	bcc.n	8009526 <xTaskResumeAll+0xd6>
					{
						xYieldPending = pdTRUE;
 8009520:	4b22      	ldr	r3, [pc, #136]	; (80095ac <xTaskResumeAll+0x15c>)
 8009522:	2201      	movs	r2, #1
 8009524:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009526:	4b1c      	ldr	r3, [pc, #112]	; (8009598 <xTaskResumeAll+0x148>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1b8      	bne.n	80094a0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <xTaskResumeAll+0xe8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009534:	f000 fd16 	bl	8009f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009538:	4b1d      	ldr	r3, [pc, #116]	; (80095b0 <xTaskResumeAll+0x160>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d010      	beq.n	8009566 <xTaskResumeAll+0x116>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009544:	f000 f848 	bl	80095d8 <xTaskIncrementTick>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <xTaskResumeAll+0x104>
							{
								xYieldPending = pdTRUE;
 800954e:	4b17      	ldr	r3, [pc, #92]	; (80095ac <xTaskResumeAll+0x15c>)
 8009550:	2201      	movs	r2, #1
 8009552:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3b01      	subs	r3, #1
 8009558:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1f1      	bne.n	8009544 <xTaskResumeAll+0xf4>

						uxPendedTicks = 0;
 8009560:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <xTaskResumeAll+0x160>)
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009566:	4b11      	ldr	r3, [pc, #68]	; (80095ac <xTaskResumeAll+0x15c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d009      	beq.n	8009582 <xTaskResumeAll+0x132>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800956e:	2301      	movs	r3, #1
 8009570:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009572:	4b10      	ldr	r3, [pc, #64]	; (80095b4 <xTaskResumeAll+0x164>)
 8009574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009578:	601a      	str	r2, [r3, #0]
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009582:	f001 fb29 	bl	800abd8 <vPortExitCritical>

	return xAlreadyYielded;
 8009586:	68bb      	ldr	r3, [r7, #8]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	2000469c 	.word	0x2000469c
 8009594:	20004674 	.word	0x20004674
 8009598:	20004634 	.word	0x20004634
 800959c:	20001fcc 	.word	0x20001fcc
 80095a0:	2000467c 	.word	0x2000467c
 80095a4:	200041a4 	.word	0x200041a4
 80095a8:	200041a0 	.word	0x200041a0
 80095ac:	20004688 	.word	0x20004688
 80095b0:	20004684 	.word	0x20004684
 80095b4:	e000ed04 	.word	0xe000ed04

080095b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095be:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <xTaskGetTickCount+0x1c>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095c4:	687b      	ldr	r3, [r7, #4]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	20004678 	.word	0x20004678

080095d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095de:	2300      	movs	r3, #0
 80095e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 80095e2:	4b67      	ldr	r3, [pc, #412]	; (8009780 <xTaskIncrementTick+0x1a8>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d003      	beq.n	80095f2 <xTaskIncrementTick+0x1a>
 80095ea:	4b66      	ldr	r3, [pc, #408]	; (8009784 <xTaskIncrementTick+0x1ac>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d107      	bne.n	8009602 <xTaskIncrementTick+0x2a>
 80095f2:	4b65      	ldr	r3, [pc, #404]	; (8009788 <xTaskIncrementTick+0x1b0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3301      	adds	r3, #1
 80095f8:	4a63      	ldr	r2, [pc, #396]	; (8009788 <xTaskIncrementTick+0x1b0>)
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	2000      	movs	r0, #0
 80095fe:	f7f9 fa33 	bl	8002a68 <prvTracePortGetTimeStamp>
 8009602:	4b5f      	ldr	r3, [pc, #380]	; (8009780 <xTaskIncrementTick+0x1a8>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d106      	bne.n	8009618 <xTaskIncrementTick+0x40>
 800960a:	4b60      	ldr	r3, [pc, #384]	; (800978c <xTaskIncrementTick+0x1b4>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3301      	adds	r3, #1
 8009610:	4619      	mov	r1, r3
 8009612:	2003      	movs	r0, #3
 8009614:	f7f8 fd40 	bl	8002098 <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009618:	4b59      	ldr	r3, [pc, #356]	; (8009780 <xTaskIncrementTick+0x1a8>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f040 809e 	bne.w	800975e <xTaskIncrementTick+0x186>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009622:	4b5a      	ldr	r3, [pc, #360]	; (800978c <xTaskIncrementTick+0x1b4>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3301      	adds	r3, #1
 8009628:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800962a:	4a58      	ldr	r2, [pc, #352]	; (800978c <xTaskIncrementTick+0x1b4>)
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d122      	bne.n	800967c <xTaskIncrementTick+0xa4>
		{
			taskSWITCH_DELAYED_LISTS();
 8009636:	4b56      	ldr	r3, [pc, #344]	; (8009790 <xTaskIncrementTick+0x1b8>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00c      	beq.n	800965a <xTaskIncrementTick+0x82>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	b672      	cpsid	i
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	b662      	cpsie	i
 8009654:	603b      	str	r3, [r7, #0]
}
 8009656:	bf00      	nop
 8009658:	e7fe      	b.n	8009658 <xTaskIncrementTick+0x80>
 800965a:	4b4d      	ldr	r3, [pc, #308]	; (8009790 <xTaskIncrementTick+0x1b8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	4b4c      	ldr	r3, [pc, #304]	; (8009794 <xTaskIncrementTick+0x1bc>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a4a      	ldr	r2, [pc, #296]	; (8009790 <xTaskIncrementTick+0x1b8>)
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	4a4a      	ldr	r2, [pc, #296]	; (8009794 <xTaskIncrementTick+0x1bc>)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	4b4a      	ldr	r3, [pc, #296]	; (8009798 <xTaskIncrementTick+0x1c0>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3301      	adds	r3, #1
 8009674:	4a48      	ldr	r2, [pc, #288]	; (8009798 <xTaskIncrementTick+0x1c0>)
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	f000 fc74 	bl	8009f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800967c:	4b47      	ldr	r3, [pc, #284]	; (800979c <xTaskIncrementTick+0x1c4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	429a      	cmp	r2, r3
 8009684:	d35c      	bcc.n	8009740 <xTaskIncrementTick+0x168>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009686:	4b42      	ldr	r3, [pc, #264]	; (8009790 <xTaskIncrementTick+0x1b8>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d104      	bne.n	800969a <xTaskIncrementTick+0xc2>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009690:	4b42      	ldr	r3, [pc, #264]	; (800979c <xTaskIncrementTick+0x1c4>)
 8009692:	f04f 32ff 	mov.w	r2, #4294967295
 8009696:	601a      	str	r2, [r3, #0]
					break;
 8009698:	e052      	b.n	8009740 <xTaskIncrementTick+0x168>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800969a:	4b3d      	ldr	r3, [pc, #244]	; (8009790 <xTaskIncrementTick+0x1b8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d203      	bcs.n	80096ba <xTaskIncrementTick+0xe2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096b2:	4a3a      	ldr	r2, [pc, #232]	; (800979c <xTaskIncrementTick+0x1c4>)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096b8:	e042      	b.n	8009740 <xTaskIncrementTick+0x168>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	3304      	adds	r3, #4
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe f982 	bl	80079c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d004      	beq.n	80096d6 <xTaskIncrementTick+0xfe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	3318      	adds	r3, #24
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fe f979 	bl	80079c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096d6:	68b8      	ldr	r0, [r7, #8]
 80096d8:	f7f7 ff54 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 80096dc:	4603      	mov	r3, r0
 80096de:	461a      	mov	r2, r3
 80096e0:	4b2f      	ldr	r3, [pc, #188]	; (80097a0 <xTaskIncrementTick+0x1c8>)
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	4013      	ands	r3, r2
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d007      	beq.n	80096fc <xTaskIncrementTick+0x124>
 80096ec:	68b8      	ldr	r0, [r7, #8]
 80096ee:	f7f7 ff3c 	bl	800156a <prvTraceGetTaskNumberLow16>
 80096f2:	4603      	mov	r3, r0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7f8 fae8 	bl	8001ccc <prvTraceStoreTaskReady>
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009700:	4b28      	ldr	r3, [pc, #160]	; (80097a4 <xTaskIncrementTick+0x1cc>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	429a      	cmp	r2, r3
 8009706:	d903      	bls.n	8009710 <xTaskIncrementTick+0x138>
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970c:	4a25      	ldr	r2, [pc, #148]	; (80097a4 <xTaskIncrementTick+0x1cc>)
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009714:	4613      	mov	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4a22      	ldr	r2, [pc, #136]	; (80097a8 <xTaskIncrementTick+0x1d0>)
 800971e:	441a      	add	r2, r3
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	3304      	adds	r3, #4
 8009724:	4619      	mov	r1, r3
 8009726:	4610      	mov	r0, r2
 8009728:	f7fe f8f1 	bl	800790e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009730:	4b1e      	ldr	r3, [pc, #120]	; (80097ac <xTaskIncrementTick+0x1d4>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009736:	429a      	cmp	r2, r3
 8009738:	d3a5      	bcc.n	8009686 <xTaskIncrementTick+0xae>
						{
							xSwitchRequired = pdTRUE;
 800973a:	2301      	movs	r3, #1
 800973c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800973e:	e7a2      	b.n	8009686 <xTaskIncrementTick+0xae>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009740:	4b1a      	ldr	r3, [pc, #104]	; (80097ac <xTaskIncrementTick+0x1d4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009746:	4918      	ldr	r1, [pc, #96]	; (80097a8 <xTaskIncrementTick+0x1d0>)
 8009748:	4613      	mov	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	440b      	add	r3, r1
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d907      	bls.n	8009768 <xTaskIncrementTick+0x190>
			{
				xSwitchRequired = pdTRUE;
 8009758:	2301      	movs	r3, #1
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	e004      	b.n	8009768 <xTaskIncrementTick+0x190>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800975e:	4b09      	ldr	r3, [pc, #36]	; (8009784 <xTaskIncrementTick+0x1ac>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3301      	adds	r3, #1
 8009764:	4a07      	ldr	r2, [pc, #28]	; (8009784 <xTaskIncrementTick+0x1ac>)
 8009766:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009768:	4b11      	ldr	r3, [pc, #68]	; (80097b0 <xTaskIncrementTick+0x1d8>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <xTaskIncrementTick+0x19c>
		{
			xSwitchRequired = pdTRUE;
 8009770:	2301      	movs	r3, #1
 8009772:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009774:	697b      	ldr	r3, [r7, #20]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	2000469c 	.word	0x2000469c
 8009784:	20004684 	.word	0x20004684
 8009788:	20001fa8 	.word	0x20001fa8
 800978c:	20004678 	.word	0x20004678
 8009790:	2000462c 	.word	0x2000462c
 8009794:	20004630 	.word	0x20004630
 8009798:	2000468c 	.word	0x2000468c
 800979c:	20004694 	.word	0x20004694
 80097a0:	20001fcc 	.word	0x20001fcc
 80097a4:	2000467c 	.word	0x2000467c
 80097a8:	200041a4 	.word	0x200041a4
 80097ac:	200041a0 	.word	0x200041a0
 80097b0:	20004688 	.word	0x20004688

080097b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097ba:	4b46      	ldr	r3, [pc, #280]	; (80098d4 <vTaskSwitchContext+0x120>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097c2:	4b45      	ldr	r3, [pc, #276]	; (80098d8 <vTaskSwitchContext+0x124>)
 80097c4:	2201      	movs	r2, #1
 80097c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097c8:	e080      	b.n	80098cc <vTaskSwitchContext+0x118>
		xYieldPending = pdFALSE;
 80097ca:	4b43      	ldr	r3, [pc, #268]	; (80098d8 <vTaskSwitchContext+0x124>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80097d0:	f7f7 fa1a 	bl	8000c08 <getRunTimeCounterValue>
 80097d4:	4603      	mov	r3, r0
 80097d6:	4a41      	ldr	r2, [pc, #260]	; (80098dc <vTaskSwitchContext+0x128>)
 80097d8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80097da:	4b40      	ldr	r3, [pc, #256]	; (80098dc <vTaskSwitchContext+0x128>)
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	4b40      	ldr	r3, [pc, #256]	; (80098e0 <vTaskSwitchContext+0x12c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d909      	bls.n	80097fa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80097e6:	4b3f      	ldr	r3, [pc, #252]	; (80098e4 <vTaskSwitchContext+0x130>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80097ec:	4a3b      	ldr	r2, [pc, #236]	; (80098dc <vTaskSwitchContext+0x128>)
 80097ee:	6810      	ldr	r0, [r2, #0]
 80097f0:	4a3b      	ldr	r2, [pc, #236]	; (80098e0 <vTaskSwitchContext+0x12c>)
 80097f2:	6812      	ldr	r2, [r2, #0]
 80097f4:	1a82      	subs	r2, r0, r2
 80097f6:	440a      	add	r2, r1
 80097f8:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80097fa:	4b38      	ldr	r3, [pc, #224]	; (80098dc <vTaskSwitchContext+0x128>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a38      	ldr	r2, [pc, #224]	; (80098e0 <vTaskSwitchContext+0x12c>)
 8009800:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009802:	4b39      	ldr	r3, [pc, #228]	; (80098e8 <vTaskSwitchContext+0x134>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	e012      	b.n	8009830 <vTaskSwitchContext+0x7c>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10c      	bne.n	800982a <vTaskSwitchContext+0x76>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	b672      	cpsid	i
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	b662      	cpsie	i
 8009824:	607b      	str	r3, [r7, #4]
}
 8009826:	bf00      	nop
 8009828:	e7fe      	b.n	8009828 <vTaskSwitchContext+0x74>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3b01      	subs	r3, #1
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	492e      	ldr	r1, [pc, #184]	; (80098ec <vTaskSwitchContext+0x138>)
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	440b      	add	r3, r1
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d0e2      	beq.n	800980a <vTaskSwitchContext+0x56>
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	4613      	mov	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4a27      	ldr	r2, [pc, #156]	; (80098ec <vTaskSwitchContext+0x138>)
 8009850:	4413      	add	r3, r2
 8009852:	60bb      	str	r3, [r7, #8]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	605a      	str	r2, [r3, #4]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	3308      	adds	r3, #8
 8009866:	429a      	cmp	r2, r3
 8009868:	d104      	bne.n	8009874 <vTaskSwitchContext+0xc0>
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	605a      	str	r2, [r3, #4]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	4a1a      	ldr	r2, [pc, #104]	; (80098e4 <vTaskSwitchContext+0x130>)
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	4a1a      	ldr	r2, [pc, #104]	; (80098e8 <vTaskSwitchContext+0x134>)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8009884:	4b1a      	ldr	r3, [pc, #104]	; (80098f0 <vTaskSwitchContext+0x13c>)
 8009886:	2201      	movs	r2, #1
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	f7f7 ff01 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 800988e:	4603      	mov	r3, r0
 8009890:	4618      	mov	r0, r3
 8009892:	f7f7 fe77 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8009896:	4603      	mov	r3, r0
 8009898:	461a      	mov	r2, r3
 800989a:	4b16      	ldr	r3, [pc, #88]	; (80098f4 <vTaskSwitchContext+0x140>)
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	4013      	ands	r3, r2
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00a      	beq.n	80098bc <vTaskSwitchContext+0x108>
 80098a6:	f7f7 fef3 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 80098aa:	4603      	mov	r3, r0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7f7 fe5c 	bl	800156a <prvTraceGetTaskNumberLow16>
 80098b2:	4603      	mov	r3, r0
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7f8 fc4a 	bl	8002150 <prvTraceStoreTaskswitch>
 80098bc:	4b0c      	ldr	r3, [pc, #48]	; (80098f0 <vTaskSwitchContext+0x13c>)
 80098be:	2202      	movs	r2, #2
 80098c0:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80098c2:	4b08      	ldr	r3, [pc, #32]	; (80098e4 <vTaskSwitchContext+0x130>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3358      	adds	r3, #88	; 0x58
 80098c8:	4a0b      	ldr	r2, [pc, #44]	; (80098f8 <vTaskSwitchContext+0x144>)
 80098ca:	6013      	str	r3, [r2, #0]
}
 80098cc:	bf00      	nop
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	2000469c 	.word	0x2000469c
 80098d8:	20004688 	.word	0x20004688
 80098dc:	200046a4 	.word	0x200046a4
 80098e0:	200046a0 	.word	0x200046a0
 80098e4:	200041a0 	.word	0x200041a0
 80098e8:	2000467c 	.word	0x2000467c
 80098ec:	200041a4 	.word	0x200041a4
 80098f0:	20001fb4 	.word	0x20001fb4
 80098f4:	20001fcc 	.word	0x20001fcc
 80098f8:	2000001c 	.word	0x2000001c

080098fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10c      	bne.n	8009926 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	b672      	cpsid	i
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	b662      	cpsie	i
 8009920:	60fb      	str	r3, [r7, #12]
}
 8009922:	bf00      	nop
 8009924:	e7fe      	b.n	8009924 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009926:	4b07      	ldr	r3, [pc, #28]	; (8009944 <vTaskPlaceOnEventList+0x48>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3318      	adds	r3, #24
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7fe f811 	bl	8007956 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009934:	2101      	movs	r1, #1
 8009936:	6838      	ldr	r0, [r7, #0]
 8009938:	f000 fc2e 	bl	800a198 <prvAddCurrentTaskToDelayedList>
}
 800993c:	bf00      	nop
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	200041a0 	.word	0x200041a0

08009948 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10c      	bne.n	8009974 <vTaskPlaceOnUnorderedEventList+0x2c>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	b672      	cpsid	i
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	b662      	cpsie	i
 800996e:	617b      	str	r3, [r7, #20]
}
 8009970:	bf00      	nop
 8009972:	e7fe      	b.n	8009972 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009974:	4b12      	ldr	r3, [pc, #72]	; (80099c0 <vTaskPlaceOnUnorderedEventList+0x78>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10c      	bne.n	8009996 <vTaskPlaceOnUnorderedEventList+0x4e>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	b672      	cpsid	i
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	b662      	cpsie	i
 8009990:	613b      	str	r3, [r7, #16]
}
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <vTaskPlaceOnUnorderedEventList+0x4c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009996:	4b0b      	ldr	r3, [pc, #44]	; (80099c4 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80099a0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099a2:	4b08      	ldr	r3, [pc, #32]	; (80099c4 <vTaskPlaceOnUnorderedEventList+0x7c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3318      	adds	r3, #24
 80099a8:	4619      	mov	r1, r3
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7fd ffaf 	bl	800790e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099b0:	2101      	movs	r1, #1
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fbf0 	bl	800a198 <prvAddCurrentTaskToDelayedList>
}
 80099b8:	bf00      	nop
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	2000469c 	.word	0x2000469c
 80099c4:	200041a0 	.word	0x200041a0

080099c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10c      	bne.n	80099f4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	b672      	cpsid	i
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	b662      	cpsie	i
 80099ee:	617b      	str	r3, [r7, #20]
}
 80099f0:	bf00      	nop
 80099f2:	e7fe      	b.n	80099f2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099f4:	4b26      	ldr	r3, [pc, #152]	; (8009a90 <vTaskPlaceOnEventListRestricted+0xc8>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3318      	adds	r3, #24
 80099fa:	4619      	mov	r1, r3
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f7fd ff86 	bl	800790e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009a08:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8009a0e:	4b20      	ldr	r3, [pc, #128]	; (8009a90 <vTaskPlaceOnEventListRestricted+0xc8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7f7 fdb6 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	4b1d      	ldr	r3, [pc, #116]	; (8009a94 <vTaskPlaceOnEventListRestricted+0xcc>)
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	4013      	ands	r3, r2
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d011      	beq.n	8009a4c <vTaskPlaceOnEventListRestricted+0x84>
 8009a28:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <vTaskPlaceOnEventListRestricted+0xd0>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4413      	add	r3, r2
 8009a30:	4619      	mov	r1, r3
 8009a32:	2088      	movs	r0, #136	; 0x88
 8009a34:	f7f8 fb30 	bl	8002098 <prvTraceStoreKernelCallWithNumericParamOnly>
 8009a38:	4b15      	ldr	r3, [pc, #84]	; (8009a90 <vTaskPlaceOnEventListRestricted+0xc8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7f7 fd94 	bl	800156a <prvTraceGetTaskNumberLow16>
 8009a42:	4603      	mov	r3, r0
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7f8 fc7c 	bl	8002344 <prvTraceSetTaskInstanceFinished>
 8009a4c:	f7f7 fe20 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8009a50:	4603      	mov	r3, r0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7f7 fd96 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <vTaskPlaceOnEventListRestricted+0xcc>)
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	4013      	ands	r3, r2
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00a      	beq.n	8009a7e <vTaskPlaceOnEventListRestricted+0xb6>
 8009a68:	f7f7 fe12 	bl	8001690 <prvTraceGetCurrentTaskHandle>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7f7 fd7b 	bl	800156a <prvTraceGetTaskNumberLow16>
 8009a74:	4603      	mov	r3, r0
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7f8 fc63 	bl	8002344 <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	68b8      	ldr	r0, [r7, #8]
 8009a82:	f000 fb89 	bl	800a198 <prvAddCurrentTaskToDelayedList>
	}
 8009a86:	bf00      	nop
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	200041a0 	.word	0x200041a0
 8009a94:	20001fcc 	.word	0x20001fcc
 8009a98:	20004678 	.word	0x20004678

08009a9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10c      	bne.n	8009acc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	b672      	cpsid	i
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	b662      	cpsie	i
 8009ac6:	60fb      	str	r3, [r7, #12]
}
 8009ac8:	bf00      	nop
 8009aca:	e7fe      	b.n	8009aca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	3318      	adds	r3, #24
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fd ff79 	bl	80079c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ad6:	4b27      	ldr	r3, [pc, #156]	; (8009b74 <xTaskRemoveFromEventList+0xd8>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d130      	bne.n	8009b40 <xTaskRemoveFromEventList+0xa4>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fd ff70 	bl	80079c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ae8:	6938      	ldr	r0, [r7, #16]
 8009aea:	f7f7 fd4b 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8009aee:	4603      	mov	r3, r0
 8009af0:	461a      	mov	r2, r3
 8009af2:	4b21      	ldr	r3, [pc, #132]	; (8009b78 <xTaskRemoveFromEventList+0xdc>)
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	4013      	ands	r3, r2
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d007      	beq.n	8009b0e <xTaskRemoveFromEventList+0x72>
 8009afe:	6938      	ldr	r0, [r7, #16]
 8009b00:	f7f7 fd33 	bl	800156a <prvTraceGetTaskNumberLow16>
 8009b04:	4603      	mov	r3, r0
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7f8 f8df 	bl	8001ccc <prvTraceStoreTaskReady>
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b12:	4b1a      	ldr	r3, [pc, #104]	; (8009b7c <xTaskRemoveFromEventList+0xe0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d903      	bls.n	8009b22 <xTaskRemoveFromEventList+0x86>
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1e:	4a17      	ldr	r2, [pc, #92]	; (8009b7c <xTaskRemoveFromEventList+0xe0>)
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b26:	4613      	mov	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4a14      	ldr	r2, [pc, #80]	; (8009b80 <xTaskRemoveFromEventList+0xe4>)
 8009b30:	441a      	add	r2, r3
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	3304      	adds	r3, #4
 8009b36:	4619      	mov	r1, r3
 8009b38:	4610      	mov	r0, r2
 8009b3a:	f7fd fee8 	bl	800790e <vListInsertEnd>
 8009b3e:	e005      	b.n	8009b4c <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	3318      	adds	r3, #24
 8009b44:	4619      	mov	r1, r3
 8009b46:	480f      	ldr	r0, [pc, #60]	; (8009b84 <xTaskRemoveFromEventList+0xe8>)
 8009b48:	f7fd fee1 	bl	800790e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b50:	4b0d      	ldr	r3, [pc, #52]	; (8009b88 <xTaskRemoveFromEventList+0xec>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d905      	bls.n	8009b66 <xTaskRemoveFromEventList+0xca>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b5e:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <xTaskRemoveFromEventList+0xf0>)
 8009b60:	2201      	movs	r2, #1
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	e001      	b.n	8009b6a <xTaskRemoveFromEventList+0xce>
	}
	else
	{
		xReturn = pdFALSE;
 8009b66:	2300      	movs	r3, #0
 8009b68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b6a:	697b      	ldr	r3, [r7, #20]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3718      	adds	r7, #24
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	2000469c 	.word	0x2000469c
 8009b78:	20001fcc 	.word	0x20001fcc
 8009b7c:	2000467c 	.word	0x2000467c
 8009b80:	200041a4 	.word	0x200041a4
 8009b84:	20004634 	.word	0x20004634
 8009b88:	200041a0 	.word	0x200041a0
 8009b8c:	20004688 	.word	0x20004688

08009b90 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009b9a:	4b35      	ldr	r3, [pc, #212]	; (8009c70 <vTaskRemoveFromUnorderedEventList+0xe0>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10c      	bne.n	8009bbc <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	b672      	cpsid	i
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	b662      	cpsie	i
 8009bb6:	613b      	str	r3, [r7, #16]
}
 8009bb8:	bf00      	nop
 8009bba:	e7fe      	b.n	8009bba <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10c      	bne.n	8009bec <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	b672      	cpsid	i
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	b662      	cpsie	i
 8009be6:	60fb      	str	r3, [r7, #12]
}
 8009be8:	bf00      	nop
 8009bea:	e7fe      	b.n	8009bea <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7fd feeb 	bl	80079c8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fd fee6 	bl	80079c8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009bfc:	6978      	ldr	r0, [r7, #20]
 8009bfe:	f7f7 fcc1 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 8009c02:	4603      	mov	r3, r0
 8009c04:	461a      	mov	r2, r3
 8009c06:	4b1b      	ldr	r3, [pc, #108]	; (8009c74 <vTaskRemoveFromUnorderedEventList+0xe4>)
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d007      	beq.n	8009c22 <vTaskRemoveFromUnorderedEventList+0x92>
 8009c12:	6978      	ldr	r0, [r7, #20]
 8009c14:	f7f7 fca9 	bl	800156a <prvTraceGetTaskNumberLow16>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7f8 f855 	bl	8001ccc <prvTraceStoreTaskReady>
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c26:	4b14      	ldr	r3, [pc, #80]	; (8009c78 <vTaskRemoveFromUnorderedEventList+0xe8>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d903      	bls.n	8009c36 <vTaskRemoveFromUnorderedEventList+0xa6>
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	4a11      	ldr	r2, [pc, #68]	; (8009c78 <vTaskRemoveFromUnorderedEventList+0xe8>)
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4a0e      	ldr	r2, [pc, #56]	; (8009c7c <vTaskRemoveFromUnorderedEventList+0xec>)
 8009c44:	441a      	add	r2, r3
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	f7fd fe5e 	bl	800790e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c56:	4b0a      	ldr	r3, [pc, #40]	; (8009c80 <vTaskRemoveFromUnorderedEventList+0xf0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d902      	bls.n	8009c66 <vTaskRemoveFromUnorderedEventList+0xd6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009c60:	4b08      	ldr	r3, [pc, #32]	; (8009c84 <vTaskRemoveFromUnorderedEventList+0xf4>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	601a      	str	r2, [r3, #0]
	}
}
 8009c66:	bf00      	nop
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	2000469c 	.word	0x2000469c
 8009c74:	20001fcc 	.word	0x20001fcc
 8009c78:	2000467c 	.word	0x2000467c
 8009c7c:	200041a4 	.word	0x200041a4
 8009c80:	200041a0 	.word	0x200041a0
 8009c84:	20004688 	.word	0x20004688

08009c88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c90:	4b06      	ldr	r3, [pc, #24]	; (8009cac <vTaskInternalSetTimeOutState+0x24>)
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c98:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <vTaskInternalSetTimeOutState+0x28>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	605a      	str	r2, [r3, #4]
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	2000468c 	.word	0x2000468c
 8009cb0:	20004678 	.word	0x20004678

08009cb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10c      	bne.n	8009cde <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	b672      	cpsid	i
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	b662      	cpsie	i
 8009cd8:	613b      	str	r3, [r7, #16]
}
 8009cda:	bf00      	nop
 8009cdc:	e7fe      	b.n	8009cdc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10c      	bne.n	8009cfe <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	b672      	cpsid	i
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	b662      	cpsie	i
 8009cf8:	60fb      	str	r3, [r7, #12]
}
 8009cfa:	bf00      	nop
 8009cfc:	e7fe      	b.n	8009cfc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009cfe:	f000 ff37 	bl	800ab70 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d02:	4b1d      	ldr	r3, [pc, #116]	; (8009d78 <xTaskCheckForTimeOut+0xc4>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	69ba      	ldr	r2, [r7, #24]
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1a:	d102      	bne.n	8009d22 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	61fb      	str	r3, [r7, #28]
 8009d20:	e023      	b.n	8009d6a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	4b15      	ldr	r3, [pc, #84]	; (8009d7c <xTaskCheckForTimeOut+0xc8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d007      	beq.n	8009d3e <xTaskCheckForTimeOut+0x8a>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d302      	bcc.n	8009d3e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	61fb      	str	r3, [r7, #28]
 8009d3c:	e015      	b.n	8009d6a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d20b      	bcs.n	8009d60 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	1ad2      	subs	r2, r2, r3
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff ff97 	bl	8009c88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	61fb      	str	r3, [r7, #28]
 8009d5e:	e004      	b.n	8009d6a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d66:	2301      	movs	r3, #1
 8009d68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d6a:	f000 ff35 	bl	800abd8 <vPortExitCritical>

	return xReturn;
 8009d6e:	69fb      	ldr	r3, [r7, #28]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3720      	adds	r7, #32
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	20004678 	.word	0x20004678
 8009d7c:	2000468c 	.word	0x2000468c

08009d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d80:	b480      	push	{r7}
 8009d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d84:	4b03      	ldr	r3, [pc, #12]	; (8009d94 <vTaskMissedYield+0x14>)
 8009d86:	2201      	movs	r2, #1
 8009d88:	601a      	str	r2, [r3, #0]
}
 8009d8a:	bf00      	nop
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	20004688 	.word	0x20004688

08009d98 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d005      	beq.n	8009db2 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	e001      	b.n	8009db6 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8009db2:	2300      	movs	r3, #0
 8009db4:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8009db6:	68fb      	ldr	r3, [r7, #12]
	}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d004      	beq.n	8009dde <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8009dde:	bf00      	nop
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
	...

08009dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009df4:	f000 f852 	bl	8009e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009df8:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <prvIdleTask+0x28>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d9f9      	bls.n	8009df4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e00:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <prvIdleTask+0x2c>)
 8009e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e10:	e7f0      	b.n	8009df4 <prvIdleTask+0x8>
 8009e12:	bf00      	nop
 8009e14:	200041a4 	.word	0x200041a4
 8009e18:	e000ed04 	.word	0xe000ed04

08009e1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e22:	2300      	movs	r3, #0
 8009e24:	607b      	str	r3, [r7, #4]
 8009e26:	e00c      	b.n	8009e42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4a12      	ldr	r2, [pc, #72]	; (8009e7c <prvInitialiseTaskLists+0x60>)
 8009e34:	4413      	add	r3, r2
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fd fd3c 	bl	80078b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	607b      	str	r3, [r7, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b37      	cmp	r3, #55	; 0x37
 8009e46:	d9ef      	bls.n	8009e28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e48:	480d      	ldr	r0, [pc, #52]	; (8009e80 <prvInitialiseTaskLists+0x64>)
 8009e4a:	f7fd fd33 	bl	80078b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e4e:	480d      	ldr	r0, [pc, #52]	; (8009e84 <prvInitialiseTaskLists+0x68>)
 8009e50:	f7fd fd30 	bl	80078b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e54:	480c      	ldr	r0, [pc, #48]	; (8009e88 <prvInitialiseTaskLists+0x6c>)
 8009e56:	f7fd fd2d 	bl	80078b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e5a:	480c      	ldr	r0, [pc, #48]	; (8009e8c <prvInitialiseTaskLists+0x70>)
 8009e5c:	f7fd fd2a 	bl	80078b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e60:	480b      	ldr	r0, [pc, #44]	; (8009e90 <prvInitialiseTaskLists+0x74>)
 8009e62:	f7fd fd27 	bl	80078b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e66:	4b0b      	ldr	r3, [pc, #44]	; (8009e94 <prvInitialiseTaskLists+0x78>)
 8009e68:	4a05      	ldr	r2, [pc, #20]	; (8009e80 <prvInitialiseTaskLists+0x64>)
 8009e6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	; (8009e98 <prvInitialiseTaskLists+0x7c>)
 8009e6e:	4a05      	ldr	r2, [pc, #20]	; (8009e84 <prvInitialiseTaskLists+0x68>)
 8009e70:	601a      	str	r2, [r3, #0]
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	200041a4 	.word	0x200041a4
 8009e80:	20004604 	.word	0x20004604
 8009e84:	20004618 	.word	0x20004618
 8009e88:	20004634 	.word	0x20004634
 8009e8c:	20004648 	.word	0x20004648
 8009e90:	20004660 	.word	0x20004660
 8009e94:	2000462c 	.word	0x2000462c
 8009e98:	20004630 	.word	0x20004630

08009e9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ea2:	e019      	b.n	8009ed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ea4:	f000 fe64 	bl	800ab70 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea8:	4b10      	ldr	r3, [pc, #64]	; (8009eec <prvCheckTasksWaitingTermination+0x50>)
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fd fd87 	bl	80079c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009eba:	4b0d      	ldr	r3, [pc, #52]	; (8009ef0 <prvCheckTasksWaitingTermination+0x54>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	4a0b      	ldr	r2, [pc, #44]	; (8009ef0 <prvCheckTasksWaitingTermination+0x54>)
 8009ec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ec4:	4b0b      	ldr	r3, [pc, #44]	; (8009ef4 <prvCheckTasksWaitingTermination+0x58>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	4a0a      	ldr	r2, [pc, #40]	; (8009ef4 <prvCheckTasksWaitingTermination+0x58>)
 8009ecc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ece:	f000 fe83 	bl	800abd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f810 	bl	8009ef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ed8:	4b06      	ldr	r3, [pc, #24]	; (8009ef4 <prvCheckTasksWaitingTermination+0x58>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e1      	bne.n	8009ea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	20004648 	.word	0x20004648
 8009ef0:	20004674 	.word	0x20004674
 8009ef4:	2000465c 	.word	0x2000465c

08009ef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3358      	adds	r3, #88	; 0x58
 8009f04:	4618      	mov	r0, r3
 8009f06:	f001 f9bd 	bl	800b284 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d108      	bne.n	8009f26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 f82d 	bl	800af78 <vPortFree>
				vPortFree( pxTCB );
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f001 f82a 	bl	800af78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f24:	e01a      	b.n	8009f5c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d103      	bne.n	8009f38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 f821 	bl	800af78 <vPortFree>
	}
 8009f36:	e011      	b.n	8009f5c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d00c      	beq.n	8009f5c <prvDeleteTCB+0x64>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	b672      	cpsid	i
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	b662      	cpsie	i
 8009f56:	60fb      	str	r3, [r7, #12]
}
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <prvDeleteTCB+0x62>
	}
 8009f5c:	bf00      	nop
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f6a:	4b0c      	ldr	r3, [pc, #48]	; (8009f9c <prvResetNextTaskUnblockTime+0x38>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d104      	bne.n	8009f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f74:	4b0a      	ldr	r3, [pc, #40]	; (8009fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f7c:	e008      	b.n	8009f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f7e:	4b07      	ldr	r3, [pc, #28]	; (8009f9c <prvResetNextTaskUnblockTime+0x38>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	4a04      	ldr	r2, [pc, #16]	; (8009fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8009f8e:	6013      	str	r3, [r2, #0]
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	2000462c 	.word	0x2000462c
 8009fa0:	20004694 	.word	0x20004694

08009fa4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009faa:	4b05      	ldr	r3, [pc, #20]	; (8009fc0 <xTaskGetCurrentTaskHandle+0x1c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009fb0:	687b      	ldr	r3, [r7, #4]
	}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	200041a0 	.word	0x200041a0

08009fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009fca:	4b0b      	ldr	r3, [pc, #44]	; (8009ff8 <xTaskGetSchedulerState+0x34>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d102      	bne.n	8009fd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	607b      	str	r3, [r7, #4]
 8009fd6:	e008      	b.n	8009fea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fd8:	4b08      	ldr	r3, [pc, #32]	; (8009ffc <xTaskGetSchedulerState+0x38>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	607b      	str	r3, [r7, #4]
 8009fe4:	e001      	b.n	8009fea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fea:	687b      	ldr	r3, [r7, #4]
	}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	20004680 	.word	0x20004680
 8009ffc:	2000469c 	.word	0x2000469c

0800a000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a000:	b590      	push	{r4, r7, lr}
 800a002:	b087      	sub	sp, #28
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a00c:	2300      	movs	r3, #0
 800a00e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 809a 	beq.w	800a14c <xTaskPriorityDisinherit+0x14c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a018:	4b4f      	ldr	r3, [pc, #316]	; (800a158 <xTaskPriorityDisinherit+0x158>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d00c      	beq.n	800a03c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	b672      	cpsid	i
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	b662      	cpsie	i
 800a036:	60fb      	str	r3, [r7, #12]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <xTaskPriorityDisinherit+0x3a>
			configASSERT( pxTCB->uxMutexesHeld );
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10c      	bne.n	800a05e <xTaskPriorityDisinherit+0x5e>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	b672      	cpsid	i
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	b662      	cpsie	i
 800a058:	60bb      	str	r3, [r7, #8]
}
 800a05a:	bf00      	nop
 800a05c:	e7fe      	b.n	800a05c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a062:	1e5a      	subs	r2, r3, #1
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a070:	429a      	cmp	r2, r3
 800a072:	d06b      	beq.n	800a14c <xTaskPriorityDisinherit+0x14c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d167      	bne.n	800a14c <xTaskPriorityDisinherit+0x14c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	3304      	adds	r3, #4
 800a080:	4618      	mov	r0, r3
 800a082:	f7fd fca1 	bl	80079c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a086:	6938      	ldr	r0, [r7, #16]
 800a088:	f7f7 fa7c 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 800a08c:	4603      	mov	r3, r0
 800a08e:	461a      	mov	r2, r3
 800a090:	4b32      	ldr	r3, [pc, #200]	; (800a15c <xTaskPriorityDisinherit+0x15c>)
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	4013      	ands	r3, r2
 800a096:	b29b      	uxth	r3, r3
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d020      	beq.n	800a0de <xTaskPriorityDisinherit+0xde>
 800a09c:	6938      	ldr	r0, [r7, #16]
 800a09e:	f7f7 fa64 	bl	800156a <prvTraceGetTaskNumberLow16>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	461c      	mov	r4, r3
 800a0a8:	6938      	ldr	r0, [r7, #16]
 800a0aa:	f7f7 fa5e 	bl	800156a <prvTraceGetTaskNumberLow16>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	2003      	movs	r0, #3
 800a0b6:	f7f8 f8db 	bl	8002270 <prvTraceGetPriorityProperty>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	4622      	mov	r2, r4
 800a0be:	2103      	movs	r1, #3
 800a0c0:	208f      	movs	r0, #143	; 0x8f
 800a0c2:	f7f7 ff53 	bl	8001f6c <prvTraceStoreKernelCallWithParam>
 800a0c6:	6938      	ldr	r0, [r7, #16]
 800a0c8:	f7f7 fa4f 	bl	800156a <prvTraceGetTaskNumberLow16>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	b2d9      	uxtb	r1, r3
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	2003      	movs	r0, #3
 800a0da:	f7f8 f8a3 	bl	8002224 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0f2:	6938      	ldr	r0, [r7, #16]
 800a0f4:	f7f7 fa46 	bl	8001584 <prvTraceGetTaskNumberHigh16>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	4b17      	ldr	r3, [pc, #92]	; (800a15c <xTaskPriorityDisinherit+0x15c>)
 800a0fe:	881b      	ldrh	r3, [r3, #0]
 800a100:	4013      	ands	r3, r2
 800a102:	b29b      	uxth	r3, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d007      	beq.n	800a118 <xTaskPriorityDisinherit+0x118>
 800a108:	6938      	ldr	r0, [r7, #16]
 800a10a:	f7f7 fa2e 	bl	800156a <prvTraceGetTaskNumberLow16>
 800a10e:	4603      	mov	r3, r0
 800a110:	b2db      	uxtb	r3, r3
 800a112:	4618      	mov	r0, r3
 800a114:	f7f7 fdda 	bl	8001ccc <prvTraceStoreTaskReady>
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a11c:	4b10      	ldr	r3, [pc, #64]	; (800a160 <xTaskPriorityDisinherit+0x160>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d903      	bls.n	800a12c <xTaskPriorityDisinherit+0x12c>
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	4a0d      	ldr	r2, [pc, #52]	; (800a160 <xTaskPriorityDisinherit+0x160>)
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a130:	4613      	mov	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4a0a      	ldr	r2, [pc, #40]	; (800a164 <xTaskPriorityDisinherit+0x164>)
 800a13a:	441a      	add	r2, r3
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	3304      	adds	r3, #4
 800a140:	4619      	mov	r1, r3
 800a142:	4610      	mov	r0, r2
 800a144:	f7fd fbe3 	bl	800790e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a148:	2301      	movs	r3, #1
 800a14a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a14c:	697b      	ldr	r3, [r7, #20]
	}
 800a14e:	4618      	mov	r0, r3
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	bd90      	pop	{r4, r7, pc}
 800a156:	bf00      	nop
 800a158:	200041a0 	.word	0x200041a0
 800a15c:	20001fcc 	.word	0x20001fcc
 800a160:	2000467c 	.word	0x2000467c
 800a164:	200041a4 	.word	0x200041a4

0800a168 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a16e:	4b09      	ldr	r3, [pc, #36]	; (800a194 <uxTaskResetEventItemValue+0x2c>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a176:	4b07      	ldr	r3, [pc, #28]	; (800a194 <uxTaskResetEventItemValue+0x2c>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a17c:	4b05      	ldr	r3, [pc, #20]	; (800a194 <uxTaskResetEventItemValue+0x2c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a184:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a186:	687b      	ldr	r3, [r7, #4]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	200041a0 	.word	0x200041a0

0800a198 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1a2:	4b21      	ldr	r3, [pc, #132]	; (800a228 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1a8:	4b20      	ldr	r3, [pc, #128]	; (800a22c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fd fc0a 	bl	80079c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ba:	d10a      	bne.n	800a1d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d007      	beq.n	800a1d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1c2:	4b1a      	ldr	r3, [pc, #104]	; (800a22c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4819      	ldr	r0, [pc, #100]	; (800a230 <prvAddCurrentTaskToDelayedList+0x98>)
 800a1cc:	f7fd fb9f 	bl	800790e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1d0:	e026      	b.n	800a220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1da:	4b14      	ldr	r3, [pc, #80]	; (800a22c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d209      	bcs.n	800a1fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ea:	4b12      	ldr	r3, [pc, #72]	; (800a234 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	4b0f      	ldr	r3, [pc, #60]	; (800a22c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	f7fd fbad 	bl	8007956 <vListInsert>
}
 800a1fc:	e010      	b.n	800a220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1fe:	4b0e      	ldr	r3, [pc, #56]	; (800a238 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <prvAddCurrentTaskToDelayedList+0x94>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3304      	adds	r3, #4
 800a208:	4619      	mov	r1, r3
 800a20a:	4610      	mov	r0, r2
 800a20c:	f7fd fba3 	bl	8007956 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a210:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	429a      	cmp	r2, r3
 800a218:	d202      	bcs.n	800a220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a21a:	4a08      	ldr	r2, [pc, #32]	; (800a23c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	6013      	str	r3, [r2, #0]
}
 800a220:	bf00      	nop
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	20004678 	.word	0x20004678
 800a22c:	200041a0 	.word	0x200041a0
 800a230:	20004660 	.word	0x20004660
 800a234:	20004630 	.word	0x20004630
 800a238:	2000462c 	.word	0x2000462c
 800a23c:	20004694 	.word	0x20004694

0800a240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	; 0x28
 800a244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a246:	2300      	movs	r3, #0
 800a248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a24a:	f000 fb15 	bl	800a878 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a24e:	4b1d      	ldr	r3, [pc, #116]	; (800a2c4 <xTimerCreateTimerTask+0x84>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d021      	beq.n	800a29a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a256:	2300      	movs	r3, #0
 800a258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a25e:	1d3a      	adds	r2, r7, #4
 800a260:	f107 0108 	add.w	r1, r7, #8
 800a264:	f107 030c 	add.w	r3, r7, #12
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fd f90b 	bl	8007484 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a26e:	6879      	ldr	r1, [r7, #4]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	9202      	str	r2, [sp, #8]
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	2302      	movs	r3, #2
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	2300      	movs	r3, #0
 800a27e:	460a      	mov	r2, r1
 800a280:	4911      	ldr	r1, [pc, #68]	; (800a2c8 <xTimerCreateTimerTask+0x88>)
 800a282:	4812      	ldr	r0, [pc, #72]	; (800a2cc <xTimerCreateTimerTask+0x8c>)
 800a284:	f7fe fd90 	bl	8008da8 <xTaskCreateStatic>
 800a288:	4603      	mov	r3, r0
 800a28a:	4a11      	ldr	r2, [pc, #68]	; (800a2d0 <xTimerCreateTimerTask+0x90>)
 800a28c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a28e:	4b10      	ldr	r3, [pc, #64]	; (800a2d0 <xTimerCreateTimerTask+0x90>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a296:	2301      	movs	r3, #1
 800a298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10c      	bne.n	800a2ba <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	b672      	cpsid	i
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	b662      	cpsie	i
 800a2b4:	613b      	str	r3, [r7, #16]
}
 800a2b6:	bf00      	nop
 800a2b8:	e7fe      	b.n	800a2b8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a2ba:	697b      	ldr	r3, [r7, #20]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	200046d8 	.word	0x200046d8
 800a2c8:	0800bd80 	.word	0x0800bd80
 800a2cc:	0800a411 	.word	0x0800a411
 800a2d0:	200046dc 	.word	0x200046dc

0800a2d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08a      	sub	sp, #40	; 0x28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10c      	bne.n	800a306 <xTimerGenericCommand+0x32>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	b672      	cpsid	i
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	b662      	cpsie	i
 800a300:	623b      	str	r3, [r7, #32]
}
 800a302:	bf00      	nop
 800a304:	e7fe      	b.n	800a304 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a306:	4b1a      	ldr	r3, [pc, #104]	; (800a370 <xTimerGenericCommand+0x9c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d02a      	beq.n	800a364 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b05      	cmp	r3, #5
 800a31e:	dc18      	bgt.n	800a352 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a320:	f7ff fe50 	bl	8009fc4 <xTaskGetSchedulerState>
 800a324:	4603      	mov	r3, r0
 800a326:	2b02      	cmp	r3, #2
 800a328:	d109      	bne.n	800a33e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a32a:	4b11      	ldr	r3, [pc, #68]	; (800a370 <xTimerGenericCommand+0x9c>)
 800a32c:	6818      	ldr	r0, [r3, #0]
 800a32e:	f107 0110 	add.w	r1, r7, #16
 800a332:	2300      	movs	r3, #0
 800a334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a336:	f7fd fd75 	bl	8007e24 <xQueueGenericSend>
 800a33a:	6278      	str	r0, [r7, #36]	; 0x24
 800a33c:	e012      	b.n	800a364 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a33e:	4b0c      	ldr	r3, [pc, #48]	; (800a370 <xTimerGenericCommand+0x9c>)
 800a340:	6818      	ldr	r0, [r3, #0]
 800a342:	f107 0110 	add.w	r1, r7, #16
 800a346:	2300      	movs	r3, #0
 800a348:	2200      	movs	r2, #0
 800a34a:	f7fd fd6b 	bl	8007e24 <xQueueGenericSend>
 800a34e:	6278      	str	r0, [r7, #36]	; 0x24
 800a350:	e008      	b.n	800a364 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a352:	4b07      	ldr	r3, [pc, #28]	; (800a370 <xTimerGenericCommand+0x9c>)
 800a354:	6818      	ldr	r0, [r3, #0]
 800a356:	f107 0110 	add.w	r1, r7, #16
 800a35a:	2300      	movs	r3, #0
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	f7fd ff77 	bl	8008250 <xQueueGenericSendFromISR>
 800a362:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a366:	4618      	mov	r0, r3
 800a368:	3728      	adds	r7, #40	; 0x28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	200046d8 	.word	0x200046d8

0800a374 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af02      	add	r7, sp, #8
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a37e:	4b23      	ldr	r3, [pc, #140]	; (800a40c <prvProcessExpiredTimer+0x98>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	3304      	adds	r3, #4
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fd fb1b 	bl	80079c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d024      	beq.n	800a3ea <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	699a      	ldr	r2, [r3, #24]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	18d1      	adds	r1, r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	6978      	ldr	r0, [r7, #20]
 800a3ae:	f000 f8d3 	bl	800a558 <prvInsertTimerInActiveList>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d021      	beq.n	800a3fc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	2300      	movs	r3, #0
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	6978      	ldr	r0, [r7, #20]
 800a3c4:	f7ff ff86 	bl	800a2d4 <xTimerGenericCommand>
 800a3c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d115      	bne.n	800a3fc <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	b672      	cpsid	i
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	b662      	cpsie	i
 800a3e4:	60fb      	str	r3, [r7, #12]
}
 800a3e6:	bf00      	nop
 800a3e8:	e7fe      	b.n	800a3e8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3f0:	f023 0301 	bic.w	r3, r3, #1
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	6a1b      	ldr	r3, [r3, #32]
 800a400:	6978      	ldr	r0, [r7, #20]
 800a402:	4798      	blx	r3
}
 800a404:	bf00      	nop
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	200046d0 	.word	0x200046d0

0800a410 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a418:	f107 0308 	add.w	r3, r7, #8
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 f857 	bl	800a4d0 <prvGetNextExpireTime>
 800a422:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4619      	mov	r1, r3
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 f803 	bl	800a434 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a42e:	f000 f8d5 	bl	800a5dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a432:	e7f1      	b.n	800a418 <prvTimerTask+0x8>

0800a434 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a43e:	f7fe fff9 	bl	8009434 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a442:	f107 0308 	add.w	r3, r7, #8
 800a446:	4618      	mov	r0, r3
 800a448:	f000 f866 	bl	800a518 <prvSampleTimeNow>
 800a44c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d130      	bne.n	800a4b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10a      	bne.n	800a470 <prvProcessTimerOrBlockTask+0x3c>
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d806      	bhi.n	800a470 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a462:	f7fe fff5 	bl	8009450 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a466:	68f9      	ldr	r1, [r7, #12]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff ff83 	bl	800a374 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a46e:	e024      	b.n	800a4ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d008      	beq.n	800a488 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a476:	4b13      	ldr	r3, [pc, #76]	; (800a4c4 <prvProcessTimerOrBlockTask+0x90>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <prvProcessTimerOrBlockTask+0x50>
 800a480:	2301      	movs	r3, #1
 800a482:	e000      	b.n	800a486 <prvProcessTimerOrBlockTask+0x52>
 800a484:	2300      	movs	r3, #0
 800a486:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a488:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <prvProcessTimerOrBlockTask+0x94>)
 800a48a:	6818      	ldr	r0, [r3, #0]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	4619      	mov	r1, r3
 800a496:	f7fe fc53 	bl	8008d40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a49a:	f7fe ffd9 	bl	8009450 <xTaskResumeAll>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10a      	bne.n	800a4ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a4a4:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <prvProcessTimerOrBlockTask+0x98>)
 800a4a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4aa:	601a      	str	r2, [r3, #0]
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	f3bf 8f6f 	isb	sy
}
 800a4b4:	e001      	b.n	800a4ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a4b6:	f7fe ffcb 	bl	8009450 <xTaskResumeAll>
}
 800a4ba:	bf00      	nop
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	200046d4 	.word	0x200046d4
 800a4c8:	200046d8 	.word	0x200046d8
 800a4cc:	e000ed04 	.word	0xe000ed04

0800a4d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4d8:	4b0e      	ldr	r3, [pc, #56]	; (800a514 <prvGetNextExpireTime+0x44>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <prvGetNextExpireTime+0x16>
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	e000      	b.n	800a4e8 <prvGetNextExpireTime+0x18>
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d105      	bne.n	800a500 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4f4:	4b07      	ldr	r3, [pc, #28]	; (800a514 <prvGetNextExpireTime+0x44>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	60fb      	str	r3, [r7, #12]
 800a4fe:	e001      	b.n	800a504 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a500:	2300      	movs	r3, #0
 800a502:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a504:	68fb      	ldr	r3, [r7, #12]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	200046d0 	.word	0x200046d0

0800a518 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a520:	f7ff f84a 	bl	80095b8 <xTaskGetTickCount>
 800a524:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a526:	4b0b      	ldr	r3, [pc, #44]	; (800a554 <prvSampleTimeNow+0x3c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d205      	bcs.n	800a53c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a530:	f000 f93c 	bl	800a7ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	e002      	b.n	800a542 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a542:	4a04      	ldr	r2, [pc, #16]	; (800a554 <prvSampleTimeNow+0x3c>)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a548:	68fb      	ldr	r3, [r7, #12]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	200046e0 	.word	0x200046e0

0800a558 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d812      	bhi.n	800a5a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	1ad2      	subs	r2, r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d302      	bcc.n	800a592 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a58c:	2301      	movs	r3, #1
 800a58e:	617b      	str	r3, [r7, #20]
 800a590:	e01b      	b.n	800a5ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a592:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <prvInsertTimerInActiveList+0x7c>)
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3304      	adds	r3, #4
 800a59a:	4619      	mov	r1, r3
 800a59c:	4610      	mov	r0, r2
 800a59e:	f7fd f9da 	bl	8007956 <vListInsert>
 800a5a2:	e012      	b.n	800a5ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d206      	bcs.n	800a5ba <prvInsertTimerInActiveList+0x62>
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d302      	bcc.n	800a5ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	617b      	str	r3, [r7, #20]
 800a5b8:	e007      	b.n	800a5ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ba:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <prvInsertTimerInActiveList+0x80>)
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	f7fd f9c6 	bl	8007956 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5ca:	697b      	ldr	r3, [r7, #20]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3718      	adds	r7, #24
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	200046d4 	.word	0x200046d4
 800a5d8:	200046d0 	.word	0x200046d0

0800a5dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08e      	sub	sp, #56	; 0x38
 800a5e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5e2:	e0d0      	b.n	800a786 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	da1a      	bge.n	800a620 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5ea:	1d3b      	adds	r3, r7, #4
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10c      	bne.n	800a610 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	b672      	cpsid	i
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	b662      	cpsie	i
 800a60a:	61fb      	str	r3, [r7, #28]
}
 800a60c:	bf00      	nop
 800a60e:	e7fe      	b.n	800a60e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a616:	6850      	ldr	r0, [r2, #4]
 800a618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a61a:	6892      	ldr	r2, [r2, #8]
 800a61c:	4611      	mov	r1, r2
 800a61e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	f2c0 80ae 	blt.w	800a784 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	695b      	ldr	r3, [r3, #20]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d004      	beq.n	800a63e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a636:	3304      	adds	r3, #4
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fd f9c5 	bl	80079c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a63e:	463b      	mov	r3, r7
 800a640:	4618      	mov	r0, r3
 800a642:	f7ff ff69 	bl	800a518 <prvSampleTimeNow>
 800a646:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b09      	cmp	r3, #9
 800a64c:	f200 809b 	bhi.w	800a786 <prvProcessReceivedCommands+0x1aa>
 800a650:	a201      	add	r2, pc, #4	; (adr r2, 800a658 <prvProcessReceivedCommands+0x7c>)
 800a652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a656:	bf00      	nop
 800a658:	0800a681 	.word	0x0800a681
 800a65c:	0800a681 	.word	0x0800a681
 800a660:	0800a681 	.word	0x0800a681
 800a664:	0800a6f9 	.word	0x0800a6f9
 800a668:	0800a70d 	.word	0x0800a70d
 800a66c:	0800a75b 	.word	0x0800a75b
 800a670:	0800a681 	.word	0x0800a681
 800a674:	0800a681 	.word	0x0800a681
 800a678:	0800a6f9 	.word	0x0800a6f9
 800a67c:	0800a70d 	.word	0x0800a70d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a686:	f043 0301 	orr.w	r3, r3, #1
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	18d1      	adds	r1, r2, r3
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a69e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6a0:	f7ff ff5a 	bl	800a558 <prvInsertTimerInActiveList>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d06d      	beq.n	800a786 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6b8:	f003 0304 	and.w	r3, r3, #4
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d062      	beq.n	800a786 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	441a      	add	r2, r3
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6d2:	f7ff fdff 	bl	800a2d4 <xTimerGenericCommand>
 800a6d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d153      	bne.n	800a786 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	b672      	cpsid	i
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	b662      	cpsie	i
 800a6f2:	61bb      	str	r3, [r7, #24]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6fe:	f023 0301 	bic.w	r3, r3, #1
 800a702:	b2da      	uxtb	r2, r3
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a70a:	e03c      	b.n	800a786 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a712:	f043 0301 	orr.w	r3, r3, #1
 800a716:	b2da      	uxtb	r2, r3
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10c      	bne.n	800a746 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a730:	b672      	cpsid	i
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	b662      	cpsie	i
 800a740:	617b      	str	r3, [r7, #20]
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a748:	699a      	ldr	r2, [r3, #24]
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	18d1      	adds	r1, r2, r3
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a754:	f7ff ff00 	bl	800a558 <prvInsertTimerInActiveList>
					break;
 800a758:	e015      	b.n	800a786 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a760:	f003 0302 	and.w	r3, r3, #2
 800a764:	2b00      	cmp	r3, #0
 800a766:	d103      	bne.n	800a770 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a76a:	f000 fc05 	bl	800af78 <vPortFree>
 800a76e:	e00a      	b.n	800a786 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a776:	f023 0301 	bic.w	r3, r3, #1
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a782:	e000      	b.n	800a786 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a784:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a786:	4b08      	ldr	r3, [pc, #32]	; (800a7a8 <prvProcessReceivedCommands+0x1cc>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	1d39      	adds	r1, r7, #4
 800a78c:	2200      	movs	r2, #0
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fd fe6e 	bl	8008470 <xQueueReceive>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	f47f af24 	bne.w	800a5e4 <prvProcessReceivedCommands+0x8>
	}
}
 800a79c:	bf00      	nop
 800a79e:	bf00      	nop
 800a7a0:	3730      	adds	r7, #48	; 0x30
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	200046d8 	.word	0x200046d8

0800a7ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7b2:	e04a      	b.n	800a84a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7b4:	4b2e      	ldr	r3, [pc, #184]	; (800a870 <prvSwitchTimerLists+0xc4>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7be:	4b2c      	ldr	r3, [pc, #176]	; (800a870 <prvSwitchTimerLists+0xc4>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fd f8fb 	bl	80079c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7e0:	f003 0304 	and.w	r3, r3, #4
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d030      	beq.n	800a84a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d90e      	bls.n	800a818 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a806:	4b1a      	ldr	r3, [pc, #104]	; (800a870 <prvSwitchTimerLists+0xc4>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3304      	adds	r3, #4
 800a80e:	4619      	mov	r1, r3
 800a810:	4610      	mov	r0, r2
 800a812:	f7fd f8a0 	bl	8007956 <vListInsert>
 800a816:	e018      	b.n	800a84a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a818:	2300      	movs	r3, #0
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	2300      	movs	r3, #0
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	2100      	movs	r1, #0
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f7ff fd56 	bl	800a2d4 <xTimerGenericCommand>
 800a828:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10c      	bne.n	800a84a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	b672      	cpsid	i
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	b662      	cpsie	i
 800a844:	603b      	str	r3, [r7, #0]
}
 800a846:	bf00      	nop
 800a848:	e7fe      	b.n	800a848 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a84a:	4b09      	ldr	r3, [pc, #36]	; (800a870 <prvSwitchTimerLists+0xc4>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1af      	bne.n	800a7b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a854:	4b06      	ldr	r3, [pc, #24]	; (800a870 <prvSwitchTimerLists+0xc4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a85a:	4b06      	ldr	r3, [pc, #24]	; (800a874 <prvSwitchTimerLists+0xc8>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a04      	ldr	r2, [pc, #16]	; (800a870 <prvSwitchTimerLists+0xc4>)
 800a860:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a862:	4a04      	ldr	r2, [pc, #16]	; (800a874 <prvSwitchTimerLists+0xc8>)
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	6013      	str	r3, [r2, #0]
}
 800a868:	bf00      	nop
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	200046d0 	.word	0x200046d0
 800a874:	200046d4 	.word	0x200046d4

0800a878 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a87e:	f000 f977 	bl	800ab70 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a882:	4b15      	ldr	r3, [pc, #84]	; (800a8d8 <prvCheckForValidListAndQueue+0x60>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d120      	bne.n	800a8cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a88a:	4814      	ldr	r0, [pc, #80]	; (800a8dc <prvCheckForValidListAndQueue+0x64>)
 800a88c:	f7fd f812 	bl	80078b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a890:	4813      	ldr	r0, [pc, #76]	; (800a8e0 <prvCheckForValidListAndQueue+0x68>)
 800a892:	f7fd f80f 	bl	80078b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a896:	4b13      	ldr	r3, [pc, #76]	; (800a8e4 <prvCheckForValidListAndQueue+0x6c>)
 800a898:	4a10      	ldr	r2, [pc, #64]	; (800a8dc <prvCheckForValidListAndQueue+0x64>)
 800a89a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a89c:	4b12      	ldr	r3, [pc, #72]	; (800a8e8 <prvCheckForValidListAndQueue+0x70>)
 800a89e:	4a10      	ldr	r2, [pc, #64]	; (800a8e0 <prvCheckForValidListAndQueue+0x68>)
 800a8a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	4b11      	ldr	r3, [pc, #68]	; (800a8ec <prvCheckForValidListAndQueue+0x74>)
 800a8a8:	4a11      	ldr	r2, [pc, #68]	; (800a8f0 <prvCheckForValidListAndQueue+0x78>)
 800a8aa:	2110      	movs	r1, #16
 800a8ac:	200a      	movs	r0, #10
 800a8ae:	f7fd f91f 	bl	8007af0 <xQueueGenericCreateStatic>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	4a08      	ldr	r2, [pc, #32]	; (800a8d8 <prvCheckForValidListAndQueue+0x60>)
 800a8b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8b8:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <prvCheckForValidListAndQueue+0x60>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8c0:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <prvCheckForValidListAndQueue+0x60>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	490b      	ldr	r1, [pc, #44]	; (800a8f4 <prvCheckForValidListAndQueue+0x7c>)
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fe fa00 	bl	8008ccc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8cc:	f000 f984 	bl	800abd8 <vPortExitCritical>
}
 800a8d0:	bf00      	nop
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	200046d8 	.word	0x200046d8
 800a8dc:	200046a8 	.word	0x200046a8
 800a8e0:	200046bc 	.word	0x200046bc
 800a8e4:	200046d0 	.word	0x200046d0
 800a8e8:	200046d4 	.word	0x200046d4
 800a8ec:	20004784 	.word	0x20004784
 800a8f0:	200046e4 	.word	0x200046e4
 800a8f4:	0800bd88 	.word	0x0800bd88

0800a8f8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b08a      	sub	sp, #40	; 0x28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a906:	f06f 0301 	mvn.w	r3, #1
 800a90a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a918:	4b06      	ldr	r3, [pc, #24]	; (800a934 <xTimerPendFunctionCallFromISR+0x3c>)
 800a91a:	6818      	ldr	r0, [r3, #0]
 800a91c:	f107 0114 	add.w	r1, r7, #20
 800a920:	2300      	movs	r3, #0
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	f7fd fc94 	bl	8008250 <xQueueGenericSendFromISR>
 800a928:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3728      	adds	r7, #40	; 0x28
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	200046d8 	.word	0x200046d8

0800a938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3b04      	subs	r3, #4
 800a948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3b04      	subs	r3, #4
 800a956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f023 0201 	bic.w	r2, r3, #1
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3b04      	subs	r3, #4
 800a966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a968:	4a0c      	ldr	r2, [pc, #48]	; (800a99c <pxPortInitialiseStack+0x64>)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3b14      	subs	r3, #20
 800a972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3b04      	subs	r3, #4
 800a97e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f06f 0202 	mvn.w	r2, #2
 800a986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	3b20      	subs	r3, #32
 800a98c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a98e:	68fb      	ldr	r3, [r7, #12]
}
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	0800a9a1 	.word	0x0800a9a1

0800a9a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9aa:	4b14      	ldr	r3, [pc, #80]	; (800a9fc <prvTaskExitError+0x5c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b2:	d00c      	beq.n	800a9ce <prvTaskExitError+0x2e>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	b672      	cpsid	i
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	b662      	cpsie	i
 800a9c8:	60fb      	str	r3, [r7, #12]
}
 800a9ca:	bf00      	nop
 800a9cc:	e7fe      	b.n	800a9cc <prvTaskExitError+0x2c>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	b672      	cpsid	i
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	b662      	cpsie	i
 800a9e2:	60bb      	str	r3, [r7, #8]
}
 800a9e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9e6:	bf00      	nop
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d0fc      	beq.n	800a9e8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9ee:	bf00      	nop
 800a9f0:	bf00      	nop
 800a9f2:	3714      	adds	r7, #20
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	20000018 	.word	0x20000018

0800aa00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa00:	4b07      	ldr	r3, [pc, #28]	; (800aa20 <pxCurrentTCBConst2>)
 800aa02:	6819      	ldr	r1, [r3, #0]
 800aa04:	6808      	ldr	r0, [r1, #0]
 800aa06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0a:	f380 8809 	msr	PSP, r0
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f04f 0000 	mov.w	r0, #0
 800aa16:	f380 8811 	msr	BASEPRI, r0
 800aa1a:	4770      	bx	lr
 800aa1c:	f3af 8000 	nop.w

0800aa20 <pxCurrentTCBConst2>:
 800aa20:	200041a0 	.word	0x200041a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop

0800aa28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa28:	4808      	ldr	r0, [pc, #32]	; (800aa4c <prvPortStartFirstTask+0x24>)
 800aa2a:	6800      	ldr	r0, [r0, #0]
 800aa2c:	6800      	ldr	r0, [r0, #0]
 800aa2e:	f380 8808 	msr	MSP, r0
 800aa32:	f04f 0000 	mov.w	r0, #0
 800aa36:	f380 8814 	msr	CONTROL, r0
 800aa3a:	b662      	cpsie	i
 800aa3c:	b661      	cpsie	f
 800aa3e:	f3bf 8f4f 	dsb	sy
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	df00      	svc	0
 800aa48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa4a:	bf00      	nop
 800aa4c:	e000ed08 	.word	0xe000ed08

0800aa50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa56:	4b40      	ldr	r3, [pc, #256]	; (800ab58 <xPortStartScheduler+0x108>)
 800aa58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	22ff      	movs	r2, #255	; 0xff
 800aa66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa70:	79fb      	ldrb	r3, [r7, #7]
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	4b38      	ldr	r3, [pc, #224]	; (800ab5c <xPortStartScheduler+0x10c>)
 800aa7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa7e:	4b38      	ldr	r3, [pc, #224]	; (800ab60 <xPortStartScheduler+0x110>)
 800aa80:	2207      	movs	r2, #7
 800aa82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa84:	e009      	b.n	800aa9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aa86:	4b36      	ldr	r3, [pc, #216]	; (800ab60 <xPortStartScheduler+0x110>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	4a34      	ldr	r2, [pc, #208]	; (800ab60 <xPortStartScheduler+0x110>)
 800aa8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa90:	79fb      	ldrb	r3, [r7, #7]
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa9a:	79fb      	ldrb	r3, [r7, #7]
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaa2:	2b80      	cmp	r3, #128	; 0x80
 800aaa4:	d0ef      	beq.n	800aa86 <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800aaa6:	4b2e      	ldr	r3, [pc, #184]	; (800ab60 <xPortStartScheduler+0x110>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f1c3 0307 	rsb	r3, r3, #7
 800aaae:	2b04      	cmp	r3, #4
 800aab0:	d00c      	beq.n	800aacc <xPortStartScheduler+0x7c>
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab6:	b672      	cpsid	i
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	b662      	cpsie	i
 800aac6:	613b      	str	r3, [r7, #16]
}
 800aac8:	bf00      	nop
 800aaca:	e7fe      	b.n	800aaca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aacc:	4b24      	ldr	r3, [pc, #144]	; (800ab60 <xPortStartScheduler+0x110>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f1c3 0307 	rsb	r3, r3, #7
 800aad4:	2b04      	cmp	r3, #4
 800aad6:	d00c      	beq.n	800aaf2 <xPortStartScheduler+0xa2>
	__asm volatile
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	b672      	cpsid	i
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	b662      	cpsie	i
 800aaec:	60fb      	str	r3, [r7, #12]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <xPortStartScheduler+0xa0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aaf2:	4b1b      	ldr	r3, [pc, #108]	; (800ab60 <xPortStartScheduler+0x110>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	021b      	lsls	r3, r3, #8
 800aaf8:	4a19      	ldr	r2, [pc, #100]	; (800ab60 <xPortStartScheduler+0x110>)
 800aafa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aafc:	4b18      	ldr	r3, [pc, #96]	; (800ab60 <xPortStartScheduler+0x110>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab04:	4a16      	ldr	r2, [pc, #88]	; (800ab60 <xPortStartScheduler+0x110>)
 800ab06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab10:	4b14      	ldr	r3, [pc, #80]	; (800ab64 <xPortStartScheduler+0x114>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a13      	ldr	r2, [pc, #76]	; (800ab64 <xPortStartScheduler+0x114>)
 800ab16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab1c:	4b11      	ldr	r3, [pc, #68]	; (800ab64 <xPortStartScheduler+0x114>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a10      	ldr	r2, [pc, #64]	; (800ab64 <xPortStartScheduler+0x114>)
 800ab22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab28:	f000 f8da 	bl	800ace0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab2c:	4b0e      	ldr	r3, [pc, #56]	; (800ab68 <xPortStartScheduler+0x118>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab32:	f000 f8f9 	bl	800ad28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab36:	4b0d      	ldr	r3, [pc, #52]	; (800ab6c <xPortStartScheduler+0x11c>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a0c      	ldr	r2, [pc, #48]	; (800ab6c <xPortStartScheduler+0x11c>)
 800ab3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab42:	f7ff ff71 	bl	800aa28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab46:	f7fe fe35 	bl	80097b4 <vTaskSwitchContext>
	prvTaskExitError();
 800ab4a:	f7ff ff29 	bl	800a9a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	e000e400 	.word	0xe000e400
 800ab5c:	200047d4 	.word	0x200047d4
 800ab60:	200047d8 	.word	0x200047d8
 800ab64:	e000ed20 	.word	0xe000ed20
 800ab68:	20000018 	.word	0x20000018
 800ab6c:	e000ef34 	.word	0xe000ef34

0800ab70 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7a:	b672      	cpsid	i
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	b662      	cpsie	i
 800ab8a:	607b      	str	r3, [r7, #4]
}
 800ab8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab8e:	4b10      	ldr	r3, [pc, #64]	; (800abd0 <vPortEnterCritical+0x60>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3301      	adds	r3, #1
 800ab94:	4a0e      	ldr	r2, [pc, #56]	; (800abd0 <vPortEnterCritical+0x60>)
 800ab96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab98:	4b0d      	ldr	r3, [pc, #52]	; (800abd0 <vPortEnterCritical+0x60>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d111      	bne.n	800abc4 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aba0:	4b0c      	ldr	r3, [pc, #48]	; (800abd4 <vPortEnterCritical+0x64>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00c      	beq.n	800abc4 <vPortEnterCritical+0x54>
	__asm volatile
 800abaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abae:	b672      	cpsid	i
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	b662      	cpsie	i
 800abbe:	603b      	str	r3, [r7, #0]
}
 800abc0:	bf00      	nop
 800abc2:	e7fe      	b.n	800abc2 <vPortEnterCritical+0x52>
	}
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	20000018 	.word	0x20000018
 800abd4:	e000ed04 	.word	0xe000ed04

0800abd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abde:	4b13      	ldr	r3, [pc, #76]	; (800ac2c <vPortExitCritical+0x54>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10c      	bne.n	800ac00 <vPortExitCritical+0x28>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	b672      	cpsid	i
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	b662      	cpsie	i
 800abfa:	607b      	str	r3, [r7, #4]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ac00:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <vPortExitCritical+0x54>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	3b01      	subs	r3, #1
 800ac06:	4a09      	ldr	r2, [pc, #36]	; (800ac2c <vPortExitCritical+0x54>)
 800ac08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac0a:	4b08      	ldr	r3, [pc, #32]	; (800ac2c <vPortExitCritical+0x54>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d105      	bne.n	800ac1e <vPortExitCritical+0x46>
 800ac12:	2300      	movs	r3, #0
 800ac14:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	f383 8811 	msr	BASEPRI, r3
}
 800ac1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac1e:	bf00      	nop
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	20000018 	.word	0x20000018

0800ac30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac30:	f3ef 8009 	mrs	r0, PSP
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	4b15      	ldr	r3, [pc, #84]	; (800ac90 <pxCurrentTCBConst>)
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	f01e 0f10 	tst.w	lr, #16
 800ac40:	bf08      	it	eq
 800ac42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4a:	6010      	str	r0, [r2, #0]
 800ac4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac54:	b672      	cpsid	i
 800ac56:	f380 8811 	msr	BASEPRI, r0
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	b662      	cpsie	i
 800ac64:	f7fe fda6 	bl	80097b4 <vTaskSwitchContext>
 800ac68:	f04f 0000 	mov.w	r0, #0
 800ac6c:	f380 8811 	msr	BASEPRI, r0
 800ac70:	bc09      	pop	{r0, r3}
 800ac72:	6819      	ldr	r1, [r3, #0]
 800ac74:	6808      	ldr	r0, [r1, #0]
 800ac76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7a:	f01e 0f10 	tst.w	lr, #16
 800ac7e:	bf08      	it	eq
 800ac80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac84:	f380 8809 	msr	PSP, r0
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop

0800ac90 <pxCurrentTCBConst>:
 800ac90:	200041a0 	.word	0x200041a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop

0800ac98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	b672      	cpsid	i
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	b662      	cpsie	i
 800acb2:	607b      	str	r3, [r7, #4]
}
 800acb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acb6:	f7fe fc8f 	bl	80095d8 <xTaskIncrementTick>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d003      	beq.n	800acc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acc0:	4b06      	ldr	r3, [pc, #24]	; (800acdc <SysTick_Handler+0x44>)
 800acc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	2300      	movs	r3, #0
 800acca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	f383 8811 	msr	BASEPRI, r3
}
 800acd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	e000ed04 	.word	0xe000ed04

0800ace0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ace0:	b480      	push	{r7}
 800ace2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ace4:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <vPortSetupTimerInterrupt+0x34>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acea:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <vPortSetupTimerInterrupt+0x38>)
 800acec:	2200      	movs	r2, #0
 800acee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acf0:	4b0a      	ldr	r3, [pc, #40]	; (800ad1c <vPortSetupTimerInterrupt+0x3c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a0a      	ldr	r2, [pc, #40]	; (800ad20 <vPortSetupTimerInterrupt+0x40>)
 800acf6:	fba2 2303 	umull	r2, r3, r2, r3
 800acfa:	099b      	lsrs	r3, r3, #6
 800acfc:	4a09      	ldr	r2, [pc, #36]	; (800ad24 <vPortSetupTimerInterrupt+0x44>)
 800acfe:	3b01      	subs	r3, #1
 800ad00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad02:	4b04      	ldr	r3, [pc, #16]	; (800ad14 <vPortSetupTimerInterrupt+0x34>)
 800ad04:	2207      	movs	r2, #7
 800ad06:	601a      	str	r2, [r3, #0]
}
 800ad08:	bf00      	nop
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	e000e010 	.word	0xe000e010
 800ad18:	e000e018 	.word	0xe000e018
 800ad1c:	20000000 	.word	0x20000000
 800ad20:	10624dd3 	.word	0x10624dd3
 800ad24:	e000e014 	.word	0xe000e014

0800ad28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad38 <vPortEnableVFP+0x10>
 800ad2c:	6801      	ldr	r1, [r0, #0]
 800ad2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad32:	6001      	str	r1, [r0, #0]
 800ad34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad36:	bf00      	nop
 800ad38:	e000ed88 	.word	0xe000ed88

0800ad3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad42:	f3ef 8305 	mrs	r3, IPSR
 800ad46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2b0f      	cmp	r3, #15
 800ad4c:	d916      	bls.n	800ad7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad4e:	4a19      	ldr	r2, [pc, #100]	; (800adb4 <vPortValidateInterruptPriority+0x78>)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4413      	add	r3, r2
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad58:	4b17      	ldr	r3, [pc, #92]	; (800adb8 <vPortValidateInterruptPriority+0x7c>)
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	7afa      	ldrb	r2, [r7, #11]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d20c      	bcs.n	800ad7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	b672      	cpsid	i
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	b662      	cpsie	i
 800ad76:	607b      	str	r3, [r7, #4]
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad7c:	4b0f      	ldr	r3, [pc, #60]	; (800adbc <vPortValidateInterruptPriority+0x80>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad84:	4b0e      	ldr	r3, [pc, #56]	; (800adc0 <vPortValidateInterruptPriority+0x84>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d90c      	bls.n	800ada6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	b672      	cpsid	i
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	b662      	cpsie	i
 800ada0:	603b      	str	r3, [r7, #0]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <vPortValidateInterruptPriority+0x68>
	}
 800ada6:	bf00      	nop
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	e000e3f0 	.word	0xe000e3f0
 800adb8:	200047d4 	.word	0x200047d4
 800adbc:	e000ed0c 	.word	0xe000ed0c
 800adc0:	200047d8 	.word	0x200047d8

0800adc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b08a      	sub	sp, #40	; 0x28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800adcc:	2300      	movs	r3, #0
 800adce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800add0:	f7fe fb30 	bl	8009434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800add4:	4b63      	ldr	r3, [pc, #396]	; (800af64 <pvPortMalloc+0x1a0>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800addc:	f000 f932 	bl	800b044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ade0:	4b61      	ldr	r3, [pc, #388]	; (800af68 <pvPortMalloc+0x1a4>)
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4013      	ands	r3, r2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f040 8092 	bne.w	800af12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d01f      	beq.n	800ae34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800adf4:	2208      	movs	r2, #8
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4413      	add	r3, r2
 800adfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d016      	beq.n	800ae34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f023 0307 	bic.w	r3, r3, #7
 800ae0c:	3308      	adds	r3, #8
 800ae0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f003 0307 	and.w	r3, r3, #7
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00c      	beq.n	800ae34 <pvPortMalloc+0x70>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	b672      	cpsid	i
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	b662      	cpsie	i
 800ae2e:	617b      	str	r3, [r7, #20]
}
 800ae30:	bf00      	nop
 800ae32:	e7fe      	b.n	800ae32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d06b      	beq.n	800af12 <pvPortMalloc+0x14e>
 800ae3a:	4b4c      	ldr	r3, [pc, #304]	; (800af6c <pvPortMalloc+0x1a8>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d866      	bhi.n	800af12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae44:	4b4a      	ldr	r3, [pc, #296]	; (800af70 <pvPortMalloc+0x1ac>)
 800ae46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae48:	4b49      	ldr	r3, [pc, #292]	; (800af70 <pvPortMalloc+0x1ac>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae4e:	e004      	b.n	800ae5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d903      	bls.n	800ae6c <pvPortMalloc+0xa8>
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1f1      	bne.n	800ae50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae6c:	4b3d      	ldr	r3, [pc, #244]	; (800af64 <pvPortMalloc+0x1a0>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d04d      	beq.n	800af12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae76:	6a3b      	ldr	r3, [r7, #32]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2208      	movs	r2, #8
 800ae7c:	4413      	add	r3, r2
 800ae7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	6a3b      	ldr	r3, [r7, #32]
 800ae86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	1ad2      	subs	r2, r2, r3
 800ae90:	2308      	movs	r3, #8
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d921      	bls.n	800aedc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	f003 0307 	and.w	r3, r3, #7
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00c      	beq.n	800aec4 <pvPortMalloc+0x100>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	b672      	cpsid	i
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	b662      	cpsie	i
 800aebe:	613b      	str	r3, [r7, #16]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	1ad2      	subs	r2, r2, r3
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aed6:	69b8      	ldr	r0, [r7, #24]
 800aed8:	f000 f916 	bl	800b108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aedc:	4b23      	ldr	r3, [pc, #140]	; (800af6c <pvPortMalloc+0x1a8>)
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	4a21      	ldr	r2, [pc, #132]	; (800af6c <pvPortMalloc+0x1a8>)
 800aee8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aeea:	4b20      	ldr	r3, [pc, #128]	; (800af6c <pvPortMalloc+0x1a8>)
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	4b21      	ldr	r3, [pc, #132]	; (800af74 <pvPortMalloc+0x1b0>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d203      	bcs.n	800aefe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aef6:	4b1d      	ldr	r3, [pc, #116]	; (800af6c <pvPortMalloc+0x1a8>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a1e      	ldr	r2, [pc, #120]	; (800af74 <pvPortMalloc+0x1b0>)
 800aefc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	4b19      	ldr	r3, [pc, #100]	; (800af68 <pvPortMalloc+0x1a4>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	431a      	orrs	r2, r3
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	2200      	movs	r2, #0
 800af10:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d006      	beq.n	800af26 <pvPortMalloc+0x162>
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	4619      	mov	r1, r3
 800af1e:	2094      	movs	r0, #148	; 0x94
 800af20:	f7f6 ff30 	bl	8001d84 <vTraceStoreMemMangEvent>
 800af24:	e005      	b.n	800af32 <pvPortMalloc+0x16e>
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	4619      	mov	r1, r3
 800af2c:	20e8      	movs	r0, #232	; 0xe8
 800af2e:	f7f6 ff29 	bl	8001d84 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 800af32:	f7fe fa8d 	bl	8009450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	f003 0307 	and.w	r3, r3, #7
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00c      	beq.n	800af5a <pvPortMalloc+0x196>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af44:	b672      	cpsid	i
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	b662      	cpsie	i
 800af54:	60fb      	str	r3, [r7, #12]
}
 800af56:	bf00      	nop
 800af58:	e7fe      	b.n	800af58 <pvPortMalloc+0x194>
	return pvReturn;
 800af5a:	69fb      	ldr	r3, [r7, #28]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3728      	adds	r7, #40	; 0x28
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	200083e4 	.word	0x200083e4
 800af68:	200083f0 	.word	0x200083f0
 800af6c:	200083e8 	.word	0x200083e8
 800af70:	200083dc 	.word	0x200083dc
 800af74:	200083ec 	.word	0x200083ec

0800af78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b086      	sub	sp, #24
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d054      	beq.n	800b034 <vPortFree+0xbc>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af8a:	2308      	movs	r3, #8
 800af8c:	425b      	negs	r3, r3
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	4413      	add	r3, r2
 800af92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	4b27      	ldr	r3, [pc, #156]	; (800b03c <vPortFree+0xc4>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4013      	ands	r3, r2
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10c      	bne.n	800afc0 <vPortFree+0x48>
	__asm volatile
 800afa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afaa:	b672      	cpsid	i
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	b662      	cpsie	i
 800afba:	60fb      	str	r3, [r7, #12]
}
 800afbc:	bf00      	nop
 800afbe:	e7fe      	b.n	800afbe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00c      	beq.n	800afe2 <vPortFree+0x6a>
	__asm volatile
 800afc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afcc:	b672      	cpsid	i
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	b662      	cpsie	i
 800afdc:	60bb      	str	r3, [r7, #8]
}
 800afde:	bf00      	nop
 800afe0:	e7fe      	b.n	800afe0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	4b15      	ldr	r3, [pc, #84]	; (800b03c <vPortFree+0xc4>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4013      	ands	r3, r2
 800afec:	2b00      	cmp	r3, #0
 800afee:	d021      	beq.n	800b034 <vPortFree+0xbc>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d11d      	bne.n	800b034 <vPortFree+0xbc>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	4b0f      	ldr	r3, [pc, #60]	; (800b03c <vPortFree+0xc4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	43db      	mvns	r3, r3
 800b002:	401a      	ands	r2, r3
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b008:	f7fe fa14 	bl	8009434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	4b0b      	ldr	r3, [pc, #44]	; (800b040 <vPortFree+0xc8>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4413      	add	r3, r2
 800b016:	4a0a      	ldr	r2, [pc, #40]	; (800b040 <vPortFree+0xc8>)
 800b018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800b01a:	6879      	ldr	r1, [r7, #4]
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	425b      	negs	r3, r3
 800b022:	461a      	mov	r2, r3
 800b024:	2096      	movs	r0, #150	; 0x96
 800b026:	f7f6 fead 	bl	8001d84 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b02a:	6938      	ldr	r0, [r7, #16]
 800b02c:	f000 f86c 	bl	800b108 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b030:	f7fe fa0e 	bl	8009450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b034:	bf00      	nop
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	200083f0 	.word	0x200083f0
 800b040:	200083e8 	.word	0x200083e8

0800b044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b04a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b04e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b050:	4b27      	ldr	r3, [pc, #156]	; (800b0f0 <prvHeapInit+0xac>)
 800b052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00c      	beq.n	800b078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3307      	adds	r3, #7
 800b062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f023 0307 	bic.w	r3, r3, #7
 800b06a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	4a1f      	ldr	r2, [pc, #124]	; (800b0f0 <prvHeapInit+0xac>)
 800b074:	4413      	add	r3, r2
 800b076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b07c:	4a1d      	ldr	r2, [pc, #116]	; (800b0f4 <prvHeapInit+0xb0>)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b082:	4b1c      	ldr	r3, [pc, #112]	; (800b0f4 <prvHeapInit+0xb0>)
 800b084:	2200      	movs	r2, #0
 800b086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	4413      	add	r3, r2
 800b08e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b090:	2208      	movs	r2, #8
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	1a9b      	subs	r3, r3, r2
 800b096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f023 0307 	bic.w	r3, r3, #7
 800b09e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4a15      	ldr	r2, [pc, #84]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0a6:	4b14      	ldr	r3, [pc, #80]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0ae:	4b12      	ldr	r3, [pc, #72]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	1ad2      	subs	r2, r2, r3
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0c4:	4b0c      	ldr	r3, [pc, #48]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	4a0a      	ldr	r2, [pc, #40]	; (800b0fc <prvHeapInit+0xb8>)
 800b0d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	4a09      	ldr	r2, [pc, #36]	; (800b100 <prvHeapInit+0xbc>)
 800b0da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0dc:	4b09      	ldr	r3, [pc, #36]	; (800b104 <prvHeapInit+0xc0>)
 800b0de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0e2:	601a      	str	r2, [r3, #0]
}
 800b0e4:	bf00      	nop
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	200047dc 	.word	0x200047dc
 800b0f4:	200083dc 	.word	0x200083dc
 800b0f8:	200083e4 	.word	0x200083e4
 800b0fc:	200083ec 	.word	0x200083ec
 800b100:	200083e8 	.word	0x200083e8
 800b104:	200083f0 	.word	0x200083f0

0800b108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b110:	4b28      	ldr	r3, [pc, #160]	; (800b1b4 <prvInsertBlockIntoFreeList+0xac>)
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	e002      	b.n	800b11c <prvInsertBlockIntoFreeList+0x14>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	429a      	cmp	r2, r3
 800b124:	d8f7      	bhi.n	800b116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	4413      	add	r3, r2
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d108      	bne.n	800b14a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	441a      	add	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	441a      	add	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d118      	bne.n	800b190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	4b15      	ldr	r3, [pc, #84]	; (800b1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	429a      	cmp	r2, r3
 800b168:	d00d      	beq.n	800b186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	441a      	add	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	e008      	b.n	800b198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b186:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	e003      	b.n	800b198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d002      	beq.n	800b1a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1a6:	bf00      	nop
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	200083dc 	.word	0x200083dc
 800b1b8:	200083e4 	.word	0x200083e4

0800b1bc <__libc_init_array>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4d0d      	ldr	r5, [pc, #52]	; (800b1f4 <__libc_init_array+0x38>)
 800b1c0:	4c0d      	ldr	r4, [pc, #52]	; (800b1f8 <__libc_init_array+0x3c>)
 800b1c2:	1b64      	subs	r4, r4, r5
 800b1c4:	10a4      	asrs	r4, r4, #2
 800b1c6:	2600      	movs	r6, #0
 800b1c8:	42a6      	cmp	r6, r4
 800b1ca:	d109      	bne.n	800b1e0 <__libc_init_array+0x24>
 800b1cc:	4d0b      	ldr	r5, [pc, #44]	; (800b1fc <__libc_init_array+0x40>)
 800b1ce:	4c0c      	ldr	r4, [pc, #48]	; (800b200 <__libc_init_array+0x44>)
 800b1d0:	f000 f956 	bl	800b480 <_init>
 800b1d4:	1b64      	subs	r4, r4, r5
 800b1d6:	10a4      	asrs	r4, r4, #2
 800b1d8:	2600      	movs	r6, #0
 800b1da:	42a6      	cmp	r6, r4
 800b1dc:	d105      	bne.n	800b1ea <__libc_init_array+0x2e>
 800b1de:	bd70      	pop	{r4, r5, r6, pc}
 800b1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1e4:	4798      	blx	r3
 800b1e6:	3601      	adds	r6, #1
 800b1e8:	e7ee      	b.n	800b1c8 <__libc_init_array+0xc>
 800b1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ee:	4798      	blx	r3
 800b1f0:	3601      	adds	r6, #1
 800b1f2:	e7f2      	b.n	800b1da <__libc_init_array+0x1e>
 800b1f4:	0800bf5c 	.word	0x0800bf5c
 800b1f8:	0800bf5c 	.word	0x0800bf5c
 800b1fc:	0800bf5c 	.word	0x0800bf5c
 800b200:	0800bf60 	.word	0x0800bf60

0800b204 <__itoa>:
 800b204:	1e93      	subs	r3, r2, #2
 800b206:	2b22      	cmp	r3, #34	; 0x22
 800b208:	b510      	push	{r4, lr}
 800b20a:	460c      	mov	r4, r1
 800b20c:	d904      	bls.n	800b218 <__itoa+0x14>
 800b20e:	2300      	movs	r3, #0
 800b210:	700b      	strb	r3, [r1, #0]
 800b212:	461c      	mov	r4, r3
 800b214:	4620      	mov	r0, r4
 800b216:	bd10      	pop	{r4, pc}
 800b218:	2a0a      	cmp	r2, #10
 800b21a:	d109      	bne.n	800b230 <__itoa+0x2c>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	da07      	bge.n	800b230 <__itoa+0x2c>
 800b220:	232d      	movs	r3, #45	; 0x2d
 800b222:	700b      	strb	r3, [r1, #0]
 800b224:	4240      	negs	r0, r0
 800b226:	2101      	movs	r1, #1
 800b228:	4421      	add	r1, r4
 800b22a:	f000 f88f 	bl	800b34c <__utoa>
 800b22e:	e7f1      	b.n	800b214 <__itoa+0x10>
 800b230:	2100      	movs	r1, #0
 800b232:	e7f9      	b.n	800b228 <__itoa+0x24>

0800b234 <itoa>:
 800b234:	f7ff bfe6 	b.w	800b204 <__itoa>

0800b238 <__retarget_lock_acquire_recursive>:
 800b238:	4770      	bx	lr

0800b23a <__retarget_lock_release_recursive>:
 800b23a:	4770      	bx	lr

0800b23c <memcpy>:
 800b23c:	440a      	add	r2, r1
 800b23e:	4291      	cmp	r1, r2
 800b240:	f100 33ff 	add.w	r3, r0, #4294967295
 800b244:	d100      	bne.n	800b248 <memcpy+0xc>
 800b246:	4770      	bx	lr
 800b248:	b510      	push	{r4, lr}
 800b24a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b24e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b252:	4291      	cmp	r1, r2
 800b254:	d1f9      	bne.n	800b24a <memcpy+0xe>
 800b256:	bd10      	pop	{r4, pc}

0800b258 <memset>:
 800b258:	4402      	add	r2, r0
 800b25a:	4603      	mov	r3, r0
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d100      	bne.n	800b262 <memset+0xa>
 800b260:	4770      	bx	lr
 800b262:	f803 1b01 	strb.w	r1, [r3], #1
 800b266:	e7f9      	b.n	800b25c <memset+0x4>

0800b268 <cleanup_glue>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	460c      	mov	r4, r1
 800b26c:	6809      	ldr	r1, [r1, #0]
 800b26e:	4605      	mov	r5, r0
 800b270:	b109      	cbz	r1, 800b276 <cleanup_glue+0xe>
 800b272:	f7ff fff9 	bl	800b268 <cleanup_glue>
 800b276:	4621      	mov	r1, r4
 800b278:	4628      	mov	r0, r5
 800b27a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b27e:	f000 b8b3 	b.w	800b3e8 <_free_r>
	...

0800b284 <_reclaim_reent>:
 800b284:	4b2c      	ldr	r3, [pc, #176]	; (800b338 <_reclaim_reent+0xb4>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4283      	cmp	r3, r0
 800b28a:	b570      	push	{r4, r5, r6, lr}
 800b28c:	4604      	mov	r4, r0
 800b28e:	d051      	beq.n	800b334 <_reclaim_reent+0xb0>
 800b290:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b292:	b143      	cbz	r3, 800b2a6 <_reclaim_reent+0x22>
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d14a      	bne.n	800b330 <_reclaim_reent+0xac>
 800b29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b29c:	6819      	ldr	r1, [r3, #0]
 800b29e:	b111      	cbz	r1, 800b2a6 <_reclaim_reent+0x22>
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f000 f8a1 	bl	800b3e8 <_free_r>
 800b2a6:	6961      	ldr	r1, [r4, #20]
 800b2a8:	b111      	cbz	r1, 800b2b0 <_reclaim_reent+0x2c>
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f000 f89c 	bl	800b3e8 <_free_r>
 800b2b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2b2:	b111      	cbz	r1, 800b2ba <_reclaim_reent+0x36>
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f000 f897 	bl	800b3e8 <_free_r>
 800b2ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b2bc:	b111      	cbz	r1, 800b2c4 <_reclaim_reent+0x40>
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f000 f892 	bl	800b3e8 <_free_r>
 800b2c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b2c6:	b111      	cbz	r1, 800b2ce <_reclaim_reent+0x4a>
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 f88d 	bl	800b3e8 <_free_r>
 800b2ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b2d0:	b111      	cbz	r1, 800b2d8 <_reclaim_reent+0x54>
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 f888 	bl	800b3e8 <_free_r>
 800b2d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b2da:	b111      	cbz	r1, 800b2e2 <_reclaim_reent+0x5e>
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f000 f883 	bl	800b3e8 <_free_r>
 800b2e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b2e4:	b111      	cbz	r1, 800b2ec <_reclaim_reent+0x68>
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f000 f87e 	bl	800b3e8 <_free_r>
 800b2ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2ee:	b111      	cbz	r1, 800b2f6 <_reclaim_reent+0x72>
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f000 f879 	bl	800b3e8 <_free_r>
 800b2f6:	69a3      	ldr	r3, [r4, #24]
 800b2f8:	b1e3      	cbz	r3, 800b334 <_reclaim_reent+0xb0>
 800b2fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	4798      	blx	r3
 800b300:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b302:	b1b9      	cbz	r1, 800b334 <_reclaim_reent+0xb0>
 800b304:	4620      	mov	r0, r4
 800b306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b30a:	f7ff bfad 	b.w	800b268 <cleanup_glue>
 800b30e:	5949      	ldr	r1, [r1, r5]
 800b310:	b941      	cbnz	r1, 800b324 <_reclaim_reent+0xa0>
 800b312:	3504      	adds	r5, #4
 800b314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b316:	2d80      	cmp	r5, #128	; 0x80
 800b318:	68d9      	ldr	r1, [r3, #12]
 800b31a:	d1f8      	bne.n	800b30e <_reclaim_reent+0x8a>
 800b31c:	4620      	mov	r0, r4
 800b31e:	f000 f863 	bl	800b3e8 <_free_r>
 800b322:	e7ba      	b.n	800b29a <_reclaim_reent+0x16>
 800b324:	680e      	ldr	r6, [r1, #0]
 800b326:	4620      	mov	r0, r4
 800b328:	f000 f85e 	bl	800b3e8 <_free_r>
 800b32c:	4631      	mov	r1, r6
 800b32e:	e7ef      	b.n	800b310 <_reclaim_reent+0x8c>
 800b330:	2500      	movs	r5, #0
 800b332:	e7ef      	b.n	800b314 <_reclaim_reent+0x90>
 800b334:	bd70      	pop	{r4, r5, r6, pc}
 800b336:	bf00      	nop
 800b338:	2000001c 	.word	0x2000001c

0800b33c <strcpy>:
 800b33c:	4603      	mov	r3, r0
 800b33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b342:	f803 2b01 	strb.w	r2, [r3], #1
 800b346:	2a00      	cmp	r2, #0
 800b348:	d1f9      	bne.n	800b33e <strcpy+0x2>
 800b34a:	4770      	bx	lr

0800b34c <__utoa>:
 800b34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b34e:	4c1f      	ldr	r4, [pc, #124]	; (800b3cc <__utoa+0x80>)
 800b350:	b08b      	sub	sp, #44	; 0x2c
 800b352:	4605      	mov	r5, r0
 800b354:	460b      	mov	r3, r1
 800b356:	466e      	mov	r6, sp
 800b358:	f104 0c20 	add.w	ip, r4, #32
 800b35c:	6820      	ldr	r0, [r4, #0]
 800b35e:	6861      	ldr	r1, [r4, #4]
 800b360:	4637      	mov	r7, r6
 800b362:	c703      	stmia	r7!, {r0, r1}
 800b364:	3408      	adds	r4, #8
 800b366:	4564      	cmp	r4, ip
 800b368:	463e      	mov	r6, r7
 800b36a:	d1f7      	bne.n	800b35c <__utoa+0x10>
 800b36c:	7921      	ldrb	r1, [r4, #4]
 800b36e:	7139      	strb	r1, [r7, #4]
 800b370:	1e91      	subs	r1, r2, #2
 800b372:	6820      	ldr	r0, [r4, #0]
 800b374:	6038      	str	r0, [r7, #0]
 800b376:	2922      	cmp	r1, #34	; 0x22
 800b378:	f04f 0100 	mov.w	r1, #0
 800b37c:	d904      	bls.n	800b388 <__utoa+0x3c>
 800b37e:	7019      	strb	r1, [r3, #0]
 800b380:	460b      	mov	r3, r1
 800b382:	4618      	mov	r0, r3
 800b384:	b00b      	add	sp, #44	; 0x2c
 800b386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b388:	1e58      	subs	r0, r3, #1
 800b38a:	4684      	mov	ip, r0
 800b38c:	fbb5 f7f2 	udiv	r7, r5, r2
 800b390:	fb02 5617 	mls	r6, r2, r7, r5
 800b394:	3628      	adds	r6, #40	; 0x28
 800b396:	446e      	add	r6, sp
 800b398:	460c      	mov	r4, r1
 800b39a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b39e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b3a2:	462e      	mov	r6, r5
 800b3a4:	42b2      	cmp	r2, r6
 800b3a6:	f101 0101 	add.w	r1, r1, #1
 800b3aa:	463d      	mov	r5, r7
 800b3ac:	d9ee      	bls.n	800b38c <__utoa+0x40>
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	545a      	strb	r2, [r3, r1]
 800b3b2:	1919      	adds	r1, r3, r4
 800b3b4:	1aa5      	subs	r5, r4, r2
 800b3b6:	42aa      	cmp	r2, r5
 800b3b8:	dae3      	bge.n	800b382 <__utoa+0x36>
 800b3ba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b3be:	780e      	ldrb	r6, [r1, #0]
 800b3c0:	7006      	strb	r6, [r0, #0]
 800b3c2:	3201      	adds	r2, #1
 800b3c4:	f801 5901 	strb.w	r5, [r1], #-1
 800b3c8:	e7f4      	b.n	800b3b4 <__utoa+0x68>
 800b3ca:	bf00      	nop
 800b3cc:	0800bf2c 	.word	0x0800bf2c

0800b3d0 <__malloc_lock>:
 800b3d0:	4801      	ldr	r0, [pc, #4]	; (800b3d8 <__malloc_lock+0x8>)
 800b3d2:	f7ff bf31 	b.w	800b238 <__retarget_lock_acquire_recursive>
 800b3d6:	bf00      	nop
 800b3d8:	200083f4 	.word	0x200083f4

0800b3dc <__malloc_unlock>:
 800b3dc:	4801      	ldr	r0, [pc, #4]	; (800b3e4 <__malloc_unlock+0x8>)
 800b3de:	f7ff bf2c 	b.w	800b23a <__retarget_lock_release_recursive>
 800b3e2:	bf00      	nop
 800b3e4:	200083f4 	.word	0x200083f4

0800b3e8 <_free_r>:
 800b3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3ea:	2900      	cmp	r1, #0
 800b3ec:	d044      	beq.n	800b478 <_free_r+0x90>
 800b3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3f2:	9001      	str	r0, [sp, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f1a1 0404 	sub.w	r4, r1, #4
 800b3fa:	bfb8      	it	lt
 800b3fc:	18e4      	addlt	r4, r4, r3
 800b3fe:	f7ff ffe7 	bl	800b3d0 <__malloc_lock>
 800b402:	4a1e      	ldr	r2, [pc, #120]	; (800b47c <_free_r+0x94>)
 800b404:	9801      	ldr	r0, [sp, #4]
 800b406:	6813      	ldr	r3, [r2, #0]
 800b408:	b933      	cbnz	r3, 800b418 <_free_r+0x30>
 800b40a:	6063      	str	r3, [r4, #4]
 800b40c:	6014      	str	r4, [r2, #0]
 800b40e:	b003      	add	sp, #12
 800b410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b414:	f7ff bfe2 	b.w	800b3dc <__malloc_unlock>
 800b418:	42a3      	cmp	r3, r4
 800b41a:	d908      	bls.n	800b42e <_free_r+0x46>
 800b41c:	6825      	ldr	r5, [r4, #0]
 800b41e:	1961      	adds	r1, r4, r5
 800b420:	428b      	cmp	r3, r1
 800b422:	bf01      	itttt	eq
 800b424:	6819      	ldreq	r1, [r3, #0]
 800b426:	685b      	ldreq	r3, [r3, #4]
 800b428:	1949      	addeq	r1, r1, r5
 800b42a:	6021      	streq	r1, [r4, #0]
 800b42c:	e7ed      	b.n	800b40a <_free_r+0x22>
 800b42e:	461a      	mov	r2, r3
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	b10b      	cbz	r3, 800b438 <_free_r+0x50>
 800b434:	42a3      	cmp	r3, r4
 800b436:	d9fa      	bls.n	800b42e <_free_r+0x46>
 800b438:	6811      	ldr	r1, [r2, #0]
 800b43a:	1855      	adds	r5, r2, r1
 800b43c:	42a5      	cmp	r5, r4
 800b43e:	d10b      	bne.n	800b458 <_free_r+0x70>
 800b440:	6824      	ldr	r4, [r4, #0]
 800b442:	4421      	add	r1, r4
 800b444:	1854      	adds	r4, r2, r1
 800b446:	42a3      	cmp	r3, r4
 800b448:	6011      	str	r1, [r2, #0]
 800b44a:	d1e0      	bne.n	800b40e <_free_r+0x26>
 800b44c:	681c      	ldr	r4, [r3, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	6053      	str	r3, [r2, #4]
 800b452:	4421      	add	r1, r4
 800b454:	6011      	str	r1, [r2, #0]
 800b456:	e7da      	b.n	800b40e <_free_r+0x26>
 800b458:	d902      	bls.n	800b460 <_free_r+0x78>
 800b45a:	230c      	movs	r3, #12
 800b45c:	6003      	str	r3, [r0, #0]
 800b45e:	e7d6      	b.n	800b40e <_free_r+0x26>
 800b460:	6825      	ldr	r5, [r4, #0]
 800b462:	1961      	adds	r1, r4, r5
 800b464:	428b      	cmp	r3, r1
 800b466:	bf04      	itt	eq
 800b468:	6819      	ldreq	r1, [r3, #0]
 800b46a:	685b      	ldreq	r3, [r3, #4]
 800b46c:	6063      	str	r3, [r4, #4]
 800b46e:	bf04      	itt	eq
 800b470:	1949      	addeq	r1, r1, r5
 800b472:	6021      	streq	r1, [r4, #0]
 800b474:	6054      	str	r4, [r2, #4]
 800b476:	e7ca      	b.n	800b40e <_free_r+0x26>
 800b478:	b003      	add	sp, #12
 800b47a:	bd30      	pop	{r4, r5, pc}
 800b47c:	200083f8 	.word	0x200083f8

0800b480 <_init>:
 800b480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b482:	bf00      	nop
 800b484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b486:	bc08      	pop	{r3}
 800b488:	469e      	mov	lr, r3
 800b48a:	4770      	bx	lr

0800b48c <_fini>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	bf00      	nop
 800b490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b492:	bc08      	pop	{r3}
 800b494:	469e      	mov	lr, r3
 800b496:	4770      	bx	lr
