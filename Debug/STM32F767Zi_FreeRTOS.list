
STM32F767Zi_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c70  08006c70  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c78  08006c78  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005098  20000074  08006cf4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000510c  08006cf4  0002510c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f94e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aca  00000000  00000000  0003f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  000434c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  00044c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e42  00000000  00000000  000462b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b64d  00000000  00000000  0004a0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010725d  00000000  00000000  00065747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c9a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067b8  00000000  00000000  0016c9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08006b38 	.word	0x08006b38

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08006b38 	.word	0x08006b38

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fbda 	bl	8000d12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f853 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f91d 	bl	80007a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000566:	f000 f8bd 	bl	80006e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800056a:	f000 f8eb 	bl	8000744 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  strcpy(buf, "stm32 FreeRTOS blinky project\r\n\0");
 800056e:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <main+0x84>)
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <main+0x88>)
 8000572:	4614      	mov	r4, r2
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800057e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  HAL_UART_Transmit(
        &huart3,
        (uint8_t*)buf,
        strlen(buf),
 8000582:	4815      	ldr	r0, [pc, #84]	; (80005d8 <main+0x84>)
 8000584:	f7ff fe5c 	bl	8000240 <strlen>
 8000588:	4603      	mov	r3, r0
  HAL_UART_Transmit(
 800058a:	b29a      	uxth	r2, r3
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	4911      	ldr	r1, [pc, #68]	; (80005d8 <main+0x84>)
 8000592:	4813      	ldr	r0, [pc, #76]	; (80005e0 <main+0x8c>)
 8000594:	f002 fc44 	bl	8002e20 <HAL_UART_Transmit>
  );

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f003 fbdc 	bl	8003d54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059c:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <main+0x90>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <main+0x94>)
 80005a2:	f003 fc41 	bl	8003e28 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a10      	ldr	r2, [pc, #64]	; (80005ec <main+0x98>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of BlinkyTask */
  BlinkyTaskHandle = osThreadNew(StartBlinkyTask, NULL, &BlinkyTask_attributes);
 80005ac:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <main+0x9c>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <main+0xa0>)
 80005b2:	f003 fc39 	bl	8003e28 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <main+0xa4>)
 80005ba:	6013      	str	r3, [r2, #0]

  xTaskCreate(
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <main+0xa8>)
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	230a      	movs	r3, #10
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	490d      	ldr	r1, [pc, #52]	; (8000600 <main+0xac>)
 80005ca:	480e      	ldr	r0, [pc, #56]	; (8000604 <main+0xb0>)
 80005cc:	f004 fb55 	bl	8004c7a <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d0:	f003 fbf4 	bl	8003dbc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <main+0x80>
 80005d6:	bf00      	nop
 80005d8:	20000628 	.word	0x20000628
 80005dc:	08006b68 	.word	0x08006b68
 80005e0:	20000090 	.word	0x20000090
 80005e4:	08006bb0 	.word	0x08006bb0
 80005e8:	080008e5 	.word	0x080008e5
 80005ec:	20000620 	.word	0x20000620
 80005f0:	08006bd4 	.word	0x08006bd4
 80005f4:	08000915 	.word	0x08000915
 80005f8:	20000624 	.word	0x20000624
 80005fc:	200006a8 	.word	0x200006a8
 8000600:	08006b8c 	.word	0x08006b8c
 8000604:	080008f5 	.word	0x080008f5

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2234      	movs	r2, #52	; 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 f9c4 	bl	80069a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062c:	f000 ffcc 	bl	80015c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <SystemClock_Config+0xd4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a29      	ldr	r2, [pc, #164]	; (80006dc <SystemClock_Config+0xd4>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <SystemClock_Config+0xd4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xd8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <SystemClock_Config+0xd8>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemClock_Config+0xd8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000664:	2303      	movs	r3, #3
 8000666:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800066c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066e:	2301      	movs	r3, #1
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2310      	movs	r3, #16
 8000674:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000680:	2319      	movs	r3, #25
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000684:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000688:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800068e:	2309      	movs	r3, #9
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4618      	mov	r0, r3
 800069c:	f000 ffa4 	bl	80015e8 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006a6:	f000 f957 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fa3d 	bl	8001b44 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006d0:	f000 f942 	bl	8000958 <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	; 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USART3_UART_Init+0x58>)
 80006ea:	4a15      	ldr	r2, [pc, #84]	; (8000740 <MX_USART3_UART_Init+0x5c>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART3_UART_Init+0x58>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART3_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_USART3_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART3_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART3_UART_Init+0x58>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART3_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART3_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART3_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART3_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART3_UART_Init+0x58>)
 8000728:	f002 fb2c 	bl	8002d84 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f911 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000090 	.word	0x20000090
 8000740:	40004800 	.word	0x40004800

08000744 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800074e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000752:	2206      	movs	r2, #6
 8000754:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000758:	2202      	movs	r2, #2
 800075a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000764:	2202      	movs	r2, #2
 8000766:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2201      	movs	r2, #1
 800076c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2201      	movs	r2, #1
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	f000 fdd5 	bl	8001336 <HAL_PCD_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f8e1 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000118 	.word	0x20000118

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b47      	ldr	r3, [pc, #284]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a46      	ldr	r2, [pc, #280]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b44      	ldr	r3, [pc, #272]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b41      	ldr	r3, [pc, #260]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a40      	ldr	r2, [pc, #256]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b3e      	ldr	r3, [pc, #248]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a3a      	ldr	r2, [pc, #232]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <MX_GPIO_Init+0x134>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <MX_GPIO_Init+0x134>)
 800081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a28      	ldr	r2, [pc, #160]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f244 0181 	movw	r1, #16513	; 0x4081
 800084c:	4822      	ldr	r0, [pc, #136]	; (80008d8 <MX_GPIO_Init+0x138>)
 800084e:	f000 fd3f 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	4821      	ldr	r0, [pc, #132]	; (80008dc <MX_GPIO_Init+0x13c>)
 8000858:	f000 fd3a 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800085c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000862:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	481b      	ldr	r0, [pc, #108]	; (80008e0 <MX_GPIO_Init+0x140>)
 8000874:	f000 fb80 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000878:	f244 0381 	movw	r3, #16513	; 0x4081
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_GPIO_Init+0x138>)
 8000892:	f000 fb71 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000896:	2340      	movs	r3, #64	; 0x40
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	480b      	ldr	r0, [pc, #44]	; (80008dc <MX_GPIO_Init+0x13c>)
 80008ae:	f000 fb63 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_GPIO_Init+0x13c>)
 80008c6:	f000 fb57 	bl	8000f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	; 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020400 	.word	0x40020400
 80008dc:	40021800 	.word	0x40021800
 80008e0:	40020800 	.word	0x40020800

080008e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1); // 10000 ticks == 1 sec
 80008ec:	2001      	movs	r0, #1
 80008ee:	f003 fb41 	bl	8003f74 <osDelay>
 80008f2:	e7fb      	b.n	80008ec <StartDefaultTask+0x8>

080008f4 <ledBlinkBlue>:
}

/* USER CODE BEGIN Header_StartBlinkyTask */

void ledBlinkBlue(void *pvParameters)
 {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	4804      	ldr	r0, [pc, #16]	; (8000910 <ledBlinkBlue+0x1c>)
 8000900:	f000 fcff 	bl	8001302 <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8000904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000908:	f004 fb14 	bl	8004f34 <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800090c:	e7f6      	b.n	80008fc <ledBlinkBlue+0x8>
 800090e:	bf00      	nop
 8000910:	40020400 	.word	0x40020400

08000914 <StartBlinkyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask */
void StartBlinkyTask(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800091c:	2101      	movs	r1, #1
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <StartBlinkyTask+0x1c>)
 8000920:	f000 fcef 	bl	8001302 <HAL_GPIO_TogglePin>
	osDelay(1000); // 1 sec (calculated in ticks)
 8000924:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000928:	f003 fb24 	bl	8003f74 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800092c:	e7f6      	b.n	800091c <StartBlinkyTask+0x8>
 800092e:	bf00      	nop
 8000930:	40020400 	.word	0x40020400

08000934 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d101      	bne.n	800094a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000946:	f000 f9f1 	bl	8000d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40000400 	.word	0x40000400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	210f      	movs	r1, #15
 800099e:	f06f 0001 	mvn.w	r0, #1
 80009a2:	f000 fabf 	bl	8000f24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0ae      	sub	sp, #184	; 0xb8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2290      	movs	r2, #144	; 0x90
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f005 ffe5 	bl	80069a4 <memset>
  if(huart->Instance==USART3)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a22      	ldr	r2, [pc, #136]	; (8000a68 <HAL_UART_MspInit+0xb4>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d13c      	bne.n	8000a5e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fabe 	bl	8001f74 <HAL_RCCEx_PeriphCLKConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009fe:	f7ff ffab 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <HAL_UART_MspInit+0xb8>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <HAL_UART_MspInit+0xb8>)
 8000a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_UART_MspInit+0xb8>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_UART_MspInit+0xb8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <HAL_UART_MspInit+0xb8>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_UART_MspInit+0xb8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_UART_MspInit+0xbc>)
 8000a5a:	f000 fa8d 	bl	8000f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	37b8      	adds	r7, #184	; 0xb8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40004800 	.word	0x40004800
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b0ae      	sub	sp, #184	; 0xb8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2290      	movs	r2, #144	; 0x90
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f005 ff85 	bl	80069a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aa2:	d159      	bne.n	8000b58 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000aa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000aa8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fa5d 	bl	8001f74 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ac0:	f7ff ff4a 	bl	8000958 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <HAL_PCD_MspInit+0xec>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4a25      	ldr	r2, [pc, #148]	; (8000b60 <HAL_PCD_MspInit+0xec>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad0:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <HAL_PCD_MspInit+0xec>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8000adc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af6:	230a      	movs	r3, #10
 8000af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4818      	ldr	r0, [pc, #96]	; (8000b64 <HAL_PCD_MspInit+0xf0>)
 8000b04:	f000 fa38 	bl	8000f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b20:	4619      	mov	r1, r3
 8000b22:	4810      	ldr	r0, [pc, #64]	; (8000b64 <HAL_PCD_MspInit+0xf0>)
 8000b24:	f000 fa28 	bl	8000f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_PCD_MspInit+0xec>)
 8000b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2c:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <HAL_PCD_MspInit+0xec>)
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b32:	6353      	str	r3, [r2, #52]	; 0x34
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_PCD_MspInit+0xec>)
 8000b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_PCD_MspInit+0xec>)
 8000b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b44:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <HAL_PCD_MspInit+0xec>)
 8000b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <HAL_PCD_MspInit+0xec>)
 8000b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	37b8      	adds	r7, #184	; 0xb8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000

08000b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000b78:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <HAL_InitTick+0xe0>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <HAL_InitTick+0xe0>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
 8000b84:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <HAL_InitTick+0xe0>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b90:	f107 0210 	add.w	r2, r7, #16
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 f9b8 	bl	8001f10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d103      	bne.n	8000bb2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000baa:	f001 f989 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8000bae:	6378      	str	r0, [r7, #52]	; 0x34
 8000bb0:	e004      	b.n	8000bbc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bb2:	f001 f985 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbe:	4a23      	ldr	r2, [pc, #140]	; (8000c4c <HAL_InitTick+0xe4>)
 8000bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc4:	0c9b      	lsrs	r3, r3, #18
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <HAL_InitTick+0xe8>)
 8000bcc:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <HAL_InitTick+0xec>)
 8000bce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <HAL_InitTick+0xe8>)
 8000bd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd6:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <HAL_InitTick+0xe8>)
 8000bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bdc:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_InitTick+0xe8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_InitTick+0xe8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_InitTick+0xe8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000bf0:	4817      	ldr	r0, [pc, #92]	; (8000c50 <HAL_InitTick+0xe8>)
 8000bf2:	f001 fde7 	bl	80027c4 <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d11b      	bne.n	8000c3c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000c04:	4812      	ldr	r0, [pc, #72]	; (8000c50 <HAL_InitTick+0xe8>)
 8000c06:	f001 fe3f 	bl	8002888 <HAL_TIM_Base_Start_IT>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d111      	bne.n	8000c3c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c18:	201d      	movs	r0, #29
 8000c1a:	f000 f99f 	bl	8000f5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d808      	bhi.n	8000c36 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	201d      	movs	r0, #29
 8000c2a:	f000 f97b 	bl	8000f24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_InitTick+0xf0>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e002      	b.n	8000c3c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3738      	adds	r7, #56	; 0x38
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	431bde83 	.word	0x431bde83
 8000c50:	200006ac 	.word	0x200006ac
 8000c54:	40000400 	.word	0x40000400
 8000c58:	20000004 	.word	0x20000004

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <NMI_Handler+0x4>

08000c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>

08000c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <TIM3_IRQHandler+0x10>)
 8000c8e:	f001 fe73 	bl	8002978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200006ac 	.word	0x200006ac

08000c9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cdc:	4c0b      	ldr	r4, [pc, #44]	; (8000d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cea:	f7ff ffd7 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f005 fe25 	bl	800693c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc2f 	bl	8000554 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d04:	08006c80 	.word	0x08006c80
  ldr r2, =_sbss
 8000d08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d0c:	2000510c 	.word	0x2000510c

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>

08000d12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f000 f8f9 	bl	8000f0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1c:	200f      	movs	r0, #15
 8000d1e:	f7ff ff23 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d22:	f7ff fe1f 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	200006f8 	.word	0x200006f8

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200006f8 	.word	0x200006f8

08000d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff ffee 	bl	8000d54 <HAL_GetTick>
 8000d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d84:	d005      	beq.n	8000d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_Delay+0x44>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d92:	bf00      	nop
 8000d94:	f7ff ffde 	bl	8000d54 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d8f7      	bhi.n	8000d94 <HAL_Delay+0x28>
  {
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <__NVIC_SetPriorityGrouping+0x40>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	05fa0000 	.word	0x05fa0000

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db0b      	blt.n	8000e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f003 021f 	and.w	r2, r3, #31
 8000e30:	4907      	ldr	r1, [pc, #28]	; (8000e50 <__NVIC_EnableIRQ+0x38>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	095b      	lsrs	r3, r3, #5
 8000e38:	2001      	movs	r0, #1
 8000e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff4c 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f36:	f7ff ff61 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	6978      	ldr	r0, [r7, #20]
 8000f42:	f7ff ffb1 	bl	8000ea8 <NVIC_EncodePriority>
 8000f46:	4602      	mov	r2, r0
 8000f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff80 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f54:	bf00      	nop
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff54 	bl	8000e18 <__NVIC_EnableIRQ>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e175      	b.n	8001284 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	f040 8164 	bne.w	800127e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d005      	beq.n	8000fce <HAL_GPIO_Init+0x56>
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d130      	bne.n	8001030 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001004:	2201      	movs	r2, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	091b      	lsrs	r3, r3, #4
 800101a:	f003 0201 	and.w	r2, r3, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b03      	cmp	r3, #3
 800103a:	d017      	beq.n	800106c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d123      	bne.n	80010c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	08da      	lsrs	r2, r3, #3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3208      	adds	r2, #8
 80010ba:	69b9      	ldr	r1, [r7, #24]
 80010bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0203 	and.w	r2, r3, #3
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80be 	beq.w	800127e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b66      	ldr	r3, [pc, #408]	; (800129c <HAL_GPIO_Init+0x324>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a65      	ldr	r2, [pc, #404]	; (800129c <HAL_GPIO_Init+0x324>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b63      	ldr	r3, [pc, #396]	; (800129c <HAL_GPIO_Init+0x324>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800111a:	4a61      	ldr	r2, [pc, #388]	; (80012a0 <HAL_GPIO_Init+0x328>)
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a58      	ldr	r2, [pc, #352]	; (80012a4 <HAL_GPIO_Init+0x32c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d037      	beq.n	80011b6 <HAL_GPIO_Init+0x23e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a57      	ldr	r2, [pc, #348]	; (80012a8 <HAL_GPIO_Init+0x330>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d031      	beq.n	80011b2 <HAL_GPIO_Init+0x23a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a56      	ldr	r2, [pc, #344]	; (80012ac <HAL_GPIO_Init+0x334>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d02b      	beq.n	80011ae <HAL_GPIO_Init+0x236>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a55      	ldr	r2, [pc, #340]	; (80012b0 <HAL_GPIO_Init+0x338>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d025      	beq.n	80011aa <HAL_GPIO_Init+0x232>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a54      	ldr	r2, [pc, #336]	; (80012b4 <HAL_GPIO_Init+0x33c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d01f      	beq.n	80011a6 <HAL_GPIO_Init+0x22e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <HAL_GPIO_Init+0x340>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d019      	beq.n	80011a2 <HAL_GPIO_Init+0x22a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a52      	ldr	r2, [pc, #328]	; (80012bc <HAL_GPIO_Init+0x344>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0x226>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a51      	ldr	r2, [pc, #324]	; (80012c0 <HAL_GPIO_Init+0x348>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00d      	beq.n	800119a <HAL_GPIO_Init+0x222>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a50      	ldr	r2, [pc, #320]	; (80012c4 <HAL_GPIO_Init+0x34c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d007      	beq.n	8001196 <HAL_GPIO_Init+0x21e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4f      	ldr	r2, [pc, #316]	; (80012c8 <HAL_GPIO_Init+0x350>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_GPIO_Init+0x21a>
 800118e:	2309      	movs	r3, #9
 8001190:	e012      	b.n	80011b8 <HAL_GPIO_Init+0x240>
 8001192:	230a      	movs	r3, #10
 8001194:	e010      	b.n	80011b8 <HAL_GPIO_Init+0x240>
 8001196:	2308      	movs	r3, #8
 8001198:	e00e      	b.n	80011b8 <HAL_GPIO_Init+0x240>
 800119a:	2307      	movs	r3, #7
 800119c:	e00c      	b.n	80011b8 <HAL_GPIO_Init+0x240>
 800119e:	2306      	movs	r3, #6
 80011a0:	e00a      	b.n	80011b8 <HAL_GPIO_Init+0x240>
 80011a2:	2305      	movs	r3, #5
 80011a4:	e008      	b.n	80011b8 <HAL_GPIO_Init+0x240>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x240>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x240>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x240>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x240>
 80011b6:	2300      	movs	r3, #0
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	f002 0203 	and.w	r2, r2, #3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011c8:	4935      	ldr	r1, [pc, #212]	; (80012a0 <HAL_GPIO_Init+0x328>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <HAL_GPIO_Init+0x354>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fa:	4a34      	ldr	r2, [pc, #208]	; (80012cc <HAL_GPIO_Init+0x354>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001200:	4b32      	ldr	r3, [pc, #200]	; (80012cc <HAL_GPIO_Init+0x354>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001224:	4a29      	ldr	r2, [pc, #164]	; (80012cc <HAL_GPIO_Init+0x354>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <HAL_GPIO_Init+0x354>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124e:	4a1f      	ldr	r2, [pc, #124]	; (80012cc <HAL_GPIO_Init+0x354>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_GPIO_Init+0x354>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <HAL_GPIO_Init+0x354>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	f67f ae86 	bls.w	8000f98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40021400 	.word	0x40021400
 80012bc:	40021800 	.word	0x40021800
 80012c0:	40021c00 	.word	0x40021c00
 80012c4:	40022000 	.word	0x40022000
 80012c8:	40022400 	.word	0x40022400
 80012cc:	40013c00 	.word	0x40013c00

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012ec:	e003      	b.n	80012f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	041a      	lsls	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001302:	b480      	push	{r7}
 8001304:	b085      	sub	sp, #20
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001314:	887a      	ldrh	r2, [r7, #2]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	041a      	lsls	r2, r3, #16
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43d9      	mvns	r1, r3
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	400b      	ands	r3, r1
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001336:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001338:	b08f      	sub	sp, #60	; 0x3c
 800133a:	af0a      	add	r7, sp, #40	; 0x28
 800133c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e116      	b.n	8001576 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fb86 	bl	8000a74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2203      	movs	r2, #3
 800136c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f002 fa40 	bl	800380c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	687e      	ldr	r6, [r7, #4]
 8001394:	466d      	mov	r5, sp
 8001396:	f106 0410 	add.w	r4, r6, #16
 800139a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80013aa:	1d33      	adds	r3, r6, #4
 80013ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ae:	6838      	ldr	r0, [r7, #0]
 80013b0:	f002 f9d4 	bl	800375c <USB_CoreInit>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2202      	movs	r2, #2
 80013be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0d7      	b.n	8001576 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fa2e 	bl	800382e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e04a      	b.n	800146e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	333d      	adds	r3, #61	; 0x3d
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	333c      	adds	r3, #60	; 0x3c
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	b298      	uxth	r0, r3
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3344      	adds	r3, #68	; 0x44
 8001414:	4602      	mov	r2, r0
 8001416:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	3340      	adds	r3, #64	; 0x40
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3348      	adds	r3, #72	; 0x48
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	334c      	adds	r3, #76	; 0x4c
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	3354      	adds	r3, #84	; 0x54
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	3301      	adds	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d3af      	bcc.n	80013d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	e044      	b.n	8001508 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	3301      	adds	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3b5      	bcc.n	800147e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	687e      	ldr	r6, [r7, #4]
 800151a:	466d      	mov	r5, sp
 800151c:	f106 0410 	add.w	r4, r6, #16
 8001520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001528:	e894 0003 	ldmia.w	r4, {r0, r1}
 800152c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001530:	1d33      	adds	r3, r6, #4
 8001532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001534:	6838      	ldr	r0, [r7, #0]
 8001536:	f002 f9c7 	bl	80038c8 <USB_DevInit>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e014      	b.n	8001576 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	2b01      	cmp	r3, #1
 8001562:	d102      	bne.n	800156a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f80b 	bl	8001580 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fb85 	bl	8003c7e <USB_DevDisconnect>

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001580 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	10000003 	.word	0x10000003

080015c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40007000 	.word	0x40007000

080015e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e29b      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8087 	beq.w	800171a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800160c:	4b96      	ldr	r3, [pc, #600]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b04      	cmp	r3, #4
 8001616:	d00c      	beq.n	8001632 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001618:	4b93      	ldr	r3, [pc, #588]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b08      	cmp	r3, #8
 8001622:	d112      	bne.n	800164a <HAL_RCC_OscConfig+0x62>
 8001624:	4b90      	ldr	r3, [pc, #576]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001630:	d10b      	bne.n	800164a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001632:	4b8d      	ldr	r3, [pc, #564]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d06c      	beq.n	8001718 <HAL_RCC_OscConfig+0x130>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d168      	bne.n	8001718 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e275      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001652:	d106      	bne.n	8001662 <HAL_RCC_OscConfig+0x7a>
 8001654:	4b84      	ldr	r3, [pc, #528]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a83      	ldr	r2, [pc, #524]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 800165a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	e02e      	b.n	80016c0 <HAL_RCC_OscConfig+0xd8>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x9c>
 800166a:	4b7f      	ldr	r3, [pc, #508]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a7e      	ldr	r2, [pc, #504]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b7c      	ldr	r3, [pc, #496]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7b      	ldr	r2, [pc, #492]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 800167c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e01d      	b.n	80016c0 <HAL_RCC_OscConfig+0xd8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0xc0>
 800168e:	4b76      	ldr	r3, [pc, #472]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a75      	ldr	r2, [pc, #468]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b73      	ldr	r3, [pc, #460]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a72      	ldr	r2, [pc, #456]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0xd8>
 80016a8:	4b6f      	ldr	r3, [pc, #444]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a6e      	ldr	r2, [pc, #440]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80016ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b6c      	ldr	r3, [pc, #432]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a6b      	ldr	r2, [pc, #428]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fb44 	bl	8000d54 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff fb40 	bl	8000d54 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e229      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	4b61      	ldr	r3, [pc, #388]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0xe8>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb30 	bl	8000d54 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fb2c 	bl	8000d54 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e215      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170a:	4b57      	ldr	r3, [pc, #348]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x110>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d069      	beq.n	80017fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001726:	4b50      	ldr	r3, [pc, #320]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00b      	beq.n	800174a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001732:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b08      	cmp	r3, #8
 800173c:	d11c      	bne.n	8001778 <HAL_RCC_OscConfig+0x190>
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d116      	bne.n	8001778 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <HAL_RCC_OscConfig+0x17a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e1e9      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	493d      	ldr	r1, [pc, #244]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001776:	e040      	b.n	80017fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d023      	beq.n	80017c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a38      	ldr	r2, [pc, #224]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fae2 	bl	8000d54 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001794:	f7ff fade 	bl	8000d54 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e1c7      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a6:	4b30      	ldr	r3, [pc, #192]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4929      	ldr	r1, [pc, #164]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
 80017c6:	e018      	b.n	80017fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a26      	ldr	r2, [pc, #152]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fabe 	bl	8000d54 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff faba 	bl	8000d54 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1a3      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d038      	beq.n	8001878 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d019      	beq.n	8001842 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001812:	4a15      	ldr	r2, [pc, #84]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff fa9b 	bl	8000d54 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff fa97 	bl	8000d54 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e180      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x23a>
 8001840:	e01a      	b.n	8001878 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_RCC_OscConfig+0x280>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff fa81 	bl	8000d54 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff fa7d 	bl	8000d54 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d903      	bls.n	800186c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e166      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
 8001868:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	4b92      	ldr	r3, [pc, #584]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 800186e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ee      	bne.n	8001856 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80a4 	beq.w	80019ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001886:	4b8c      	ldr	r3, [pc, #560]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10d      	bne.n	80018ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b89      	ldr	r3, [pc, #548]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a88      	ldr	r2, [pc, #544]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b86      	ldr	r3, [pc, #536]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018aa:	2301      	movs	r3, #1
 80018ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ae:	4b83      	ldr	r3, [pc, #524]	; (8001abc <HAL_RCC_OscConfig+0x4d4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d118      	bne.n	80018ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018ba:	4b80      	ldr	r3, [pc, #512]	; (8001abc <HAL_RCC_OscConfig+0x4d4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a7f      	ldr	r2, [pc, #508]	; (8001abc <HAL_RCC_OscConfig+0x4d4>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fa45 	bl	8000d54 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ce:	f7ff fa41 	bl	8000d54 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b64      	cmp	r3, #100	; 0x64
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e12a      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e0:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x4d4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x31a>
 80018f4:	4b70      	ldr	r3, [pc, #448]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a6f      	ldr	r2, [pc, #444]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001900:	e02d      	b.n	800195e <HAL_RCC_OscConfig+0x376>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x33c>
 800190a:	4b6b      	ldr	r3, [pc, #428]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	4a6a      	ldr	r2, [pc, #424]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	6713      	str	r3, [r2, #112]	; 0x70
 8001916:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	4a67      	ldr	r2, [pc, #412]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	6713      	str	r3, [r2, #112]	; 0x70
 8001922:	e01c      	b.n	800195e <HAL_RCC_OscConfig+0x376>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d10c      	bne.n	8001946 <HAL_RCC_OscConfig+0x35e>
 800192c:	4b62      	ldr	r3, [pc, #392]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a61      	ldr	r2, [pc, #388]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	4b5f      	ldr	r3, [pc, #380]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a5e      	ldr	r2, [pc, #376]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
 8001944:	e00b      	b.n	800195e <HAL_RCC_OscConfig+0x376>
 8001946:	4b5c      	ldr	r3, [pc, #368]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194a:	4a5b      	ldr	r2, [pc, #364]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6713      	str	r3, [r2, #112]	; 0x70
 8001952:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d015      	beq.n	8001992 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff f9f5 	bl	8000d54 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7ff f9f1 	bl	8000d54 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	; 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0d8      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ee      	beq.n	800196e <HAL_RCC_OscConfig+0x386>
 8001990:	e014      	b.n	80019bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001992:	f7ff f9df 	bl	8000d54 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7ff f9db 	bl	8000d54 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0c2      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1ee      	bne.n	800199a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d105      	bne.n	80019ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c2:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a3c      	ldr	r2, [pc, #240]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 80019c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80ae 	beq.w	8001b34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d8:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d06d      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d14b      	bne.n	8001a84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a31      	ldr	r2, [pc, #196]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 80019f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f9ac 	bl	8000d54 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f9a8 	bl	8000d54 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e091      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a12:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	019b      	lsls	r3, r3, #6
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	085b      	lsrs	r3, r3, #1
 8001a36:	3b01      	subs	r3, #1
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	061b      	lsls	r3, r3, #24
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	071b      	lsls	r3, r3, #28
 8001a4a:	491b      	ldr	r1, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f97a 	bl	8000d54 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f976 	bl	8000d54 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e05f      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x47c>
 8001a82:	e057      	b.n	8001b34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f960 	bl	8000d54 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff f95c 	bl	8000d54 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e045      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_RCC_OscConfig+0x4d0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4b0>
 8001ab6:	e03d      	b.n	8001b34 <HAL_RCC_OscConfig+0x54c>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_RCC_OscConfig+0x558>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d030      	beq.n	8001b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d129      	bne.n	8001b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d122      	bne.n	8001b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001af6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d119      	bne.n	8001b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	085b      	lsrs	r3, r3, #1
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d10f      	bne.n	8001b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0d0      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d910      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b67      	ldr	r3, [pc, #412]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 020f 	bic.w	r2, r3, #15
 8001b72:	4965      	ldr	r1, [pc, #404]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b8      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba4:	4b59      	ldr	r3, [pc, #356]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a58      	ldr	r2, [pc, #352]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bbc:	4b53      	ldr	r3, [pc, #332]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	494d      	ldr	r1, [pc, #308]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d040      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d115      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e07f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c06:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e073      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c16:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e06b      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c26:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f023 0203 	bic.w	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4936      	ldr	r1, [pc, #216]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c38:	f7ff f88c 	bl	8000d54 <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7ff f888 	bl	8000d54 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e053      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 020c 	and.w	r2, r3, #12
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1eb      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d210      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 020f 	bic.w	r2, r3, #15
 8001c7e:	4922      	ldr	r1, [pc, #136]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e032      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4916      	ldr	r1, [pc, #88]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	490e      	ldr	r1, [pc, #56]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cd6:	f000 f821 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	490a      	ldr	r1, [pc, #40]	; (8001d10 <HAL_RCC_ClockConfig+0x1cc>)
 8001ce8:	5ccb      	ldrb	r3, [r1, r3]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <HAL_RCC_ClockConfig+0x1d0>)
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1d4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe ff36 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08006bf8 	.word	0x08006bf8
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d20:	b090      	sub	sp, #64	; 0x40
 8001d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
 8001d28:	2300      	movs	r3, #0
 8001d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d00d      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x40>
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	f200 80a1 	bhi.w	8001e88 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x34>
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d4e:	e09b      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d54:	e09b      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d56:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d5a:	e098      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d5c:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d66:	4b4d      	ldr	r3, [pc, #308]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d028      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d72:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	099b      	lsrs	r3, r3, #6
 8001d78:	2200      	movs	r2, #0
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	627a      	str	r2, [r7, #36]	; 0x24
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d84:	2100      	movs	r1, #0
 8001d86:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d88:	fb03 f201 	mul.w	r2, r3, r1
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	fb00 f303 	mul.w	r3, r0, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	4a43      	ldr	r2, [pc, #268]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d96:	fba0 1202 	umull	r1, r2, r0, r2
 8001d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da2:	4413      	add	r3, r2
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da8:	2200      	movs	r2, #0
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	61fa      	str	r2, [r7, #28]
 8001dae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001db2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001db6:	f7fe fa4b 	bl	8000250 <__aeabi_uldivmod>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc2:	e053      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc4:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	2200      	movs	r2, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	617a      	str	r2, [r7, #20]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dd6:	f04f 0b00 	mov.w	fp, #0
 8001dda:	4652      	mov	r2, sl
 8001ddc:	465b      	mov	r3, fp
 8001dde:	f04f 0000 	mov.w	r0, #0
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	0159      	lsls	r1, r3, #5
 8001de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dec:	0150      	lsls	r0, r2, #5
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	ebb2 080a 	subs.w	r8, r2, sl
 8001df6:	eb63 090b 	sbc.w	r9, r3, fp
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e0e:	ebb2 0408 	subs.w	r4, r2, r8
 8001e12:	eb63 0509 	sbc.w	r5, r3, r9
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	00eb      	lsls	r3, r5, #3
 8001e20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e24:	00e2      	lsls	r2, r4, #3
 8001e26:	4614      	mov	r4, r2
 8001e28:	461d      	mov	r5, r3
 8001e2a:	eb14 030a 	adds.w	r3, r4, sl
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	eb45 030b 	adc.w	r3, r5, fp
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e42:	4629      	mov	r1, r5
 8001e44:	028b      	lsls	r3, r1, #10
 8001e46:	4621      	mov	r1, r4
 8001e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	028a      	lsls	r2, r1, #10
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	2200      	movs	r2, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	60fa      	str	r2, [r7, #12]
 8001e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e60:	f7fe f9f6 	bl	8000250 <__aeabi_uldivmod>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4613      	mov	r3, r2
 8001e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	3301      	adds	r3, #1
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e86:	e002      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3740      	adds	r7, #64	; 0x40
 8001e94:	46bd      	mov	sp, r7
 8001e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	00f42400 	.word	0x00f42400
 8001ea4:	017d7840 	.word	0x017d7840

08001ea8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec4:	f7ff fff0 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0a9b      	lsrs	r3, r3, #10
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4903      	ldr	r1, [pc, #12]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	08006c08 	.word	0x08006c08

08001ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eec:	f7ff ffdc 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	0b5b      	lsrs	r3, r3, #13
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4903      	ldr	r1, [pc, #12]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	08006c08 	.word	0x08006c08

08001f10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_RCC_GetClockConfig+0x5c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0203 	and.w	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_RCC_GetClockConfig+0x5c>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_RCC_GetClockConfig+0x5c>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_GetClockConfig+0x5c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_RCC_GetClockConfig+0x60>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 020f 	and.w	r2, r3, #15
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	601a      	str	r2, [r3, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d012      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f9c:	4b69      	ldr	r3, [pc, #420]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4a68      	ldr	r2, [pc, #416]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fa6:	6093      	str	r3, [r2, #8]
 8001fa8:	4b66      	ldr	r3, [pc, #408]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb0:	4964      	ldr	r1, [pc, #400]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d017      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fce:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fdc:	4959      	ldr	r1, [pc, #356]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d017      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800200a:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002010:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	494a      	ldr	r1, [pc, #296]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002028:	d101      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002046:	2301      	movs	r3, #1
 8002048:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 808b 	beq.w	800216e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	4a39      	ldr	r2, [pc, #228]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002062:	6413      	str	r3, [r2, #64]	; 0x40
 8002064:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002070:	4b35      	ldr	r3, [pc, #212]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a34      	ldr	r2, [pc, #208]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800207c:	f7fe fe6a 	bl	8000d54 <HAL_GetTick>
 8002080:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002084:	f7fe fe66 	bl	8000d54 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e38f      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020a2:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d035      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d02e      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020d6:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	4a1a      	ldr	r2, [pc, #104]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80020e2:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d114      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe fe2e 	bl	8000d54 <HAL_GetTick>
 80020f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7fe fe2a 	bl	8000d54 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e351      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0ee      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800212a:	d111      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800213a:	400b      	ands	r3, r1
 800213c:	4901      	ldr	r1, [pc, #4]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
 8002142:	e00b      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002144:	40023800 	.word	0x40023800
 8002148:	40007000 	.word	0x40007000
 800214c:	0ffffcff 	.word	0x0ffffcff
 8002150:	4bac      	ldr	r3, [pc, #688]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4aab      	ldr	r2, [pc, #684]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002156:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800215a:	6093      	str	r3, [r2, #8]
 800215c:	4ba9      	ldr	r3, [pc, #676]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002168:	49a6      	ldr	r1, [pc, #664]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216a:	4313      	orrs	r3, r2
 800216c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	d010      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800217a:	4ba2      	ldr	r3, [pc, #648]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002180:	4aa0      	ldr	r2, [pc, #640]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002186:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800218a:	4b9e      	ldr	r3, [pc, #632]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	499b      	ldr	r1, [pc, #620]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a8:	4b96      	ldr	r3, [pc, #600]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b6:	4993      	ldr	r1, [pc, #588]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ca:	4b8e      	ldr	r3, [pc, #568]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021d8:	498a      	ldr	r1, [pc, #552]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ec:	4b85      	ldr	r3, [pc, #532]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fa:	4982      	ldr	r1, [pc, #520]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800220e:	4b7d      	ldr	r3, [pc, #500]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	4979      	ldr	r1, [pc, #484]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002230:	4b74      	ldr	r3, [pc, #464]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f023 0203 	bic.w	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4971      	ldr	r1, [pc, #452]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002252:	4b6c      	ldr	r3, [pc, #432]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002258:	f023 020c 	bic.w	r2, r3, #12
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002260:	4968      	ldr	r1, [pc, #416]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002274:	4b63      	ldr	r3, [pc, #396]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	4960      	ldr	r1, [pc, #384]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002296:	4b5b      	ldr	r3, [pc, #364]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a4:	4957      	ldr	r1, [pc, #348]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022b8:	4b52      	ldr	r3, [pc, #328]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c6:	494f      	ldr	r1, [pc, #316]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80022da:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	4946      	ldr	r1, [pc, #280]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80022fc:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	493e      	ldr	r1, [pc, #248]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800231e:	4b39      	ldr	r3, [pc, #228]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232c:	4935      	ldr	r1, [pc, #212]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002340:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800234e:	492d      	ldr	r1, [pc, #180]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d011      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002362:	4b28      	ldr	r3, [pc, #160]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002370:	4924      	ldr	r1, [pc, #144]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800237c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002380:	d101      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002382:	2301      	movs	r3, #1
 8002384:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002392:	2301      	movs	r3, #1
 8002394:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b0:	4914      	ldr	r1, [pc, #80]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00b      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d4:	490b      	ldr	r1, [pc, #44]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00f      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f8:	4902      	ldr	r1, [pc, #8]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002400:	e002      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002414:	4b8a      	ldr	r3, [pc, #552]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800241a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	4986      	ldr	r1, [pc, #536]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00b      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002438:	4b81      	ldr	r3, [pc, #516]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800243a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800243e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002448:	497d      	ldr	r1, [pc, #500]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d006      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80d6 	beq.w	8002610 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002464:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a75      	ldr	r2, [pc, #468]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800246e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002470:	f7fe fc70 	bl	8000d54 <HAL_GetTick>
 8002474:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002478:	f7fe fc6c 	bl	8000d54 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e195      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d021      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11d      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024aa:	4b65      	ldr	r3, [pc, #404]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024b8:	4b61      	ldr	r3, [pc, #388]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024be:	0e1b      	lsrs	r3, r3, #24
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	019a      	lsls	r2, r3, #6
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	041b      	lsls	r3, r3, #16
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	071b      	lsls	r3, r3, #28
 80024de:	4958      	ldr	r1, [pc, #352]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002504:	2b00      	cmp	r3, #0
 8002506:	d02e      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002510:	d129      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002512:	4b4b      	ldr	r3, [pc, #300]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002520:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002526:	0f1b      	lsrs	r3, r3, #28
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	019a      	lsls	r2, r3, #6
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	041b      	lsls	r3, r3, #16
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	061b      	lsls	r3, r3, #24
 8002540:	431a      	orrs	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	071b      	lsls	r3, r3, #28
 8002546:	493e      	ldr	r1, [pc, #248]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800254e:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002554:	f023 021f 	bic.w	r2, r3, #31
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	3b01      	subs	r3, #1
 800255e:	4938      	ldr	r1, [pc, #224]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01d      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002572:	4b33      	ldr	r3, [pc, #204]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002578:	0e1b      	lsrs	r3, r3, #24
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002580:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002586:	0f1b      	lsrs	r3, r3, #28
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	019a      	lsls	r2, r3, #6
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	041b      	lsls	r3, r3, #16
 800259a:	431a      	orrs	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	071b      	lsls	r3, r3, #28
 80025a6:	4926      	ldr	r1, [pc, #152]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d011      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	019a      	lsls	r2, r3, #6
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	071b      	lsls	r3, r3, #28
 80025d6:	491a      	ldr	r1, [pc, #104]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a17      	ldr	r2, [pc, #92]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ea:	f7fe fbb3 	bl	8000d54 <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025f2:	f7fe fbaf 	bl	8000d54 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b64      	cmp	r3, #100	; 0x64
 80025fe:	d901      	bls.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0d8      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b01      	cmp	r3, #1
 8002614:	f040 80ce 	bne.w	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a08      	ldr	r2, [pc, #32]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002624:	f7fe fb96 	bl	8000d54 <HAL_GetTick>
 8002628:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800262a:	e00b      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800262c:	f7fe fb92 	bl	8000d54 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d904      	bls.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0bb      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002644:	4b5e      	ldr	r3, [pc, #376]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800264c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002650:	d0ec      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02e      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d12a      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800267a:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002688:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	0f1b      	lsrs	r3, r3, #28
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	019a      	lsls	r2, r3, #6
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	041b      	lsls	r3, r3, #16
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	061b      	lsls	r3, r3, #24
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	071b      	lsls	r3, r3, #28
 80026ae:	4944      	ldr	r1, [pc, #272]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026b6:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	3b01      	subs	r3, #1
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	493d      	ldr	r1, [pc, #244]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d022      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e4:	d11d      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026e6:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	0e1b      	lsrs	r3, r3, #24
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026f4:	4b32      	ldr	r3, [pc, #200]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	0f1b      	lsrs	r3, r3, #28
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	019a      	lsls	r2, r3, #6
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	041b      	lsls	r3, r3, #16
 800270e:	431a      	orrs	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	071b      	lsls	r3, r3, #28
 800271a:	4929      	ldr	r1, [pc, #164]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d028      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002734:	0e1b      	lsrs	r3, r3, #24
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	0c1b      	lsrs	r3, r3, #16
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	019a      	lsls	r2, r3, #6
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	041b      	lsls	r3, r3, #16
 8002754:	431a      	orrs	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	071b      	lsls	r3, r3, #28
 8002762:	4917      	ldr	r1, [pc, #92]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800276c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	4911      	ldr	r1, [pc, #68]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800278c:	f7fe fae2 	bl	8000d54 <HAL_GetTick>
 8002790:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002794:	f7fe fade 	bl	8000d54 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e007      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b2:	d1ef      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800

080027c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e049      	b.n	800286a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f841 	bl	8002872 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f000 fa00 	bl	8002c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d001      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e054      	b.n	800294a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a26      	ldr	r2, [pc, #152]	; (8002958 <HAL_TIM_Base_Start_IT+0xd0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d022      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d01d      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a22      	ldr	r2, [pc, #136]	; (800295c <HAL_TIM_Base_Start_IT+0xd4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d018      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a21      	ldr	r2, [pc, #132]	; (8002960 <HAL_TIM_Base_Start_IT+0xd8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d013      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1f      	ldr	r2, [pc, #124]	; (8002964 <HAL_TIM_Base_Start_IT+0xdc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00e      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <HAL_TIM_Base_Start_IT+0xe0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d009      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1c      	ldr	r2, [pc, #112]	; (800296c <HAL_TIM_Base_Start_IT+0xe4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_TIM_Base_Start_IT+0xe8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d115      	bne.n	8002934 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_TIM_Base_Start_IT+0xec>)
 8002910:	4013      	ands	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b06      	cmp	r3, #6
 8002918:	d015      	beq.n	8002946 <HAL_TIM_Base_Start_IT+0xbe>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002920:	d011      	beq.n	8002946 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002932:	e008      	b.n	8002946 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e000      	b.n	8002948 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40010000 	.word	0x40010000
 800295c:	40000400 	.word	0x40000400
 8002960:	40000800 	.word	0x40000800
 8002964:	40000c00 	.word	0x40000c00
 8002968:	40010400 	.word	0x40010400
 800296c:	40014000 	.word	0x40014000
 8002970:	40001800 	.word	0x40001800
 8002974:	00010007 	.word	0x00010007

08002978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d122      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b02      	cmp	r3, #2
 800299a:	d11b      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0202 	mvn.w	r2, #2
 80029a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f905 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 80029c0:	e005      	b.n	80029ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f8f7 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f908 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d122      	bne.n	8002a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d11b      	bne.n	8002a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0204 	mvn.w	r2, #4
 80029f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2202      	movs	r2, #2
 80029fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8db 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 8002a14:	e005      	b.n	8002a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8cd 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f8de 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d122      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d11b      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0208 	mvn.w	r2, #8
 8002a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2204      	movs	r2, #4
 8002a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f8b1 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8a3 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f8b4 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d122      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d11b      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0210 	mvn.w	r2, #16
 8002aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f887 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 8002abc:	e005      	b.n	8002aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f879 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f88a 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d10e      	bne.n	8002afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0201 	mvn.w	r2, #1
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fd ff1c 	bl	8000934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b80      	cmp	r3, #128	; 0x80
 8002b08:	d10e      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	2b80      	cmp	r3, #128	; 0x80
 8002b16:	d107      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f91a 	bl	8002d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b36:	d10e      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b80      	cmp	r3, #128	; 0x80
 8002b44:	d107      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f90d 	bl	8002d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d10e      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d107      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f838 	bl	8002bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d10e      	bne.n	8002bae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d107      	bne.n	8002bae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f06f 0220 	mvn.w	r2, #32
 8002ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f8cd 	bl	8002d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a40      	ldr	r2, [pc, #256]	; (8002d1c <TIM_Base_SetConfig+0x114>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d013      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c26:	d00f      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <TIM_Base_SetConfig+0x118>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a3c      	ldr	r2, [pc, #240]	; (8002d24 <TIM_Base_SetConfig+0x11c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a3b      	ldr	r2, [pc, #236]	; (8002d28 <TIM_Base_SetConfig+0x120>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a3a      	ldr	r2, [pc, #232]	; (8002d2c <TIM_Base_SetConfig+0x124>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d108      	bne.n	8002c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a2f      	ldr	r2, [pc, #188]	; (8002d1c <TIM_Base_SetConfig+0x114>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c68:	d027      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2c      	ldr	r2, [pc, #176]	; (8002d20 <TIM_Base_SetConfig+0x118>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d023      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2b      	ldr	r2, [pc, #172]	; (8002d24 <TIM_Base_SetConfig+0x11c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01f      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2a      	ldr	r2, [pc, #168]	; (8002d28 <TIM_Base_SetConfig+0x120>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a29      	ldr	r2, [pc, #164]	; (8002d2c <TIM_Base_SetConfig+0x124>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d017      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <TIM_Base_SetConfig+0x128>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <TIM_Base_SetConfig+0x12c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00f      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <TIM_Base_SetConfig+0x130>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <TIM_Base_SetConfig+0x134>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d007      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a24      	ldr	r2, [pc, #144]	; (8002d40 <TIM_Base_SetConfig+0x138>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d003      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a23      	ldr	r2, [pc, #140]	; (8002d44 <TIM_Base_SetConfig+0x13c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d108      	bne.n	8002ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <TIM_Base_SetConfig+0x114>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <TIM_Base_SetConfig+0xf8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <TIM_Base_SetConfig+0x124>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d103      	bne.n	8002d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	615a      	str	r2, [r3, #20]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40000c00 	.word	0x40000c00
 8002d2c:	40010400 	.word	0x40010400
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	40001800 	.word	0x40001800
 8002d40:	40001c00 	.word	0x40001c00
 8002d44:	40002000 	.word	0x40002000

08002d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e040      	b.n	8002e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fd fe04 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8b0 	bl	8002f28 <UART_SetConfig>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e022      	b.n	8002e18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fb08 	bl	80033f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fb8f 	bl	8003534 <UART_CheckIdleState>
 8002e16:	4603      	mov	r3, r0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d171      	bne.n	8002f1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Transmit+0x24>
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e06a      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2221      	movs	r2, #33	; 0x21
 8002e54:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e56:	f7fd ff7d 	bl	8000d54 <HAL_GetTick>
 8002e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e74:	d108      	bne.n	8002e88 <HAL_UART_Transmit+0x68>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e003      	b.n	8002e90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e90:	e02c      	b.n	8002eec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fb96 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e038      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	e007      	b.n	8002eda <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1cc      	bne.n	8002e92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2200      	movs	r2, #0
 8002f00:	2140      	movs	r1, #64	; 0x40
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fb63 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e005      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4ba6      	ldr	r3, [pc, #664]	; (80031ec <UART_SetConfig+0x2c4>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	6979      	ldr	r1, [r7, #20]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a94      	ldr	r2, [pc, #592]	; (80031f0 <UART_SetConfig+0x2c8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d120      	bne.n	8002fe6 <UART_SetConfig+0xbe>
 8002fa4:	4b93      	ldr	r3, [pc, #588]	; (80031f4 <UART_SetConfig+0x2cc>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d816      	bhi.n	8002fe0 <UART_SetConfig+0xb8>
 8002fb2:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <UART_SetConfig+0x90>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002fc9 	.word	0x08002fc9
 8002fbc:	08002fd5 	.word	0x08002fd5
 8002fc0:	08002fcf 	.word	0x08002fcf
 8002fc4:	08002fdb 	.word	0x08002fdb
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e150      	b.n	8003270 <UART_SetConfig+0x348>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	e14d      	b.n	8003270 <UART_SetConfig+0x348>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e14a      	b.n	8003270 <UART_SetConfig+0x348>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	77fb      	strb	r3, [r7, #31]
 8002fde:	e147      	b.n	8003270 <UART_SetConfig+0x348>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e144      	b.n	8003270 <UART_SetConfig+0x348>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a83      	ldr	r2, [pc, #524]	; (80031f8 <UART_SetConfig+0x2d0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d132      	bne.n	8003056 <UART_SetConfig+0x12e>
 8002ff0:	4b80      	ldr	r3, [pc, #512]	; (80031f4 <UART_SetConfig+0x2cc>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d828      	bhi.n	8003050 <UART_SetConfig+0x128>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <UART_SetConfig+0xdc>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003039 	.word	0x08003039
 8003008:	08003051 	.word	0x08003051
 800300c:	08003051 	.word	0x08003051
 8003010:	08003051 	.word	0x08003051
 8003014:	08003045 	.word	0x08003045
 8003018:	08003051 	.word	0x08003051
 800301c:	08003051 	.word	0x08003051
 8003020:	08003051 	.word	0x08003051
 8003024:	0800303f 	.word	0x0800303f
 8003028:	08003051 	.word	0x08003051
 800302c:	08003051 	.word	0x08003051
 8003030:	08003051 	.word	0x08003051
 8003034:	0800304b 	.word	0x0800304b
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e118      	b.n	8003270 <UART_SetConfig+0x348>
 800303e:	2302      	movs	r3, #2
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e115      	b.n	8003270 <UART_SetConfig+0x348>
 8003044:	2304      	movs	r3, #4
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e112      	b.n	8003270 <UART_SetConfig+0x348>
 800304a:	2308      	movs	r3, #8
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e10f      	b.n	8003270 <UART_SetConfig+0x348>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e10c      	b.n	8003270 <UART_SetConfig+0x348>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a68      	ldr	r2, [pc, #416]	; (80031fc <UART_SetConfig+0x2d4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d120      	bne.n	80030a2 <UART_SetConfig+0x17a>
 8003060:	4b64      	ldr	r3, [pc, #400]	; (80031f4 <UART_SetConfig+0x2cc>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800306a:	2b30      	cmp	r3, #48	; 0x30
 800306c:	d013      	beq.n	8003096 <UART_SetConfig+0x16e>
 800306e:	2b30      	cmp	r3, #48	; 0x30
 8003070:	d814      	bhi.n	800309c <UART_SetConfig+0x174>
 8003072:	2b20      	cmp	r3, #32
 8003074:	d009      	beq.n	800308a <UART_SetConfig+0x162>
 8003076:	2b20      	cmp	r3, #32
 8003078:	d810      	bhi.n	800309c <UART_SetConfig+0x174>
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <UART_SetConfig+0x15c>
 800307e:	2b10      	cmp	r3, #16
 8003080:	d006      	beq.n	8003090 <UART_SetConfig+0x168>
 8003082:	e00b      	b.n	800309c <UART_SetConfig+0x174>
 8003084:	2300      	movs	r3, #0
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e0f2      	b.n	8003270 <UART_SetConfig+0x348>
 800308a:	2302      	movs	r3, #2
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e0ef      	b.n	8003270 <UART_SetConfig+0x348>
 8003090:	2304      	movs	r3, #4
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e0ec      	b.n	8003270 <UART_SetConfig+0x348>
 8003096:	2308      	movs	r3, #8
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e0e9      	b.n	8003270 <UART_SetConfig+0x348>
 800309c:	2310      	movs	r3, #16
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e0e6      	b.n	8003270 <UART_SetConfig+0x348>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a56      	ldr	r2, [pc, #344]	; (8003200 <UART_SetConfig+0x2d8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d120      	bne.n	80030ee <UART_SetConfig+0x1c6>
 80030ac:	4b51      	ldr	r3, [pc, #324]	; (80031f4 <UART_SetConfig+0x2cc>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030b6:	2bc0      	cmp	r3, #192	; 0xc0
 80030b8:	d013      	beq.n	80030e2 <UART_SetConfig+0x1ba>
 80030ba:	2bc0      	cmp	r3, #192	; 0xc0
 80030bc:	d814      	bhi.n	80030e8 <UART_SetConfig+0x1c0>
 80030be:	2b80      	cmp	r3, #128	; 0x80
 80030c0:	d009      	beq.n	80030d6 <UART_SetConfig+0x1ae>
 80030c2:	2b80      	cmp	r3, #128	; 0x80
 80030c4:	d810      	bhi.n	80030e8 <UART_SetConfig+0x1c0>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <UART_SetConfig+0x1a8>
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d006      	beq.n	80030dc <UART_SetConfig+0x1b4>
 80030ce:	e00b      	b.n	80030e8 <UART_SetConfig+0x1c0>
 80030d0:	2300      	movs	r3, #0
 80030d2:	77fb      	strb	r3, [r7, #31]
 80030d4:	e0cc      	b.n	8003270 <UART_SetConfig+0x348>
 80030d6:	2302      	movs	r3, #2
 80030d8:	77fb      	strb	r3, [r7, #31]
 80030da:	e0c9      	b.n	8003270 <UART_SetConfig+0x348>
 80030dc:	2304      	movs	r3, #4
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	e0c6      	b.n	8003270 <UART_SetConfig+0x348>
 80030e2:	2308      	movs	r3, #8
 80030e4:	77fb      	strb	r3, [r7, #31]
 80030e6:	e0c3      	b.n	8003270 <UART_SetConfig+0x348>
 80030e8:	2310      	movs	r3, #16
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e0c0      	b.n	8003270 <UART_SetConfig+0x348>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a44      	ldr	r2, [pc, #272]	; (8003204 <UART_SetConfig+0x2dc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d125      	bne.n	8003144 <UART_SetConfig+0x21c>
 80030f8:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <UART_SetConfig+0x2cc>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003106:	d017      	beq.n	8003138 <UART_SetConfig+0x210>
 8003108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800310c:	d817      	bhi.n	800313e <UART_SetConfig+0x216>
 800310e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003112:	d00b      	beq.n	800312c <UART_SetConfig+0x204>
 8003114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003118:	d811      	bhi.n	800313e <UART_SetConfig+0x216>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <UART_SetConfig+0x1fe>
 800311e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003122:	d006      	beq.n	8003132 <UART_SetConfig+0x20a>
 8003124:	e00b      	b.n	800313e <UART_SetConfig+0x216>
 8003126:	2300      	movs	r3, #0
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e0a1      	b.n	8003270 <UART_SetConfig+0x348>
 800312c:	2302      	movs	r3, #2
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e09e      	b.n	8003270 <UART_SetConfig+0x348>
 8003132:	2304      	movs	r3, #4
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e09b      	b.n	8003270 <UART_SetConfig+0x348>
 8003138:	2308      	movs	r3, #8
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e098      	b.n	8003270 <UART_SetConfig+0x348>
 800313e:	2310      	movs	r3, #16
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e095      	b.n	8003270 <UART_SetConfig+0x348>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <UART_SetConfig+0x2e0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d125      	bne.n	800319a <UART_SetConfig+0x272>
 800314e:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <UART_SetConfig+0x2cc>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003154:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800315c:	d017      	beq.n	800318e <UART_SetConfig+0x266>
 800315e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003162:	d817      	bhi.n	8003194 <UART_SetConfig+0x26c>
 8003164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003168:	d00b      	beq.n	8003182 <UART_SetConfig+0x25a>
 800316a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316e:	d811      	bhi.n	8003194 <UART_SetConfig+0x26c>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <UART_SetConfig+0x254>
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003178:	d006      	beq.n	8003188 <UART_SetConfig+0x260>
 800317a:	e00b      	b.n	8003194 <UART_SetConfig+0x26c>
 800317c:	2301      	movs	r3, #1
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e076      	b.n	8003270 <UART_SetConfig+0x348>
 8003182:	2302      	movs	r3, #2
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e073      	b.n	8003270 <UART_SetConfig+0x348>
 8003188:	2304      	movs	r3, #4
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e070      	b.n	8003270 <UART_SetConfig+0x348>
 800318e:	2308      	movs	r3, #8
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e06d      	b.n	8003270 <UART_SetConfig+0x348>
 8003194:	2310      	movs	r3, #16
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e06a      	b.n	8003270 <UART_SetConfig+0x348>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1b      	ldr	r2, [pc, #108]	; (800320c <UART_SetConfig+0x2e4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d138      	bne.n	8003216 <UART_SetConfig+0x2ee>
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <UART_SetConfig+0x2cc>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031b2:	d017      	beq.n	80031e4 <UART_SetConfig+0x2bc>
 80031b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031b8:	d82a      	bhi.n	8003210 <UART_SetConfig+0x2e8>
 80031ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031be:	d00b      	beq.n	80031d8 <UART_SetConfig+0x2b0>
 80031c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c4:	d824      	bhi.n	8003210 <UART_SetConfig+0x2e8>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <UART_SetConfig+0x2aa>
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ce:	d006      	beq.n	80031de <UART_SetConfig+0x2b6>
 80031d0:	e01e      	b.n	8003210 <UART_SetConfig+0x2e8>
 80031d2:	2300      	movs	r3, #0
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e04b      	b.n	8003270 <UART_SetConfig+0x348>
 80031d8:	2302      	movs	r3, #2
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e048      	b.n	8003270 <UART_SetConfig+0x348>
 80031de:	2304      	movs	r3, #4
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e045      	b.n	8003270 <UART_SetConfig+0x348>
 80031e4:	2308      	movs	r3, #8
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e042      	b.n	8003270 <UART_SetConfig+0x348>
 80031ea:	bf00      	nop
 80031ec:	efff69f3 	.word	0xefff69f3
 80031f0:	40011000 	.word	0x40011000
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40004400 	.word	0x40004400
 80031fc:	40004800 	.word	0x40004800
 8003200:	40004c00 	.word	0x40004c00
 8003204:	40005000 	.word	0x40005000
 8003208:	40011400 	.word	0x40011400
 800320c:	40007800 	.word	0x40007800
 8003210:	2310      	movs	r3, #16
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e02c      	b.n	8003270 <UART_SetConfig+0x348>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a72      	ldr	r2, [pc, #456]	; (80033e4 <UART_SetConfig+0x4bc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d125      	bne.n	800326c <UART_SetConfig+0x344>
 8003220:	4b71      	ldr	r3, [pc, #452]	; (80033e8 <UART_SetConfig+0x4c0>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800322a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800322e:	d017      	beq.n	8003260 <UART_SetConfig+0x338>
 8003230:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003234:	d817      	bhi.n	8003266 <UART_SetConfig+0x33e>
 8003236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800323a:	d00b      	beq.n	8003254 <UART_SetConfig+0x32c>
 800323c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003240:	d811      	bhi.n	8003266 <UART_SetConfig+0x33e>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <UART_SetConfig+0x326>
 8003246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324a:	d006      	beq.n	800325a <UART_SetConfig+0x332>
 800324c:	e00b      	b.n	8003266 <UART_SetConfig+0x33e>
 800324e:	2300      	movs	r3, #0
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e00d      	b.n	8003270 <UART_SetConfig+0x348>
 8003254:	2302      	movs	r3, #2
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e00a      	b.n	8003270 <UART_SetConfig+0x348>
 800325a:	2304      	movs	r3, #4
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e007      	b.n	8003270 <UART_SetConfig+0x348>
 8003260:	2308      	movs	r3, #8
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e004      	b.n	8003270 <UART_SetConfig+0x348>
 8003266:	2310      	movs	r3, #16
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e001      	b.n	8003270 <UART_SetConfig+0x348>
 800326c:	2310      	movs	r3, #16
 800326e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003278:	d15b      	bne.n	8003332 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800327a:	7ffb      	ldrb	r3, [r7, #31]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d828      	bhi.n	80032d2 <UART_SetConfig+0x3aa>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0x360>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032b5 	.word	0x080032b5
 8003290:	080032bd 	.word	0x080032bd
 8003294:	080032d3 	.word	0x080032d3
 8003298:	080032c3 	.word	0x080032c3
 800329c:	080032d3 	.word	0x080032d3
 80032a0:	080032d3 	.word	0x080032d3
 80032a4:	080032d3 	.word	0x080032d3
 80032a8:	080032cb 	.word	0x080032cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7fe fe08 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 80032b0:	61b8      	str	r0, [r7, #24]
        break;
 80032b2:	e013      	b.n	80032dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b4:	f7fe fe18 	bl	8001ee8 <HAL_RCC_GetPCLK2Freq>
 80032b8:	61b8      	str	r0, [r7, #24]
        break;
 80032ba:	e00f      	b.n	80032dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032bc:	4b4b      	ldr	r3, [pc, #300]	; (80033ec <UART_SetConfig+0x4c4>)
 80032be:	61bb      	str	r3, [r7, #24]
        break;
 80032c0:	e00c      	b.n	80032dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032c2:	f7fe fd2b 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 80032c6:	61b8      	str	r0, [r7, #24]
        break;
 80032c8:	e008      	b.n	80032dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ce:	61bb      	str	r3, [r7, #24]
        break;
 80032d0:	e004      	b.n	80032dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	77bb      	strb	r3, [r7, #30]
        break;
 80032da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d074      	beq.n	80033cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	005a      	lsls	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	d916      	bls.n	800332c <UART_SetConfig+0x404>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d212      	bcs.n	800332c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f023 030f 	bic.w	r3, r3, #15
 800330e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	b29b      	uxth	r3, r3
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	b29a      	uxth	r2, r3
 800331c:	89fb      	ldrh	r3, [r7, #14]
 800331e:	4313      	orrs	r3, r2
 8003320:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	89fa      	ldrh	r2, [r7, #14]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e04f      	b.n	80033cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77bb      	strb	r3, [r7, #30]
 8003330:	e04c      	b.n	80033cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003332:	7ffb      	ldrb	r3, [r7, #31]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d828      	bhi.n	800338a <UART_SetConfig+0x462>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x418>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003365 	.word	0x08003365
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003375 	.word	0x08003375
 800334c:	0800338b 	.word	0x0800338b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800338b 	.word	0x0800338b
 8003358:	0800338b 	.word	0x0800338b
 800335c:	0800338b 	.word	0x0800338b
 8003360:	08003383 	.word	0x08003383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7fe fdac 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8003368:	61b8      	str	r0, [r7, #24]
        break;
 800336a:	e013      	b.n	8003394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7fe fdbc 	bl	8001ee8 <HAL_RCC_GetPCLK2Freq>
 8003370:	61b8      	str	r0, [r7, #24]
        break;
 8003372:	e00f      	b.n	8003394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <UART_SetConfig+0x4c4>)
 8003376:	61bb      	str	r3, [r7, #24]
        break;
 8003378:	e00c      	b.n	8003394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe fccf 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 800337e:	61b8      	str	r0, [r7, #24]
        break;
 8003380:	e008      	b.n	8003394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003386:	61bb      	str	r3, [r7, #24]
        break;
 8003388:	e004      	b.n	8003394 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	77bb      	strb	r3, [r7, #30]
        break;
 8003392:	bf00      	nop
    }

    if (pclk != 0U)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d018      	beq.n	80033cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	085a      	lsrs	r2, r3, #1
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	441a      	add	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b0f      	cmp	r3, #15
 80033b2:	d909      	bls.n	80033c8 <UART_SetConfig+0x4a0>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ba:	d205      	bcs.n	80033c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e001      	b.n	80033cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40007c00 	.word	0x40007c00
 80033e8:	40023800 	.word	0x40023800
 80033ec:	00f42400 	.word	0x00f42400

080033f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01a      	beq.n	8003506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ee:	d10a      	bne.n	8003506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003544:	f7fd fc06 	bl	8000d54 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b08      	cmp	r3, #8
 8003556:	d10e      	bne.n	8003576 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f831 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e027      	b.n	80035c6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b04      	cmp	r3, #4
 8003582:	d10e      	bne.n	80035a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f81b 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e011      	b.n	80035c6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b09c      	sub	sp, #112	; 0x70
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4613      	mov	r3, r2
 80035dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035de:	e0a7      	b.n	8003730 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	f000 80a3 	beq.w	8003730 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	f7fd fbb3 	bl	8000d54 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d302      	bcc.n	8003600 <UART_WaitOnFlagUntilTimeout+0x32>
 80035fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d13f      	bne.n	8003680 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800360e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003610:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003614:	667b      	str	r3, [r7, #100]	; 0x64
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800361e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003620:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003624:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800362c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e6      	bne.n	8003600 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3308      	adds	r3, #8
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	663b      	str	r3, [r7, #96]	; 0x60
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3308      	adds	r3, #8
 8003650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003652:	64ba      	str	r2, [r7, #72]	; 0x48
 8003654:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e5      	bne.n	8003632 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e068      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d050      	beq.n	8003730 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369c:	d148      	bne.n	8003730 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
 80036c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e6      	bne.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3308      	adds	r3, #8
 80036e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3308      	adds	r3, #8
 80036f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036fa:	623a      	str	r2, [r7, #32]
 80036fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	69f9      	ldr	r1, [r7, #28]
 8003700:	6a3a      	ldr	r2, [r7, #32]
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	61bb      	str	r3, [r7, #24]
   return(result);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e5      	bne.n	80036da <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e010      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	429a      	cmp	r2, r3
 800374c:	f43f af48 	beq.w	80035e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3770      	adds	r7, #112	; 0x70
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800375c:	b084      	sub	sp, #16
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	f107 001c 	add.w	r0, r7, #28
 800376a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	2b01      	cmp	r3, #1
 8003772:	d120      	bne.n	80037b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	4b20      	ldr	r3, [pc, #128]	; (8003808 <USB_CoreInit+0xac>)
 8003786:	4013      	ands	r3, r2
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379a:	2b01      	cmp	r3, #1
 800379c:	d105      	bne.n	80037aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fa96 	bl	8003cdc <USB_CoreReset>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	e010      	b.n	80037d8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa8a 	bl	8003cdc <USB_CoreReset>
 80037c8:	4603      	mov	r3, r0
 80037ca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d10b      	bne.n	80037f6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f043 0206 	orr.w	r2, r3, #6
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f043 0220 	orr.w	r2, r3, #32
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003802:	b004      	add	sp, #16
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	ffbdffbf 	.word	0xffbdffbf

0800380c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 0201 	bic.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d115      	bne.n	800387c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800385c:	2001      	movs	r0, #1
 800385e:	f7fd fa85 	bl	8000d6c <HAL_Delay>
      ms++;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3301      	adds	r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fa29 	bl	8003cc0 <USB_GetMode>
 800386e:	4603      	mov	r3, r0
 8003870:	2b01      	cmp	r3, #1
 8003872:	d01e      	beq.n	80038b2 <USB_SetCurrentMode+0x84>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b31      	cmp	r3, #49	; 0x31
 8003878:	d9f0      	bls.n	800385c <USB_SetCurrentMode+0x2e>
 800387a:	e01a      	b.n	80038b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d115      	bne.n	80038ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800388e:	2001      	movs	r0, #1
 8003890:	f7fd fa6c 	bl	8000d6c <HAL_Delay>
      ms++;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3301      	adds	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fa10 	bl	8003cc0 <USB_GetMode>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <USB_SetCurrentMode+0x84>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b31      	cmp	r3, #49	; 0x31
 80038aa:	d9f0      	bls.n	800388e <USB_SetCurrentMode+0x60>
 80038ac:	e001      	b.n	80038b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e005      	b.n	80038be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b32      	cmp	r3, #50	; 0x32
 80038b6:	d101      	bne.n	80038bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038c8:	b084      	sub	sp, #16
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	e009      	b.n	80038fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	3340      	adds	r3, #64	; 0x40
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	2200      	movs	r2, #0
 80038f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	3301      	adds	r3, #1
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b0e      	cmp	r3, #14
 8003900:	d9f2      	bls.n	80038e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d11c      	bne.n	8003942 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003916:	f043 0302 	orr.w	r3, r3, #2
 800391a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e005      	b.n	800394e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003954:	461a      	mov	r2, r3
 8003956:	2300      	movs	r3, #0
 8003958:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003960:	4619      	mov	r1, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003968:	461a      	mov	r2, r3
 800396a:	680b      	ldr	r3, [r1, #0]
 800396c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	2b01      	cmp	r3, #1
 8003972:	d10c      	bne.n	800398e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d104      	bne.n	8003984 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800397a:	2100      	movs	r1, #0
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f965 	bl	8003c4c <USB_SetDevSpeed>
 8003982:	e008      	b.n	8003996 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003984:	2101      	movs	r1, #1
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f960 	bl	8003c4c <USB_SetDevSpeed>
 800398c:	e003      	b.n	8003996 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800398e:	2103      	movs	r1, #3
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f95b 	bl	8003c4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003996:	2110      	movs	r1, #16
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8f3 	bl	8003b84 <USB_FlushTxFifo>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f91f 	bl	8003bec <USB_FlushRxFifo>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039be:	461a      	mov	r2, r3
 80039c0:	2300      	movs	r3, #0
 80039c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ca:	461a      	mov	r2, r3
 80039cc:	2300      	movs	r3, #0
 80039ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d6:	461a      	mov	r2, r3
 80039d8:	2300      	movs	r3, #0
 80039da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039dc:	2300      	movs	r3, #0
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	e043      	b.n	8003a6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039f8:	d118      	bne.n	8003a2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	e013      	b.n	8003a3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a22:	461a      	mov	r2, r3
 8003a24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e008      	b.n	8003a3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a38:	461a      	mov	r2, r3
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	3301      	adds	r3, #1
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d3b7      	bcc.n	80039e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	e043      	b.n	8003b00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a8e:	d118      	bne.n	8003ac2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e013      	b.n	8003ad4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	e008      	b.n	8003ad4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af2:	461a      	mov	r2, r3
 8003af4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003af8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	3301      	adds	r3, #1
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3b7      	bcc.n	8003a78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d105      	bne.n	8003b3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f043 0210 	orr.w	r2, r3, #16
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <USB_DevInit+0x2b4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f043 0208 	orr.w	r2, r3, #8
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <USB_DevInit+0x2b8>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b78:	b004      	add	sp, #16
 8003b7a:	4770      	bx	lr
 8003b7c:	803c3800 	.word	0x803c3800
 8003b80:	40000004 	.word	0x40000004

08003b84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3301      	adds	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <USB_FlushTxFifo+0x64>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e01b      	b.n	8003bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	daf2      	bge.n	8003b92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	019b      	lsls	r3, r3, #6
 8003bb4:	f043 0220 	orr.w	r2, r3, #32
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <USB_FlushTxFifo+0x64>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e006      	b.n	8003bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d0f0      	beq.n	8003bbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	00030d40 	.word	0x00030d40

08003bec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <USB_FlushRxFifo+0x5c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e018      	b.n	8003c3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	daf2      	bge.n	8003bf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2210      	movs	r2, #16
 8003c1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <USB_FlushRxFifo+0x5c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e006      	b.n	8003c3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d0f0      	beq.n	8003c1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	00030d40 	.word	0x00030d40

08003c4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003c98:	f023 0303 	bic.w	r3, r3, #3
 8003c9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cac:	f043 0302 	orr.w	r3, r3, #2
 8003cb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3301      	adds	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <USB_CoreReset+0x64>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e01b      	b.n	8003d32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	daf2      	bge.n	8003ce8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3301      	adds	r3, #1
 8003d16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <USB_CoreReset+0x64>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e006      	b.n	8003d32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d0f0      	beq.n	8003d12 <USB_CoreReset+0x36>

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	00030d40 	.word	0x00030d40

08003d44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d5a:	f3ef 8305 	mrs	r3, IPSR
 8003d5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10f      	bne.n	8003d86 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d66:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6a:	607b      	str	r3, [r7, #4]
  return(result);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d105      	bne.n	8003d7e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d72:	f3ef 8311 	mrs	r3, BASEPRI
 8003d76:	603b      	str	r3, [r7, #0]
  return(result);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <osKernelInitialize+0x3a>
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <osKernelInitialize+0x64>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d103      	bne.n	8003d8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003d86:	f06f 0305 	mvn.w	r3, #5
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e00c      	b.n	8003da8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <osKernelInitialize+0x64>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d105      	bne.n	8003da2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <osKernelInitialize+0x64>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e002      	b.n	8003da8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
 8003da6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003da8:	68fb      	ldr	r3, [r7, #12]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	200006fc 	.word	0x200006fc

08003dbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dc2:	f3ef 8305 	mrs	r3, IPSR
 8003dc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dce:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd2:	607b      	str	r3, [r7, #4]
  return(result);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d105      	bne.n	8003de6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dda:	f3ef 8311 	mrs	r3, BASEPRI
 8003dde:	603b      	str	r3, [r7, #0]
  return(result);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <osKernelStart+0x3a>
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <osKernelStart+0x68>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d103      	bne.n	8003df6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003dee:	f06f 0305 	mvn.w	r3, #5
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	e010      	b.n	8003e18 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <osKernelStart+0x68>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d109      	bne.n	8003e12 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003dfe:	f7ff ffa1 	bl	8003d44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <osKernelStart+0x68>)
 8003e04:	2202      	movs	r2, #2
 8003e06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e08:	f001 f8ca 	bl	8004fa0 <vTaskStartScheduler>
      stat = osOK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e002      	b.n	8003e18 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003e12:	f04f 33ff 	mov.w	r3, #4294967295
 8003e16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e18:	68fb      	ldr	r3, [r7, #12]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	200006fc 	.word	0x200006fc

08003e28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b090      	sub	sp, #64	; 0x40
 8003e2c:	af04      	add	r7, sp, #16
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e38:	f3ef 8305 	mrs	r3, IPSR
 8003e3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e3e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f040 808f 	bne.w	8003f64 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e46:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d105      	bne.n	8003e5e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e52:	f3ef 8311 	mrs	r3, BASEPRI
 8003e56:	617b      	str	r3, [r7, #20]
  return(result);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <osThreadNew+0x3e>
 8003e5e:	4b44      	ldr	r3, [pc, #272]	; (8003f70 <osThreadNew+0x148>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d07e      	beq.n	8003f64 <osThreadNew+0x13c>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d07b      	beq.n	8003f64 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003e70:	2318      	movs	r3, #24
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003e78:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d045      	beq.n	8003f10 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <osThreadNew+0x6a>
        name = attr->name;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <osThreadNew+0x90>
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	2b38      	cmp	r3, #56	; 0x38
 8003eaa:	d805      	bhi.n	8003eb8 <osThreadNew+0x90>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <osThreadNew+0x94>
        return (NULL);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e054      	b.n	8003f66 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00e      	beq.n	8003ef2 <osThreadNew+0xca>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2bbb      	cmp	r3, #187	; 0xbb
 8003eda:	d90a      	bls.n	8003ef2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d006      	beq.n	8003ef2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <osThreadNew+0xca>
        mem = 1;
 8003eec:	2301      	movs	r3, #1
 8003eee:	623b      	str	r3, [r7, #32]
 8003ef0:	e010      	b.n	8003f14 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10c      	bne.n	8003f14 <osThreadNew+0xec>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d108      	bne.n	8003f14 <osThreadNew+0xec>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d104      	bne.n	8003f14 <osThreadNew+0xec>
          mem = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	623b      	str	r3, [r7, #32]
 8003f0e:	e001      	b.n	8003f14 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d110      	bne.n	8003f3c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f22:	9202      	str	r2, [sp, #8]
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fe3f 	bl	8004bb4 <xTaskCreateStatic>
 8003f36:	4603      	mov	r3, r0
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	e013      	b.n	8003f64 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d110      	bne.n	8003f64 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fe90 	bl	8004c7a <xTaskCreate>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d001      	beq.n	8003f64 <osThreadNew+0x13c>
          hTask = NULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f64:	693b      	ldr	r3, [r7, #16]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3730      	adds	r7, #48	; 0x30
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200006fc 	.word	0x200006fc

08003f74 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f7c:	f3ef 8305 	mrs	r3, IPSR
 8003f80:	613b      	str	r3, [r7, #16]
  return(result);
 8003f82:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10f      	bne.n	8003fa8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f88:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f94:	f3ef 8311 	mrs	r3, BASEPRI
 8003f98:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <osDelay+0x3c>
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <osDelay+0x58>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d103      	bne.n	8003fb0 <osDelay+0x3c>
    stat = osErrorISR;
 8003fa8:	f06f 0305 	mvn.w	r3, #5
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e007      	b.n	8003fc0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 ffba 	bl	8004f34 <vTaskDelay>
    }
  }

  return (stat);
 8003fc0:	697b      	ldr	r3, [r7, #20]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	200006fc 	.word	0x200006fc

08003fd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <vApplicationGetIdleTaskMemory+0x2c>)
 8003fe0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4a06      	ldr	r2, [pc, #24]	; (8004000 <vApplicationGetIdleTaskMemory+0x30>)
 8003fe6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	601a      	str	r2, [r3, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000700 	.word	0x20000700
 8004000:	200007bc 	.word	0x200007bc

08004004 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4a07      	ldr	r2, [pc, #28]	; (8004030 <vApplicationGetTimerTaskMemory+0x2c>)
 8004014:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4a06      	ldr	r2, [pc, #24]	; (8004034 <vApplicationGetTimerTaskMemory+0x30>)
 800401a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004022:	601a      	str	r2, [r3, #0]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	200009bc 	.word	0x200009bc
 8004034:	20000a78 	.word	0x20000a78

08004038 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f103 0208 	add.w	r2, r3, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f04f 32ff 	mov.w	r2, #4294967295
 8004050:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f103 0208 	add.w	r2, r3, #8
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f103 0208 	add.w	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	601a      	str	r2, [r3, #0]
}
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d103      	bne.n	80040fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e00c      	b.n	8004114 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3308      	adds	r3, #8
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e002      	b.n	8004108 <vListInsert+0x2e>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	429a      	cmp	r2, r3
 8004112:	d2f6      	bcs.n	8004102 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	601a      	str	r2, [r3, #0]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6892      	ldr	r2, [r2, #8]
 8004162:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6852      	ldr	r2, [r2, #4]
 800416c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d103      	bne.n	8004180 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	1e5a      	subs	r2, r3, #1
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10c      	bne.n	80041ce <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	b672      	cpsid	i
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	b662      	cpsie	i
 80041c8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041ca:	bf00      	nop
 80041cc:	e7fe      	b.n	80041cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80041ce:	f002 f8a5 	bl	800631c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041da:	68f9      	ldr	r1, [r7, #12]
 80041dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041de:	fb01 f303 	mul.w	r3, r1, r3
 80041e2:	441a      	add	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	3b01      	subs	r3, #1
 8004200:	68f9      	ldr	r1, [r7, #12]
 8004202:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	441a      	add	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	22ff      	movs	r2, #255	; 0xff
 8004212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	22ff      	movs	r2, #255	; 0xff
 800421a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d114      	bne.n	800424e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01a      	beq.n	8004262 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3310      	adds	r3, #16
 8004230:	4618      	mov	r0, r3
 8004232:	f001 f95d 	bl	80054f0 <xTaskRemoveFromEventList>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d012      	beq.n	8004262 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <xQueueGenericReset+0xd0>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	e009      	b.n	8004262 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3310      	adds	r3, #16
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fef0 	bl	8004038 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3324      	adds	r3, #36	; 0x24
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff feeb 	bl	8004038 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004262:	f002 f88f 	bl	8006384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004266:	2301      	movs	r3, #1
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08e      	sub	sp, #56	; 0x38
 8004278:	af02      	add	r7, sp, #8
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10c      	bne.n	80042a2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	b672      	cpsid	i
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	b662      	cpsie	i
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10c      	bne.n	80042c2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	b672      	cpsid	i
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	b662      	cpsie	i
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <xQueueGenericCreateStatic+0x5a>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <xQueueGenericCreateStatic+0x5e>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <xQueueGenericCreateStatic+0x60>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10c      	bne.n	80042f2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	b672      	cpsid	i
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	b662      	cpsie	i
 80042ec:	623b      	str	r3, [r7, #32]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <xQueueGenericCreateStatic+0x8a>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <xQueueGenericCreateStatic+0x8e>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <xQueueGenericCreateStatic+0x90>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10c      	bne.n	8004322 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	b672      	cpsid	i
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	b662      	cpsie	i
 800431c:	61fb      	str	r3, [r7, #28]
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004322:	2350      	movs	r3, #80	; 0x50
 8004324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b50      	cmp	r3, #80	; 0x50
 800432a:	d00c      	beq.n	8004346 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	b672      	cpsid	i
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	b662      	cpsie	i
 8004340:	61bb      	str	r3, [r7, #24]
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004346:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00d      	beq.n	800436e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800435a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	4613      	mov	r3, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f805 	bl	8004378 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004370:	4618      	mov	r0, r3
 8004372:	3730      	adds	r7, #48	; 0x30
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e002      	b.n	800439a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043a6:	2101      	movs	r1, #1
 80043a8:	69b8      	ldr	r0, [r7, #24]
 80043aa:	f7ff fef9 	bl	80041a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08e      	sub	sp, #56	; 0x38
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043ce:	2300      	movs	r3, #0
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10c      	bne.n	80043f6 <xQueueGenericSend+0x36>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	b672      	cpsid	i
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	b662      	cpsie	i
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d103      	bne.n	8004404 <xQueueGenericSend+0x44>
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <xQueueGenericSend+0x48>
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <xQueueGenericSend+0x4a>
 8004408:	2300      	movs	r3, #0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10c      	bne.n	8004428 <xQueueGenericSend+0x68>
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	b672      	cpsid	i
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	b662      	cpsie	i
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d103      	bne.n	8004436 <xQueueGenericSend+0x76>
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <xQueueGenericSend+0x7a>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <xQueueGenericSend+0x7c>
 800443a:	2300      	movs	r3, #0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10c      	bne.n	800445a <xQueueGenericSend+0x9a>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	b672      	cpsid	i
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	b662      	cpsie	i
 8004454:	623b      	str	r3, [r7, #32]
}
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800445a:	f001 fa13 	bl	8005884 <xTaskGetSchedulerState>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <xQueueGenericSend+0xaa>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <xQueueGenericSend+0xae>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <xQueueGenericSend+0xb0>
 800446e:	2300      	movs	r3, #0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10c      	bne.n	800448e <xQueueGenericSend+0xce>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	b672      	cpsid	i
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	b662      	cpsie	i
 8004488:	61fb      	str	r3, [r7, #28]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800448e:	f001 ff45 	bl	800631c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449a:	429a      	cmp	r2, r3
 800449c:	d302      	bcc.n	80044a4 <xQueueGenericSend+0xe4>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d129      	bne.n	80044f8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044aa:	f000 fa15 	bl	80048d8 <prvCopyDataToQueue>
 80044ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d010      	beq.n	80044da <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	3324      	adds	r3, #36	; 0x24
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 f817 	bl	80054f0 <xTaskRemoveFromEventList>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d013      	beq.n	80044f0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044c8:	4b3f      	ldr	r3, [pc, #252]	; (80045c8 <xQueueGenericSend+0x208>)
 80044ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	e00a      	b.n	80044f0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044e0:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <xQueueGenericSend+0x208>)
 80044e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044f0:	f001 ff48 	bl	8006384 <vPortExitCritical>
				return pdPASS;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e063      	b.n	80045c0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d103      	bne.n	8004506 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044fe:	f001 ff41 	bl	8006384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004502:	2300      	movs	r3, #0
 8004504:	e05c      	b.n	80045c0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	4618      	mov	r0, r3
 8004512:	f001 f853 	bl	80055bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004516:	2301      	movs	r3, #1
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800451a:	f001 ff33 	bl	8006384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800451e:	f000 fdb3 	bl	8005088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004522:	f001 fefb 	bl	800631c <vPortEnterCritical>
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800452c:	b25b      	sxtb	r3, r3
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d103      	bne.n	800453c <xQueueGenericSend+0x17c>
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004542:	b25b      	sxtb	r3, r3
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d103      	bne.n	8004552 <xQueueGenericSend+0x192>
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004552:	f001 ff17 	bl	8006384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004556:	1d3a      	adds	r2, r7, #4
 8004558:	f107 0314 	add.w	r3, r7, #20
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f001 f842 	bl	80055e8 <xTaskCheckForTimeOut>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d124      	bne.n	80045b4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800456a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800456c:	f000 faac 	bl	8004ac8 <prvIsQueueFull>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d018      	beq.n	80045a8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	3310      	adds	r3, #16
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f000 ff62 	bl	8005448 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004586:	f000 fa37 	bl	80049f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800458a:	f000 fd8b 	bl	80050a4 <xTaskResumeAll>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	f47f af7c 	bne.w	800448e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <xQueueGenericSend+0x208>)
 8004598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	e772      	b.n	800448e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045aa:	f000 fa25 	bl	80049f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045ae:	f000 fd79 	bl	80050a4 <xTaskResumeAll>
 80045b2:	e76c      	b.n	800448e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045b6:	f000 fa1f 	bl	80049f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045ba:	f000 fd73 	bl	80050a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3738      	adds	r7, #56	; 0x38
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	e000ed04 	.word	0xe000ed04

080045cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08e      	sub	sp, #56	; 0x38
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10c      	bne.n	80045fe <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	b672      	cpsid	i
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	b662      	cpsie	i
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d103      	bne.n	800460c <xQueueGenericSendFromISR+0x40>
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <xQueueGenericSendFromISR+0x44>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <xQueueGenericSendFromISR+0x46>
 8004610:	2300      	movs	r3, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10c      	bne.n	8004630 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	b672      	cpsid	i
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	b662      	cpsie	i
 800462a:	623b      	str	r3, [r7, #32]
}
 800462c:	bf00      	nop
 800462e:	e7fe      	b.n	800462e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d103      	bne.n	800463e <xQueueGenericSendFromISR+0x72>
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <xQueueGenericSendFromISR+0x76>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <xQueueGenericSendFromISR+0x78>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10c      	bne.n	8004662 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	b672      	cpsid	i
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	b662      	cpsie	i
 800465c:	61fb      	str	r3, [r7, #28]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004662:	f001 ff43 	bl	80064ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004666:	f3ef 8211 	mrs	r2, BASEPRI
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	b672      	cpsid	i
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	b662      	cpsie	i
 800467e:	61ba      	str	r2, [r7, #24]
 8004680:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004682:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	429a      	cmp	r2, r3
 8004690:	d302      	bcc.n	8004698 <xQueueGenericSendFromISR+0xcc>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d12c      	bne.n	80046f2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800469e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a8:	f000 f916 	bl	80048d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d112      	bne.n	80046dc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d016      	beq.n	80046ec <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	3324      	adds	r3, #36	; 0x24
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 ff14 	bl	80054f0 <xTaskRemoveFromEventList>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00e      	beq.n	80046ec <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00b      	beq.n	80046ec <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e007      	b.n	80046ec <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046e0:	3301      	adds	r3, #1
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	b25a      	sxtb	r2, r3
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046ec:	2301      	movs	r3, #1
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80046f0:	e001      	b.n	80046f6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004700:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004704:	4618      	mov	r0, r3
 8004706:	3738      	adds	r7, #56	; 0x38
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004718:	2300      	movs	r3, #0
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <xQueueReceive+0x34>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	b672      	cpsid	i
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	b662      	cpsie	i
 800473a:	623b      	str	r3, [r7, #32]
}
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <xQueueReceive+0x42>
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <xQueueReceive+0x46>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <xQueueReceive+0x48>
 8004752:	2300      	movs	r3, #0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10c      	bne.n	8004772 <xQueueReceive+0x66>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	b672      	cpsid	i
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	b662      	cpsie	i
 800476c:	61fb      	str	r3, [r7, #28]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004772:	f001 f887 	bl	8005884 <xTaskGetSchedulerState>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d102      	bne.n	8004782 <xQueueReceive+0x76>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <xQueueReceive+0x7a>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <xQueueReceive+0x7c>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <xQueueReceive+0x9a>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	b672      	cpsid	i
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	b662      	cpsie	i
 80047a0:	61bb      	str	r3, [r7, #24]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047a6:	f001 fdb9 	bl	800631c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01f      	beq.n	80047f6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ba:	f000 f8f7 	bl	80049ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	1e5a      	subs	r2, r3, #1
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00f      	beq.n	80047ee <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	3310      	adds	r3, #16
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fe8c 	bl	80054f0 <xTaskRemoveFromEventList>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047de:	4b3d      	ldr	r3, [pc, #244]	; (80048d4 <xQueueReceive+0x1c8>)
 80047e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047ee:	f001 fdc9 	bl	8006384 <vPortExitCritical>
				return pdPASS;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e069      	b.n	80048ca <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d103      	bne.n	8004804 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047fc:	f001 fdc2 	bl	8006384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004800:	2300      	movs	r3, #0
 8004802:	e062      	b.n	80048ca <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800480a:	f107 0310 	add.w	r3, r7, #16
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fed4 	bl	80055bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004814:	2301      	movs	r3, #1
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004818:	f001 fdb4 	bl	8006384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800481c:	f000 fc34 	bl	8005088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004820:	f001 fd7c 	bl	800631c <vPortEnterCritical>
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800482a:	b25b      	sxtb	r3, r3
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d103      	bne.n	800483a <xQueueReceive+0x12e>
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004840:	b25b      	sxtb	r3, r3
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004846:	d103      	bne.n	8004850 <xQueueReceive+0x144>
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004850:	f001 fd98 	bl	8006384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004854:	1d3a      	adds	r2, r7, #4
 8004856:	f107 0310 	add.w	r3, r7, #16
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fec3 	bl	80055e8 <xTaskCheckForTimeOut>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d123      	bne.n	80048b0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800486a:	f000 f917 	bl	8004a9c <prvIsQueueEmpty>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d017      	beq.n	80048a4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	3324      	adds	r3, #36	; 0x24
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	4611      	mov	r1, r2
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fde3 	bl	8005448 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004884:	f000 f8b8 	bl	80049f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004888:	f000 fc0c 	bl	80050a4 <xTaskResumeAll>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d189      	bne.n	80047a6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <xQueueReceive+0x1c8>)
 8004894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	e780      	b.n	80047a6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048a6:	f000 f8a7 	bl	80049f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048aa:	f000 fbfb 	bl	80050a4 <xTaskResumeAll>
 80048ae:	e77a      	b.n	80047a6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80048b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048b2:	f000 f8a1 	bl	80049f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048b6:	f000 fbf5 	bl	80050a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048bc:	f000 f8ee 	bl	8004a9c <prvIsQueueEmpty>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f43f af6f 	beq.w	80047a6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3730      	adds	r7, #48	; 0x30
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10d      	bne.n	8004912 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d14d      	bne.n	800499a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 ffdc 	bl	80058c0 <xTaskPriorityDisinherit>
 8004908:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	e043      	b.n	800499a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d119      	bne.n	800494c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6858      	ldr	r0, [r3, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	461a      	mov	r2, r3
 8004922:	68b9      	ldr	r1, [r7, #8]
 8004924:	f002 f830 	bl	8006988 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	441a      	add	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	429a      	cmp	r2, r3
 8004940:	d32b      	bcc.n	800499a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	e026      	b.n	800499a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	68d8      	ldr	r0, [r3, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	461a      	mov	r2, r3
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	f002 f816 	bl	8006988 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	425b      	negs	r3, r3
 8004966:	441a      	add	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d207      	bcs.n	8004988 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	425b      	negs	r3, r3
 8004982:	441a      	add	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d105      	bne.n	800499a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	3b01      	subs	r3, #1
 8004998:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049a2:	697b      	ldr	r3, [r7, #20]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d018      	beq.n	80049f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	441a      	add	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d303      	bcc.n	80049e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68d9      	ldr	r1, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	461a      	mov	r2, r3
 80049ea:	6838      	ldr	r0, [r7, #0]
 80049ec:	f001 ffcc 	bl	8006988 <memcpy>
	}
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a00:	f001 fc8c 	bl	800631c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a0c:	e011      	b.n	8004a32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d012      	beq.n	8004a3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3324      	adds	r3, #36	; 0x24
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fd68 	bl	80054f0 <xTaskRemoveFromEventList>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a26:	f000 fe45 	bl	80056b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	dce9      	bgt.n	8004a0e <prvUnlockQueue+0x16>
 8004a3a:	e000      	b.n	8004a3e <prvUnlockQueue+0x46>
					break;
 8004a3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	22ff      	movs	r2, #255	; 0xff
 8004a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a46:	f001 fc9d 	bl	8006384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a4a:	f001 fc67 	bl	800631c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a56:	e011      	b.n	8004a7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d012      	beq.n	8004a86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3310      	adds	r3, #16
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fd43 	bl	80054f0 <xTaskRemoveFromEventList>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a70:	f000 fe20 	bl	80056b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a74:	7bbb      	ldrb	r3, [r7, #14]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	dce9      	bgt.n	8004a58 <prvUnlockQueue+0x60>
 8004a84:	e000      	b.n	8004a88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	22ff      	movs	r2, #255	; 0xff
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a90:	f001 fc78 	bl	8006384 <vPortExitCritical>
}
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004aa4:	f001 fc3a 	bl	800631c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d102      	bne.n	8004ab6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e001      	b.n	8004aba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aba:	f001 fc63 	bl	8006384 <vPortExitCritical>

	return xReturn;
 8004abe:	68fb      	ldr	r3, [r7, #12]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ad0:	f001 fc24 	bl	800631c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d102      	bne.n	8004ae6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e001      	b.n	8004aea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aea:	f001 fc4b 	bl	8006384 <vPortExitCritical>

	return xReturn;
 8004aee:	68fb      	ldr	r3, [r7, #12]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e014      	b.n	8004b32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b08:	4a0f      	ldr	r2, [pc, #60]	; (8004b48 <vQueueAddToRegistry+0x50>)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b14:	490c      	ldr	r1, [pc, #48]	; (8004b48 <vQueueAddToRegistry+0x50>)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <vQueueAddToRegistry+0x50>)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4413      	add	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b2a:	e006      	b.n	8004b3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b07      	cmp	r3, #7
 8004b36:	d9e7      	bls.n	8004b08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000e78 	.word	0x20000e78

08004b4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b5c:	f001 fbde 	bl	800631c <vPortEnterCritical>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b66:	b25b      	sxtb	r3, r3
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d103      	bne.n	8004b76 <vQueueWaitForMessageRestricted+0x2a>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d103      	bne.n	8004b8c <vQueueWaitForMessageRestricted+0x40>
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b8c:	f001 fbfa 	bl	8006384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	3324      	adds	r3, #36	; 0x24
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fc77 	bl	8005494 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ba6:	6978      	ldr	r0, [r7, #20]
 8004ba8:	f7ff ff26 	bl	80049f8 <prvUnlockQueue>
	}
 8004bac:	bf00      	nop
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08e      	sub	sp, #56	; 0x38
 8004bb8:	af04      	add	r7, sp, #16
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10c      	bne.n	8004be2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	b672      	cpsid	i
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	b662      	cpsie	i
 8004bdc:	623b      	str	r3, [r7, #32]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10c      	bne.n	8004c02 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	b672      	cpsid	i
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	b662      	cpsie	i
 8004bfc:	61fb      	str	r3, [r7, #28]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c02:	23bc      	movs	r3, #188	; 0xbc
 8004c04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2bbc      	cmp	r3, #188	; 0xbc
 8004c0a:	d00c      	beq.n	8004c26 <xTaskCreateStatic+0x72>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	b672      	cpsid	i
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	b662      	cpsie	i
 8004c20:	61bb      	str	r3, [r7, #24]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01e      	beq.n	8004c6c <xTaskCreateStatic+0xb8>
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	2202      	movs	r2, #2
 8004c42:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c46:	2300      	movs	r3, #0
 8004c48:	9303      	str	r3, [sp, #12]
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	9302      	str	r3, [sp, #8]
 8004c4e:	f107 0314 	add.w	r3, r7, #20
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f850 	bl	8004d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c66:	f000 f8f5 	bl	8004e54 <prvAddNewTaskToReadyList>
 8004c6a:	e001      	b.n	8004c70 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c70:	697b      	ldr	r3, [r7, #20]
	}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3728      	adds	r7, #40	; 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b08c      	sub	sp, #48	; 0x30
 8004c7e:	af04      	add	r7, sp, #16
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 fc70 	bl	8006574 <pvPortMalloc>
 8004c94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00e      	beq.n	8004cba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c9c:	20bc      	movs	r0, #188	; 0xbc
 8004c9e:	f001 fc69 	bl	8006574 <pvPortMalloc>
 8004ca2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
 8004cb0:	e005      	b.n	8004cbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cb2:	6978      	ldr	r0, [r7, #20]
 8004cb4:	f001 fd28 	bl	8006708 <vPortFree>
 8004cb8:	e001      	b.n	8004cbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d017      	beq.n	8004cf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ccc:	88fa      	ldrh	r2, [r7, #6]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9303      	str	r3, [sp, #12]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	9302      	str	r3, [sp, #8]
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f80e 	bl	8004d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ce8:	69f8      	ldr	r0, [r7, #28]
 8004cea:	f000 f8b3 	bl	8004e54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e002      	b.n	8004cfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
	}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	21a5      	movs	r1, #165	; 0xa5
 8004d1e:	f001 fe41 	bl	80069a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004d2c:	440b      	add	r3, r1
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f023 0307 	bic.w	r3, r3, #7
 8004d3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00c      	beq.n	8004d60 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	b672      	cpsid	i
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	b662      	cpsie	i
 8004d5a:	617b      	str	r3, [r7, #20]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01f      	beq.n	8004da6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d66:	2300      	movs	r3, #0
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	e012      	b.n	8004d92 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	7819      	ldrb	r1, [r3, #0]
 8004d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	3334      	adds	r3, #52	; 0x34
 8004d7c:	460a      	mov	r2, r1
 8004d7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d006      	beq.n	8004d9a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	2b0f      	cmp	r3, #15
 8004d96:	d9e9      	bls.n	8004d6c <prvInitialiseNewTask+0x68>
 8004d98:	e000      	b.n	8004d9c <prvInitialiseNewTask+0x98>
			{
				break;
 8004d9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004da4:	e003      	b.n	8004dae <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	2b37      	cmp	r3, #55	; 0x37
 8004db2:	d901      	bls.n	8004db8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004db4:	2337      	movs	r3, #55	; 0x37
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff f952 	bl	8004078 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	3318      	adds	r3, #24
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff f94d 	bl	8004078 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	3354      	adds	r3, #84	; 0x54
 8004e08:	2260      	movs	r2, #96	; 0x60
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 fdc9 	bl	80069a4 <memset>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <prvInitialiseNewTask+0x144>)
 8004e16:	659a      	str	r2, [r3, #88]	; 0x58
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	4a0c      	ldr	r2, [pc, #48]	; (8004e4c <prvInitialiseNewTask+0x148>)
 8004e1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	4a0b      	ldr	r2, [pc, #44]	; (8004e50 <prvInitialiseNewTask+0x14c>)
 8004e22:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	68f9      	ldr	r1, [r7, #12]
 8004e28:	69b8      	ldr	r0, [r7, #24]
 8004e2a:	f001 f96b 	bl	8006104 <pxPortInitialiseStack>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e40:	bf00      	nop
 8004e42:	3720      	adds	r7, #32
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	08006c30 	.word	0x08006c30
 8004e4c:	08006c50 	.word	0x08006c50
 8004e50:	08006c10 	.word	0x08006c10

08004e54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e5c:	f001 fa5e 	bl	800631c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e60:	4b2d      	ldr	r3, [pc, #180]	; (8004f18 <prvAddNewTaskToReadyList+0xc4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	4a2c      	ldr	r2, [pc, #176]	; (8004f18 <prvAddNewTaskToReadyList+0xc4>)
 8004e68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e6a:	4b2c      	ldr	r3, [pc, #176]	; (8004f1c <prvAddNewTaskToReadyList+0xc8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e72:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <prvAddNewTaskToReadyList+0xc8>)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e78:	4b27      	ldr	r3, [pc, #156]	; (8004f18 <prvAddNewTaskToReadyList+0xc4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d110      	bne.n	8004ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e80:	f000 fc3c 	bl	80056fc <prvInitialiseTaskLists>
 8004e84:	e00d      	b.n	8004ea2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e86:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <prvAddNewTaskToReadyList+0xcc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e8e:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <prvAddNewTaskToReadyList+0xc8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d802      	bhi.n	8004ea2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <prvAddNewTaskToReadyList+0xc8>)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ea2:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <prvAddNewTaskToReadyList+0xd0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	4a1e      	ldr	r2, [pc, #120]	; (8004f24 <prvAddNewTaskToReadyList+0xd0>)
 8004eaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004eac:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <prvAddNewTaskToReadyList+0xd0>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <prvAddNewTaskToReadyList+0xd4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d903      	bls.n	8004ec8 <prvAddNewTaskToReadyList+0x74>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <prvAddNewTaskToReadyList+0xd4>)
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <prvAddNewTaskToReadyList+0xd8>)
 8004ed6:	441a      	add	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7ff f8d7 	bl	8004092 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ee4:	f001 fa4e 	bl	8006384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <prvAddNewTaskToReadyList+0xcc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00e      	beq.n	8004f0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <prvAddNewTaskToReadyList+0xc8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d207      	bcs.n	8004f0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <prvAddNewTaskToReadyList+0xdc>)
 8004f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	2000138c 	.word	0x2000138c
 8004f1c:	20000eb8 	.word	0x20000eb8
 8004f20:	20001398 	.word	0x20001398
 8004f24:	200013a8 	.word	0x200013a8
 8004f28:	20001394 	.word	0x20001394
 8004f2c:	20000ebc 	.word	0x20000ebc
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d019      	beq.n	8004f7a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f46:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <vTaskDelay+0x64>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00c      	beq.n	8004f68 <vTaskDelay+0x34>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	b672      	cpsid	i
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	b662      	cpsie	i
 8004f62:	60bb      	str	r3, [r7, #8]
}
 8004f64:	bf00      	nop
 8004f66:	e7fe      	b.n	8004f66 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004f68:	f000 f88e 	bl	8005088 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fd18 	bl	80059a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f74:	f000 f896 	bl	80050a4 <xTaskResumeAll>
 8004f78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <vTaskDelay+0x68>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	200013b4 	.word	0x200013b4
 8004f9c:	e000ed04 	.word	0xe000ed04

08004fa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08a      	sub	sp, #40	; 0x28
 8004fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fae:	463a      	mov	r2, r7
 8004fb0:	1d39      	adds	r1, r7, #4
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff f80a 	bl	8003fd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fbc:	6839      	ldr	r1, [r7, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	9202      	str	r2, [sp, #8]
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	460a      	mov	r2, r1
 8004fce:	4926      	ldr	r1, [pc, #152]	; (8005068 <vTaskStartScheduler+0xc8>)
 8004fd0:	4826      	ldr	r0, [pc, #152]	; (800506c <vTaskStartScheduler+0xcc>)
 8004fd2:	f7ff fdef 	bl	8004bb4 <xTaskCreateStatic>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4a25      	ldr	r2, [pc, #148]	; (8005070 <vTaskStartScheduler+0xd0>)
 8004fda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fdc:	4b24      	ldr	r3, [pc, #144]	; (8005070 <vTaskStartScheduler+0xd0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	e001      	b.n	8004fee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d102      	bne.n	8004ffa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ff4:	f000 fd2a 	bl	8005a4c <xTimerCreateTimerTask>
 8004ff8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d11d      	bne.n	800503c <vTaskStartScheduler+0x9c>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	b672      	cpsid	i
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	b662      	cpsie	i
 8005014:	613b      	str	r3, [r7, #16]
}
 8005016:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005018:	4b16      	ldr	r3, [pc, #88]	; (8005074 <vTaskStartScheduler+0xd4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3354      	adds	r3, #84	; 0x54
 800501e:	4a16      	ldr	r2, [pc, #88]	; (8005078 <vTaskStartScheduler+0xd8>)
 8005020:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005022:	4b16      	ldr	r3, [pc, #88]	; (800507c <vTaskStartScheduler+0xdc>)
 8005024:	f04f 32ff 	mov.w	r2, #4294967295
 8005028:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800502a:	4b15      	ldr	r3, [pc, #84]	; (8005080 <vTaskStartScheduler+0xe0>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005030:	4b14      	ldr	r3, [pc, #80]	; (8005084 <vTaskStartScheduler+0xe4>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005036:	f001 f8f3 	bl	8006220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800503a:	e010      	b.n	800505e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d10c      	bne.n	800505e <vTaskStartScheduler+0xbe>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	b672      	cpsid	i
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	b662      	cpsie	i
 8005058:	60fb      	str	r3, [r7, #12]
}
 800505a:	bf00      	nop
 800505c:	e7fe      	b.n	800505c <vTaskStartScheduler+0xbc>
}
 800505e:	bf00      	nop
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	08006b98 	.word	0x08006b98
 800506c:	080056cd 	.word	0x080056cd
 8005070:	200013b0 	.word	0x200013b0
 8005074:	20000eb8 	.word	0x20000eb8
 8005078:	20000010 	.word	0x20000010
 800507c:	200013ac 	.word	0x200013ac
 8005080:	20001398 	.word	0x20001398
 8005084:	20001390 	.word	0x20001390

08005088 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800508c:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <vTaskSuspendAll+0x18>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	4a03      	ldr	r2, [pc, #12]	; (80050a0 <vTaskSuspendAll+0x18>)
 8005094:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005096:	bf00      	nop
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	200013b4 	.word	0x200013b4

080050a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050b2:	4b43      	ldr	r3, [pc, #268]	; (80051c0 <xTaskResumeAll+0x11c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10c      	bne.n	80050d4 <xTaskResumeAll+0x30>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	b672      	cpsid	i
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	b662      	cpsie	i
 80050ce:	603b      	str	r3, [r7, #0]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050d4:	f001 f922 	bl	800631c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050d8:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <xTaskResumeAll+0x11c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3b01      	subs	r3, #1
 80050de:	4a38      	ldr	r2, [pc, #224]	; (80051c0 <xTaskResumeAll+0x11c>)
 80050e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050e2:	4b37      	ldr	r3, [pc, #220]	; (80051c0 <xTaskResumeAll+0x11c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d162      	bne.n	80051b0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050ea:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <xTaskResumeAll+0x120>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d05e      	beq.n	80051b0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050f2:	e02f      	b.n	8005154 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f4:	4b34      	ldr	r3, [pc, #208]	; (80051c8 <xTaskResumeAll+0x124>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3318      	adds	r3, #24
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff f823 	bl	800414c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3304      	adds	r3, #4
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff f81e 	bl	800414c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005114:	4b2d      	ldr	r3, [pc, #180]	; (80051cc <xTaskResumeAll+0x128>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d903      	bls.n	8005124 <xTaskResumeAll+0x80>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <xTaskResumeAll+0x128>)
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4a27      	ldr	r2, [pc, #156]	; (80051d0 <xTaskResumeAll+0x12c>)
 8005132:	441a      	add	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f7fe ffa9 	bl	8004092 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <xTaskResumeAll+0x130>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800514e:	4b22      	ldr	r3, [pc, #136]	; (80051d8 <xTaskResumeAll+0x134>)
 8005150:	2201      	movs	r2, #1
 8005152:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005154:	4b1c      	ldr	r3, [pc, #112]	; (80051c8 <xTaskResumeAll+0x124>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1cb      	bne.n	80050f4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005162:	f000 fb6f 	bl	8005844 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005166:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <xTaskResumeAll+0x138>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d010      	beq.n	8005194 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005172:	f000 f847 	bl	8005204 <xTaskIncrementTick>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800517c:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <xTaskResumeAll+0x134>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3b01      	subs	r3, #1
 8005186:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f1      	bne.n	8005172 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <xTaskResumeAll+0x138>)
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005194:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <xTaskResumeAll+0x134>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d009      	beq.n	80051b0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800519c:	2301      	movs	r3, #1
 800519e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <xTaskResumeAll+0x13c>)
 80051a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051b0:	f001 f8e8 	bl	8006384 <vPortExitCritical>

	return xAlreadyYielded;
 80051b4:	68bb      	ldr	r3, [r7, #8]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	200013b4 	.word	0x200013b4
 80051c4:	2000138c 	.word	0x2000138c
 80051c8:	2000134c 	.word	0x2000134c
 80051cc:	20001394 	.word	0x20001394
 80051d0:	20000ebc 	.word	0x20000ebc
 80051d4:	20000eb8 	.word	0x20000eb8
 80051d8:	200013a0 	.word	0x200013a0
 80051dc:	2000139c 	.word	0x2000139c
 80051e0:	e000ed04 	.word	0xe000ed04

080051e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <xTaskGetTickCount+0x1c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051f0:	687b      	ldr	r3, [r7, #4]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20001390 	.word	0x20001390

08005204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800520e:	4b50      	ldr	r3, [pc, #320]	; (8005350 <xTaskIncrementTick+0x14c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 808b 	bne.w	800532e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005218:	4b4e      	ldr	r3, [pc, #312]	; (8005354 <xTaskIncrementTick+0x150>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005220:	4a4c      	ldr	r2, [pc, #304]	; (8005354 <xTaskIncrementTick+0x150>)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d122      	bne.n	8005272 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800522c:	4b4a      	ldr	r3, [pc, #296]	; (8005358 <xTaskIncrementTick+0x154>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00c      	beq.n	8005250 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	b672      	cpsid	i
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	b662      	cpsie	i
 800524a:	603b      	str	r3, [r7, #0]
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <xTaskIncrementTick+0x4a>
 8005250:	4b41      	ldr	r3, [pc, #260]	; (8005358 <xTaskIncrementTick+0x154>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	4b41      	ldr	r3, [pc, #260]	; (800535c <xTaskIncrementTick+0x158>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a3f      	ldr	r2, [pc, #252]	; (8005358 <xTaskIncrementTick+0x154>)
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	4a3f      	ldr	r2, [pc, #252]	; (800535c <xTaskIncrementTick+0x158>)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4b3e      	ldr	r3, [pc, #248]	; (8005360 <xTaskIncrementTick+0x15c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3301      	adds	r3, #1
 800526a:	4a3d      	ldr	r2, [pc, #244]	; (8005360 <xTaskIncrementTick+0x15c>)
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	f000 fae9 	bl	8005844 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005272:	4b3c      	ldr	r3, [pc, #240]	; (8005364 <xTaskIncrementTick+0x160>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	429a      	cmp	r2, r3
 800527a:	d349      	bcc.n	8005310 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800527c:	4b36      	ldr	r3, [pc, #216]	; (8005358 <xTaskIncrementTick+0x154>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d104      	bne.n	8005290 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005286:	4b37      	ldr	r3, [pc, #220]	; (8005364 <xTaskIncrementTick+0x160>)
 8005288:	f04f 32ff 	mov.w	r2, #4294967295
 800528c:	601a      	str	r2, [r3, #0]
					break;
 800528e:	e03f      	b.n	8005310 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005290:	4b31      	ldr	r3, [pc, #196]	; (8005358 <xTaskIncrementTick+0x154>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d203      	bcs.n	80052b0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052a8:	4a2e      	ldr	r2, [pc, #184]	; (8005364 <xTaskIncrementTick+0x160>)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052ae:	e02f      	b.n	8005310 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	3304      	adds	r3, #4
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe ff49 	bl	800414c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	3318      	adds	r3, #24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe ff40 	bl	800414c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d0:	4b25      	ldr	r3, [pc, #148]	; (8005368 <xTaskIncrementTick+0x164>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d903      	bls.n	80052e0 <xTaskIncrementTick+0xdc>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	4a22      	ldr	r2, [pc, #136]	; (8005368 <xTaskIncrementTick+0x164>)
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4a1f      	ldr	r2, [pc, #124]	; (800536c <xTaskIncrementTick+0x168>)
 80052ee:	441a      	add	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f7fe fecb 	bl	8004092 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005300:	4b1b      	ldr	r3, [pc, #108]	; (8005370 <xTaskIncrementTick+0x16c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	429a      	cmp	r2, r3
 8005308:	d3b8      	bcc.n	800527c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800530a:	2301      	movs	r3, #1
 800530c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800530e:	e7b5      	b.n	800527c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <xTaskIncrementTick+0x16c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005316:	4915      	ldr	r1, [pc, #84]	; (800536c <xTaskIncrementTick+0x168>)
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d907      	bls.n	8005338 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e004      	b.n	8005338 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800532e:	4b11      	ldr	r3, [pc, #68]	; (8005374 <xTaskIncrementTick+0x170>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3301      	adds	r3, #1
 8005334:	4a0f      	ldr	r2, [pc, #60]	; (8005374 <xTaskIncrementTick+0x170>)
 8005336:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <xTaskIncrementTick+0x174>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005340:	2301      	movs	r3, #1
 8005342:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005344:	697b      	ldr	r3, [r7, #20]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	200013b4 	.word	0x200013b4
 8005354:	20001390 	.word	0x20001390
 8005358:	20001344 	.word	0x20001344
 800535c:	20001348 	.word	0x20001348
 8005360:	200013a4 	.word	0x200013a4
 8005364:	200013ac 	.word	0x200013ac
 8005368:	20001394 	.word	0x20001394
 800536c:	20000ebc 	.word	0x20000ebc
 8005370:	20000eb8 	.word	0x20000eb8
 8005374:	2000139c 	.word	0x2000139c
 8005378:	200013a0 	.word	0x200013a0

0800537c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005382:	4b2b      	ldr	r3, [pc, #172]	; (8005430 <vTaskSwitchContext+0xb4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800538a:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <vTaskSwitchContext+0xb8>)
 800538c:	2201      	movs	r2, #1
 800538e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005390:	e048      	b.n	8005424 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005392:	4b28      	ldr	r3, [pc, #160]	; (8005434 <vTaskSwitchContext+0xb8>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005398:	4b27      	ldr	r3, [pc, #156]	; (8005438 <vTaskSwitchContext+0xbc>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e012      	b.n	80053c6 <vTaskSwitchContext+0x4a>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10c      	bne.n	80053c0 <vTaskSwitchContext+0x44>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	b672      	cpsid	i
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	b662      	cpsie	i
 80053ba:	607b      	str	r3, [r7, #4]
}
 80053bc:	bf00      	nop
 80053be:	e7fe      	b.n	80053be <vTaskSwitchContext+0x42>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	491d      	ldr	r1, [pc, #116]	; (800543c <vTaskSwitchContext+0xc0>)
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0e2      	beq.n	80053a0 <vTaskSwitchContext+0x24>
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4a15      	ldr	r2, [pc, #84]	; (800543c <vTaskSwitchContext+0xc0>)
 80053e6:	4413      	add	r3, r2
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	605a      	str	r2, [r3, #4]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	3308      	adds	r3, #8
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d104      	bne.n	800540a <vTaskSwitchContext+0x8e>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <vTaskSwitchContext+0xc4>)
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	4a08      	ldr	r2, [pc, #32]	; (8005438 <vTaskSwitchContext+0xbc>)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <vTaskSwitchContext+0xc4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3354      	adds	r3, #84	; 0x54
 8005420:	4a08      	ldr	r2, [pc, #32]	; (8005444 <vTaskSwitchContext+0xc8>)
 8005422:	6013      	str	r3, [r2, #0]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	200013b4 	.word	0x200013b4
 8005434:	200013a0 	.word	0x200013a0
 8005438:	20001394 	.word	0x20001394
 800543c:	20000ebc 	.word	0x20000ebc
 8005440:	20000eb8 	.word	0x20000eb8
 8005444:	20000010 	.word	0x20000010

08005448 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10c      	bne.n	8005472 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	b672      	cpsid	i
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	b662      	cpsie	i
 800546c:	60fb      	str	r3, [r7, #12]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005472:	4b07      	ldr	r3, [pc, #28]	; (8005490 <vTaskPlaceOnEventList+0x48>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3318      	adds	r3, #24
 8005478:	4619      	mov	r1, r3
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fe fe2d 	bl	80040da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005480:	2101      	movs	r1, #1
 8005482:	6838      	ldr	r0, [r7, #0]
 8005484:	f000 fa8e 	bl	80059a4 <prvAddCurrentTaskToDelayedList>
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20000eb8 	.word	0x20000eb8

08005494 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10c      	bne.n	80054c0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	b672      	cpsid	i
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	b662      	cpsie	i
 80054ba:	617b      	str	r3, [r7, #20]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <vTaskPlaceOnEventListRestricted+0x58>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3318      	adds	r3, #24
 80054c6:	4619      	mov	r1, r3
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f7fe fde2 	bl	8004092 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80054d4:	f04f 33ff 	mov.w	r3, #4294967295
 80054d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	68b8      	ldr	r0, [r7, #8]
 80054de:	f000 fa61 	bl	80059a4 <prvAddCurrentTaskToDelayedList>
	}
 80054e2:	bf00      	nop
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000eb8 	.word	0x20000eb8

080054f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10c      	bne.n	8005520 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	b672      	cpsid	i
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	b662      	cpsie	i
 800551a:	60fb      	str	r3, [r7, #12]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	3318      	adds	r3, #24
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe fe11 	bl	800414c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800552a:	4b1e      	ldr	r3, [pc, #120]	; (80055a4 <xTaskRemoveFromEventList+0xb4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d11d      	bne.n	800556e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	3304      	adds	r3, #4
 8005536:	4618      	mov	r0, r3
 8005538:	f7fe fe08 	bl	800414c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005540:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <xTaskRemoveFromEventList+0xb8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d903      	bls.n	8005550 <xTaskRemoveFromEventList+0x60>
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	4a16      	ldr	r2, [pc, #88]	; (80055a8 <xTaskRemoveFromEventList+0xb8>)
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <xTaskRemoveFromEventList+0xbc>)
 800555e:	441a      	add	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f7fe fd93 	bl	8004092 <vListInsertEnd>
 800556c:	e005      	b.n	800557a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	3318      	adds	r3, #24
 8005572:	4619      	mov	r1, r3
 8005574:	480e      	ldr	r0, [pc, #56]	; (80055b0 <xTaskRemoveFromEventList+0xc0>)
 8005576:	f7fe fd8c 	bl	8004092 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <xTaskRemoveFromEventList+0xc4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	429a      	cmp	r2, r3
 8005586:	d905      	bls.n	8005594 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005588:	2301      	movs	r3, #1
 800558a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <xTaskRemoveFromEventList+0xc8>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	e001      	b.n	8005598 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005598:	697b      	ldr	r3, [r7, #20]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	200013b4 	.word	0x200013b4
 80055a8:	20001394 	.word	0x20001394
 80055ac:	20000ebc 	.word	0x20000ebc
 80055b0:	2000134c 	.word	0x2000134c
 80055b4:	20000eb8 	.word	0x20000eb8
 80055b8:	200013a0 	.word	0x200013a0

080055bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <vTaskInternalSetTimeOutState+0x24>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <vTaskInternalSetTimeOutState+0x28>)
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	605a      	str	r2, [r3, #4]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	200013a4 	.word	0x200013a4
 80055e4:	20001390 	.word	0x20001390

080055e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10c      	bne.n	8005612 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	b672      	cpsid	i
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	b662      	cpsie	i
 800560c:	613b      	str	r3, [r7, #16]
}
 800560e:	bf00      	nop
 8005610:	e7fe      	b.n	8005610 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10c      	bne.n	8005632 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	b672      	cpsid	i
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	b662      	cpsie	i
 800562c:	60fb      	str	r3, [r7, #12]
}
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005632:	f000 fe73 	bl	800631c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005636:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <xTaskCheckForTimeOut+0xc4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d102      	bne.n	8005656 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005650:	2300      	movs	r3, #0
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	e023      	b.n	800569e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <xTaskCheckForTimeOut+0xc8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d007      	beq.n	8005672 <xTaskCheckForTimeOut+0x8a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	429a      	cmp	r2, r3
 800566a:	d302      	bcc.n	8005672 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800566c:	2301      	movs	r3, #1
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	e015      	b.n	800569e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	429a      	cmp	r2, r3
 800567a:	d20b      	bcs.n	8005694 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	1ad2      	subs	r2, r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff ff97 	bl	80055bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800568e:	2300      	movs	r3, #0
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	e004      	b.n	800569e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800569a:	2301      	movs	r3, #1
 800569c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800569e:	f000 fe71 	bl	8006384 <vPortExitCritical>

	return xReturn;
 80056a2:	69fb      	ldr	r3, [r7, #28]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3720      	adds	r7, #32
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20001390 	.word	0x20001390
 80056b0:	200013a4 	.word	0x200013a4

080056b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056b8:	4b03      	ldr	r3, [pc, #12]	; (80056c8 <vTaskMissedYield+0x14>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
}
 80056be:	bf00      	nop
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	200013a0 	.word	0x200013a0

080056cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056d4:	f000 f852 	bl	800577c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056d8:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <prvIdleTask+0x28>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d9f9      	bls.n	80056d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <prvIdleTask+0x2c>)
 80056e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056f0:	e7f0      	b.n	80056d4 <prvIdleTask+0x8>
 80056f2:	bf00      	nop
 80056f4:	20000ebc 	.word	0x20000ebc
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]
 8005706:	e00c      	b.n	8005722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4a12      	ldr	r2, [pc, #72]	; (800575c <prvInitialiseTaskLists+0x60>)
 8005714:	4413      	add	r3, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe fc8e 	bl	8004038 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3301      	adds	r3, #1
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b37      	cmp	r3, #55	; 0x37
 8005726:	d9ef      	bls.n	8005708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005728:	480d      	ldr	r0, [pc, #52]	; (8005760 <prvInitialiseTaskLists+0x64>)
 800572a:	f7fe fc85 	bl	8004038 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800572e:	480d      	ldr	r0, [pc, #52]	; (8005764 <prvInitialiseTaskLists+0x68>)
 8005730:	f7fe fc82 	bl	8004038 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005734:	480c      	ldr	r0, [pc, #48]	; (8005768 <prvInitialiseTaskLists+0x6c>)
 8005736:	f7fe fc7f 	bl	8004038 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800573a:	480c      	ldr	r0, [pc, #48]	; (800576c <prvInitialiseTaskLists+0x70>)
 800573c:	f7fe fc7c 	bl	8004038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005740:	480b      	ldr	r0, [pc, #44]	; (8005770 <prvInitialiseTaskLists+0x74>)
 8005742:	f7fe fc79 	bl	8004038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <prvInitialiseTaskLists+0x78>)
 8005748:	4a05      	ldr	r2, [pc, #20]	; (8005760 <prvInitialiseTaskLists+0x64>)
 800574a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800574c:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <prvInitialiseTaskLists+0x7c>)
 800574e:	4a05      	ldr	r2, [pc, #20]	; (8005764 <prvInitialiseTaskLists+0x68>)
 8005750:	601a      	str	r2, [r3, #0]
}
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000ebc 	.word	0x20000ebc
 8005760:	2000131c 	.word	0x2000131c
 8005764:	20001330 	.word	0x20001330
 8005768:	2000134c 	.word	0x2000134c
 800576c:	20001360 	.word	0x20001360
 8005770:	20001378 	.word	0x20001378
 8005774:	20001344 	.word	0x20001344
 8005778:	20001348 	.word	0x20001348

0800577c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005782:	e019      	b.n	80057b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005784:	f000 fdca 	bl	800631c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005788:	4b10      	ldr	r3, [pc, #64]	; (80057cc <prvCheckTasksWaitingTermination+0x50>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe fcd9 	bl	800414c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800579a:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <prvCheckTasksWaitingTermination+0x54>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3b01      	subs	r3, #1
 80057a0:	4a0b      	ldr	r2, [pc, #44]	; (80057d0 <prvCheckTasksWaitingTermination+0x54>)
 80057a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057a4:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <prvCheckTasksWaitingTermination+0x58>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <prvCheckTasksWaitingTermination+0x58>)
 80057ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057ae:	f000 fde9 	bl	8006384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f810 	bl	80057d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <prvCheckTasksWaitingTermination+0x58>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e1      	bne.n	8005784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20001360 	.word	0x20001360
 80057d0:	2000138c 	.word	0x2000138c
 80057d4:	20001374 	.word	0x20001374

080057d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3354      	adds	r3, #84	; 0x54
 80057e4:	4618      	mov	r0, r3
 80057e6:	f001 f8f3 	bl	80069d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d108      	bne.n	8005806 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 ff85 	bl	8006708 <vPortFree>
				vPortFree( pxTCB );
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 ff82 	bl	8006708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005804:	e01a      	b.n	800583c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800580c:	2b01      	cmp	r3, #1
 800580e:	d103      	bne.n	8005818 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 ff79 	bl	8006708 <vPortFree>
	}
 8005816:	e011      	b.n	800583c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800581e:	2b02      	cmp	r3, #2
 8005820:	d00c      	beq.n	800583c <prvDeleteTCB+0x64>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	b672      	cpsid	i
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	b662      	cpsie	i
 8005836:	60fb      	str	r3, [r7, #12]
}
 8005838:	bf00      	nop
 800583a:	e7fe      	b.n	800583a <prvDeleteTCB+0x62>
	}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800584a:	4b0c      	ldr	r3, [pc, #48]	; (800587c <prvResetNextTaskUnblockTime+0x38>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <prvResetNextTaskUnblockTime+0x3c>)
 8005856:	f04f 32ff 	mov.w	r2, #4294967295
 800585a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800585c:	e008      	b.n	8005870 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800585e:	4b07      	ldr	r3, [pc, #28]	; (800587c <prvResetNextTaskUnblockTime+0x38>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a04      	ldr	r2, [pc, #16]	; (8005880 <prvResetNextTaskUnblockTime+0x3c>)
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	20001344 	.word	0x20001344
 8005880:	200013ac 	.word	0x200013ac

08005884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <xTaskGetSchedulerState+0x34>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005892:	2301      	movs	r3, #1
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	e008      	b.n	80058aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005898:	4b08      	ldr	r3, [pc, #32]	; (80058bc <xTaskGetSchedulerState+0x38>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058a0:	2302      	movs	r3, #2
 80058a2:	607b      	str	r3, [r7, #4]
 80058a4:	e001      	b.n	80058aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058a6:	2300      	movs	r3, #0
 80058a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058aa:	687b      	ldr	r3, [r7, #4]
	}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	20001398 	.word	0x20001398
 80058bc:	200013b4 	.word	0x200013b4

080058c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d05a      	beq.n	800598c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058d6:	4b30      	ldr	r3, [pc, #192]	; (8005998 <xTaskPriorityDisinherit+0xd8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d00c      	beq.n	80058fa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	b672      	cpsid	i
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	b662      	cpsie	i
 80058f4:	60fb      	str	r3, [r7, #12]
}
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10c      	bne.n	800591c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	b672      	cpsid	i
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	b662      	cpsie	i
 8005916:	60bb      	str	r3, [r7, #8]
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	1e5a      	subs	r2, r3, #1
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592e:	429a      	cmp	r2, r3
 8005930:	d02c      	beq.n	800598c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005936:	2b00      	cmp	r3, #0
 8005938:	d128      	bne.n	800598c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	3304      	adds	r3, #4
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe fc04 	bl	800414c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595c:	4b0f      	ldr	r3, [pc, #60]	; (800599c <xTaskPriorityDisinherit+0xdc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d903      	bls.n	800596c <xTaskPriorityDisinherit+0xac>
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	4a0c      	ldr	r2, [pc, #48]	; (800599c <xTaskPriorityDisinherit+0xdc>)
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <xTaskPriorityDisinherit+0xe0>)
 800597a:	441a      	add	r2, r3
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	3304      	adds	r3, #4
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f7fe fb85 	bl	8004092 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005988:	2301      	movs	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800598c:	697b      	ldr	r3, [r7, #20]
	}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000eb8 	.word	0x20000eb8
 800599c:	20001394 	.word	0x20001394
 80059a0:	20000ebc 	.word	0x20000ebc

080059a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059ae:	4b21      	ldr	r3, [pc, #132]	; (8005a34 <prvAddCurrentTaskToDelayedList+0x90>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059b4:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3304      	adds	r3, #4
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fbc6 	bl	800414c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d10a      	bne.n	80059de <prvAddCurrentTaskToDelayedList+0x3a>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ce:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4619      	mov	r1, r3
 80059d6:	4819      	ldr	r0, [pc, #100]	; (8005a3c <prvAddCurrentTaskToDelayedList+0x98>)
 80059d8:	f7fe fb5b 	bl	8004092 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059dc:	e026      	b.n	8005a2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4413      	add	r3, r2
 80059e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059e6:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d209      	bcs.n	8005a0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059f6:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <prvAddCurrentTaskToDelayedList+0x9c>)
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3304      	adds	r3, #4
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f7fe fb69 	bl	80040da <vListInsert>
}
 8005a08:	e010      	b.n	8005a2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a0a:	4b0e      	ldr	r3, [pc, #56]	; (8005a44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f7fe fb5f 	bl	80040da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d202      	bcs.n	8005a2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a26:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6013      	str	r3, [r2, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20001390 	.word	0x20001390
 8005a38:	20000eb8 	.word	0x20000eb8
 8005a3c:	20001378 	.word	0x20001378
 8005a40:	20001348 	.word	0x20001348
 8005a44:	20001344 	.word	0x20001344
 8005a48:	200013ac 	.word	0x200013ac

08005a4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	; 0x28
 8005a50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a56:	f000 fb15 	bl	8006084 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <xTimerCreateTimerTask+0x84>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d021      	beq.n	8005aa6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a6a:	1d3a      	adds	r2, r7, #4
 8005a6c:	f107 0108 	add.w	r1, r7, #8
 8005a70:	f107 030c 	add.w	r3, r7, #12
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fe fac5 	bl	8004004 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	9202      	str	r2, [sp, #8]
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	2302      	movs	r3, #2
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	460a      	mov	r2, r1
 8005a8c:	4911      	ldr	r1, [pc, #68]	; (8005ad4 <xTimerCreateTimerTask+0x88>)
 8005a8e:	4812      	ldr	r0, [pc, #72]	; (8005ad8 <xTimerCreateTimerTask+0x8c>)
 8005a90:	f7ff f890 	bl	8004bb4 <xTaskCreateStatic>
 8005a94:	4603      	mov	r3, r0
 8005a96:	4a11      	ldr	r2, [pc, #68]	; (8005adc <xTimerCreateTimerTask+0x90>)
 8005a98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <xTimerCreateTimerTask+0x90>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10c      	bne.n	8005ac6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	b672      	cpsid	i
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	b662      	cpsie	i
 8005ac0:	613b      	str	r3, [r7, #16]
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005ac6:	697b      	ldr	r3, [r7, #20]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	200013e8 	.word	0x200013e8
 8005ad4:	08006ba0 	.word	0x08006ba0
 8005ad8:	08005c1d 	.word	0x08005c1d
 8005adc:	200013ec 	.word	0x200013ec

08005ae0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08a      	sub	sp, #40	; 0x28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10c      	bne.n	8005b12 <xTimerGenericCommand+0x32>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	b672      	cpsid	i
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	b662      	cpsie	i
 8005b0c:	623b      	str	r3, [r7, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b12:	4b1a      	ldr	r3, [pc, #104]	; (8005b7c <xTimerGenericCommand+0x9c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d02a      	beq.n	8005b70 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	dc18      	bgt.n	8005b5e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b2c:	f7ff feaa 	bl	8005884 <xTaskGetSchedulerState>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d109      	bne.n	8005b4a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b36:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <xTimerGenericCommand+0x9c>)
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	f107 0110 	add.w	r1, r7, #16
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b42:	f7fe fc3d 	bl	80043c0 <xQueueGenericSend>
 8005b46:	6278      	str	r0, [r7, #36]	; 0x24
 8005b48:	e012      	b.n	8005b70 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <xTimerGenericCommand+0x9c>)
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	f107 0110 	add.w	r1, r7, #16
 8005b52:	2300      	movs	r3, #0
 8005b54:	2200      	movs	r2, #0
 8005b56:	f7fe fc33 	bl	80043c0 <xQueueGenericSend>
 8005b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8005b5c:	e008      	b.n	8005b70 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <xTimerGenericCommand+0x9c>)
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	f107 0110 	add.w	r1, r7, #16
 8005b66:	2300      	movs	r3, #0
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	f7fe fd2f 	bl	80045cc <xQueueGenericSendFromISR>
 8005b6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3728      	adds	r7, #40	; 0x28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200013e8 	.word	0x200013e8

08005b80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b8a:	4b23      	ldr	r3, [pc, #140]	; (8005c18 <prvProcessExpiredTimer+0x98>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fe fad7 	bl	800414c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d024      	beq.n	8005bf6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	18d1      	adds	r1, r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	6978      	ldr	r0, [r7, #20]
 8005bba:	f000 f8d3 	bl	8005d64 <prvInsertTimerInActiveList>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d021      	beq.n	8005c08 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	2100      	movs	r1, #0
 8005bce:	6978      	ldr	r0, [r7, #20]
 8005bd0:	f7ff ff86 	bl	8005ae0 <xTimerGenericCommand>
 8005bd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d115      	bne.n	8005c08 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	b672      	cpsid	i
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	b662      	cpsie	i
 8005bf0:	60fb      	str	r3, [r7, #12]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	6978      	ldr	r0, [r7, #20]
 8005c0e:	4798      	blx	r3
}
 8005c10:	bf00      	nop
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	200013e0 	.word	0x200013e0

08005c1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c24:	f107 0308 	add.w	r3, r7, #8
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 f857 	bl	8005cdc <prvGetNextExpireTime>
 8005c2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4619      	mov	r1, r3
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f803 	bl	8005c40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c3a:	f000 f8d5 	bl	8005de8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c3e:	e7f1      	b.n	8005c24 <prvTimerTask+0x8>

08005c40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c4a:	f7ff fa1d 	bl	8005088 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c4e:	f107 0308 	add.w	r3, r7, #8
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f866 	bl	8005d24 <prvSampleTimeNow>
 8005c58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d130      	bne.n	8005cc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <prvProcessTimerOrBlockTask+0x3c>
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d806      	bhi.n	8005c7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c6e:	f7ff fa19 	bl	80050a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff ff83 	bl	8005b80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c7a:	e024      	b.n	8005cc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c82:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <prvProcessTimerOrBlockTask+0x90>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <prvProcessTimerOrBlockTask+0x50>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <prvProcessTimerOrBlockTask+0x52>
 8005c90:	2300      	movs	r3, #0
 8005c92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c94:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <prvProcessTimerOrBlockTask+0x94>)
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	f7fe ff53 	bl	8004b4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ca6:	f7ff f9fd 	bl	80050a4 <xTaskResumeAll>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cb0:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <prvProcessTimerOrBlockTask+0x98>)
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
}
 8005cc0:	e001      	b.n	8005cc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cc2:	f7ff f9ef 	bl	80050a4 <xTaskResumeAll>
}
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	200013e4 	.word	0x200013e4
 8005cd4:	200013e8 	.word	0x200013e8
 8005cd8:	e000ed04 	.word	0xe000ed04

08005cdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ce4:	4b0e      	ldr	r3, [pc, #56]	; (8005d20 <prvGetNextExpireTime+0x44>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <prvGetNextExpireTime+0x16>
 8005cee:	2201      	movs	r2, #1
 8005cf0:	e000      	b.n	8005cf4 <prvGetNextExpireTime+0x18>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <prvGetNextExpireTime+0x44>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e001      	b.n	8005d10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d10:	68fb      	ldr	r3, [r7, #12]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	200013e0 	.word	0x200013e0

08005d24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d2c:	f7ff fa5a 	bl	80051e4 <xTaskGetTickCount>
 8005d30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d32:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <prvSampleTimeNow+0x3c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d205      	bcs.n	8005d48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d3c:	f000 f93c 	bl	8005fb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e002      	b.n	8005d4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d4e:	4a04      	ldr	r2, [pc, #16]	; (8005d60 <prvSampleTimeNow+0x3c>)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d54:	68fb      	ldr	r3, [r7, #12]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	200013f0 	.word	0x200013f0

08005d64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d812      	bhi.n	8005db0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	1ad2      	subs	r2, r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d302      	bcc.n	8005d9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	e01b      	b.n	8005dd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <prvInsertTimerInActiveList+0x7c>)
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f7fe f996 	bl	80040da <vListInsert>
 8005dae:	e012      	b.n	8005dd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d206      	bcs.n	8005dc6 <prvInsertTimerInActiveList+0x62>
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d302      	bcc.n	8005dc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	e007      	b.n	8005dd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dc6:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <prvInsertTimerInActiveList+0x80>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	f7fe f982 	bl	80040da <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005dd6:	697b      	ldr	r3, [r7, #20]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	200013e4 	.word	0x200013e4
 8005de4:	200013e0 	.word	0x200013e0

08005de8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08e      	sub	sp, #56	; 0x38
 8005dec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dee:	e0d0      	b.n	8005f92 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	da1a      	bge.n	8005e2c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	3304      	adds	r3, #4
 8005dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10c      	bne.n	8005e1c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	b672      	cpsid	i
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	b662      	cpsie	i
 8005e16:	61fb      	str	r3, [r7, #28]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e22:	6850      	ldr	r0, [r2, #4]
 8005e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e26:	6892      	ldr	r2, [r2, #8]
 8005e28:	4611      	mov	r1, r2
 8005e2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f2c0 80ae 	blt.w	8005f90 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	3304      	adds	r3, #4
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fe f981 	bl	800414c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e4a:	463b      	mov	r3, r7
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff ff69 	bl	8005d24 <prvSampleTimeNow>
 8005e52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b09      	cmp	r3, #9
 8005e58:	f200 809b 	bhi.w	8005f92 <prvProcessReceivedCommands+0x1aa>
 8005e5c:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <prvProcessReceivedCommands+0x7c>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005e8d 	.word	0x08005e8d
 8005e68:	08005e8d 	.word	0x08005e8d
 8005e6c:	08005e8d 	.word	0x08005e8d
 8005e70:	08005f05 	.word	0x08005f05
 8005e74:	08005f19 	.word	0x08005f19
 8005e78:	08005f67 	.word	0x08005f67
 8005e7c:	08005e8d 	.word	0x08005e8d
 8005e80:	08005e8d 	.word	0x08005e8d
 8005e84:	08005f05 	.word	0x08005f05
 8005e88:	08005f19 	.word	0x08005f19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	18d1      	adds	r1, r2, r3
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eac:	f7ff ff5a 	bl	8005d64 <prvInsertTimerInActiveList>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d06d      	beq.n	8005f92 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ebc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d062      	beq.n	8005f92 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	441a      	add	r2, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	2100      	movs	r1, #0
 8005edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ede:	f7ff fdff 	bl	8005ae0 <xTimerGenericCommand>
 8005ee2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d153      	bne.n	8005f92 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	b672      	cpsid	i
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	b662      	cpsie	i
 8005efe:	61bb      	str	r3, [r7, #24]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f0a:	f023 0301 	bic.w	r3, r3, #1
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005f16:	e03c      	b.n	8005f92 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f1e:	f043 0301 	orr.w	r3, r3, #1
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10c      	bne.n	8005f52 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	b672      	cpsid	i
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	b662      	cpsie	i
 8005f4c:	617b      	str	r3, [r7, #20]
}
 8005f4e:	bf00      	nop
 8005f50:	e7fe      	b.n	8005f50 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	18d1      	adds	r1, r2, r3
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f60:	f7ff ff00 	bl	8005d64 <prvInsertTimerInActiveList>
					break;
 8005f64:	e015      	b.n	8005f92 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d103      	bne.n	8005f7c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8005f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f76:	f000 fbc7 	bl	8006708 <vPortFree>
 8005f7a:	e00a      	b.n	8005f92 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f8e:	e000      	b.n	8005f92 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <prvProcessReceivedCommands+0x1cc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	1d39      	adds	r1, r7, #4
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe fbb6 	bl	800470c <xQueueReceive>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f47f af24 	bne.w	8005df0 <prvProcessReceivedCommands+0x8>
	}
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	3730      	adds	r7, #48	; 0x30
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	200013e8 	.word	0x200013e8

08005fb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fbe:	e04a      	b.n	8006056 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fc0:	4b2e      	ldr	r3, [pc, #184]	; (800607c <prvSwitchTimerLists+0xc4>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fca:	4b2c      	ldr	r3, [pc, #176]	; (800607c <prvSwitchTimerLists+0xc4>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fe f8b7 	bl	800414c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d030      	beq.n	8006056 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	429a      	cmp	r2, r3
 8006004:	d90e      	bls.n	8006024 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006012:	4b1a      	ldr	r3, [pc, #104]	; (800607c <prvSwitchTimerLists+0xc4>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3304      	adds	r3, #4
 800601a:	4619      	mov	r1, r3
 800601c:	4610      	mov	r0, r2
 800601e:	f7fe f85c 	bl	80040da <vListInsert>
 8006022:	e018      	b.n	8006056 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006024:	2300      	movs	r3, #0
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	2300      	movs	r3, #0
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	2100      	movs	r1, #0
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7ff fd56 	bl	8005ae0 <xTimerGenericCommand>
 8006034:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10c      	bne.n	8006056 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	b672      	cpsid	i
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	b662      	cpsie	i
 8006050:	603b      	str	r3, [r7, #0]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006056:	4b09      	ldr	r3, [pc, #36]	; (800607c <prvSwitchTimerLists+0xc4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1af      	bne.n	8005fc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006060:	4b06      	ldr	r3, [pc, #24]	; (800607c <prvSwitchTimerLists+0xc4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <prvSwitchTimerLists+0xc8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a04      	ldr	r2, [pc, #16]	; (800607c <prvSwitchTimerLists+0xc4>)
 800606c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800606e:	4a04      	ldr	r2, [pc, #16]	; (8006080 <prvSwitchTimerLists+0xc8>)
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	6013      	str	r3, [r2, #0]
}
 8006074:	bf00      	nop
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200013e0 	.word	0x200013e0
 8006080:	200013e4 	.word	0x200013e4

08006084 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800608a:	f000 f947 	bl	800631c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800608e:	4b15      	ldr	r3, [pc, #84]	; (80060e4 <prvCheckForValidListAndQueue+0x60>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d120      	bne.n	80060d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006096:	4814      	ldr	r0, [pc, #80]	; (80060e8 <prvCheckForValidListAndQueue+0x64>)
 8006098:	f7fd ffce 	bl	8004038 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800609c:	4813      	ldr	r0, [pc, #76]	; (80060ec <prvCheckForValidListAndQueue+0x68>)
 800609e:	f7fd ffcb 	bl	8004038 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060a2:	4b13      	ldr	r3, [pc, #76]	; (80060f0 <prvCheckForValidListAndQueue+0x6c>)
 80060a4:	4a10      	ldr	r2, [pc, #64]	; (80060e8 <prvCheckForValidListAndQueue+0x64>)
 80060a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060a8:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <prvCheckForValidListAndQueue+0x70>)
 80060aa:	4a10      	ldr	r2, [pc, #64]	; (80060ec <prvCheckForValidListAndQueue+0x68>)
 80060ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060ae:	2300      	movs	r3, #0
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <prvCheckForValidListAndQueue+0x74>)
 80060b4:	4a11      	ldr	r2, [pc, #68]	; (80060fc <prvCheckForValidListAndQueue+0x78>)
 80060b6:	2110      	movs	r1, #16
 80060b8:	200a      	movs	r0, #10
 80060ba:	f7fe f8db 	bl	8004274 <xQueueGenericCreateStatic>
 80060be:	4603      	mov	r3, r0
 80060c0:	4a08      	ldr	r2, [pc, #32]	; (80060e4 <prvCheckForValidListAndQueue+0x60>)
 80060c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060c4:	4b07      	ldr	r3, [pc, #28]	; (80060e4 <prvCheckForValidListAndQueue+0x60>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <prvCheckForValidListAndQueue+0x60>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	490b      	ldr	r1, [pc, #44]	; (8006100 <prvCheckForValidListAndQueue+0x7c>)
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fe fd10 	bl	8004af8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060d8:	f000 f954 	bl	8006384 <vPortExitCritical>
}
 80060dc:	bf00      	nop
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	200013e8 	.word	0x200013e8
 80060e8:	200013b8 	.word	0x200013b8
 80060ec:	200013cc 	.word	0x200013cc
 80060f0:	200013e0 	.word	0x200013e0
 80060f4:	200013e4 	.word	0x200013e4
 80060f8:	20001494 	.word	0x20001494
 80060fc:	200013f4 	.word	0x200013f4
 8006100:	08006ba8 	.word	0x08006ba8

08006104 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3b04      	subs	r3, #4
 8006114:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800611c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3b04      	subs	r3, #4
 8006122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f023 0201 	bic.w	r2, r3, #1
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3b04      	subs	r3, #4
 8006132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006134:	4a0c      	ldr	r2, [pc, #48]	; (8006168 <pxPortInitialiseStack+0x64>)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3b14      	subs	r3, #20
 800613e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3b04      	subs	r3, #4
 800614a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f06f 0202 	mvn.w	r2, #2
 8006152:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3b20      	subs	r3, #32
 8006158:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800615a:	68fb      	ldr	r3, [r7, #12]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	0800616d 	.word	0x0800616d

0800616c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006176:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <prvTaskExitError+0x5c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d00c      	beq.n	800619a <prvTaskExitError+0x2e>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	b672      	cpsid	i
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	b662      	cpsie	i
 8006194:	60fb      	str	r3, [r7, #12]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <prvTaskExitError+0x2c>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	b672      	cpsid	i
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	b662      	cpsie	i
 80061ae:	60bb      	str	r3, [r7, #8]
}
 80061b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061b2:	bf00      	nop
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0fc      	beq.n	80061b4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	2000000c 	.word	0x2000000c
 80061cc:	00000000 	.word	0x00000000

080061d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061d0:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <pxCurrentTCBConst2>)
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	6808      	ldr	r0, [r1, #0]
 80061d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061da:	f380 8809 	msr	PSP, r0
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f380 8811 	msr	BASEPRI, r0
 80061ea:	4770      	bx	lr
 80061ec:	f3af 8000 	nop.w

080061f0 <pxCurrentTCBConst2>:
 80061f0:	20000eb8 	.word	0x20000eb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop

080061f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061f8:	4808      	ldr	r0, [pc, #32]	; (800621c <prvPortStartFirstTask+0x24>)
 80061fa:	6800      	ldr	r0, [r0, #0]
 80061fc:	6800      	ldr	r0, [r0, #0]
 80061fe:	f380 8808 	msr	MSP, r0
 8006202:	f04f 0000 	mov.w	r0, #0
 8006206:	f380 8814 	msr	CONTROL, r0
 800620a:	b662      	cpsie	i
 800620c:	b661      	cpsie	f
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	df00      	svc	0
 8006218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800621a:	bf00      	nop
 800621c:	e000ed08 	.word	0xe000ed08

08006220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006226:	4b37      	ldr	r3, [pc, #220]	; (8006304 <xPortStartScheduler+0xe4>)
 8006228:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	22ff      	movs	r2, #255	; 0xff
 8006236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006248:	b2da      	uxtb	r2, r3
 800624a:	4b2f      	ldr	r3, [pc, #188]	; (8006308 <xPortStartScheduler+0xe8>)
 800624c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800624e:	4b2f      	ldr	r3, [pc, #188]	; (800630c <xPortStartScheduler+0xec>)
 8006250:	2207      	movs	r2, #7
 8006252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006254:	e009      	b.n	800626a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006256:	4b2d      	ldr	r3, [pc, #180]	; (800630c <xPortStartScheduler+0xec>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3b01      	subs	r3, #1
 800625c:	4a2b      	ldr	r2, [pc, #172]	; (800630c <xPortStartScheduler+0xec>)
 800625e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	b2db      	uxtb	r3, r3
 8006268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006272:	2b80      	cmp	r3, #128	; 0x80
 8006274:	d0ef      	beq.n	8006256 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006276:	4b25      	ldr	r3, [pc, #148]	; (800630c <xPortStartScheduler+0xec>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f1c3 0307 	rsb	r3, r3, #7
 800627e:	2b04      	cmp	r3, #4
 8006280:	d00c      	beq.n	800629c <xPortStartScheduler+0x7c>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	b672      	cpsid	i
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	b662      	cpsie	i
 8006296:	60bb      	str	r3, [r7, #8]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800629c:	4b1b      	ldr	r3, [pc, #108]	; (800630c <xPortStartScheduler+0xec>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	021b      	lsls	r3, r3, #8
 80062a2:	4a1a      	ldr	r2, [pc, #104]	; (800630c <xPortStartScheduler+0xec>)
 80062a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062a6:	4b19      	ldr	r3, [pc, #100]	; (800630c <xPortStartScheduler+0xec>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062ae:	4a17      	ldr	r2, [pc, #92]	; (800630c <xPortStartScheduler+0xec>)
 80062b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062ba:	4b15      	ldr	r3, [pc, #84]	; (8006310 <xPortStartScheduler+0xf0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a14      	ldr	r2, [pc, #80]	; (8006310 <xPortStartScheduler+0xf0>)
 80062c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062c6:	4b12      	ldr	r3, [pc, #72]	; (8006310 <xPortStartScheduler+0xf0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a11      	ldr	r2, [pc, #68]	; (8006310 <xPortStartScheduler+0xf0>)
 80062cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062d2:	f000 f8dd 	bl	8006490 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062d6:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <xPortStartScheduler+0xf4>)
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062dc:	f000 f8fc 	bl	80064d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062e0:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <xPortStartScheduler+0xf8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <xPortStartScheduler+0xf8>)
 80062e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062ec:	f7ff ff84 	bl	80061f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062f0:	f7ff f844 	bl	800537c <vTaskSwitchContext>
	prvTaskExitError();
 80062f4:	f7ff ff3a 	bl	800616c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	e000e400 	.word	0xe000e400
 8006308:	200014e4 	.word	0x200014e4
 800630c:	200014e8 	.word	0x200014e8
 8006310:	e000ed20 	.word	0xe000ed20
 8006314:	2000000c 	.word	0x2000000c
 8006318:	e000ef34 	.word	0xe000ef34

0800631c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	b672      	cpsid	i
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	b662      	cpsie	i
 8006336:	607b      	str	r3, [r7, #4]
}
 8006338:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800633a:	4b10      	ldr	r3, [pc, #64]	; (800637c <vPortEnterCritical+0x60>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3301      	adds	r3, #1
 8006340:	4a0e      	ldr	r2, [pc, #56]	; (800637c <vPortEnterCritical+0x60>)
 8006342:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006344:	4b0d      	ldr	r3, [pc, #52]	; (800637c <vPortEnterCritical+0x60>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d111      	bne.n	8006370 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800634c:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <vPortEnterCritical+0x64>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00c      	beq.n	8006370 <vPortEnterCritical+0x54>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	b672      	cpsid	i
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	b662      	cpsie	i
 800636a:	603b      	str	r3, [r7, #0]
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <vPortEnterCritical+0x52>
	}
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	2000000c 	.word	0x2000000c
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800638a:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <vPortExitCritical+0x54>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10c      	bne.n	80063ac <vPortExitCritical+0x28>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	b672      	cpsid	i
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	b662      	cpsie	i
 80063a6:	607b      	str	r3, [r7, #4]
}
 80063a8:	bf00      	nop
 80063aa:	e7fe      	b.n	80063aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <vPortExitCritical+0x54>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <vPortExitCritical+0x54>)
 80063b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <vPortExitCritical+0x54>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d105      	bne.n	80063ca <vPortExitCritical+0x46>
 80063be:	2300      	movs	r3, #0
 80063c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	f383 8811 	msr	BASEPRI, r3
}
 80063c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	2000000c 	.word	0x2000000c
 80063dc:	00000000 	.word	0x00000000

080063e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063e0:	f3ef 8009 	mrs	r0, PSP
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	4b15      	ldr	r3, [pc, #84]	; (8006440 <pxCurrentTCBConst>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	f01e 0f10 	tst.w	lr, #16
 80063f0:	bf08      	it	eq
 80063f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fa:	6010      	str	r0, [r2, #0]
 80063fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006404:	b672      	cpsid	i
 8006406:	f380 8811 	msr	BASEPRI, r0
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	b662      	cpsie	i
 8006414:	f7fe ffb2 	bl	800537c <vTaskSwitchContext>
 8006418:	f04f 0000 	mov.w	r0, #0
 800641c:	f380 8811 	msr	BASEPRI, r0
 8006420:	bc09      	pop	{r0, r3}
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f01e 0f10 	tst.w	lr, #16
 800642e:	bf08      	it	eq
 8006430:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006434:	f380 8809 	msr	PSP, r0
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop

08006440 <pxCurrentTCBConst>:
 8006440:	20000eb8 	.word	0x20000eb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	b672      	cpsid	i
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	b662      	cpsie	i
 8006462:	607b      	str	r3, [r7, #4]
}
 8006464:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006466:	f7fe fecd 	bl	8005204 <xTaskIncrementTick>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006470:	4b06      	ldr	r3, [pc, #24]	; (800648c <SysTick_Handler+0x44>)
 8006472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	2300      	movs	r3, #0
 800647a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	f383 8811 	msr	BASEPRI, r3
}
 8006482:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <vPortSetupTimerInterrupt+0x34>)
 8006496:	2200      	movs	r2, #0
 8006498:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800649a:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <vPortSetupTimerInterrupt+0x38>)
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064a0:	4b0a      	ldr	r3, [pc, #40]	; (80064cc <vPortSetupTimerInterrupt+0x3c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a0a      	ldr	r2, [pc, #40]	; (80064d0 <vPortSetupTimerInterrupt+0x40>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	099b      	lsrs	r3, r3, #6
 80064ac:	4a09      	ldr	r2, [pc, #36]	; (80064d4 <vPortSetupTimerInterrupt+0x44>)
 80064ae:	3b01      	subs	r3, #1
 80064b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064b2:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <vPortSetupTimerInterrupt+0x34>)
 80064b4:	2207      	movs	r2, #7
 80064b6:	601a      	str	r2, [r3, #0]
}
 80064b8:	bf00      	nop
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	e000e010 	.word	0xe000e010
 80064c8:	e000e018 	.word	0xe000e018
 80064cc:	20000000 	.word	0x20000000
 80064d0:	10624dd3 	.word	0x10624dd3
 80064d4:	e000e014 	.word	0xe000e014

080064d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064e8 <vPortEnableVFP+0x10>
 80064dc:	6801      	ldr	r1, [r0, #0]
 80064de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064e2:	6001      	str	r1, [r0, #0]
 80064e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064e6:	bf00      	nop
 80064e8:	e000ed88 	.word	0xe000ed88

080064ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064f2:	f3ef 8305 	mrs	r3, IPSR
 80064f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b0f      	cmp	r3, #15
 80064fc:	d916      	bls.n	800652c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064fe:	4a19      	ldr	r2, [pc, #100]	; (8006564 <vPortValidateInterruptPriority+0x78>)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006508:	4b17      	ldr	r3, [pc, #92]	; (8006568 <vPortValidateInterruptPriority+0x7c>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	7afa      	ldrb	r2, [r7, #11]
 800650e:	429a      	cmp	r2, r3
 8006510:	d20c      	bcs.n	800652c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	b672      	cpsid	i
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	b662      	cpsie	i
 8006526:	607b      	str	r3, [r7, #4]
}
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800652c:	4b0f      	ldr	r3, [pc, #60]	; (800656c <vPortValidateInterruptPriority+0x80>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006534:	4b0e      	ldr	r3, [pc, #56]	; (8006570 <vPortValidateInterruptPriority+0x84>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d90c      	bls.n	8006556 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	b672      	cpsid	i
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	b662      	cpsie	i
 8006550:	603b      	str	r3, [r7, #0]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <vPortValidateInterruptPriority+0x68>
	}
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	e000e3f0 	.word	0xe000e3f0
 8006568:	200014e4 	.word	0x200014e4
 800656c:	e000ed0c 	.word	0xe000ed0c
 8006570:	200014e8 	.word	0x200014e8

08006574 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800657c:	2300      	movs	r3, #0
 800657e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006580:	f7fe fd82 	bl	8005088 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006584:	4b5b      	ldr	r3, [pc, #364]	; (80066f4 <pvPortMalloc+0x180>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800658c:	f000 f91a 	bl	80067c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006590:	4b59      	ldr	r3, [pc, #356]	; (80066f8 <pvPortMalloc+0x184>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4013      	ands	r3, r2
 8006598:	2b00      	cmp	r3, #0
 800659a:	f040 8092 	bne.w	80066c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01f      	beq.n	80065e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80065a4:	2208      	movs	r2, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4413      	add	r3, r2
 80065aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d016      	beq.n	80065e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f023 0307 	bic.w	r3, r3, #7
 80065bc:	3308      	adds	r3, #8
 80065be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00c      	beq.n	80065e4 <pvPortMalloc+0x70>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	b672      	cpsid	i
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	b662      	cpsie	i
 80065de:	617b      	str	r3, [r7, #20]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d06b      	beq.n	80066c2 <pvPortMalloc+0x14e>
 80065ea:	4b44      	ldr	r3, [pc, #272]	; (80066fc <pvPortMalloc+0x188>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d866      	bhi.n	80066c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065f4:	4b42      	ldr	r3, [pc, #264]	; (8006700 <pvPortMalloc+0x18c>)
 80065f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065f8:	4b41      	ldr	r3, [pc, #260]	; (8006700 <pvPortMalloc+0x18c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065fe:	e004      	b.n	800660a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d903      	bls.n	800661c <pvPortMalloc+0xa8>
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1f1      	bne.n	8006600 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800661c:	4b35      	ldr	r3, [pc, #212]	; (80066f4 <pvPortMalloc+0x180>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006622:	429a      	cmp	r2, r3
 8006624:	d04d      	beq.n	80066c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2208      	movs	r2, #8
 800662c:	4413      	add	r3, r2
 800662e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	2308      	movs	r3, #8
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	429a      	cmp	r2, r3
 8006646:	d921      	bls.n	800668c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4413      	add	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00c      	beq.n	8006674 <pvPortMalloc+0x100>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	b672      	cpsid	i
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	b662      	cpsie	i
 800666e:	613b      	str	r3, [r7, #16]
}
 8006670:	bf00      	nop
 8006672:	e7fe      	b.n	8006672 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	1ad2      	subs	r2, r2, r3
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006686:	69b8      	ldr	r0, [r7, #24]
 8006688:	f000 f8fe 	bl	8006888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800668c:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <pvPortMalloc+0x188>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	4a19      	ldr	r2, [pc, #100]	; (80066fc <pvPortMalloc+0x188>)
 8006698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800669a:	4b18      	ldr	r3, [pc, #96]	; (80066fc <pvPortMalloc+0x188>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b19      	ldr	r3, [pc, #100]	; (8006704 <pvPortMalloc+0x190>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d203      	bcs.n	80066ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066a6:	4b15      	ldr	r3, [pc, #84]	; (80066fc <pvPortMalloc+0x188>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a16      	ldr	r2, [pc, #88]	; (8006704 <pvPortMalloc+0x190>)
 80066ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	4b11      	ldr	r3, [pc, #68]	; (80066f8 <pvPortMalloc+0x184>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066c2:	f7fe fcef 	bl	80050a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00c      	beq.n	80066ea <pvPortMalloc+0x176>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	b672      	cpsid	i
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	b662      	cpsie	i
 80066e4:	60fb      	str	r3, [r7, #12]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <pvPortMalloc+0x174>
	return pvReturn;
 80066ea:	69fb      	ldr	r3, [r7, #28]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3728      	adds	r7, #40	; 0x28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	200050f4 	.word	0x200050f4
 80066f8:	20005100 	.word	0x20005100
 80066fc:	200050f8 	.word	0x200050f8
 8006700:	200050ec 	.word	0x200050ec
 8006704:	200050fc 	.word	0x200050fc

08006708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d04c      	beq.n	80067b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800671a:	2308      	movs	r3, #8
 800671c:	425b      	negs	r3, r3
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4413      	add	r3, r2
 8006722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	4b23      	ldr	r3, [pc, #140]	; (80067bc <vPortFree+0xb4>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4013      	ands	r3, r2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10c      	bne.n	8006750 <vPortFree+0x48>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	b672      	cpsid	i
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	b662      	cpsie	i
 800674a:	60fb      	str	r3, [r7, #12]
}
 800674c:	bf00      	nop
 800674e:	e7fe      	b.n	800674e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00c      	beq.n	8006772 <vPortFree+0x6a>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	b672      	cpsid	i
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	b662      	cpsie	i
 800676c:	60bb      	str	r3, [r7, #8]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	4b11      	ldr	r3, [pc, #68]	; (80067bc <vPortFree+0xb4>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4013      	ands	r3, r2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d019      	beq.n	80067b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d115      	bne.n	80067b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <vPortFree+0xb4>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	43db      	mvns	r3, r3
 8006792:	401a      	ands	r2, r3
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006798:	f7fe fc76 	bl	8005088 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <vPortFree+0xb8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4413      	add	r3, r2
 80067a6:	4a06      	ldr	r2, [pc, #24]	; (80067c0 <vPortFree+0xb8>)
 80067a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067aa:	6938      	ldr	r0, [r7, #16]
 80067ac:	f000 f86c 	bl	8006888 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80067b0:	f7fe fc78 	bl	80050a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067b4:	bf00      	nop
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20005100 	.word	0x20005100
 80067c0:	200050f8 	.word	0x200050f8

080067c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80067ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067d0:	4b27      	ldr	r3, [pc, #156]	; (8006870 <prvHeapInit+0xac>)
 80067d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00c      	beq.n	80067f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3307      	adds	r3, #7
 80067e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0307 	bic.w	r3, r3, #7
 80067ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	4a1f      	ldr	r2, [pc, #124]	; (8006870 <prvHeapInit+0xac>)
 80067f4:	4413      	add	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067fc:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <prvHeapInit+0xb0>)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006802:	4b1c      	ldr	r3, [pc, #112]	; (8006874 <prvHeapInit+0xb0>)
 8006804:	2200      	movs	r2, #0
 8006806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	4413      	add	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006810:	2208      	movs	r2, #8
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0307 	bic.w	r3, r3, #7
 800681e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4a15      	ldr	r2, [pc, #84]	; (8006878 <prvHeapInit+0xb4>)
 8006824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006826:	4b14      	ldr	r3, [pc, #80]	; (8006878 <prvHeapInit+0xb4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2200      	movs	r2, #0
 800682c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800682e:	4b12      	ldr	r3, [pc, #72]	; (8006878 <prvHeapInit+0xb4>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006844:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <prvHeapInit+0xb4>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	4a0a      	ldr	r2, [pc, #40]	; (800687c <prvHeapInit+0xb8>)
 8006852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	4a09      	ldr	r2, [pc, #36]	; (8006880 <prvHeapInit+0xbc>)
 800685a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800685c:	4b09      	ldr	r3, [pc, #36]	; (8006884 <prvHeapInit+0xc0>)
 800685e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006862:	601a      	str	r2, [r3, #0]
}
 8006864:	bf00      	nop
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	200014ec 	.word	0x200014ec
 8006874:	200050ec 	.word	0x200050ec
 8006878:	200050f4 	.word	0x200050f4
 800687c:	200050fc 	.word	0x200050fc
 8006880:	200050f8 	.word	0x200050f8
 8006884:	20005100 	.word	0x20005100

08006888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006890:	4b28      	ldr	r3, [pc, #160]	; (8006934 <prvInsertBlockIntoFreeList+0xac>)
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e002      	b.n	800689c <prvInsertBlockIntoFreeList+0x14>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d8f7      	bhi.n	8006896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4413      	add	r3, r2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d108      	bne.n	80068ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	441a      	add	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	441a      	add	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d118      	bne.n	8006910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	4b15      	ldr	r3, [pc, #84]	; (8006938 <prvInsertBlockIntoFreeList+0xb0>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d00d      	beq.n	8006906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	441a      	add	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	e008      	b.n	8006918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006906:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <prvInsertBlockIntoFreeList+0xb0>)
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e003      	b.n	8006918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	429a      	cmp	r2, r3
 800691e:	d002      	beq.n	8006926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006926:	bf00      	nop
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	200050ec 	.word	0x200050ec
 8006938:	200050f4 	.word	0x200050f4

0800693c <__libc_init_array>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4d0d      	ldr	r5, [pc, #52]	; (8006974 <__libc_init_array+0x38>)
 8006940:	4c0d      	ldr	r4, [pc, #52]	; (8006978 <__libc_init_array+0x3c>)
 8006942:	1b64      	subs	r4, r4, r5
 8006944:	10a4      	asrs	r4, r4, #2
 8006946:	2600      	movs	r6, #0
 8006948:	42a6      	cmp	r6, r4
 800694a:	d109      	bne.n	8006960 <__libc_init_array+0x24>
 800694c:	4d0b      	ldr	r5, [pc, #44]	; (800697c <__libc_init_array+0x40>)
 800694e:	4c0c      	ldr	r4, [pc, #48]	; (8006980 <__libc_init_array+0x44>)
 8006950:	f000 f8f2 	bl	8006b38 <_init>
 8006954:	1b64      	subs	r4, r4, r5
 8006956:	10a4      	asrs	r4, r4, #2
 8006958:	2600      	movs	r6, #0
 800695a:	42a6      	cmp	r6, r4
 800695c:	d105      	bne.n	800696a <__libc_init_array+0x2e>
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	f855 3b04 	ldr.w	r3, [r5], #4
 8006964:	4798      	blx	r3
 8006966:	3601      	adds	r6, #1
 8006968:	e7ee      	b.n	8006948 <__libc_init_array+0xc>
 800696a:	f855 3b04 	ldr.w	r3, [r5], #4
 800696e:	4798      	blx	r3
 8006970:	3601      	adds	r6, #1
 8006972:	e7f2      	b.n	800695a <__libc_init_array+0x1e>
 8006974:	08006c78 	.word	0x08006c78
 8006978:	08006c78 	.word	0x08006c78
 800697c:	08006c78 	.word	0x08006c78
 8006980:	08006c7c 	.word	0x08006c7c

08006984 <__retarget_lock_acquire_recursive>:
 8006984:	4770      	bx	lr

08006986 <__retarget_lock_release_recursive>:
 8006986:	4770      	bx	lr

08006988 <memcpy>:
 8006988:	440a      	add	r2, r1
 800698a:	4291      	cmp	r1, r2
 800698c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006990:	d100      	bne.n	8006994 <memcpy+0xc>
 8006992:	4770      	bx	lr
 8006994:	b510      	push	{r4, lr}
 8006996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800699a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800699e:	4291      	cmp	r1, r2
 80069a0:	d1f9      	bne.n	8006996 <memcpy+0xe>
 80069a2:	bd10      	pop	{r4, pc}

080069a4 <memset>:
 80069a4:	4402      	add	r2, r0
 80069a6:	4603      	mov	r3, r0
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d100      	bne.n	80069ae <memset+0xa>
 80069ac:	4770      	bx	lr
 80069ae:	f803 1b01 	strb.w	r1, [r3], #1
 80069b2:	e7f9      	b.n	80069a8 <memset+0x4>

080069b4 <cleanup_glue>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	460c      	mov	r4, r1
 80069b8:	6809      	ldr	r1, [r1, #0]
 80069ba:	4605      	mov	r5, r0
 80069bc:	b109      	cbz	r1, 80069c2 <cleanup_glue+0xe>
 80069be:	f7ff fff9 	bl	80069b4 <cleanup_glue>
 80069c2:	4621      	mov	r1, r4
 80069c4:	4628      	mov	r0, r5
 80069c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ca:	f000 b869 	b.w	8006aa0 <_free_r>
	...

080069d0 <_reclaim_reent>:
 80069d0:	4b2c      	ldr	r3, [pc, #176]	; (8006a84 <_reclaim_reent+0xb4>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4283      	cmp	r3, r0
 80069d6:	b570      	push	{r4, r5, r6, lr}
 80069d8:	4604      	mov	r4, r0
 80069da:	d051      	beq.n	8006a80 <_reclaim_reent+0xb0>
 80069dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80069de:	b143      	cbz	r3, 80069f2 <_reclaim_reent+0x22>
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d14a      	bne.n	8006a7c <_reclaim_reent+0xac>
 80069e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069e8:	6819      	ldr	r1, [r3, #0]
 80069ea:	b111      	cbz	r1, 80069f2 <_reclaim_reent+0x22>
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 f857 	bl	8006aa0 <_free_r>
 80069f2:	6961      	ldr	r1, [r4, #20]
 80069f4:	b111      	cbz	r1, 80069fc <_reclaim_reent+0x2c>
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 f852 	bl	8006aa0 <_free_r>
 80069fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80069fe:	b111      	cbz	r1, 8006a06 <_reclaim_reent+0x36>
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 f84d 	bl	8006aa0 <_free_r>
 8006a06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006a08:	b111      	cbz	r1, 8006a10 <_reclaim_reent+0x40>
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 f848 	bl	8006aa0 <_free_r>
 8006a10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006a12:	b111      	cbz	r1, 8006a1a <_reclaim_reent+0x4a>
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 f843 	bl	8006aa0 <_free_r>
 8006a1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006a1c:	b111      	cbz	r1, 8006a24 <_reclaim_reent+0x54>
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f000 f83e 	bl	8006aa0 <_free_r>
 8006a24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006a26:	b111      	cbz	r1, 8006a2e <_reclaim_reent+0x5e>
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 f839 	bl	8006aa0 <_free_r>
 8006a2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006a30:	b111      	cbz	r1, 8006a38 <_reclaim_reent+0x68>
 8006a32:	4620      	mov	r0, r4
 8006a34:	f000 f834 	bl	8006aa0 <_free_r>
 8006a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a3a:	b111      	cbz	r1, 8006a42 <_reclaim_reent+0x72>
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 f82f 	bl	8006aa0 <_free_r>
 8006a42:	69a3      	ldr	r3, [r4, #24]
 8006a44:	b1e3      	cbz	r3, 8006a80 <_reclaim_reent+0xb0>
 8006a46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a48:	4620      	mov	r0, r4
 8006a4a:	4798      	blx	r3
 8006a4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a4e:	b1b9      	cbz	r1, 8006a80 <_reclaim_reent+0xb0>
 8006a50:	4620      	mov	r0, r4
 8006a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a56:	f7ff bfad 	b.w	80069b4 <cleanup_glue>
 8006a5a:	5949      	ldr	r1, [r1, r5]
 8006a5c:	b941      	cbnz	r1, 8006a70 <_reclaim_reent+0xa0>
 8006a5e:	3504      	adds	r5, #4
 8006a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a62:	2d80      	cmp	r5, #128	; 0x80
 8006a64:	68d9      	ldr	r1, [r3, #12]
 8006a66:	d1f8      	bne.n	8006a5a <_reclaim_reent+0x8a>
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 f819 	bl	8006aa0 <_free_r>
 8006a6e:	e7ba      	b.n	80069e6 <_reclaim_reent+0x16>
 8006a70:	680e      	ldr	r6, [r1, #0]
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 f814 	bl	8006aa0 <_free_r>
 8006a78:	4631      	mov	r1, r6
 8006a7a:	e7ef      	b.n	8006a5c <_reclaim_reent+0x8c>
 8006a7c:	2500      	movs	r5, #0
 8006a7e:	e7ef      	b.n	8006a60 <_reclaim_reent+0x90>
 8006a80:	bd70      	pop	{r4, r5, r6, pc}
 8006a82:	bf00      	nop
 8006a84:	20000010 	.word	0x20000010

08006a88 <__malloc_lock>:
 8006a88:	4801      	ldr	r0, [pc, #4]	; (8006a90 <__malloc_lock+0x8>)
 8006a8a:	f7ff bf7b 	b.w	8006984 <__retarget_lock_acquire_recursive>
 8006a8e:	bf00      	nop
 8006a90:	20005104 	.word	0x20005104

08006a94 <__malloc_unlock>:
 8006a94:	4801      	ldr	r0, [pc, #4]	; (8006a9c <__malloc_unlock+0x8>)
 8006a96:	f7ff bf76 	b.w	8006986 <__retarget_lock_release_recursive>
 8006a9a:	bf00      	nop
 8006a9c:	20005104 	.word	0x20005104

08006aa0 <_free_r>:
 8006aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aa2:	2900      	cmp	r1, #0
 8006aa4:	d044      	beq.n	8006b30 <_free_r+0x90>
 8006aa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aaa:	9001      	str	r0, [sp, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f1a1 0404 	sub.w	r4, r1, #4
 8006ab2:	bfb8      	it	lt
 8006ab4:	18e4      	addlt	r4, r4, r3
 8006ab6:	f7ff ffe7 	bl	8006a88 <__malloc_lock>
 8006aba:	4a1e      	ldr	r2, [pc, #120]	; (8006b34 <_free_r+0x94>)
 8006abc:	9801      	ldr	r0, [sp, #4]
 8006abe:	6813      	ldr	r3, [r2, #0]
 8006ac0:	b933      	cbnz	r3, 8006ad0 <_free_r+0x30>
 8006ac2:	6063      	str	r3, [r4, #4]
 8006ac4:	6014      	str	r4, [r2, #0]
 8006ac6:	b003      	add	sp, #12
 8006ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006acc:	f7ff bfe2 	b.w	8006a94 <__malloc_unlock>
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	d908      	bls.n	8006ae6 <_free_r+0x46>
 8006ad4:	6825      	ldr	r5, [r4, #0]
 8006ad6:	1961      	adds	r1, r4, r5
 8006ad8:	428b      	cmp	r3, r1
 8006ada:	bf01      	itttt	eq
 8006adc:	6819      	ldreq	r1, [r3, #0]
 8006ade:	685b      	ldreq	r3, [r3, #4]
 8006ae0:	1949      	addeq	r1, r1, r5
 8006ae2:	6021      	streq	r1, [r4, #0]
 8006ae4:	e7ed      	b.n	8006ac2 <_free_r+0x22>
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	b10b      	cbz	r3, 8006af0 <_free_r+0x50>
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	d9fa      	bls.n	8006ae6 <_free_r+0x46>
 8006af0:	6811      	ldr	r1, [r2, #0]
 8006af2:	1855      	adds	r5, r2, r1
 8006af4:	42a5      	cmp	r5, r4
 8006af6:	d10b      	bne.n	8006b10 <_free_r+0x70>
 8006af8:	6824      	ldr	r4, [r4, #0]
 8006afa:	4421      	add	r1, r4
 8006afc:	1854      	adds	r4, r2, r1
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	6011      	str	r1, [r2, #0]
 8006b02:	d1e0      	bne.n	8006ac6 <_free_r+0x26>
 8006b04:	681c      	ldr	r4, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	6053      	str	r3, [r2, #4]
 8006b0a:	4421      	add	r1, r4
 8006b0c:	6011      	str	r1, [r2, #0]
 8006b0e:	e7da      	b.n	8006ac6 <_free_r+0x26>
 8006b10:	d902      	bls.n	8006b18 <_free_r+0x78>
 8006b12:	230c      	movs	r3, #12
 8006b14:	6003      	str	r3, [r0, #0]
 8006b16:	e7d6      	b.n	8006ac6 <_free_r+0x26>
 8006b18:	6825      	ldr	r5, [r4, #0]
 8006b1a:	1961      	adds	r1, r4, r5
 8006b1c:	428b      	cmp	r3, r1
 8006b1e:	bf04      	itt	eq
 8006b20:	6819      	ldreq	r1, [r3, #0]
 8006b22:	685b      	ldreq	r3, [r3, #4]
 8006b24:	6063      	str	r3, [r4, #4]
 8006b26:	bf04      	itt	eq
 8006b28:	1949      	addeq	r1, r1, r5
 8006b2a:	6021      	streq	r1, [r4, #0]
 8006b2c:	6054      	str	r4, [r2, #4]
 8006b2e:	e7ca      	b.n	8006ac6 <_free_r+0x26>
 8006b30:	b003      	add	sp, #12
 8006b32:	bd30      	pop	{r4, r5, pc}
 8006b34:	20005108 	.word	0x20005108

08006b38 <_init>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr

08006b44 <_fini>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	bf00      	nop
 8006b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4a:	bc08      	pop	{r3}
 8006b4c:	469e      	mov	lr, r3
 8006b4e:	4770      	bx	lr
