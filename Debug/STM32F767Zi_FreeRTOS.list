
STM32F767Zi_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b288  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001744  0800b488  0800b488  0001b488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbcc  0800cbcc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbcc  0800cbcc  0001cbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbd4  0800cbd4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbd4  0800cbd4  0001cbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbd8  0800cbd8  0001cbd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800cbdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f090  20000080  0800cc5c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f110  0800cc5c  0002f110  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026a3e  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047d4  00000000  00000000  00046aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c90  00000000  00000000  0004b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af8  00000000  00000000  0004cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006948  00000000  00000000  0004ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a94  00000000  00000000  00055390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001191b3  00000000  00000000  00078e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00191fd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d44  00000000  00000000  00192028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b470 	.word	0x0800b470

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800b470 	.word	0x0800b470

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f002 fbb1 	bl	8002cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f8b7 	bl	80006d0 <SystemClock_Config>
//  vTraceEnable(TRC_START);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 fa9b 	bl	8000a9c <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000566:	f000 fa6b 	bl	8000a40 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800056a:	f000 f921 	bl	80007b0 <MX_ADC1_Init>
  MX_TIM13_Init();
 800056e:	f000 f9e9 	bl	8000944 <MX_TIM13_Init>
  MX_ADC2_Init();
 8000572:	f000 f971 	bl	8000858 <MX_ADC2_Init>
  MX_TIM10_Init();
 8000576:	f000 f9c1 	bl	80008fc <MX_TIM10_Init>
  MX_USART3_UART_Init();
 800057a:	f000 fa31 	bl	80009e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 800057e:	4834      	ldr	r0, [pc, #208]	; (8000650 <main+0xfc>)
 8000580:	f002 fc34 	bl	8002dec <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000584:	4833      	ldr	r0, [pc, #204]	; (8000654 <main+0x100>)
 8000586:	f002 fc31 	bl	8002dec <HAL_ADC_Start>

  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800058a:	2100      	movs	r1, #0
 800058c:	4832      	ldr	r0, [pc, #200]	; (8000658 <main+0x104>)
 800058e:	f004 fdc3 	bl	8005118 <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000592:	f006 fc3f 	bl	8006e14 <osKernelInitialize>
  vTraceEnable(TRC_START);
 8000596:	2001      	movs	r0, #1
 8000598:	f001 fa02 	bl	80019a0 <vTraceEnable>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of msg_Queue */
  msg_QueueHandle = osMessageQueueNew (16, sizeof(QUEUE_t), &msg_Queue_attributes);
 800059c:	4a2f      	ldr	r2, [pc, #188]	; (800065c <main+0x108>)
 800059e:	217a      	movs	r1, #122	; 0x7a
 80005a0:	2010      	movs	r0, #16
 80005a2:	f006 fe95 	bl	80072d0 <osMessageQueueNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <main+0x10c>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ac:	4a2d      	ldr	r2, [pc, #180]	; (8000664 <main+0x110>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	482d      	ldr	r0, [pc, #180]	; (8000668 <main+0x114>)
 80005b2:	f006 fc99 	bl	8006ee8 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a2c      	ldr	r2, [pc, #176]	; (800066c <main+0x118>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of BlinkyTask */
  BlinkyTaskHandle = osThreadNew(StartBlinkyTask, NULL, &BlinkyTask_attributes);
 80005bc:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <main+0x11c>)
 80005be:	2100      	movs	r1, #0
 80005c0:	482c      	ldr	r0, [pc, #176]	; (8000674 <main+0x120>)
 80005c2:	f006 fc91 	bl	8006ee8 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a2b      	ldr	r2, [pc, #172]	; (8000678 <main+0x124>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of adcReadValueT */
  adcReadValueTHandle = osThreadNew(adcReadValueTask, NULL, &adcReadValueT_attributes);
 80005cc:	4a2b      	ldr	r2, [pc, #172]	; (800067c <main+0x128>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	482b      	ldr	r0, [pc, #172]	; (8000680 <main+0x12c>)
 80005d2:	f006 fc89 	bl	8006ee8 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <main+0x130>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of readTempT */
  readTempTHandle = osThreadNew(readTempTask, NULL, &readTempT_attributes);
 80005dc:	4a2a      	ldr	r2, [pc, #168]	; (8000688 <main+0x134>)
 80005de:	2100      	movs	r1, #0
 80005e0:	482a      	ldr	r0, [pc, #168]	; (800068c <main+0x138>)
 80005e2:	f006 fc81 	bl	8006ee8 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a29      	ldr	r2, [pc, #164]	; (8000690 <main+0x13c>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* creation of pwmLedBrightnes */
  pwmLedBrightnesHandle = osThreadNew(pwmLedBrightnessTask, NULL, &pwmLedBrightnes_attributes);
 80005ec:	4a29      	ldr	r2, [pc, #164]	; (8000694 <main+0x140>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4829      	ldr	r0, [pc, #164]	; (8000698 <main+0x144>)
 80005f2:	f006 fc79 	bl	8006ee8 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a28      	ldr	r2, [pc, #160]	; (800069c <main+0x148>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of usartDebugPrint */
  usartDebugPrintHandle = osThreadNew(usartDebugPrintTask, NULL, &usartDebugPrint_attributes);
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <main+0x14c>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4828      	ldr	r0, [pc, #160]	; (80006a4 <main+0x150>)
 8000602:	f006 fc71 	bl	8006ee8 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <main+0x154>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of checkISRStateT */
  checkISRStateTHandle = osThreadNew(checkISRStateTask, NULL, &checkISRStateT_attributes);
 800060c:	4a27      	ldr	r2, [pc, #156]	; (80006ac <main+0x158>)
 800060e:	2100      	movs	r1, #0
 8000610:	4827      	ldr	r0, [pc, #156]	; (80006b0 <main+0x15c>)
 8000612:	f006 fc69 	bl	8006ee8 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a26      	ldr	r2, [pc, #152]	; (80006b4 <main+0x160>)
 800061a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  EventGroup1 = osEventFlagsNew(NULL);
 800061c:	2000      	movs	r0, #0
 800061e:	f006 fd37 	bl	8007090 <osEventFlagsNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a24      	ldr	r2, [pc, #144]	; (80006b8 <main+0x164>)
 8000626:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  xTaskCreate(
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <main+0x168>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2308      	movs	r3, #8
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	4922      	ldr	r1, [pc, #136]	; (80006c0 <main+0x16c>)
 8000636:	4823      	ldr	r0, [pc, #140]	; (80006c4 <main+0x170>)
 8000638:	f008 fcbd 	bl	8008fb6 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of ISREvent */
  ISREventHandle = osEventFlagsNew(&ISREvent_attributes);
 800063c:	4822      	ldr	r0, [pc, #136]	; (80006c8 <main+0x174>)
 800063e:	f006 fd27 	bl	8007090 <osEventFlagsNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <main+0x178>)
 8000646:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000648:	f006 fc18 	bl	8006e7c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	e7fe      	b.n	800064c <main+0xf8>
 800064e:	bf00      	nop
 8000650:	2000009c 	.word	0x2000009c
 8000654:	200000e4 	.word	0x200000e4
 8000658:	20000178 	.word	0x20000178
 800065c:	0800cb04 	.word	0x0800cb04
 8000660:	20001730 	.word	0x20001730
 8000664:	0800ca08 	.word	0x0800ca08
 8000668:	08000cad 	.word	0x08000cad
 800066c:	20000754 	.word	0x20000754
 8000670:	0800ca2c 	.word	0x0800ca2c
 8000674:	08000cd9 	.word	0x08000cd9
 8000678:	20000758 	.word	0x20000758
 800067c:	0800ca50 	.word	0x0800ca50
 8000680:	08000cf9 	.word	0x08000cf9
 8000684:	2000075c 	.word	0x2000075c
 8000688:	0800ca74 	.word	0x0800ca74
 800068c:	08000d39 	.word	0x08000d39
 8000690:	20000a20 	.word	0x20000a20
 8000694:	0800ca98 	.word	0x0800ca98
 8000698:	08000de1 	.word	0x08000de1
 800069c:	20000ce4 	.word	0x20000ce4
 80006a0:	0800cabc 	.word	0x0800cabc
 80006a4:	08000e6d 	.word	0x08000e6d
 80006a8:	20000fa8 	.word	0x20000fa8
 80006ac:	0800cae0 	.word	0x0800cae0
 80006b0:	08000e9d 	.word	0x08000e9d
 80006b4:	2000126c 	.word	0x2000126c
 80006b8:	20001f50 	.word	0x20001f50
 80006bc:	20001f4c 	.word	0x20001f4c
 80006c0:	0800b504 	.word	0x0800b504
 80006c4:	08000cbd 	.word	0x08000cbd
 80006c8:	0800cb1c 	.word	0x0800cb1c
 80006cc:	20001f24 	.word	0x20001f24

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f00a fdb2 	bl	800b248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f4:	f003 fae0 	bl	8003cb8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <SystemClock_Config+0xd8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <SystemClock_Config+0xd8>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemClock_Config+0xd8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <SystemClock_Config+0xdc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000718:	4a24      	ldr	r2, [pc, #144]	; (80007ac <SystemClock_Config+0xdc>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemClock_Config+0xdc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800072c:	2303      	movs	r3, #3
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000736:	2301      	movs	r3, #1
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	2310      	movs	r3, #16
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000748:	230f      	movs	r3, #15
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 800074c:	2390      	movs	r3, #144	; 0x90
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000754:	2305      	movs	r3, #5
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4618      	mov	r0, r3
 8000762:	f003 fab9 	bl	8003cd8 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800076c:	f000 fc0e 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	2103      	movs	r1, #3
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fd50 	bl	8004234 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800079a:	f000 fbf7 	bl	8000f8c <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_ADC1_Init+0x9c>)
 80007c4:	4a22      	ldr	r2, [pc, #136]	; (8000850 <MX_ADC1_Init+0xa0>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_ADC1_Init+0x9c>)
 80007ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_ADC1_Init+0x9c>)
 80007d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_ADC1_Init+0x9c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_ADC1_Init+0x9c>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_ADC1_Init+0x9c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_ADC1_Init+0x9c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_ADC1_Init+0x9c>)
 80007f4:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_ADC1_Init+0xa4>)
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_ADC1_Init+0x9c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_ADC1_Init+0x9c>)
 8000800:	2201      	movs	r2, #1
 8000802:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_ADC1_Init+0x9c>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_ADC1_Init+0x9c>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <MX_ADC1_Init+0x9c>)
 8000814:	f002 faa6 	bl	8002d64 <HAL_ADC_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800081e:	f000 fbb5 	bl	8000f8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000822:	2303      	movs	r3, #3
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000826:	2301      	movs	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <MX_ADC1_Init+0x9c>)
 8000834:	f002 fbb6 	bl	8002fa4 <HAL_ADC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083e:	f000 fba5 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000009c 	.word	0x2000009c
 8000850:	40012000 	.word	0x40012000
 8000854:	0f000001 	.word	0x0f000001

08000858 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <MX_ADC2_Init+0x98>)
 800086c:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <MX_ADC2_Init+0x9c>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_ADC2_Init+0x98>)
 8000872:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000876:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_ADC2_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_ADC2_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_ADC2_Init+0x98>)
 8000886:	2201      	movs	r2, #1
 8000888:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_ADC2_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_ADC2_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_ADC2_Init+0x98>)
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <MX_ADC2_Init+0xa0>)
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_ADC2_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_ADC2_Init+0x98>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_ADC2_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_ADC2_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <MX_ADC2_Init+0x98>)
 80008ba:	f002 fa53 	bl	8002d64 <HAL_ADC_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80008c4:	f000 fb62 	bl	8000f8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008c8:	230a      	movs	r3, #10
 80008ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_ADC2_Init+0x98>)
 80008da:	f002 fb63 	bl	8002fa4 <HAL_ADC_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80008e4:	f000 fb52 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200000e4 	.word	0x200000e4
 80008f4:	40012100 	.word	0x40012100
 80008f8:	0f000001 	.word	0x0f000001

080008fc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_TIM10_Init+0x40>)
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <MX_TIM10_Init+0x44>)
 8000904:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_TIM10_Init+0x40>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_TIM10_Init+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 956;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_TIM10_Init+0x40>)
 8000914:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000918:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_TIM10_Init+0x40>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_TIM10_Init+0x40>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_TIM10_Init+0x40>)
 8000928:	f004 fac4 	bl	8004eb4 <HAL_TIM_Base_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000932:	f000 fb2b 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000012c 	.word	0x2000012c
 8000940:	40014400 	.word	0x40014400

08000944 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_TIM13_Init+0x94>)
 800095e:	4a1f      	ldr	r2, [pc, #124]	; (80009dc <MX_TIM13_Init+0x98>)
 8000960:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_TIM13_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_TIM13_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1023;
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_TIM13_Init+0x94>)
 8000970:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000974:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_TIM13_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_TIM13_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000982:	4815      	ldr	r0, [pc, #84]	; (80009d8 <MX_TIM13_Init+0x94>)
 8000984:	f004 fa96 	bl	8004eb4 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800098e:	f000 fafd 	bl	8000f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000992:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_TIM13_Init+0x94>)
 8000994:	f004 fb5e 	bl	8005054 <HAL_TIM_PWM_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800099e:	f000 faf5 	bl	8000f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a2:	2360      	movs	r3, #96	; 0x60
 80009a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	4619      	mov	r1, r3
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <MX_TIM13_Init+0x94>)
 80009ba:	f004 fdc7 	bl	800554c <HAL_TIM_PWM_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80009c4:	f000 fae2 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <MX_TIM13_Init+0x94>)
 80009ca:	f000 fbbd 	bl	8001148 <HAL_TIM_MspPostInit>

}
 80009ce:	bf00      	nop
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000178 	.word	0x20000178
 80009dc:	40001c00 	.word	0x40001c00

080009e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <MX_USART3_UART_Init+0x5c>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a24:	f005 fa0f 	bl	8005e46 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a2e:	f000 faad 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200001c4 	.word	0x200001c4
 8000a3c:	40004800 	.word	0x40004800

08000a40 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2206      	movs	r2, #6
 8000a50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a84:	f002 ffd0 	bl	8003a28 <HAL_PCD_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 fa7d 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000024c 	.word	0x2000024c

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a4a      	ldr	r2, [pc, #296]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	61bb      	str	r3, [r7, #24]
 8000ac8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a44      	ldr	r2, [pc, #272]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b3f      	ldr	r3, [pc, #252]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a3e      	ldr	r2, [pc, #248]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a38      	ldr	r2, [pc, #224]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a32      	ldr	r2, [pc, #200]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a2c      	ldr	r2, [pc, #176]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b48:	4826      	ldr	r0, [pc, #152]	; (8000be4 <MX_GPIO_Init+0x148>)
 8000b4a:	f002 ff21 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4825      	ldr	r0, [pc, #148]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000b54:	f002 ff1c 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481f      	ldr	r0, [pc, #124]	; (8000bec <MX_GPIO_Init+0x150>)
 8000b70:	f002 fd4a 	bl	8003608 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b74:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4815      	ldr	r0, [pc, #84]	; (8000be4 <MX_GPIO_Init+0x148>)
 8000b8e:	f002 fd3b 	bl	8003608 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b92:	2340      	movs	r3, #64	; 0x40
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480f      	ldr	r0, [pc, #60]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000baa:	f002 fd2d 	bl	8003608 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000bc2:	f002 fd21 	bl	8003608 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2105      	movs	r1, #5
 8000bca:	2028      	movs	r0, #40	; 0x28
 8000bcc:	f002 fcf2 	bl	80035b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd0:	2028      	movs	r0, #40	; 0x28
 8000bd2:	f002 fd0b 	bl	80035ec <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3730      	adds	r7, #48	; 0x30
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020400 	.word	0x40020400
 8000be8:	40021800 	.word	0x40021800
 8000bec:	40020800 	.word	0x40020800

08000bf0 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
#if (FREERTOS_PROFILER == 1)
void configureTimerForRunTimeStats(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <configureTimerForRunTimeStats+0x14>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim10);
 8000bfa:	4803      	ldr	r0, [pc, #12]	; (8000c08 <configureTimerForRunTimeStats+0x18>)
 8000bfc:	f004 f9b2 	bl	8004f64 <HAL_TIM_Base_Start_IT>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20001f48 	.word	0x20001f48
 8000c08:	2000012c 	.word	0x2000012c

08000c0c <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <getRunTimeCounterValue+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20001f48 	.word	0x20001f48

08000c24 <HAL_GPIO_EXTI_Callback>:
  * @brief User button IRQ callback function
  * @param uint16_t GPIO_Pin
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == USER_Btn_Pin)
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c34:	d10a      	bne.n	8000c4c <HAL_GPIO_EXTI_Callback+0x28>
  {
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c3c:	f002 fec1 	bl	80039c2 <HAL_GPIO_TogglePin>
    osEventFlagsSet(EventGroup1, LED_ISR_FLAG);
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2151      	movs	r1, #81	; 0x51
 8000c46:	4618      	mov	r0, r3
 8000c48:	f006 fa74 	bl	8007134 <osEventFlagsSet>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40020400 	.word	0x40020400
 8000c58:	20001f50 	.word	0x20001f50

08000c5c <getTemperature>:
  * @brief calculates temperature from TM35 sensor ADC raw value
  * @param uint16_t adc_raw_value
  * @retval None
  */
static uint16_t getTemperature(uint16_t adc_raw_value)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
	return (adc_raw_value / TM35_MV_TO_C); /* 10mV / 1C degree*/
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <getTemperature+0x24>)
 8000c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6e:	08db      	lsrs	r3, r3, #3
 8000c70:	b29b      	uxth	r3, r3
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	cccccccd 	.word	0xcccccccd

08000c84 <printUsartMessage>:
  * @brief print message via USART interface
  * @param const char* message
  * @retval None
  */
static void printUsartMessage(char* message)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(
	     &huart3,
	     (uint8_t*)message,
	     strlen(message),
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fad7 	bl	8000240 <strlen>
 8000c92:	4603      	mov	r3, r0
	HAL_UART_Transmit(
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	2301      	movs	r3, #1
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <printUsartMessage+0x24>)
 8000c9c:	f005 f921 	bl	8005ee2 <HAL_UART_Transmit>
	     1
	     );
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200001c4 	.word	0x200001c4

08000cac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  (void) argument;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f006 f9bd 	bl	8007034 <osDelay>
 8000cba:	e7fb      	b.n	8000cb4 <StartDefaultTask+0x8>

08000cbc <ledBlinkBlue>:
* @brief Function implementing the ledBlinkBlue thread (native FreeRTOS API).
* @param argument: Not used
* @retval None
*/
void ledBlinkBlue(void *pvParameters)
 {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	(void) pvParameters;
	for(;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <ledBlinkBlue+0x18>)
 8000cc8:	f002 fe7b 	bl	80039c2 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 8000ccc:	2064      	movs	r0, #100	; 0x64
 8000cce:	f008 fb23 	bl	8009318 <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cd2:	e7f7      	b.n	8000cc4 <ledBlinkBlue+0x8>
 8000cd4:	40020400 	.word	0x40020400

08000cd8 <StartBlinkyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask */
void StartBlinkyTask(void *argument)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask */
  (void) argument;
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <StartBlinkyTask+0x1c>)
 8000ce4:	f002 fe6d 	bl	80039c2 <HAL_GPIO_TogglePin>
	osDelay(500);
 8000ce8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cec:	f006 f9a2 	bl	8007034 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000cf0:	e7f6      	b.n	8000ce0 <StartBlinkyTask+0x8>
 8000cf2:	bf00      	nop
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <adcReadValueTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adcReadValueTask */
void adcReadValueTask(void *argument)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0a2      	sub	sp, #136	; 0x88
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  (void) argument;
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {
	uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <adcReadValueTask+0x38>)
 8000d02:	f002 f941 	bl	8002f88 <HAL_ADC_GetValue>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

	message.adc_val = adc_value;
 8000d0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000d10:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

	osMessageQueuePut(msg_QueueHandle,
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <adcReadValueTask+0x3c>)
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	f107 010c 	add.w	r1, r7, #12
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	2200      	movs	r2, #0
 8000d22:	f006 fb5b 	bl	80073dc <osMessageQueuePut>
			&message,
			0,
			osWaitForever);

    osDelay(10);
 8000d26:	200a      	movs	r0, #10
 8000d28:	f006 f984 	bl	8007034 <osDelay>
  {
 8000d2c:	e7e8      	b.n	8000d00 <adcReadValueTask+0x8>
 8000d2e:	bf00      	nop
 8000d30:	2000009c 	.word	0x2000009c
 8000d34:	20001730 	.word	0x20001730

08000d38 <readTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readTempTask */
void readTempTask(void *argument)
{
 8000d38:	b5b0      	push	{r4, r5, r7, lr}
 8000d3a:	b0a2      	sub	sp, #136	; 0x88
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  (void) argument;
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {
	uint16_t adc_voltage = (ADC_VREF * (uint16_t)HAL_ADC_GetValue(&hadc2)) / ADC_RESOLUTION;
 8000d40:	4823      	ldr	r0, [pc, #140]	; (8000dd0 <readTempTask+0x98>)
 8000d42:	f002 f921 	bl	8002f88 <HAL_ADC_GetValue>
 8000d46:	4603      	mov	r3, r0
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000d50:	fb02 f303 	mul.w	r3, r2, r3
 8000d54:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <readTempTask+0x9c>)
 8000d56:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5a:	441a      	add	r2, r3
 8000d5c:	12d2      	asrs	r2, r2, #11
 8000d5e:	17db      	asrs	r3, r3, #31
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint16_t tempC = getTemperature(adc_voltage); /* 10mV / 1C degree*/
 8000d66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff76 	bl	8000c5c <getTemperature>
 8000d70:	4603      	mov	r3, r0
 8000d72:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

	itoa(tempC, message.msg_buf, 10);
 8000d76:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000d7a:	f107 0108 	add.w	r1, r7, #8
 8000d7e:	220a      	movs	r2, #10
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00a fa4f 	bl	800b224 <itoa>
	strcat(message.msg_buf, " C :[temperature value]\r\n\0");
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fa58 	bl	8000240 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <readTempTask+0xa0>)
 8000d9c:	461d      	mov	r5, r3
 8000d9e:	4614      	mov	r4, r2
 8000da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da2:	6028      	str	r0, [r5, #0]
 8000da4:	6069      	str	r1, [r5, #4]
 8000da6:	60aa      	str	r2, [r5, #8]
 8000da8:	60eb      	str	r3, [r5, #12]
 8000daa:	cc03      	ldmia	r4!, {r0, r1}
 8000dac:	6128      	str	r0, [r5, #16]
 8000dae:	6169      	str	r1, [r5, #20]
 8000db0:	8823      	ldrh	r3, [r4, #0]
 8000db2:	832b      	strh	r3, [r5, #24]

	osMessageQueuePut(msg_QueueHandle,
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <readTempTask+0xa4>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	f107 0108 	add.w	r1, r7, #8
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f006 fb0b 	bl	80073dc <osMessageQueuePut>
			&message,
			0,
			osWaitForever
			);

    osDelay(10);
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f006 f934 	bl	8007034 <osDelay>
  {
 8000dcc:	e7b8      	b.n	8000d40 <readTempTask+0x8>
 8000dce:	bf00      	nop
 8000dd0:	200000e4 	.word	0x200000e4
 8000dd4:	80080081 	.word	0x80080081
 8000dd8:	0800b510 	.word	0x0800b510
 8000ddc:	20001730 	.word	0x20001730

08000de0 <pwmLedBrightnessTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pwmLedBrightnessTask */
void pwmLedBrightnessTask(void *argument)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b0a2      	sub	sp, #136	; 0x88
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  QUEUE_t message;

  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(msg_QueueHandle,
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <pwmLedBrightnessTask+0x80>)
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	f107 010c 	add.w	r1, r7, #12
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	2200      	movs	r2, #0
 8000df6:	f006 fb65 	bl	80074c4 <osMessageQueueGet>
			&message,
			0,
			osWaitForever);


	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, message.adc_val);
 8000dfa:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <pwmLedBrightnessTask+0x84>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34


	itoa(message.adc_val, message.msg_buf, 10);
 8000e04:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	220a      	movs	r2, #10
 8000e10:	4619      	mov	r1, r3
 8000e12:	f00a fa07 	bl	800b224 <itoa>
	strcat(message.msg_buf, " :[potentiometer value]\r\n\0");
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fa10 	bl	8000240 <strlen>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <pwmLedBrightnessTask+0x88>)
 8000e2c:	461d      	mov	r5, r3
 8000e2e:	4614      	mov	r4, r2
 8000e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e32:	6028      	str	r0, [r5, #0]
 8000e34:	6069      	str	r1, [r5, #4]
 8000e36:	60aa      	str	r2, [r5, #8]
 8000e38:	60eb      	str	r3, [r5, #12]
 8000e3a:	cc03      	ldmia	r4!, {r0, r1}
 8000e3c:	6128      	str	r0, [r5, #16]
 8000e3e:	6169      	str	r1, [r5, #20]
 8000e40:	8823      	ldrh	r3, [r4, #0]
 8000e42:	832b      	strh	r3, [r5, #24]

	osMessageQueuePut(msg_QueueHandle,
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <pwmLedBrightnessTask+0x80>)
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	f107 010c 	add.w	r1, r7, #12
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e50:	2200      	movs	r2, #0
 8000e52:	f006 fac3 	bl	80073dc <osMessageQueuePut>
			&message,
			0,
			osWaitForever
			);

    osDelay(10);
 8000e56:	200a      	movs	r0, #10
 8000e58:	f006 f8ec 	bl	8007034 <osDelay>
	osMessageQueueGet(msg_QueueHandle,
 8000e5c:	e7c4      	b.n	8000de8 <pwmLedBrightnessTask+0x8>
 8000e5e:	bf00      	nop
 8000e60:	20001730 	.word	0x20001730
 8000e64:	20000178 	.word	0x20000178
 8000e68:	0800b52c 	.word	0x0800b52c

08000e6c <usartDebugPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usartDebugPrintTask */
void usartDebugPrintTask(void *argument)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0a2      	sub	sp, #136	; 0x88
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  QUEUE_t message;
//	char msg[20] = "test\r\n\0";
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(msg_QueueHandle,
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <usartDebugPrintTask+0x2c>)
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	f107 010c 	add.w	r1, r7, #12
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	2200      	movs	r2, #0
 8000e82:	f006 fb1f 	bl	80074c4 <osMessageQueueGet>
			&message,
			0,
			osWaitForever
			);

	printUsartMessage(&message.msg_buf);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fefa 	bl	8000c84 <printUsartMessage>

    osDelay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f006 f8cf 	bl	8007034 <osDelay>
	osMessageQueueGet(msg_QueueHandle,
 8000e96:	e7ed      	b.n	8000e74 <usartDebugPrintTask+0x8>
 8000e98:	20001730 	.word	0x20001730

08000e9c <checkISRStateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_checkISRStateTask */
void checkISRStateTask(void *argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0a4      	sub	sp, #144	; 0x90
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN checkISRStateTask */
  (void) argument;

  GPIO_PinState led_gpio_state;

  const char* led_on = "Pin state HIGH [Flag from ISR]\r\n\0";
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <checkISRStateTask+0xb4>)
 8000ea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const char* led_off = "Pin state LOW [Flag from ISR]\r\n\0";
 8000eaa:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <checkISRStateTask+0xb8>)
 8000eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const char* led_unknown = "Pin state UNKNOWN [Flag from ISR]\r\n\0";
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <checkISRStateTask+0xbc>)
 8000eb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {

	osEventFlagsWait(EventGroup1,
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <checkISRStateTask+0xc0>)
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2151      	movs	r1, #81	; 0x51
 8000ec2:	f006 f98f 	bl	80071e4 <osEventFlagsWait>
			LED_ISR_FLAG,
			osFlagsWaitAll,
			osWaitForever
			);

	led_gpio_state = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eca:	4825      	ldr	r0, [pc, #148]	; (8000f60 <checkISRStateTask+0xc4>)
 8000ecc:	f002 fd48 	bl	8003960 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

	switch(led_gpio_state)
 8000ed6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d012      	beq.n	8000f04 <checkISRStateTask+0x68>
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d121      	bne.n	8000f26 <checkISRStateTask+0x8a>
	{
	case GPIO_PIN_SET:
		strcpy(message.msg_buf, led_on);
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000eea:	4618      	mov	r0, r3
 8000eec:	f00a fa1e 	bl	800b32c <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <checkISRStateTask+0xc8>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	f107 0108 	add.w	r1, r7, #8
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	2200      	movs	r2, #0
 8000efe:	f006 fa6d 	bl	80073dc <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000f02:	e021      	b.n	8000f48 <checkISRStateTask+0xac>

	case GPIO_PIN_RESET:
		strcpy(message.msg_buf, led_off);
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f00a fa0d 	bl	800b32c <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <checkISRStateTask+0xc8>)
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	f107 0108 	add.w	r1, r7, #8
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f006 fa5c 	bl	80073dc <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000f24:	e010      	b.n	8000f48 <checkISRStateTask+0xac>

	default:
		strcpy(message.msg_buf, led_unknown);
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f00a f9fc 	bl	800b32c <strcpy>
		osMessageQueuePut(msg_QueueHandle,
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <checkISRStateTask+0xc8>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	f107 0108 	add.w	r1, r7, #8
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f40:	2200      	movs	r2, #0
 8000f42:	f006 fa4b 	bl	80073dc <osMessageQueuePut>
				&message,
				0,
				osWaitForever
				);
		break;
 8000f46:	bf00      	nop
	}

    osDelay(10);
 8000f48:	200a      	movs	r0, #10
 8000f4a:	f006 f873 	bl	8007034 <osDelay>
	osEventFlagsWait(EventGroup1,
 8000f4e:	e7b2      	b.n	8000eb6 <checkISRStateTask+0x1a>
 8000f50:	0800b548 	.word	0x0800b548
 8000f54:	0800b56c 	.word	0x0800b56c
 8000f58:	0800b590 	.word	0x0800b590
 8000f5c:	20001f50 	.word	0x20001f50
 8000f60:	40020400 	.word	0x40020400
 8000f64:	20001730 	.word	0x20001730

08000f68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f7a:	f001 feaf 	bl	8002cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40010400 	.word	0x40010400

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	210f      	movs	r1, #15
 8000fd2:	f06f 0001 	mvn.w	r0, #1
 8000fd6:	f002 faed 	bl	80035b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a2a      	ldr	r2, [pc, #168]	; (80010b0 <HAL_ADC_MspInit+0xc8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d124      	bne.n	8001054 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a29      	ldr	r2, [pc, #164]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 8001010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = Potentiometer_AIN_Pin;
 800103a:	2308      	movs	r3, #8
 800103c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103e:	2303      	movs	r3, #3
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Potentiometer_AIN_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	481a      	ldr	r0, [pc, #104]	; (80010b8 <HAL_ADC_MspInit+0xd0>)
 800104e:	f002 fadb 	bl	8003608 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001052:	e028      	b.n	80010a6 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a18      	ldr	r2, [pc, #96]	; (80010bc <HAL_ADC_MspInit+0xd4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d123      	bne.n	80010a6 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 8001064:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_ADC_MspInit+0xcc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LM35_sensor_AIN_Pin;
 800108e:	2301      	movs	r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001092:	2303      	movs	r3, #3
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LM35_sensor_AIN_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <HAL_ADC_MspInit+0xd8>)
 80010a2:	f002 fab1 	bl	8003608 <HAL_GPIO_Init>
}
 80010a6:	bf00      	nop
 80010a8:	3730      	adds	r7, #48	; 0x30
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40012000 	.word	0x40012000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40012100 	.word	0x40012100
 80010c0:	40020800 	.word	0x40020800

080010c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_TIM_Base_MspInit+0x78>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d114      	bne.n	8001100 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <HAL_TIM_Base_MspInit+0x7c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <HAL_TIM_Base_MspInit+0x7c>)
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_TIM_Base_MspInit+0x7c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2105      	movs	r1, #5
 80010f2:	2019      	movs	r0, #25
 80010f4:	f002 fa5e 	bl	80035b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010f8:	2019      	movs	r0, #25
 80010fa:	f002 fa77 	bl	80035ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80010fe:	e018      	b.n	8001132 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM13)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_TIM_Base_MspInit+0x80>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d113      	bne.n	8001132 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_TIM_Base_MspInit+0x7c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <HAL_TIM_Base_MspInit+0x7c>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_TIM_Base_MspInit+0x7c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 15, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	210f      	movs	r1, #15
 8001126:	202c      	movs	r0, #44	; 0x2c
 8001128:	f002 fa44 	bl	80035b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800112c:	202c      	movs	r0, #44	; 0x2c
 800112e:	f002 fa5d 	bl	80035ec <HAL_NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40014400 	.word	0x40014400
 8001140:	40023800 	.word	0x40023800
 8001144:	40001c00 	.word	0x40001c00

08001148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_TIM_MspPostInit+0x64>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d11b      	bne.n	80011a2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_TIM_MspPostInit+0x68>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_TIM_MspPostInit+0x68>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_TIM_MspPostInit+0x68>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001182:	2340      	movs	r3, #64	; 0x40
 8001184:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001192:	2309      	movs	r3, #9
 8001194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_TIM_MspPostInit+0x6c>)
 800119e:	f002 fa33 	bl	8003608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3720      	adds	r7, #32
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40001c00 	.word	0x40001c00
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000

080011b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0ae      	sub	sp, #184	; 0xb8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2290      	movs	r2, #144	; 0x90
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f00a f835 	bl	800b248 <memset>
  if(huart->Instance==USART3)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a22      	ldr	r2, [pc, #136]	; (800126c <HAL_UART_MspInit+0xb4>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d13c      	bne.n	8001262 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 80011ee:	2320      	movs	r3, #32
 80011f0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fa34 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001202:	f7ff fec3 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_UART_MspInit+0xb8>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a19      	ldr	r2, [pc, #100]	; (8001270 <HAL_UART_MspInit+0xb8>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_UART_MspInit+0xb8>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_UART_MspInit+0xb8>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <HAL_UART_MspInit+0xb8>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_UART_MspInit+0xb8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001236:	f44f 7340 	mov.w	r3, #768	; 0x300
 800123a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001250:	2307      	movs	r3, #7
 8001252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001256:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_UART_MspInit+0xbc>)
 800125e:	f002 f9d3 	bl	8003608 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	37b8      	adds	r7, #184	; 0xb8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40004800 	.word	0x40004800
 8001270:	40023800 	.word	0x40023800
 8001274:	40020c00 	.word	0x40020c00

08001278 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0ae      	sub	sp, #184	; 0xb8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2290      	movs	r2, #144	; 0x90
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f009 ffd5 	bl	800b248 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012a6:	d159      	bne.n	800135c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 f9d3 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012c4:	f7ff fe62 	bl	8000f8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <HAL_PCD_MspInit+0xec>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a25      	ldr	r2, [pc, #148]	; (8001364 <HAL_PCD_MspInit+0xec>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_PCD_MspInit+0xec>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 80012e0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012fa:	230a      	movs	r3, #10
 80012fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001304:	4619      	mov	r1, r3
 8001306:	4818      	ldr	r0, [pc, #96]	; (8001368 <HAL_PCD_MspInit+0xf0>)
 8001308:	f002 f97e 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800130c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001324:	4619      	mov	r1, r3
 8001326:	4810      	ldr	r0, [pc, #64]	; (8001368 <HAL_PCD_MspInit+0xf0>)
 8001328:	f002 f96e 	bl	8003608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <HAL_PCD_MspInit+0xec>)
 800132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001330:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <HAL_PCD_MspInit+0xec>)
 8001332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001336:	6353      	str	r3, [r2, #52]	; 0x34
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_PCD_MspInit+0xec>)
 800133a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <HAL_PCD_MspInit+0xec>)
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_PCD_MspInit+0xec>)
 800134a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134e:	6453      	str	r3, [r2, #68]	; 0x44
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <HAL_PCD_MspInit+0xec>)
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	37b8      	adds	r7, #184	; 0xb8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800
 8001368:	40020000 	.word	0x40020000

0800136c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	; 0x30
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <HAL_InitTick+0xd0>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	4a2e      	ldr	r2, [pc, #184]	; (800143c <HAL_InitTick+0xd0>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	6453      	str	r3, [r2, #68]	; 0x44
 8001388:	4b2c      	ldr	r3, [pc, #176]	; (800143c <HAL_InitTick+0xd0>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001394:	f107 020c 	add.w	r2, r7, #12
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 f92e 	bl	8004600 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80013a4:	f003 f918 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 80013a8:	4603      	mov	r3, r0
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <HAL_InitTick+0xd4>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0c9b      	lsrs	r3, r3, #18
 80013b8:	3b01      	subs	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <HAL_InitTick+0xd8>)
 80013be:	4a22      	ldr	r2, [pc, #136]	; (8001448 <HAL_InitTick+0xdc>)
 80013c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_InitTick+0xd8>)
 80013c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c8:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 80013ca:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <HAL_InitTick+0xd8>)
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_InitTick+0xd8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_InitTick+0xd8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_InitTick+0xd8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim8);
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <HAL_InitTick+0xd8>)
 80013e4:	f003 fd66 	bl	8004eb4 <HAL_TIM_Base_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d11b      	bne.n	800142e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 80013f6:	4813      	ldr	r0, [pc, #76]	; (8001444 <HAL_InitTick+0xd8>)
 80013f8:	f003 fdb4 	bl	8004f64 <HAL_TIM_Base_Start_IT>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001406:	2b00      	cmp	r3, #0
 8001408:	d111      	bne.n	800142e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800140a:	202c      	movs	r0, #44	; 0x2c
 800140c:	f002 f8ee 	bl	80035ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	d808      	bhi.n	8001428 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8001416:	2200      	movs	r2, #0
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	202c      	movs	r0, #44	; 0x2c
 800141c:	f002 f8ca 	bl	80035b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_InitTick+0xe0>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e002      	b.n	800142e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800142e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001432:	4618      	mov	r0, r3
 8001434:	3730      	adds	r7, #48	; 0x30
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	431bde83 	.word	0x431bde83
 8001444:	20001f54 	.word	0x20001f54
 8001448:	40010400 	.word	0x40010400
 800144c:	20000010 	.word	0x20000010

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
#if (FREERTOS_PROFILER == 1)
  ulHighFrequencyTimerTicks++;
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	4a03      	ldr	r2, [pc, #12]	; (8001494 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001488:	6013      	str	r3, [r2, #0]
#endif
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800148a:	4803      	ldr	r0, [pc, #12]	; (8001498 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800148c:	f003 ff3e 	bl	800530c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20001f48 	.word	0x20001f48
 8001498:	2000012c 	.word	0x2000012c

0800149c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80014a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014a4:	f002 faa8 	bl	80039f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80014b2:	f003 ff2b 	bl	800530c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80014b6:	4803      	ldr	r0, [pc, #12]	; (80014c4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80014b8:	f003 ff28 	bl	800530c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20001f54 	.word	0x20001f54
 80014c4:	20000178 	.word	0x20000178

080014c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <SystemInit+0x20>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <SystemInit+0x20>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f2:	490e      	ldr	r1, [pc, #56]	; (800152c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001508:	4c0b      	ldr	r4, [pc, #44]	; (8001538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001516:	f7ff ffd7 	bl	80014c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151a:	f009 fe47 	bl	800b1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff f819 	bl	8000554 <main>
  bx  lr    
 8001522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001524:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001530:	0800cbdc 	.word	0x0800cbdc
  ldr r2, =_sbss
 8001534:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001538:	2000f110 	.word	0x2000f110

0800153c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC_IRQHandler>

0800153e <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f007 fb2c 	bl	8008ba4 <uxQueueGetQueueNumber>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f007 fb3a 	bl	8008bd8 <ucQueueGetQueueType>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f008 fc1a 	bl	8009db0 <uxTaskGetTaskNumber>
 800157c:	4603      	mov	r3, r0
 800157e:	b29b      	uxth	r3, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f008 fc0d 	bl	8009db0 <uxTaskGetTaskNumber>
 8001596:	4603      	mov	r3, r0
 8001598:	0c1b      	lsrs	r3, r3, #16
 800159a:	b29b      	uxth	r3, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f008 fbfd 	bl	8009db0 <uxTaskGetTaskNumber>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <prvTraceSetTaskNumberLow16+0x2c>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	887a      	ldrh	r2, [r7, #2]
 80015be:	4313      	orrs	r3, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f008 fc0a 	bl	8009ddc <vTaskSetTaskNumber>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	ffff0000 	.word	0xffff0000

080015d4 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f008 fbe5 	bl	8009db0 <uxTaskGetTaskNumber>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	041b      	lsls	r3, r3, #16
 80015ee:	4313      	orrs	r3, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f008 fbf2 	bl	8009ddc <vTaskSetTaskNumber>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff98 	bl	800153e <prvTraceGetQueueNumber>
 800160e:	4603      	mov	r3, r0
 8001610:	b29b      	uxth	r3, r3
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff8b 	bl	800153e <prvTraceGetQueueNumber>
 8001628:	4603      	mov	r3, r0
 800162a:	0c1b      	lsrs	r3, r3, #16
 800162c:	b29b      	uxth	r3, r3
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff7a 	bl	800153e <prvTraceGetQueueNumber>
 800164a:	4602      	mov	r2, r0
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <prvTraceSetQueueNumberLow16+0x2c>)
 800164e:	4013      	ands	r3, r2
 8001650:	887a      	ldrh	r2, [r7, #2]
 8001652:	4313      	orrs	r3, r2
 8001654:	4619      	mov	r1, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f007 fab0 	bl	8008bbc <vQueueSetQueueNumber>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	ffff0000 	.word	0xffff0000

08001668 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff62 	bl	800153e <prvTraceGetQueueNumber>
 800167a:	4603      	mov	r3, r0
 800167c:	b29a      	uxth	r2, r3
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	4313      	orrs	r3, r2
 8001684:	4619      	mov	r1, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f007 fa98 	bl	8008bbc <vQueueSetQueueNumber>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8001698:	f008 fc90 	bl	8009fbc <xTaskGetCurrentTaskHandle>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80016a8:	4b64      	ldr	r3, [pc, #400]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2209      	movs	r2, #9
 80016ae:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 80016b0:	4b62      	ldr	r3, [pc, #392]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	220a      	movs	r2, #10
 80016b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 80016ba:	4b60      	ldr	r3, [pc, #384]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	220a      	movs	r2, #10
 80016c0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 80016c4:	4b5d      	ldr	r3, [pc, #372]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	220a      	movs	r2, #10
 80016ca:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 80016ce:	4b5b      	ldr	r3, [pc, #364]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	220f      	movs	r2, #15
 80016d4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 80016d8:	4b58      	ldr	r3, [pc, #352]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2205      	movs	r2, #5
 80016de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 80016e2:	4b56      	ldr	r3, [pc, #344]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2205      	movs	r2, #5
 80016e8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80016ec:	4b53      	ldr	r3, [pc, #332]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2205      	movs	r2, #5
 80016f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 80016f6:	4b51      	ldr	r3, [pc, #324]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2205      	movs	r2, #5
 80016fc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8001700:	4b4e      	ldr	r3, [pc, #312]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2205      	movs	r2, #5
 8001706:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 800170a:	4b4c      	ldr	r3, [pc, #304]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	220f      	movs	r2, #15
 8001710:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	220f      	movs	r2, #15
 800171a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 800171e:	4b47      	ldr	r3, [pc, #284]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	220f      	movs	r2, #15
 8001724:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8001728:	4b44      	ldr	r3, [pc, #272]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	220f      	movs	r2, #15
 800172e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8001732:	4b42      	ldr	r3, [pc, #264]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	220f      	movs	r2, #15
 8001738:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	220f      	movs	r2, #15
 8001742:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8001746:	4b3d      	ldr	r3, [pc, #244]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	220f      	movs	r2, #15
 800174c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8001750:	4b3a      	ldr	r3, [pc, #232]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	220f      	movs	r2, #15
 8001756:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 800175a:	4b38      	ldr	r3, [pc, #224]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	220f      	movs	r2, #15
 8001760:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2210      	movs	r2, #16
 800176a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2210      	movs	r2, #16
 8001774:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2210      	movs	r2, #16
 800177e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2213      	movs	r2, #19
 8001788:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2211      	movs	r2, #17
 8001792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8001796:	4b29      	ldr	r3, [pc, #164]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2210      	movs	r2, #16
 800179c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2213      	movs	r2, #19
 80017a6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 80017aa:	4b24      	ldr	r3, [pc, #144]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2213      	movs	r2, #19
 80017b0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 80017b4:	4b21      	ldr	r3, [pc, #132]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2213      	movs	r2, #19
 80017ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 80017c8:	4b1c      	ldr	r3, [pc, #112]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	22a0      	movs	r2, #160	; 0xa0
 80017ce:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017da:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017e6:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f240 22fd 	movw	r2, #765	; 0x2fd
 80017f2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f240 3252 	movw	r2, #850	; 0x352
 80017fe:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f240 32a2 	movw	r2, #930	; 0x3a2
 800180a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f240 4201 	movw	r2, #1025	; 0x401
 8001816:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001822:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <vTraceInitObjectPropertyTable+0x198>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800182e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000a6d4 	.word	0x2000a6d4

08001840 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 8001846:	2200      	movs	r2, #0
 8001848:	825a      	strh	r2, [r3, #18]
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 800184c:	8a5a      	ldrh	r2, [r3, #18]
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 8001850:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 8001854:	220a      	movs	r2, #10
 8001856:	829a      	strh	r2, [r3, #20]
 8001858:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 800185a:	8a9a      	ldrh	r2, [r3, #20]
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 800185e:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 8001862:	2214      	movs	r2, #20
 8001864:	82da      	strh	r2, [r3, #22]
 8001866:	4b27      	ldr	r3, [pc, #156]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 8001868:	8ada      	ldrh	r2, [r3, #22]
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 800186c:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 8001870:	221e      	movs	r2, #30
 8001872:	831a      	strh	r2, [r3, #24]
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 8001876:	8b1a      	ldrh	r2, [r3, #24]
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 800187a:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 800187e:	222d      	movs	r2, #45	; 0x2d
 8001880:	835a      	strh	r2, [r3, #26]
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 8001884:	8b5a      	ldrh	r2, [r3, #26]
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 8001888:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 800188c:	2232      	movs	r2, #50	; 0x32
 800188e:	839a      	strh	r2, [r3, #28]
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 8001892:	8b9a      	ldrh	r2, [r3, #28]
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 8001896:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 800189a:	2237      	movs	r2, #55	; 0x37
 800189c:	83da      	strh	r2, [r3, #30]
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018a0:	8bda      	ldrh	r2, [r3, #30]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018a4:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018a8:	223c      	movs	r2, #60	; 0x3c
 80018aa:	841a      	strh	r2, [r3, #32]
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018ae:	8c1a      	ldrh	r2, [r3, #32]
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018b2:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018b6:	2241      	movs	r2, #65	; 0x41
 80018b8:	845a      	strh	r2, [r3, #34]	; 0x22
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018bc:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018c0:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018c4:	2209      	movs	r2, #9
 80018c6:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018ca:	2213      	movs	r2, #19
 80018cc:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018d0:	221d      	movs	r2, #29
 80018d2:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018d6:	222c      	movs	r2, #44	; 0x2c
 80018d8:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018dc:	2231      	movs	r2, #49	; 0x31
 80018de:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018e2:	2236      	movs	r2, #54	; 0x36
 80018e4:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018e8:	223b      	movs	r2, #59	; 0x3b
 80018ea:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018ee:	2240      	movs	r2, #64	; 0x40
 80018f0:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <vTraceInitObjectHandleStack+0xc4>)
 80018f4:	2245      	movs	r2, #69	; 0x45
 80018f6:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20001fc8 	.word	0x20001fc8

08001908 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b08      	cmp	r3, #8
 8001916:	d827      	bhi.n	8001968 <pszTraceGetErrorNotEnoughHandles+0x60>
 8001918:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <pszTraceGetErrorNotEnoughHandles+0x18>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	08001955 	.word	0x08001955
 8001924:	0800194d 	.word	0x0800194d
 8001928:	08001951 	.word	0x08001951
 800192c:	08001945 	.word	0x08001945
 8001930:	08001949 	.word	0x08001949
 8001934:	08001959 	.word	0x08001959
 8001938:	0800195d 	.word	0x0800195d
 800193c:	08001961 	.word	0x08001961
 8001940:	08001965 	.word	0x08001965
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8001946:	e010      	b.n	800196a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <pszTraceGetErrorNotEnoughHandles+0x74>)
 800194a:	e00e      	b.n	800196a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <pszTraceGetErrorNotEnoughHandles+0x78>)
 800194e:	e00c      	b.n	800196a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8001952:	e00a      	b.n	800196a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <pszTraceGetErrorNotEnoughHandles+0x80>)
 8001956:	e008      	b.n	800196a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <pszTraceGetErrorNotEnoughHandles+0x84>)
 800195a:	e006      	b.n	800196a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <pszTraceGetErrorNotEnoughHandles+0x88>)
 800195e:	e004      	b.n	800196a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8001962:	e002      	b.n	800196a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <pszTraceGetErrorNotEnoughHandles+0x90>)
 8001966:	e000      	b.n	800196a <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	0800b5b8 	.word	0x0800b5b8
 800197c:	0800b600 	.word	0x0800b600
 8001980:	0800b648 	.word	0x0800b648
 8001984:	0800b69c 	.word	0x0800b69c
 8001988:	0800b6e8 	.word	0x0800b6e8
 800198c:	0800b734 	.word	0x0800b734
 8001990:	0800b780 	.word	0x0800b780
 8001994:	0800b7d4 	.word	0x0800b7d4
 8001998:	0800b82c 	.word	0x0800b82c
 800199c:	0800b888 	.word	0x0800b888

080019a0 <vTraceEnable>:
* 
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
 80019a8:	f000 fc70 	bl	800228c <prvTraceInitTraceData>
	
	if (startOption == TRC_START)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d102      	bne.n	80019b8 <vTraceEnable+0x18>
	{
		vTraceStart();
 80019b2:	f000 f887 	bl	8001ac4 <vTraceStart>
	}
	else if (startOption != TRC_INIT)
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
	}	
}
 80019b6:	e00c      	b.n	80019d2 <vTraceEnable+0x32>
	else if (startOption == TRC_START_AWAIT_HOST)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d103      	bne.n	80019c6 <vTraceEnable+0x26>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <vTraceEnable+0x3c>)
 80019c0:	f000 ff46 	bl	8002850 <prvTraceError>
}
 80019c4:	e005      	b.n	80019d2 <vTraceEnable+0x32>
	else if (startOption != TRC_INIT)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <vTraceEnable+0x32>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <vTraceEnable+0x40>)
 80019ce:	f000 ff3f 	bl	8002850 <prvTraceError>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	0800b8b8 	.word	0x0800b8b8
 80019e0:	0800b8f8 	.word	0x0800b8f8

080019e4 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <uiTraceStart+0xcc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10a      	bne.n	8001a0c <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <uiTraceStart+0xcc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d104      	bne.n	8001a08 <uiTraceStart+0x24>
 80019fe:	482d      	ldr	r0, [pc, #180]	; (8001ab4 <uiTraceStart+0xd0>)
 8001a00:	f000 ff26 	bl	8002850 <prvTraceError>
 8001a04:	2300      	movs	r3, #0
 8001a06:	e04e      	b.n	8001aa6 <uiTraceStart+0xc2>
		return 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e04c      	b.n	8001aa6 <uiTraceStart+0xc2>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <uiTraceStart+0xcc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <uiTraceStart+0x36>
		return 1; /* Already running */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e045      	b.n	8001aa6 <uiTraceStart+0xc2>

	if (traceErrorMessage == NULL)
 8001a1a:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <uiTraceStart+0xd4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d13e      	bne.n	8001aa0 <uiTraceStart+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a22:	f3ef 8310 	mrs	r3, PRIMASK
 8001a26:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a28:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f383 8810 	msr	PRIMASK, r3
}
 8001a36:	bf00      	nop
 8001a38:	4b20      	ldr	r3, [pc, #128]	; (8001abc <uiTraceStart+0xd8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a1f      	ldr	r2, [pc, #124]	; (8001abc <uiTraceStart+0xd8>)
 8001a40:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <uiTraceStart+0xcc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8001a4a:	f7ff fe23 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fd8c 	bl	800156e <prvTraceGetTaskNumberLow16>
 8001a56:	4603      	mov	r3, r0
 8001a58:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d110      	bne.n	8001a82 <uiTraceStart+0x9e>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 fda5 	bl	80025b0 <prvTraceGetObjectHandle>
 8001a66:	4603      	mov	r3, r0
 8001a68:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <uiTraceStart+0xdc>)
 8001a6e:	4619      	mov	r1, r3
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 fe8f 	bl	8002794 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f000 fae9 	bl	8002054 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fa73 	bl	8001f70 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <uiTraceStart+0xd8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <uiTraceStart+0xd8>)
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f383 8810 	msr	PRIMASK, r3
}
 8001a9e:	bf00      	nop
	}

	return RecorderDataPtr->recorderActive;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <uiTraceStart+0xcc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000a6d4 	.word	0x2000a6d4
 8001ab4:	0800b92c 	.word	0x0800b92c
 8001ab8:	20001fb8 	.word	0x20001fb8
 8001abc:	20001fb0 	.word	0x20001fb0
 8001ac0:	0800b970 	.word	0x0800b970

08001ac4 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 8001ac8:	f7ff ff8c 	bl	80019e4 <uiTraceStart>
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <vTraceStop+0x28>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <vTraceStop+0x28>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <vTraceStop+0x2c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <vTraceStop+0x2c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4798      	blx	r3
	}
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000a6d4 	.word	0x2000a6d4
 8001afc:	20001fc0 	.word	0x20001fc0

08001b00 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08e      	sub	sp, #56	; 0x38
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 8001b0c:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <vTraceStoreMemMangEvent+0x110>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d078      	beq.n	8001c06 <vTraceStoreMemMangEvent+0x106>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	da03      	bge.n	8001b22 <vTraceStoreMemMangEvent+0x22>
		size = (uint32_t)(- signed_size);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	425b      	negs	r3, r3
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b20:	e001      	b.n	8001b26 <vTraceStoreMemMangEvent+0x26>
	else
		size = (uint32_t)(signed_size);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b26:	f3ef 8310 	mrs	r3, PRIMASK
 8001b2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8001b2c:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b30:	2301      	movs	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f383 8810 	msr	PRIMASK, r3
}
 8001b3a:	bf00      	nop
 8001b3c:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <vTraceStoreMemMangEvent+0x114>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	4a34      	ldr	r2, [pc, #208]	; (8001c14 <vTraceStoreMemMangEvent+0x114>)
 8001b44:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
 8001b4c:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <vTraceStoreMemMangEvent+0x118>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a30      	ldr	r2, [pc, #192]	; (8001c18 <vTraceStoreMemMangEvent+0x118>)
 8001b56:	6013      	str	r3, [r2, #0]
	
	if (RecorderDataPtr->recorderActive)
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <vTraceStoreMemMangEvent+0x110>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d046      	beq.n	8001bf0 <vTraceStoreMemMangEvent+0xf0>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8001b62:	20ff      	movs	r0, #255	; 0xff
 8001b64:	f000 ff52 	bl	8002a0c <prvTraceGetDTS>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8001b6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b70:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b74:	f000 f95a 	bl	8001e2c <prvTraceGetParam>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8001b7c:	f000 fc9c 	bl	80024b8 <prvTraceNextFreeEventBufferSlot>
 8001b80:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d033      	beq.n	8001bf0 <vTraceStoreMemMangEvent+0xf0>
		{
			ms->dts = dts1;
 8001b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001b8e:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001b9a:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001b9c:	f000 ff0e 	bl	80029bc <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ba6:	f000 f941 	bl	8001e2c <prvTraceGetParam>
 8001baa:	4603      	mov	r3, r0
 8001bac:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8001bb4:	f000 fc80 	bl	80024b8 <prvTraceNextFreeEventBufferSlot>
 8001bb8:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d017      	beq.n	8001bf0 <vTraceStoreMemMangEvent+0xf0>
			{
				ma->addr_low = addr_low;
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001bc4:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001bcc:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
 8001be2:	f000 feeb 	bl	80029bc <prvTraceUpdateCounters>
				RecorderDataPtr->heapMemUsage = heapMemUsage;
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <vTraceStoreMemMangEvent+0x110>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <vTraceStoreMemMangEvent+0x118>)
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <vTraceStoreMemMangEvent+0x114>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <vTraceStoreMemMangEvent+0x114>)
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f383 8810 	msr	PRIMASK, r3
}
 8001c04:	e000      	b.n	8001c08 <vTraceStoreMemMangEvent+0x108>
		return;
 8001c06:	bf00      	nop
}
 8001c08:	3738      	adds	r7, #56	; 0x38
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000a6d4 	.word	0x2000a6d4
 8001c14:	20001fb0 	.word	0x20001fb0
 8001c18:	20001fc4 	.word	0x20001fc4

08001c1c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	460b      	mov	r3, r1
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2bfe      	cmp	r3, #254	; 0xfe
 8001c2e:	d903      	bls.n	8001c38 <prvTraceStoreKernelCall+0x1c>
 8001c30:	4832      	ldr	r0, [pc, #200]	; (8001cfc <prvTraceStoreKernelCall+0xe0>)
 8001c32:	f000 fe0d 	bl	8002850 <prvTraceError>
 8001c36:	e05d      	b.n	8001cf4 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8001c38:	7afb      	ldrb	r3, [r7, #11]
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d903      	bls.n	8001c46 <prvTraceStoreKernelCall+0x2a>
 8001c3e:	4830      	ldr	r0, [pc, #192]	; (8001d00 <prvTraceStoreKernelCall+0xe4>)
 8001c40:	f000 fe06 	bl	8002850 <prvTraceError>
 8001c44:	e056      	b.n	8001cf4 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 8001c46:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <prvTraceStoreKernelCall+0xe8>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	7afb      	ldrb	r3, [r7, #11]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001c52:	461a      	mov	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d903      	bls.n	8001c62 <prvTraceStoreKernelCall+0x46>
 8001c5a:	482b      	ldr	r0, [pc, #172]	; (8001d08 <prvTraceStoreKernelCall+0xec>)
 8001c5c:	f000 fdf8 	bl	8002850 <prvTraceError>
 8001c60:	e048      	b.n	8001cf4 <prvTraceStoreKernelCall+0xd8>

	if (recorder_busy)
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <prvTraceStoreKernelCall+0xf0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8001c6a:	4829      	ldr	r0, [pc, #164]	; (8001d10 <prvTraceStoreKernelCall+0xf4>)
 8001c6c:	f000 fdf0 	bl	8002850 <prvTraceError>
		return;
 8001c70:	e040      	b.n	8001cf4 <prvTraceStoreKernelCall+0xd8>
	}

	if (handle_of_last_logged_task == 0)
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <prvTraceStoreKernelCall+0xf8>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03b      	beq.n	8001cf2 <prvTraceStoreKernelCall+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c7e:	617b      	str	r3, [r7, #20]
  return(result);
 8001c80:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	2301      	movs	r3, #1
 8001c86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f383 8810 	msr	PRIMASK, r3
}
 8001c8e:	bf00      	nop
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <prvTraceStoreKernelCall+0xf0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <prvTraceStoreKernelCall+0xf0>)
 8001c98:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <prvTraceStoreKernelCall+0xe8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01b      	beq.n	8001cdc <prvTraceStoreKernelCall+0xc0>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001ca4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ca8:	f000 feb0 	bl	8002a0c <prvTraceGetDTS>
 8001cac:	4603      	mov	r3, r0
 8001cae:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8001cb6:	f000 fbff 	bl	80024b8 <prvTraceNextFreeEventBufferSlot>
 8001cba:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00c      	beq.n	8001cdc <prvTraceStoreKernelCall+0xc0>
		{
			kse->dts = dts1;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001cc6:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001cd6:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8001cd8:	f000 fe70 	bl	80029bc <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <prvTraceStoreKernelCall+0xf0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <prvTraceStoreKernelCall+0xf0>)
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	f383 8810 	msr	PRIMASK, r3
}
 8001cf0:	e000      	b.n	8001cf4 <prvTraceStoreKernelCall+0xd8>
		return;
 8001cf2:	bf00      	nop
}
 8001cf4:	3728      	adds	r7, #40	; 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	0800bd50 	.word	0x0800bd50
 8001d00:	0800bd88 	.word	0x0800bd88
 8001d04:	2000a6d4 	.word	0x2000a6d4
 8001d08:	0800bdd0 	.word	0x0800bdd0
 8001d0c:	20001fb0 	.word	0x20001fb0
 8001d10:	0800be18 	.word	0x0800be18
 8001d14:	20001fbc 	.word	0x20001fbc

08001d18 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	460b      	mov	r3, r1
 8001d26:	72fb      	strb	r3, [r7, #11]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2bfe      	cmp	r3, #254	; 0xfe
 8001d2c:	d903      	bls.n	8001d36 <prvTraceStoreKernelCallWithParam+0x1e>
 8001d2e:	4838      	ldr	r0, [pc, #224]	; (8001e10 <prvTraceStoreKernelCallWithParam+0xf8>)
 8001d30:	f000 fd8e 	bl	8002850 <prvTraceError>
 8001d34:	e068      	b.n	8001e08 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d903      	bls.n	8001d44 <prvTraceStoreKernelCallWithParam+0x2c>
 8001d3c:	4835      	ldr	r0, [pc, #212]	; (8001e14 <prvTraceStoreKernelCallWithParam+0xfc>)
 8001d3e:	f000 fd87 	bl	8002850 <prvTraceError>
 8001d42:	e061      	b.n	8001e08 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <prvTraceStoreKernelCallWithParam+0x100>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	7afb      	ldrb	r3, [r7, #11]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d903      	bls.n	8001d60 <prvTraceStoreKernelCallWithParam+0x48>
 8001d58:	4830      	ldr	r0, [pc, #192]	; (8001e1c <prvTraceStoreKernelCallWithParam+0x104>)
 8001d5a:	f000 fd79 	bl	8002850 <prvTraceError>
 8001d5e:	e053      	b.n	8001e08 <prvTraceStoreKernelCallWithParam+0xf0>

	if (recorder_busy)
 8001d60:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <prvTraceStoreKernelCallWithParam+0x108>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <prvTraceStoreKernelCallWithParam+0x58>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8001d68:	482e      	ldr	r0, [pc, #184]	; (8001e24 <prvTraceStoreKernelCallWithParam+0x10c>)
 8001d6a:	f000 fd71 	bl	8002850 <prvTraceError>
		return;
 8001d6e:	e04b      	b.n	8001e08 <prvTraceStoreKernelCallWithParam+0xf0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d70:	f3ef 8310 	mrs	r3, PRIMASK
 8001d74:	617b      	str	r3, [r7, #20]
  return(result);
 8001d76:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f383 8810 	msr	PRIMASK, r3
}
 8001d84:	bf00      	nop
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <prvTraceStoreKernelCallWithParam+0x108>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	4a24      	ldr	r2, [pc, #144]	; (8001e20 <prvTraceStoreKernelCallWithParam+0x108>)
 8001d8e:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <prvTraceStoreKernelCallWithParam+0x100>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d02b      	beq.n	8001df2 <prvTraceStoreKernelCallWithParam+0xda>
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <prvTraceStoreKernelCallWithParam+0x110>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d027      	beq.n	8001df2 <prvTraceStoreKernelCallWithParam+0xda>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8001da2:	20ff      	movs	r0, #255	; 0xff
 8001da4:	f000 fe32 	bl	8002a0c <prvTraceGetDTS>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8001dae:	6839      	ldr	r1, [r7, #0]
 8001db0:	20ff      	movs	r0, #255	; 0xff
 8001db2:	f000 f83b 	bl	8001e2c <prvTraceGetParam>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8001dc2:	f000 fb79 	bl	80024b8 <prvTraceNextFreeEventBufferSlot>
 8001dc6:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d011      	beq.n	8001df2 <prvTraceStoreKernelCallWithParam+0xda>
		{
			kse->dts = dts2;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001dd4:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001de4:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001dec:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001dee:	f000 fde5 	bl	80029bc <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <prvTraceStoreKernelCallWithParam+0x108>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <prvTraceStoreKernelCallWithParam+0x108>)
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f383 8810 	msr	PRIMASK, r3
}
 8001e06:	bf00      	nop
}
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	0800be50 	.word	0x0800be50
 8001e14:	0800be90 	.word	0x0800be90
 8001e18:	2000a6d4 	.word	0x2000a6d4
 8001e1c:	0800bee0 	.word	0x0800bee0
 8001e20:	20001fb0 	.word	0x20001fb0
 8001e24:	0800bf30 	.word	0x0800bf30
 8001e28:	20001fbc 	.word	0x20001fbc

08001e2c <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2bff      	cmp	r3, #255	; 0xff
 8001e3a:	d009      	beq.n	8001e50 <prvTraceGetParam+0x24>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d004      	beq.n	8001e50 <prvTraceGetParam+0x24>
 8001e46:	4816      	ldr	r0, [pc, #88]	; (8001ea0 <prvTraceGetParam+0x74>)
 8001e48:	f000 fd02 	bl	8002850 <prvTraceError>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	e023      	b.n	8001e98 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d801      	bhi.n	8001e5c <prvTraceGetParam+0x30>
	{
		return param;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	e01d      	b.n	8001e98 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8001e5c:	f000 fb2c 	bl	80024b8 <prvTraceNextFreeEventBufferSlot>
 8001e60:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d014      	beq.n	8001e92 <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	43da      	mvns	r2, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	4013      	ands	r3, r2
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	43da      	mvns	r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	4013      	ands	r3, r2
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001e8e:	f000 fd95 	bl	80029bc <prvTraceUpdateCounters>
		}

		return param & param_max;
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4013      	ands	r3, r2
	}
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	0800bf68 	.word	0x0800bf68

08001ea4 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2bfe      	cmp	r3, #254	; 0xfe
 8001eb6:	d903      	bls.n	8001ec0 <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 8001eb8:	4828      	ldr	r0, [pc, #160]	; (8001f5c <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8001eba:	f000 fcc9 	bl	8002850 <prvTraceError>
 8001ebe:	e049      	b.n	8001f54 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>

	if (recorder_busy)
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8001ec8:	4826      	ldr	r0, [pc, #152]	; (8001f64 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8001eca:	f000 fcc1 	bl	8002850 <prvTraceError>
		return;
 8001ece:	e041      	b.n	8001f54 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ed4:	613b      	str	r3, [r7, #16]
  return(result);
 8001ed6:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001ed8:	623b      	str	r3, [r7, #32]
 8001eda:	2301      	movs	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f383 8810 	msr	PRIMASK, r3
}
 8001ee4:	bf00      	nop
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8001eee:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d021      	beq.n	8001f3e <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01d      	beq.n	8001f3e <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8001f02:	20ff      	movs	r0, #255	; 0xff
 8001f04:	f000 fd82 	bl	8002a0c <prvTraceGetDTS>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8001f0c:	6839      	ldr	r1, [r7, #0]
 8001f0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f12:	f7ff ff8b 	bl	8001e2c <prvTraceGetParam>
 8001f16:	4603      	mov	r3, r0
 8001f18:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8001f1a:	f000 facd 	bl	80024b8 <prvTraceNextFreeEventBufferSlot>
 8001f1e:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
		{
			kse->dts = dts6;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	7ffa      	ldrb	r2, [r7, #31]
 8001f2a:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f38:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001f3a:	f000 fd3f 	bl	80029bc <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f383 8810 	msr	PRIMASK, r3
}
 8001f52:	bf00      	nop
}
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	0800bfa4 	.word	0x0800bfa4
 8001f60:	20001fb0 	.word	0x20001fb0
 8001f64:	0800bffc 	.word	0x0800bffc
 8001f68:	2000a6d4 	.word	0x2000a6d4
 8001f6c:	20001fbc 	.word	0x20001fbc

08001f70 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2b0f      	cmp	r3, #15
 8001f7e:	d903      	bls.n	8001f88 <prvTraceStoreTaskswitch+0x18>
 8001f80:	482f      	ldr	r0, [pc, #188]	; (8002040 <prvTraceStoreTaskswitch+0xd0>)
 8001f82:	f000 fc65 	bl	8002850 <prvTraceError>
 8001f86:	e058      	b.n	800203a <prvTraceStoreTaskswitch+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f88:	f3ef 8310 	mrs	r3, PRIMASK
 8001f8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	2301      	movs	r3, #1
 8001f94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f383 8810 	msr	PRIMASK, r3
}
 8001f9c:	bf00      	nop
 8001f9e:	4b29      	ldr	r3, [pc, #164]	; (8002044 <prvTraceStoreTaskswitch+0xd4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	4a27      	ldr	r2, [pc, #156]	; (8002044 <prvTraceStoreTaskswitch+0xd4>)
 8001fa6:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <prvTraceStoreTaskswitch+0xd8>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	79fa      	ldrb	r2, [r7, #7]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d038      	beq.n	8002024 <prvTraceStoreTaskswitch+0xb4>
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <prvTraceStoreTaskswitch+0xdc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d033      	beq.n	8002024 <prvTraceStoreTaskswitch+0xb4>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <prvTraceStoreTaskswitch+0xe0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001fc2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fc6:	f000 fd21 	bl	8002a0c <prvTraceGetDTS>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8001fce:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <prvTraceStoreTaskswitch+0xd8>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <prvTraceStoreTaskswitch+0xd8>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8001fda:	f000 fa6d 	bl	80024b8 <prvTraceNextFreeEventBufferSlot>
 8001fde:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01e      	beq.n	8002024 <prvTraceStoreTaskswitch+0xb4>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <prvTraceStoreTaskswitch+0xd8>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4619      	mov	r1, r3
 8001fec:	2003      	movs	r0, #3
 8001fee:	f000 f8e7 	bl	80021c0 <prvTraceGetObjectState>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d103      	bne.n	8002000 <prvTraceStoreTaskswitch+0x90>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e002      	b.n	8002006 <prvTraceStoreTaskswitch+0x96>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2206      	movs	r2, #6
 8002004:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	8b7a      	ldrh	r2, [r7, #26]
 800200a:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	7e7a      	ldrb	r2, [r7, #25]
 8002010:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <prvTraceStoreTaskswitch+0xd8>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	4619      	mov	r1, r3
 800201a:	2003      	movs	r0, #3
 800201c:	f000 f894 	bl	8002148 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8002020:	f000 fccc 	bl	80029bc <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <prvTraceStoreTaskswitch+0xd4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3b01      	subs	r3, #1
 800202a:	4a06      	ldr	r2, [pc, #24]	; (8002044 <prvTraceStoreTaskswitch+0xd4>)
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f383 8810 	msr	PRIMASK, r3
}
 8002038:	bf00      	nop
}
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	0800c034 	.word	0x0800c034
 8002044:	20001fb0 	.word	0x20001fb0
 8002048:	20001fbc 	.word	0x20001fbc
 800204c:	2000a6d4 	.word	0x2000a6d4
 8002050:	20001fa0 	.word	0x20001fa0

08002054 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
 800205e:	460b      	mov	r3, r1
 8002060:	71bb      	strb	r3, [r7, #6]
 8002062:	4613      	mov	r3, r2
 8002064:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d903      	bls.n	8002074 <prvTraceSetPriorityProperty+0x20>
 800206c:	4814      	ldr	r0, [pc, #80]	; (80020c0 <prvTraceSetPriorityProperty+0x6c>)
 800206e:	f000 fbef 	bl	8002850 <prvTraceError>
 8002072:	e022      	b.n	80020ba <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <prvTraceSetPriorityProperty+0x70>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	4413      	add	r3, r2
 800207c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002080:	79ba      	ldrb	r2, [r7, #6]
 8002082:	429a      	cmp	r2, r3
 8002084:	d903      	bls.n	800208e <prvTraceSetPriorityProperty+0x3a>
 8002086:	4810      	ldr	r0, [pc, #64]	; (80020c8 <prvTraceSetPriorityProperty+0x74>)
 8002088:	f000 fbe2 	bl	8002850 <prvTraceError>
 800208c:	e015      	b.n	80020ba <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <prvTraceSetPriorityProperty+0x70>)
 8002090:	681c      	ldr	r4, [r3, #0]
 8002092:	79fa      	ldrb	r2, [r7, #7]
 8002094:	79bb      	ldrb	r3, [r7, #6]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fa31 	bl	8002500 <uiIndexOfObject>
 800209e:	4603      	mov	r3, r0
 80020a0:	4619      	mov	r1, r3
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <prvTraceSetPriorityProperty+0x70>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	4413      	add	r3, r2
 80020aa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80020ae:	440b      	add	r3, r1
 80020b0:	3301      	adds	r3, #1
 80020b2:	4423      	add	r3, r4
 80020b4:	797a      	ldrb	r2, [r7, #5]
 80020b6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd90      	pop	{r4, r7, pc}
 80020c0:	0800c1c8 	.word	0x0800c1c8
 80020c4:	2000a6d4 	.word	0x2000a6d4
 80020c8:	0800c214 	.word	0x0800c214

080020cc <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	460a      	mov	r2, r1
 80020d6:	71fb      	strb	r3, [r7, #7]
 80020d8:	4613      	mov	r3, r2
 80020da:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d904      	bls.n	80020ec <prvTraceGetPriorityProperty+0x20>
 80020e2:	4816      	ldr	r0, [pc, #88]	; (800213c <prvTraceGetPriorityProperty+0x70>)
 80020e4:	f000 fbb4 	bl	8002850 <prvTraceError>
 80020e8:	2300      	movs	r3, #0
 80020ea:	e022      	b.n	8002132 <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <prvTraceGetPriorityProperty+0x74>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	4413      	add	r3, r2
 80020f4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80020f8:	79ba      	ldrb	r2, [r7, #6]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d904      	bls.n	8002108 <prvTraceGetPriorityProperty+0x3c>
 80020fe:	4811      	ldr	r0, [pc, #68]	; (8002144 <prvTraceGetPriorityProperty+0x78>)
 8002100:	f000 fba6 	bl	8002850 <prvTraceError>
 8002104:	2300      	movs	r3, #0
 8002106:	e014      	b.n	8002132 <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <prvTraceGetPriorityProperty+0x74>)
 800210a:	681c      	ldr	r4, [r3, #0]
 800210c:	79fa      	ldrb	r2, [r7, #7]
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f9f4 	bl	8002500 <uiIndexOfObject>
 8002118:	4603      	mov	r3, r0
 800211a:	4619      	mov	r1, r3
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <prvTraceGetPriorityProperty+0x74>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	4413      	add	r3, r2
 8002124:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002128:	440b      	add	r3, r1
 800212a:	3301      	adds	r3, #1
 800212c:	4423      	add	r3, r4
 800212e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}
 800213a:	bf00      	nop
 800213c:	0800c254 	.word	0x0800c254
 8002140:	2000a6d4 	.word	0x2000a6d4
 8002144:	0800c2a0 	.word	0x0800c2a0

08002148 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	460b      	mov	r3, r1
 8002154:	71bb      	strb	r3, [r7, #6]
 8002156:	4613      	mov	r3, r2
 8002158:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d903      	bls.n	8002168 <prvTraceSetObjectState+0x20>
 8002160:	4814      	ldr	r0, [pc, #80]	; (80021b4 <prvTraceSetObjectState+0x6c>)
 8002162:	f000 fb75 	bl	8002850 <prvTraceError>
 8002166:	e021      	b.n	80021ac <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <prvTraceSetObjectState+0x70>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	4413      	add	r3, r2
 8002170:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002174:	79ba      	ldrb	r2, [r7, #6]
 8002176:	429a      	cmp	r2, r3
 8002178:	d903      	bls.n	8002182 <prvTraceSetObjectState+0x3a>
 800217a:	4810      	ldr	r0, [pc, #64]	; (80021bc <prvTraceSetObjectState+0x74>)
 800217c:	f000 fb68 	bl	8002850 <prvTraceError>
 8002180:	e014      	b.n	80021ac <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <prvTraceSetObjectState+0x70>)
 8002184:	681c      	ldr	r4, [r3, #0]
 8002186:	79fa      	ldrb	r2, [r7, #7]
 8002188:	79bb      	ldrb	r3, [r7, #6]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f9b7 	bl	8002500 <uiIndexOfObject>
 8002192:	4603      	mov	r3, r0
 8002194:	4619      	mov	r1, r3
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <prvTraceSetObjectState+0x70>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	4413      	add	r3, r2
 800219e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80021a2:	440b      	add	r3, r1
 80021a4:	4423      	add	r3, r4
 80021a6:	797a      	ldrb	r2, [r7, #5]
 80021a8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}
 80021b2:	bf00      	nop
 80021b4:	0800c2e0 	.word	0x0800c2e0
 80021b8:	2000a6d4 	.word	0x2000a6d4
 80021bc:	0800c324 	.word	0x0800c324

080021c0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	4613      	mov	r3, r2
 80021ce:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d904      	bls.n	80021e0 <prvTraceGetObjectState+0x20>
 80021d6:	4815      	ldr	r0, [pc, #84]	; (800222c <prvTraceGetObjectState+0x6c>)
 80021d8:	f000 fb3a 	bl	8002850 <prvTraceError>
 80021dc:	2300      	movs	r3, #0
 80021de:	e021      	b.n	8002224 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <prvTraceGetObjectState+0x70>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	4413      	add	r3, r2
 80021e8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80021ec:	79ba      	ldrb	r2, [r7, #6]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d904      	bls.n	80021fc <prvTraceGetObjectState+0x3c>
 80021f2:	4810      	ldr	r0, [pc, #64]	; (8002234 <prvTraceGetObjectState+0x74>)
 80021f4:	f000 fb2c 	bl	8002850 <prvTraceError>
 80021f8:	2300      	movs	r3, #0
 80021fa:	e013      	b.n	8002224 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <prvTraceGetObjectState+0x70>)
 80021fe:	681c      	ldr	r4, [r3, #0]
 8002200:	79fa      	ldrb	r2, [r7, #7]
 8002202:	79bb      	ldrb	r3, [r7, #6]
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f97a 	bl	8002500 <uiIndexOfObject>
 800220c:	4603      	mov	r3, r0
 800220e:	4619      	mov	r1, r3
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <prvTraceGetObjectState+0x70>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	4413      	add	r3, r2
 8002218:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800221c:	440b      	add	r3, r1
 800221e:	4423      	add	r3, r4
 8002220:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bd90      	pop	{r4, r7, pc}
 800222c:	0800c360 	.word	0x0800c360
 8002230:	2000a6d4 	.word	0x2000a6d4
 8002234:	0800c3a4 	.word	0x0800c3a4

08002238 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <prvTraceSetTaskInstanceFinished+0x4c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800224a:	79fa      	ldrb	r2, [r7, #7]
 800224c:	429a      	cmp	r2, r3
 800224e:	d903      	bls.n	8002258 <prvTraceSetTaskInstanceFinished+0x20>
 8002250:	480d      	ldr	r0, [pc, #52]	; (8002288 <prvTraceSetTaskInstanceFinished+0x50>)
 8002252:	f000 fafd 	bl	8002850 <prvTraceError>
 8002256:	e011      	b.n	800227c <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <prvTraceSetTaskInstanceFinished+0x4c>)
 800225a:	681c      	ldr	r4, [r3, #0]
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	2103      	movs	r1, #3
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f94d 	bl	8002500 <uiIndexOfObject>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <prvTraceSetTaskInstanceFinished+0x4c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002272:	4413      	add	r3, r2
 8002274:	4423      	add	r3, r4
 8002276:	2200      	movs	r2, #0
 8002278:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
#endif
}
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	bf00      	nop
 8002284:	2000a6d4 	.word	0x2000a6d4
 8002288:	0800c3e0 	.word	0x0800c3e0

0800228c <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
 8002290:	4b83      	ldr	r3, [pc, #524]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8002298:	4b81      	ldr	r3, [pc, #516]	; (80024a0 <prvTraceInitTraceData+0x214>)
 800229a:	4a82      	ldr	r2, [pc, #520]	; (80024a4 <prvTraceInitTraceData+0x218>)
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e006      	b.n	80022ae <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
 80022a0:	4b7f      	ldr	r3, [pc, #508]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	f000 80f6 	beq.w	800249a <prvTraceInitTraceData+0x20e>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
 80022ae:	4b7e      	ldr	r3, [pc, #504]	; (80024a8 <prvTraceInitTraceData+0x21c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a7e      	ldr	r2, [pc, #504]	; (80024ac <prvTraceInitTraceData+0x220>)
 80022b4:	6013      	str	r3, [r2, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 80022b6:	4b7a      	ldr	r3, [pc, #488]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f248 6278 	movw	r2, #34424	; 0x8678
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f008 ffc1 	bl	800b248 <memset>
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 80022c6:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 80022ce:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 80022d0:	4b73      	ldr	r3, [pc, #460]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2205      	movs	r2, #5
 80022d6:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 80022d8:	4b71      	ldr	r3, [pc, #452]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 80022e0:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f248 6278 	movw	r2, #34424	; 0x8678
 80022e8:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 80022ea:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80022f2:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
 80022f4:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 80022fe:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8002306:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2200      	movs	r2, #0
 800230c:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 800230e:	f7ff f9c9 	bl	80016a4 <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 800231a:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 800231e:	4b60      	ldr	r3, [pc, #384]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002326:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <prvTraceInitTraceData+0x214>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8002334:	4b5a      	ldr	r3, [pc, #360]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 800233c:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8002340:	4b57      	ldr	r3, [pc, #348]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002348:	2250      	movs	r2, #80	; 0x50
 800234a:	4959      	ldr	r1, [pc, #356]	; (80024b0 <prvTraceInitTraceData+0x224>)
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f9fb 	bl	8002748 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8002352:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 800235a:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
	RecorderDataPtr->endmarker0 = 0x0A;
 800235e:	4b50      	ldr	r3, [pc, #320]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002366:	220a      	movs	r2, #10
 8002368:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
	RecorderDataPtr->endmarker1 = 0x0B;
 800236c:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <prvTraceInitTraceData+0x214>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002374:	220b      	movs	r2, #11
 8002376:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
	RecorderDataPtr->endmarker2 = 0x0C;
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <prvTraceInitTraceData+0x214>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002382:	220c      	movs	r2, #12
 8002384:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
	RecorderDataPtr->endmarker3 = 0x0D;
 8002388:	4b45      	ldr	r3, [pc, #276]	; (80024a0 <prvTraceInitTraceData+0x214>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002390:	220d      	movs	r2, #13
 8002392:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
	RecorderDataPtr->endmarker4 = 0x71;
 8002396:	4b42      	ldr	r3, [pc, #264]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800239e:	2271      	movs	r2, #113	; 0x71
 80023a0:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
	RecorderDataPtr->endmarker5 = 0x72;
 80023a4:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023ac:	2272      	movs	r2, #114	; 0x72
 80023ae:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
	RecorderDataPtr->endmarker6 = 0x73;
 80023b2:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023ba:	2273      	movs	r2, #115	; 0x73
 80023bc:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
	RecorderDataPtr->endmarker7 = 0x74;
 80023c0:	4b37      	ldr	r3, [pc, #220]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023c8:	2274      	movs	r2, #116	; 0x74
 80023ca:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
	RecorderDataPtr->endmarker8 = 0xF1;
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023d6:	22f1      	movs	r2, #241	; 0xf1
 80023d8:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
	RecorderDataPtr->endmarker9 = 0xF2;
 80023dc:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023e4:	22f2      	movs	r2, #242	; 0xf2
 80023e6:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
	RecorderDataPtr->endmarker10 = 0xF3;
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023f2:	22f3      	movs	r2, #243	; 0xf3
 80023f4:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
	RecorderDataPtr->endmarker11 = 0xF4;
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <prvTraceInitTraceData+0x214>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002400:	22f4      	movs	r2, #244	; 0xf4
 8002402:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 8002406:	f7ff fa1b 	bl	8001840 <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
 800240a:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <prvTraceInitTraceData+0x214>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	22f4      	movs	r2, #244	; 0xf4
 8002410:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	22f3      	movs	r2, #243	; 0xf3
 8002418:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 800241a:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <prvTraceInitTraceData+0x214>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	22f2      	movs	r2, #242	; 0xf2
 8002420:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8002422:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	22f1      	movs	r2, #241	; 0xf1
 8002428:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <prvTraceInitTraceData+0x214>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2274      	movs	r2, #116	; 0x74
 8002430:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2273      	movs	r2, #115	; 0x73
 8002438:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 800243a:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <prvTraceInitTraceData+0x214>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2272      	movs	r2, #114	; 0x72
 8002440:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2271      	movs	r2, #113	; 0x71
 8002448:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <prvTraceInitTraceData+0x214>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2204      	movs	r2, #4
 8002450:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2203      	movs	r2, #3
 8002458:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <prvTraceInitTraceData+0x214>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2202      	movs	r2, #2
 8002460:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <prvTraceInitTraceData+0x228>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d010      	beq.n	8002494 <prvTraceInitTraceData+0x208>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800247a:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <prvTraceInitTraceData+0x228>)
 800247c:	6811      	ldr	r1, [r2, #0]
 800247e:	2250      	movs	r2, #80	; 0x50
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f961 	bl	8002748 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <prvTraceInitTraceData+0x214>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2201      	movs	r2, #1
 800248c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		vTraceStop();
 8002490:	f7ff fb1e 	bl	8001ad0 <vTraceStop>
	}


	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 8002494:	f000 fb92 	bl	8002bbc <prvTraceInitCortexM>
 8002498:	e000      	b.n	800249c <prvTraceInitTraceData+0x210>
			return;
 800249a:	bf00      	nop
#endif
}
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000a6d4 	.word	0x2000a6d4
 80024a4:	2000205c 	.word	0x2000205c
 80024a8:	e0001004 	.word	0xe0001004
 80024ac:	20002058 	.word	0x20002058
 80024b0:	0800c428 	.word	0x0800c428
 80024b4:	20001fb8 	.word	0x20001fb8

080024b8 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <prvTraceNextFreeEventBufferSlot+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e013      	b.n	80024f2 <prvTraceNextFreeEventBufferSlot+0x3a>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <prvTraceNextFreeEventBufferSlot+0x40>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80024d4:	d304      	bcc.n	80024e0 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 80024d6:	4809      	ldr	r0, [pc, #36]	; (80024fc <prvTraceNextFreeEventBufferSlot+0x44>)
 80024d8:	f000 f9ba 	bl	8002850 <prvTraceError>
		return NULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	e008      	b.n	80024f2 <prvTraceNextFreeEventBufferSlot+0x3a>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <prvTraceNextFreeEventBufferSlot+0x40>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <prvTraceNextFreeEventBufferSlot+0x40>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	f603 1368 	addw	r3, r3, #2408	; 0x968
 80024f0:	4413      	add	r3, r2
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000a6d4 	.word	0x2000a6d4
 80024fc:	0800c43c 	.word	0x0800c43c

08002500 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	460a      	mov	r2, r1
 800250a:	71fb      	strb	r3, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8002510:	79bb      	ldrb	r3, [r7, #6]
 8002512:	2b08      	cmp	r3, #8
 8002514:	d904      	bls.n	8002520 <uiIndexOfObject+0x20>
 8002516:	4822      	ldr	r0, [pc, #136]	; (80025a0 <uiIndexOfObject+0xa0>)
 8002518:	f000 f99a 	bl	8002850 <prvTraceError>
 800251c:	2300      	movs	r3, #0
 800251e:	e03a      	b.n	8002596 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <uiIndexOfObject+0x38>
 8002526:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <uiIndexOfObject+0xa4>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	4413      	add	r3, r2
 800252e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002532:	79fa      	ldrb	r2, [r7, #7]
 8002534:	429a      	cmp	r2, r3
 8002536:	d904      	bls.n	8002542 <uiIndexOfObject+0x42>
 8002538:	481b      	ldr	r0, [pc, #108]	; (80025a8 <uiIndexOfObject+0xa8>)
 800253a:	f000 f989 	bl	8002850 <prvTraceError>
 800253e:	2300      	movs	r3, #0
 8002540:	e029      	b.n	8002596 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8002542:	79bb      	ldrb	r3, [r7, #6]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d822      	bhi.n	800258e <uiIndexOfObject+0x8e>
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01f      	beq.n	800258e <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <uiIndexOfObject+0xa4>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	79bb      	ldrb	r3, [r7, #6]
 8002554:	4413      	add	r3, r2
 8002556:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 800255a:	79fa      	ldrb	r2, [r7, #7]
 800255c:	429a      	cmp	r2, r3
 800255e:	d816      	bhi.n	800258e <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <uiIndexOfObject+0xa4>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	79bb      	ldrb	r3, [r7, #6]
 8002566:	3340      	adds	r3, #64	; 0x40
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	891a      	ldrh	r2, [r3, #8]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <uiIndexOfObject+0xa4>)
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	79bb      	ldrb	r3, [r7, #6]
 8002574:	440b      	add	r3, r1
 8002576:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 800257a:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	3b01      	subs	r3, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8002580:	b29b      	uxth	r3, r3
 8002582:	fb11 f303 	smulbb	r3, r1, r3
 8002586:	b29b      	uxth	r3, r3
 8002588:	4413      	add	r3, r2
 800258a:	b29b      	uxth	r3, r3
 800258c:	e003      	b.n	8002596 <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 800258e:	4807      	ldr	r0, [pc, #28]	; (80025ac <uiIndexOfObject+0xac>)
 8002590:	f000 f95e 	bl	8002850 <prvTraceError>
	return 0;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	0800c464 	.word	0x0800c464
 80025a4:	2000a6d4 	.word	0x2000a6d4
 80025a8:	0800c4a4 	.word	0x0800c4a4
 80025ac:	0800c4e4 	.word	0x0800c4e4

080025b0 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 80025ba:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <prvTraceGetObjectHandle+0x144>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d104      	bne.n	80025cc <prvTraceGetObjectHandle+0x1c>
 80025c2:	484d      	ldr	r0, [pc, #308]	; (80026f8 <prvTraceGetObjectHandle+0x148>)
 80025c4:	f000 f944 	bl	8002850 <prvTraceError>
 80025c8:	2300      	movs	r3, #0
 80025ca:	e08f      	b.n	80026ec <prvTraceGetObjectHandle+0x13c>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d904      	bls.n	80025dc <prvTraceGetObjectHandle+0x2c>
 80025d2:	484a      	ldr	r0, [pc, #296]	; (80026fc <prvTraceGetObjectHandle+0x14c>)
 80025d4:	f000 f93c 	bl	8002850 <prvTraceError>
 80025d8:	2300      	movs	r3, #0
 80025da:	e087      	b.n	80026ec <prvTraceGetObjectHandle+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025dc:	f3ef 8310 	mrs	r3, PRIMASK
 80025e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80025e2:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	2301      	movs	r3, #1
 80025e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f383 8810 	msr	PRIMASK, r3
}
 80025f0:	bf00      	nop
 80025f2:	4b43      	ldr	r3, [pc, #268]	; (8002700 <prvTraceGetObjectHandle+0x150>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	4a41      	ldr	r2, [pc, #260]	; (8002700 <prvTraceGetObjectHandle+0x150>)
 80025fa:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	4a41      	ldr	r2, [pc, #260]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 8002600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002604:	461a      	mov	r2, r3
 8002606:	4b40      	ldr	r3, [pc, #256]	; (8002708 <prvTraceGetObjectHandle+0x158>)
 8002608:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 800260a:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <prvTraceGetObjectHandle+0x158>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a3d      	ldr	r2, [pc, #244]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 8002610:	4413      	add	r3, r2
 8002612:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002616:	2b00      	cmp	r3, #0
 8002618:	d114      	bne.n	8002644 <prvTraceGetObjectHandle+0x94>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <prvTraceGetObjectHandle+0x158>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	4938      	ldr	r1, [pc, #224]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 8002624:	3308      	adds	r3, #8
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	440b      	add	r3, r1
 800262a:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 800262c:	b2db      	uxtb	r3, r3
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8002632:	4b35      	ldr	r3, [pc, #212]	; (8002708 <prvTraceGetObjectHandle+0x158>)
 8002634:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8002636:	3201      	adds	r2, #1
 8002638:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 800263a:	4a32      	ldr	r2, [pc, #200]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 800263c:	4413      	add	r3, r2
 800263e:	460a      	mov	r2, r1
 8002640:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8002644:	4b30      	ldr	r3, [pc, #192]	; (8002708 <prvTraceGetObjectHandle+0x158>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2e      	ldr	r2, [pc, #184]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 800264a:	4413      	add	r3, r2
 800264c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002650:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	4a2b      	ldr	r2, [pc, #172]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 8002656:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	4929      	ldr	r1, [pc, #164]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 800265e:	3310      	adds	r3, #16
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	440b      	add	r3, r1
 8002664:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8002666:	429a      	cmp	r2, r3
 8002668:	d90a      	bls.n	8002680 <prvTraceGetObjectHandle+0xd0>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff f94b 	bl	8001908 <pszTraceGetErrorNotEnoughHandles>
 8002672:	4603      	mov	r3, r0
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f8eb 	bl	8002850 <prvTraceError>
		handle = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	77fb      	strb	r3, [r7, #31]
 800267e:	e029      	b.n	80026d4 <prvTraceGetObjectHandle+0x124>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	4a20      	ldr	r2, [pc, #128]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 8002684:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002688:	3201      	adds	r2, #1
 800268a:	b291      	uxth	r1, r2
 800268c:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 800268e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 8002696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800269a:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	4a19      	ldr	r2, [pc, #100]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 80026a0:	3308      	adds	r3, #8
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 80026a8:	1acb      	subs	r3, r1, r3
 80026aa:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	4a15      	ldr	r2, [pc, #84]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 80026b0:	3318      	adds	r3, #24
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	88db      	ldrh	r3, [r3, #6]
 80026b8:	461a      	mov	r2, r3
		if (hndCount >
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4293      	cmp	r3, r2
 80026be:	dd09      	ble.n	80026d4 <prvTraceGetObjectHandle+0x124>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 80026c4:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 80026c6:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 80026c8:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <prvTraceGetObjectHandle+0x154>)
 80026ca:	3318      	adds	r3, #24
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	460a      	mov	r2, r1
 80026d2:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <prvTraceGetObjectHandle+0x150>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3b01      	subs	r3, #1
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <prvTraceGetObjectHandle+0x150>)
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f383 8810 	msr	PRIMASK, r3
}
 80026e8:	bf00      	nop

	return handle;
 80026ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	2000a6d4 	.word	0x2000a6d4
 80026f8:	0800b97c 	.word	0x0800b97c
 80026fc:	0800c524 	.word	0x0800c524
 8002700:	20001fb0 	.word	0x20001fb0
 8002704:	20001fc8 	.word	0x20001fc8
 8002708:	2000a6d8 	.word	0x2000a6d8

0800270c <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	460a      	mov	r2, r1
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	4613      	mov	r3, r2
 800271a:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 800271c:	79fa      	ldrb	r2, [r7, #7]
 800271e:	79bb      	ldrb	r3, [r7, #6]
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff feec 	bl	8002500 <uiIndexOfObject>
 8002728:	4603      	mov	r3, r0
 800272a:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <prvMarkObjectAsUsed+0x38>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	89fb      	ldrh	r3, [r7, #14]
 8002732:	4413      	add	r3, r2
 8002734:	2201      	movs	r2, #1
 8002736:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2000a6d4 	.word	0x2000a6d4

08002748 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e010      	b.n	800277c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	441a      	add	r2, r3
 8002760:	68f9      	ldr	r1, [r7, #12]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	440b      	add	r3, r1
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	4413      	add	r3, r2
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d3ea      	bcc.n	800275a <prvStrncpy+0x12>
			break;
	}
}
 8002784:	e000      	b.n	8002788 <prvStrncpy+0x40>
			break;
 8002786:	bf00      	nop
}
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	603a      	str	r2, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
 80027a0:	460b      	mov	r3, r1
 80027a2:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <prvTraceSetObjectName+0x1e>
 80027aa:	4823      	ldr	r0, [pc, #140]	; (8002838 <prvTraceSetObjectName+0xa4>)
 80027ac:	f000 f850 	bl	8002850 <prvTraceError>
 80027b0:	e03e      	b.n	8002830 <prvTraceSetObjectName+0x9c>

	if (objectclass >= TRACE_NCLASSES)
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d903      	bls.n	80027c0 <prvTraceSetObjectName+0x2c>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 80027b8:	4820      	ldr	r0, [pc, #128]	; (800283c <prvTraceSetObjectName+0xa8>)
 80027ba:	f000 f849 	bl	8002850 <prvTraceError>
		return;
 80027be:	e037      	b.n	8002830 <prvTraceSetObjectName+0x9c>
	}

	if (handle == 0)
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <prvTraceSetObjectName+0x3a>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 80027c6:	481e      	ldr	r0, [pc, #120]	; (8002840 <prvTraceSetObjectName+0xac>)
 80027c8:	f000 f842 	bl	8002850 <prvTraceError>
		return;
 80027cc:	e030      	b.n	8002830 <prvTraceSetObjectName+0x9c>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <prvTraceSetObjectName+0xb0>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	4413      	add	r3, r2
 80027d6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80027da:	79ba      	ldrb	r2, [r7, #6]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d908      	bls.n	80027f2 <prvTraceSetObjectName+0x5e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff f890 	bl	8001908 <pszTraceGetErrorNotEnoughHandles>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f830 	bl	8002850 <prvTraceError>
 80027f0:	e01e      	b.n	8002830 <prvTraceSetObjectName+0x9c>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 80027f2:	79fa      	ldrb	r2, [r7, #7]
 80027f4:	79bb      	ldrb	r3, [r7, #6]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fe81 	bl	8002500 <uiIndexOfObject>
 80027fe:	4603      	mov	r3, r0
 8002800:	461a      	mov	r2, r3
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <prvTraceSetObjectName+0xb4>)
 8002804:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <prvTraceSetObjectName+0xb8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d110      	bne.n	8002830 <prvTraceSetObjectName+0x9c>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <prvTraceSetObjectName+0xb0>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <prvTraceSetObjectName+0xb4>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	3398      	adds	r3, #152	; 0x98
 8002818:	4413      	add	r3, r2
 800281a:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <prvTraceSetObjectName+0xb0>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	4413      	add	r3, r2
 8002824:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8002828:	461a      	mov	r2, r3
 800282a:	6839      	ldr	r1, [r7, #0]
 800282c:	f7ff ff8c 	bl	8002748 <prvStrncpy>
		}
	}
}
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	0800c628 	.word	0x0800c628
 800283c:	0800c65c 	.word	0x0800c65c
 8002840:	0800c68c 	.word	0x0800c68c
 8002844:	2000a6d4 	.word	0x2000a6d4
 8002848:	2000a6dc 	.word	0x2000a6dc
 800284c:	20001fb8 	.word	0x20001fb8

08002850 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <prvTraceError+0x50>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <prvTraceError+0x14>
	{
		vTraceStop();
 8002860:	f7ff f936 	bl	8001ad0 <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <prvTraceError+0x54>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d115      	bne.n	8002898 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 800286c:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <prvTraceError+0x54>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <prvTraceError+0x50>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00e      	beq.n	8002898 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <prvTraceError+0x50>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002882:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <prvTraceError+0x54>)
 8002884:	6811      	ldr	r1, [r2, #0]
 8002886:	2250      	movs	r2, #80	; 0x50
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff5d 	bl	8002748 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <prvTraceError+0x50>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2201      	movs	r2, #1
 8002894:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		}
	}
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2000a6d4 	.word	0x2000a6d4
 80028a4:	20001fb8 	.word	0x20001fb8

080028a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d172      	bne.n	80029a6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
 80028c0:	483c      	ldr	r0, [pc, #240]	; (80029b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80028c2:	f7ff ffc5 	bl	8002850 <prvTraceError>
 80028c6:	e072      	b.n	80029ae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x106>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 80028c8:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4413      	add	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80028d4:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 80028e2:	2b98      	cmp	r3, #152	; 0x98
 80028e4:	d928      	bls.n	8002938 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80028f4:	2ba7      	cmp	r3, #167	; 0xa7
 80028f6:	d81f      	bhi.n	8002938 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 80028f8:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8002906:	3368      	adds	r3, #104	; 0x68
 8002908:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	441a      	add	r2, r3
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	429a      	cmp	r2, r3
 8002918:	d241      	bcs.n	800299e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 800291a:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8002926:	18d0      	adds	r0, r2, r3
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	3301      	adds	r3, #1
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	461a      	mov	r2, r3
 8002930:	2100      	movs	r1, #0
 8002932:	f008 fc89 	bl	800b248 <memset>
		{
 8002936:	e032      	b.n	800299e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8002946:	2b01      	cmp	r3, #1
 8002948:	d12a      	bne.n	80029a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	429a      	cmp	r2, r3
 8002956:	d20c      	bcs.n	8002972 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xca>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8002964:	4413      	add	r3, r2
 8002966:	2208      	movs	r2, #8
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f008 fc6c 	bl	800b248 <memset>
 8002970:	e016      	b.n	80029a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f603 1368 	addw	r3, r3, #2408	; 0x968
 800297a:	2204      	movs	r2, #4
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f008 fc62 	bl	800b248 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8002990:	4413      	add	r3, r2
 8002992:	2204      	movs	r2, #4
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f008 fc56 	bl	800b248 <memset>
 800299c:	e000      	b.n	80029a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
 800299e:	bf00      	nop
			}
		}
		i++;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3301      	adds	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d38c      	bcc.n	80028c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	0800c6ec 	.word	0x0800c6ec
 80029b8:	2000a6d4 	.word	0x2000a6d4

080029bc <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <prvTraceUpdateCounters+0x4c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01b      	beq.n	8002a02 <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 80029ca:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <prvTraceUpdateCounters+0x4c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	3201      	adds	r2, #1
 80029d2:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <prvTraceUpdateCounters+0x4c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	3201      	adds	r2, #1
 80029dc:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <prvTraceUpdateCounters+0x4c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80029e8:	d307      	bcc.n	80029fa <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <prvTraceUpdateCounters+0x4c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <prvTraceUpdateCounters+0x4c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 80029fa:	2001      	movs	r0, #1
 80029fc:	f7ff ff54 	bl	80028a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8002a00:	e000      	b.n	8002a04 <prvTraceUpdateCounters+0x48>
		return;
 8002a02:	bf00      	nop
#endif
}
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	2000a6d4 	.word	0x2000a6d4

08002a0c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2bff      	cmp	r3, #255	; 0xff
 8002a26:	d009      	beq.n	8002a3c <prvTraceGetDTS+0x30>
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d004      	beq.n	8002a3c <prvTraceGetDTS+0x30>
 8002a32:	485a      	ldr	r0, [pc, #360]	; (8002b9c <prvTraceGetDTS+0x190>)
 8002a34:	f7ff ff0c 	bl	8002850 <prvTraceError>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e0ab      	b.n	8002b94 <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 8002a3c:	4b58      	ldr	r3, [pc, #352]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d116      	bne.n	8002a74 <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 8002a46:	4b57      	ldr	r3, [pc, #348]	; (8002ba4 <prvTraceGetDTS+0x198>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8002a4e:	4b55      	ldr	r3, [pc, #340]	; (8002ba4 <prvTraceGetDTS+0x198>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	0892      	lsrs	r2, r2, #2
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
 8002a5a:	e00b      	b.n	8002a74 <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8002a5c:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <prvTraceGetDTS+0x19c>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b52      	ldr	r3, [pc, #328]	; (8002bac <prvTraceGetDTS+0x1a0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d005      	beq.n	8002a74 <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8002a68:	4b51      	ldr	r3, [pc, #324]	; (8002bb0 <prvTraceGetDTS+0x1a4>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0892      	lsrs	r2, r2, #2
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 f8d7 	bl	8002c2c <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <prvTraceGetDTS+0x1a8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a4a      	ldr	r2, [pc, #296]	; (8002bb4 <prvTraceGetDTS+0x1a8>)
 8002a8c:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8002a8e:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d043      	beq.n	8002b20 <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8002a98:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d91d      	bls.n	8002ae0 <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8002aa4:	4b3e      	ldr	r3, [pc, #248]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab6:	4b3a      	ldr	r3, [pc, #232]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	440a      	add	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8002abe:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ac4:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	fbb3 f0f2 	udiv	r0, r3, r2
 8002ad0:	fb00 f202 	mul.w	r2, r0, r2
 8002ad4:	1a9a      	subs	r2, r3, r2
 8002ad6:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	440a      	add	r2, r1
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
 8002ade:	e007      	b.n	8002af0 <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8002ae0:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ae6:	4b2e      	ldr	r3, [pc, #184]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	440a      	add	r2, r1
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8002af0:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af6:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d313      	bcc.n	8002b28 <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8002b00:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b06:	3201      	adds	r2, #1
 8002b08:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8002b0a:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b10:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b16:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	1a8a      	subs	r2, r1, r2
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b1e:	e003      	b.n	8002b28 <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8002b20:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <prvTraceGetDTS+0x194>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d92c      	bls.n	8002b8a <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8002b30:	f7ff fcc2 	bl	80024b8 <prvTraceNextFreeEventBufferSlot>
 8002b34:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d026      	beq.n	8002b8a <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10b      	bne.n	8002b5e <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	22a9      	movs	r2, #169	; 0xa9
 8002b4a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	705a      	strb	r2, [r3, #1]
 8002b5c:	e013      	b.n	8002b86 <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2bff      	cmp	r3, #255	; 0xff
 8002b62:	d10d      	bne.n	8002b80 <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	22a8      	movs	r2, #168	; 0xa8
 8002b68:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	0e1b      	lsrs	r3, r3, #24
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	705a      	strb	r2, [r3, #1]
 8002b7e:	e002      	b.n	8002b86 <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8002b80:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <prvTraceGetDTS+0x1ac>)
 8002b82:	f7ff fe65 	bl	8002850 <prvTraceError>
			}
			prvTraceUpdateCounters();
 8002b86:	f7ff ff19 	bl	80029bc <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	4013      	ands	r3, r2
 8002b92:	b29b      	uxth	r3, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	0800c744 	.word	0x0800c744
 8002ba0:	2000a6d4 	.word	0x2000a6d4
 8002ba4:	20001fb4 	.word	0x20001fb4
 8002ba8:	e0001004 	.word	0xe0001004
 8002bac:	20002058 	.word	0x20002058
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	2000a6e0 	.word	0x2000a6e0
 8002bb8:	0800c784 	.word	0x0800c784

08002bbc <prvTraceInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <prvTraceInitCortexM+0x54>)
 8002bc2:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <prvTraceInitCortexM+0x58>)
 8002bc4:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <prvTraceInitCortexM+0x5c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <prvTraceInitCortexM+0x5c>)
 8002bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd0:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <prvTraceInitCortexM+0x5c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8002bda:	4810      	ldr	r0, [pc, #64]	; (8002c1c <prvTraceInitCortexM+0x60>)
 8002bdc:	f7ff fe38 	bl	8002850 <prvTraceError>
			break;
 8002be0:	e013      	b.n	8002c0a <prvTraceInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <prvTraceInitCortexM+0x64>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8002bee:	480d      	ldr	r0, [pc, #52]	; (8002c24 <prvTraceInitCortexM+0x68>)
 8002bf0:	f7ff fe2e 	bl	8002850 <prvTraceError>
			break;
 8002bf4:	e009      	b.n	8002c0a <prvTraceInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <prvTraceInitCortexM+0x6c>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <prvTraceInitCortexM+0x64>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <prvTraceInitCortexM+0x64>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e0001fb0 	.word	0xe0001fb0
 8002c14:	c5acce55 	.word	0xc5acce55
 8002c18:	e000edfc 	.word	0xe000edfc
 8002c1c:	0800c970 	.word	0x0800c970
 8002c20:	e0001000 	.word	0xe0001000
 8002c24:	0800c99c 	.word	0x0800c99c
 8002c28:	e0001004 	.word	0xe0001004

08002c2c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <prvTracePortGetTimeStamp+0x80>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d107      	bne.n	8002c58 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d028      	beq.n	8002ca0 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <prvTracePortGetTimeStamp+0x84>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	601a      	str	r2, [r3, #0]
		return;
 8002c56:	e023      	b.n	8002ca0 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <prvTracePortGetTimeStamp+0x88>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <prvTracePortGetTimeStamp+0x8c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	1ad2      	subs	r2, r2, r3
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <prvTracePortGetTimeStamp+0x90>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <prvTracePortGetTimeStamp+0x90>)
 8002c7c:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <prvTracePortGetTimeStamp+0x84>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <prvTracePortGetTimeStamp+0x84>)
 8002c88:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <prvTracePortGetTimeStamp+0x84>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <prvTracePortGetTimeStamp+0x8c>)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e000      	b.n	8002ca2 <prvTracePortGetTimeStamp+0x76>
		return;
 8002ca0:	bf00      	nop
}
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	20001fa8 	.word	0x20001fa8
 8002cb0:	20001fac 	.word	0x20001fac
 8002cb4:	e0001004 	.word	0xe0001004
 8002cb8:	2000a6e4 	.word	0x2000a6e4
 8002cbc:	2000a6e8 	.word	0x2000a6e8

08002cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f000 fc6a 	bl	800359e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cca:	200f      	movs	r0, #15
 8002ccc:	f7fe fb4e 	bl	800136c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd0:	f7fe f962 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_IncTick+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_IncTick+0x24>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_IncTick+0x24>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000014 	.word	0x20000014
 8002d00:	2000a6ec 	.word	0x2000a6ec

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	2000a6ec 	.word	0x2000a6ec

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff ffee 	bl	8002d04 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d005      	beq.n	8002d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_Delay+0x44>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d42:	bf00      	nop
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f7      	bhi.n	8002d44 <HAL_Delay+0x28>
  {
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000014 	.word	0x20000014

08002d64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e031      	b.n	8002dde <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe f930 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <HAL_ADC_Init+0x84>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	f043 0202 	orr.w	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa4c 	bl	8003250 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8002dce:	e001      	b.n	8002dd4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	ffffeefd 	.word	0xffffeefd

08002dec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_Start+0x1a>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e0ad      	b.n	8002f62 <HAL_ADC_Start+0x176>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d018      	beq.n	8002e4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002e2c:	4b50      	ldr	r3, [pc, #320]	; (8002f70 <HAL_ADC_Start+0x184>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a50      	ldr	r2, [pc, #320]	; (8002f74 <HAL_ADC_Start+0x188>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0c9a      	lsrs	r2, r3, #18
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002e40:	e002      	b.n	8002e48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f9      	bne.n	8002e42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d175      	bne.n	8002f48 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e60:	4b45      	ldr	r3, [pc, #276]	; (8002f78 <HAL_ADC_Start+0x18c>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e96:	d106      	bne.n	8002ea6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f023 0206 	bic.w	r2, r3, #6
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
 8002ea4:	e002      	b.n	8002eac <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ebc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ebe:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_ADC_Start+0x190>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d143      	bne.n	8002f60 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	e03a      	b.n	8002f60 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <HAL_ADC_Start+0x194>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10e      	bne.n	8002f12 <HAL_ADC_Start+0x126>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d107      	bne.n	8002f12 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f10:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002f12:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <HAL_ADC_Start+0x190>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d120      	bne.n	8002f60 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <HAL_ADC_Start+0x198>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d11b      	bne.n	8002f60 <HAL_ADC_Start+0x174>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d114      	bne.n	8002f60 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	e00b      	b.n	8002f60 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f043 0210 	orr.w	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000000 	.word	0x20000000
 8002f74:	431bde83 	.word	0x431bde83
 8002f78:	fffff8fe 	.word	0xfffff8fe
 8002f7c:	40012300 	.word	0x40012300
 8002f80:	40012000 	.word	0x40012000
 8002f84:	40012200 	.word	0x40012200

08002f88 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x1c>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e136      	b.n	800322e <HAL_ADC_ConfigChannel+0x28a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b09      	cmp	r3, #9
 8002fce:	d93a      	bls.n	8003046 <HAL_ADC_ConfigChannel+0xa2>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fd8:	d035      	beq.n	8003046 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68d9      	ldr	r1, [r3, #12]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	3b1e      	subs	r3, #30
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a8d      	ldr	r2, [pc, #564]	; (800323c <HAL_ADC_ConfigChannel+0x298>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10a      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68d9      	ldr	r1, [r3, #12]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	061a      	lsls	r2, r3, #24
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800301e:	e035      	b.n	800308c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68d9      	ldr	r1, [r3, #12]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	4618      	mov	r0, r3
 8003032:	4603      	mov	r3, r0
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4403      	add	r3, r0
 8003038:	3b1e      	subs	r3, #30
 800303a:	409a      	lsls	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003044:	e022      	b.n	800308c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6919      	ldr	r1, [r3, #16]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	2207      	movs	r2, #7
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43da      	mvns	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	400a      	ands	r2, r1
 8003068:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6919      	ldr	r1, [r3, #16]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	4618      	mov	r0, r3
 800307c:	4603      	mov	r3, r0
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4403      	add	r3, r0
 8003082:	409a      	lsls	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b06      	cmp	r3, #6
 8003092:	d824      	bhi.n	80030de <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	3b05      	subs	r3, #5
 80030a6:	221f      	movs	r2, #31
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43da      	mvns	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	400a      	ands	r2, r1
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	3b05      	subs	r3, #5
 80030d0:	fa00 f203 	lsl.w	r2, r0, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	635a      	str	r2, [r3, #52]	; 0x34
 80030dc:	e04c      	b.n	8003178 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d824      	bhi.n	8003130 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	3b23      	subs	r3, #35	; 0x23
 80030f8:	221f      	movs	r2, #31
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43da      	mvns	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	400a      	ands	r2, r1
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	4618      	mov	r0, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	3b23      	subs	r3, #35	; 0x23
 8003122:	fa00 f203 	lsl.w	r2, r0, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	631a      	str	r2, [r3, #48]	; 0x30
 800312e:	e023      	b.n	8003178 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	3b41      	subs	r3, #65	; 0x41
 8003142:	221f      	movs	r2, #31
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43da      	mvns	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	400a      	ands	r2, r1
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	b29b      	uxth	r3, r3
 800315e:	4618      	mov	r0, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	3b41      	subs	r3, #65	; 0x41
 800316c:	fa00 f203 	lsl.w	r2, r0, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a30      	ldr	r2, [pc, #192]	; (8003240 <HAL_ADC_ConfigChannel+0x29c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d10a      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x1f4>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800318a:	d105      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800318c:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <HAL_ADC_ConfigChannel+0x2a0>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <HAL_ADC_ConfigChannel+0x2a0>)
 8003192:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003196:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a28      	ldr	r2, [pc, #160]	; (8003240 <HAL_ADC_ConfigChannel+0x29c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d10f      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x21e>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b12      	cmp	r3, #18
 80031a8:	d10b      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80031aa:	4b26      	ldr	r3, [pc, #152]	; (8003244 <HAL_ADC_ConfigChannel+0x2a0>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4a25      	ldr	r2, [pc, #148]	; (8003244 <HAL_ADC_ConfigChannel+0x2a0>)
 80031b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031b4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80031b6:	4b23      	ldr	r3, [pc, #140]	; (8003244 <HAL_ADC_ConfigChannel+0x2a0>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4a22      	ldr	r2, [pc, #136]	; (8003244 <HAL_ADC_ConfigChannel+0x2a0>)
 80031bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1e      	ldr	r2, [pc, #120]	; (8003240 <HAL_ADC_ConfigChannel+0x29c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d12b      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x280>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1a      	ldr	r2, [pc, #104]	; (800323c <HAL_ADC_ConfigChannel+0x298>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d003      	beq.n	80031de <HAL_ADC_ConfigChannel+0x23a>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b11      	cmp	r3, #17
 80031dc:	d122      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80031de:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_ADC_ConfigChannel+0x2a0>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4a18      	ldr	r2, [pc, #96]	; (8003244 <HAL_ADC_ConfigChannel+0x2a0>)
 80031e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80031e8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_ADC_ConfigChannel+0x2a0>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4a15      	ldr	r2, [pc, #84]	; (8003244 <HAL_ADC_ConfigChannel+0x2a0>)
 80031f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a10      	ldr	r2, [pc, #64]	; (800323c <HAL_ADC_ConfigChannel+0x298>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d111      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <HAL_ADC_ConfigChannel+0x2a4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a11      	ldr	r2, [pc, #68]	; (800324c <HAL_ADC_ConfigChannel+0x2a8>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0c9a      	lsrs	r2, r3, #18
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003216:	e002      	b.n	800321e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3b01      	subs	r3, #1
 800321c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f9      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	10000012 	.word	0x10000012
 8003240:	40012000 	.word	0x40012000
 8003244:	40012300 	.word	0x40012300
 8003248:	20000000 	.word	0x20000000
 800324c:	431bde83 	.word	0x431bde83

08003250 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003258:	4b78      	ldr	r3, [pc, #480]	; (800343c <ADC_Init+0x1ec>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a77      	ldr	r2, [pc, #476]	; (800343c <ADC_Init+0x1ec>)
 800325e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003262:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003264:	4b75      	ldr	r3, [pc, #468]	; (800343c <ADC_Init+0x1ec>)
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4973      	ldr	r1, [pc, #460]	; (800343c <ADC_Init+0x1ec>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	021a      	lsls	r2, r3, #8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6899      	ldr	r1, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	4a58      	ldr	r2, [pc, #352]	; (8003440 <ADC_Init+0x1f0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d022      	beq.n	800332a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6899      	ldr	r1, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6899      	ldr	r1, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	e00f      	b.n	800334a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003348:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0202 	bic.w	r2, r2, #2
 8003358:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6899      	ldr	r1, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	005a      	lsls	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01b      	beq.n	80033b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003386:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003396:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	3b01      	subs	r3, #1
 80033a4:	035a      	lsls	r2, r3, #13
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	e007      	b.n	80033c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	3b01      	subs	r3, #1
 80033dc:	051a      	lsls	r2, r3, #20
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6899      	ldr	r1, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003402:	025a      	lsls	r2, r3, #9
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	029a      	lsls	r2, r3, #10
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	609a      	str	r2, [r3, #8]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40012300 	.word	0x40012300
 8003440:	0f000001 	.word	0x0f000001

08003444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <__NVIC_SetPriorityGrouping+0x40>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003460:	4013      	ands	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 800346e:	4313      	orrs	r3, r2
 8003470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003472:	4a04      	ldr	r2, [pc, #16]	; (8003484 <__NVIC_SetPriorityGrouping+0x40>)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	60d3      	str	r3, [r2, #12]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000ed00 	.word	0xe000ed00
 8003488:	05fa0000 	.word	0x05fa0000

0800348c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	0a1b      	lsrs	r3, r3, #8
 8003496:	f003 0307 	and.w	r3, r3, #7
}
 800349a:	4618      	mov	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db0b      	blt.n	80034d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	4907      	ldr	r1, [pc, #28]	; (80034e0 <__NVIC_EnableIRQ+0x38>)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2001      	movs	r0, #1
 80034ca:	fa00 f202 	lsl.w	r2, r0, r2
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000e100 	.word	0xe000e100

080034e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	6039      	str	r1, [r7, #0]
 80034ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	db0a      	blt.n	800350e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	490c      	ldr	r1, [pc, #48]	; (8003530 <__NVIC_SetPriority+0x4c>)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	440b      	add	r3, r1
 8003508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800350c:	e00a      	b.n	8003524 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4908      	ldr	r1, [pc, #32]	; (8003534 <__NVIC_SetPriority+0x50>)
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	3b04      	subs	r3, #4
 800351c:	0112      	lsls	r2, r2, #4
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	440b      	add	r3, r1
 8003522:	761a      	strb	r2, [r3, #24]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000e100 	.word	0xe000e100
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f1c3 0307 	rsb	r3, r3, #7
 8003552:	2b04      	cmp	r3, #4
 8003554:	bf28      	it	cs
 8003556:	2304      	movcs	r3, #4
 8003558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	3304      	adds	r3, #4
 800355e:	2b06      	cmp	r3, #6
 8003560:	d902      	bls.n	8003568 <NVIC_EncodePriority+0x30>
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3b03      	subs	r3, #3
 8003566:	e000      	b.n	800356a <NVIC_EncodePriority+0x32>
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	f04f 32ff 	mov.w	r2, #4294967295
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	401a      	ands	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003580:	f04f 31ff 	mov.w	r1, #4294967295
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	fa01 f303 	lsl.w	r3, r1, r3
 800358a:	43d9      	mvns	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003590:	4313      	orrs	r3, r2
         );
}
 8003592:	4618      	mov	r0, r3
 8003594:	3724      	adds	r7, #36	; 0x24
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ff4c 	bl	8003444 <__NVIC_SetPriorityGrouping>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035c6:	f7ff ff61 	bl	800348c <__NVIC_GetPriorityGrouping>
 80035ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	6978      	ldr	r0, [r7, #20]
 80035d2:	f7ff ffb1 	bl	8003538 <NVIC_EncodePriority>
 80035d6:	4602      	mov	r2, r0
 80035d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff ff80 	bl	80034e4 <__NVIC_SetPriority>
}
 80035e4:	bf00      	nop
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff ff54 	bl	80034a8 <__NVIC_EnableIRQ>
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	e175      	b.n	8003914 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003628:	2201      	movs	r2, #1
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	429a      	cmp	r2, r3
 8003642:	f040 8164 	bne.w	800390e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d005      	beq.n	800365e <HAL_GPIO_Init+0x56>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d130      	bne.n	80036c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	2203      	movs	r2, #3
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003694:	2201      	movs	r2, #1
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 0201 	and.w	r2, r3, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d017      	beq.n	80036fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	2203      	movs	r2, #3
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d123      	bne.n	8003750 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	08da      	lsrs	r2, r3, #3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3208      	adds	r2, #8
 8003710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	220f      	movs	r2, #15
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4313      	orrs	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	08da      	lsrs	r2, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3208      	adds	r2, #8
 800374a:	69b9      	ldr	r1, [r7, #24]
 800374c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	2203      	movs	r2, #3
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0203 	and.w	r2, r3, #3
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80be 	beq.w	800390e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003792:	4b66      	ldr	r3, [pc, #408]	; (800392c <HAL_GPIO_Init+0x324>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	4a65      	ldr	r2, [pc, #404]	; (800392c <HAL_GPIO_Init+0x324>)
 8003798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800379c:	6453      	str	r3, [r2, #68]	; 0x44
 800379e:	4b63      	ldr	r3, [pc, #396]	; (800392c <HAL_GPIO_Init+0x324>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037aa:	4a61      	ldr	r2, [pc, #388]	; (8003930 <HAL_GPIO_Init+0x328>)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	089b      	lsrs	r3, r3, #2
 80037b0:	3302      	adds	r3, #2
 80037b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	220f      	movs	r2, #15
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a58      	ldr	r2, [pc, #352]	; (8003934 <HAL_GPIO_Init+0x32c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d037      	beq.n	8003846 <HAL_GPIO_Init+0x23e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a57      	ldr	r2, [pc, #348]	; (8003938 <HAL_GPIO_Init+0x330>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d031      	beq.n	8003842 <HAL_GPIO_Init+0x23a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a56      	ldr	r2, [pc, #344]	; (800393c <HAL_GPIO_Init+0x334>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02b      	beq.n	800383e <HAL_GPIO_Init+0x236>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a55      	ldr	r2, [pc, #340]	; (8003940 <HAL_GPIO_Init+0x338>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d025      	beq.n	800383a <HAL_GPIO_Init+0x232>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a54      	ldr	r2, [pc, #336]	; (8003944 <HAL_GPIO_Init+0x33c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01f      	beq.n	8003836 <HAL_GPIO_Init+0x22e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a53      	ldr	r2, [pc, #332]	; (8003948 <HAL_GPIO_Init+0x340>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d019      	beq.n	8003832 <HAL_GPIO_Init+0x22a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_GPIO_Init+0x344>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_GPIO_Init+0x226>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a51      	ldr	r2, [pc, #324]	; (8003950 <HAL_GPIO_Init+0x348>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00d      	beq.n	800382a <HAL_GPIO_Init+0x222>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a50      	ldr	r2, [pc, #320]	; (8003954 <HAL_GPIO_Init+0x34c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <HAL_GPIO_Init+0x21e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4f      	ldr	r2, [pc, #316]	; (8003958 <HAL_GPIO_Init+0x350>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_GPIO_Init+0x21a>
 800381e:	2309      	movs	r3, #9
 8003820:	e012      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003822:	230a      	movs	r3, #10
 8003824:	e010      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003826:	2308      	movs	r3, #8
 8003828:	e00e      	b.n	8003848 <HAL_GPIO_Init+0x240>
 800382a:	2307      	movs	r3, #7
 800382c:	e00c      	b.n	8003848 <HAL_GPIO_Init+0x240>
 800382e:	2306      	movs	r3, #6
 8003830:	e00a      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003832:	2305      	movs	r3, #5
 8003834:	e008      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003836:	2304      	movs	r3, #4
 8003838:	e006      	b.n	8003848 <HAL_GPIO_Init+0x240>
 800383a:	2303      	movs	r3, #3
 800383c:	e004      	b.n	8003848 <HAL_GPIO_Init+0x240>
 800383e:	2302      	movs	r3, #2
 8003840:	e002      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003846:	2300      	movs	r3, #0
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	f002 0203 	and.w	r2, r2, #3
 800384e:	0092      	lsls	r2, r2, #2
 8003850:	4093      	lsls	r3, r2
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003858:	4935      	ldr	r1, [pc, #212]	; (8003930 <HAL_GPIO_Init+0x328>)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	3302      	adds	r3, #2
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003866:	4b3d      	ldr	r3, [pc, #244]	; (800395c <HAL_GPIO_Init+0x354>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800388a:	4a34      	ldr	r2, [pc, #208]	; (800395c <HAL_GPIO_Init+0x354>)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003890:	4b32      	ldr	r3, [pc, #200]	; (800395c <HAL_GPIO_Init+0x354>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038b4:	4a29      	ldr	r2, [pc, #164]	; (800395c <HAL_GPIO_Init+0x354>)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ba:	4b28      	ldr	r3, [pc, #160]	; (800395c <HAL_GPIO_Init+0x354>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038de:	4a1f      	ldr	r2, [pc, #124]	; (800395c <HAL_GPIO_Init+0x354>)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <HAL_GPIO_Init+0x354>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003908:	4a14      	ldr	r2, [pc, #80]	; (800395c <HAL_GPIO_Init+0x354>)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3301      	adds	r3, #1
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	2b0f      	cmp	r3, #15
 8003918:	f67f ae86 	bls.w	8003628 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	3724      	adds	r7, #36	; 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800
 8003930:	40013800 	.word	0x40013800
 8003934:	40020000 	.word	0x40020000
 8003938:	40020400 	.word	0x40020400
 800393c:	40020800 	.word	0x40020800
 8003940:	40020c00 	.word	0x40020c00
 8003944:	40021000 	.word	0x40021000
 8003948:	40021400 	.word	0x40021400
 800394c:	40021800 	.word	0x40021800
 8003950:	40021c00 	.word	0x40021c00
 8003954:	40022000 	.word	0x40022000
 8003958:	40022400 	.word	0x40022400
 800395c:	40013c00 	.word	0x40013c00

08003960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	e001      	b.n	8003982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
 800399c:	4613      	mov	r3, r2
 800399e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a0:	787b      	ldrb	r3, [r7, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039ac:	e003      	b.n	80039b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	041a      	lsls	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	619a      	str	r2, [r3, #24]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d4:	887a      	ldrh	r2, [r7, #2]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	041a      	lsls	r2, r3, #16
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43d9      	mvns	r1, r3
 80039e0:	887b      	ldrh	r3, [r7, #2]
 80039e2:	400b      	ands	r3, r1
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	619a      	str	r2, [r3, #24]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d006      	beq.n	8003a1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a0e:	4a05      	ldr	r2, [pc, #20]	; (8003a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd f904 	bl	8000c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40013c00 	.word	0x40013c00

08003a28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2a:	b08f      	sub	sp, #60	; 0x3c
 8003a2c:	af0a      	add	r7, sp, #40	; 0x28
 8003a2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e116      	b.n	8003c68 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fd fc0f 	bl	8001278 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f002 ff27 	bl	80068cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	687e      	ldr	r6, [r7, #4]
 8003a86:	466d      	mov	r5, sp
 8003a88:	f106 0410 	add.w	r4, r6, #16
 8003a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a98:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a9c:	1d33      	adds	r3, r6, #4
 8003a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aa0:	6838      	ldr	r0, [r7, #0]
 8003aa2:	f002 febb 	bl	800681c <USB_CoreInit>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0d7      	b.n	8003c68 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f002 ff15 	bl	80068ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
 8003ac8:	e04a      	b.n	8003b60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	333d      	adds	r3, #61	; 0x3d
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	333c      	adds	r3, #60	; 0x3c
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003af2:	7bfa      	ldrb	r2, [r7, #15]
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	b298      	uxth	r0, r3
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	3344      	adds	r3, #68	; 0x44
 8003b06:	4602      	mov	r2, r0
 8003b08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	3340      	adds	r3, #64	; 0x40
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b1e:	7bfa      	ldrb	r2, [r7, #15]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3348      	adds	r3, #72	; 0x48
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	334c      	adds	r3, #76	; 0x4c
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	3354      	adds	r3, #84	; 0x54
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d3af      	bcc.n	8003aca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
 8003b6e:	e044      	b.n	8003bfa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bde:	7bfa      	ldrb	r2, [r7, #15]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d3b5      	bcc.n	8003b70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	687e      	ldr	r6, [r7, #4]
 8003c0c:	466d      	mov	r5, sp
 8003c0e:	f106 0410 	add.w	r4, r6, #16
 8003c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c22:	1d33      	adds	r3, r6, #4
 8003c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c26:	6838      	ldr	r0, [r7, #0]
 8003c28:	f002 feae 	bl	8006988 <USB_DevInit>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e014      	b.n	8003c68 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d102      	bne.n	8003c5c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f80a 	bl	8003c70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f003 f86c 	bl	8006d3e <USB_DevDisconnect>

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	10000003 	.word	0x10000003

08003cb8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc6:	6013      	str	r3, [r2, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40007000 	.word	0x40007000

08003cd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e29b      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8087 	beq.w	8003e0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cfc:	4b96      	ldr	r3, [pc, #600]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d00c      	beq.n	8003d22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d08:	4b93      	ldr	r3, [pc, #588]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d112      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62>
 8003d14:	4b90      	ldr	r3, [pc, #576]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d20:	d10b      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d22:	4b8d      	ldr	r3, [pc, #564]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d06c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x130>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d168      	bne.n	8003e08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e275      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_OscConfig+0x7a>
 8003d44:	4b84      	ldr	r3, [pc, #528]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a83      	ldr	r2, [pc, #524]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	e02e      	b.n	8003db0 <HAL_RCC_OscConfig+0xd8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x9c>
 8003d5a:	4b7f      	ldr	r3, [pc, #508]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7e      	ldr	r2, [pc, #504]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b7c      	ldr	r3, [pc, #496]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7b      	ldr	r2, [pc, #492]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e01d      	b.n	8003db0 <HAL_RCC_OscConfig+0xd8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCC_OscConfig+0xc0>
 8003d7e:	4b76      	ldr	r3, [pc, #472]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a75      	ldr	r2, [pc, #468]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	4b73      	ldr	r3, [pc, #460]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a72      	ldr	r2, [pc, #456]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e00b      	b.n	8003db0 <HAL_RCC_OscConfig+0xd8>
 8003d98:	4b6f      	ldr	r3, [pc, #444]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6e      	ldr	r2, [pc, #440]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	4b6c      	ldr	r3, [pc, #432]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6b      	ldr	r2, [pc, #428]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d013      	beq.n	8003de0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe ffa4 	bl	8002d04 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc0:	f7fe ffa0 	bl	8002d04 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e229      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	4b61      	ldr	r3, [pc, #388]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0xe8>
 8003dde:	e014      	b.n	8003e0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fe ff90 	bl	8002d04 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de8:	f7fe ff8c 	bl	8002d04 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b64      	cmp	r3, #100	; 0x64
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e215      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfa:	4b57      	ldr	r3, [pc, #348]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x110>
 8003e06:	e000      	b.n	8003e0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d069      	beq.n	8003eea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e16:	4b50      	ldr	r3, [pc, #320]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e22:	4b4d      	ldr	r3, [pc, #308]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d11c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x190>
 8003e2e:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d116      	bne.n	8003e68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_RCC_OscConfig+0x17a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e1e9      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e52:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	493d      	ldr	r1, [pc, #244]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e66:	e040      	b.n	8003eea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d023      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e70:	4b39      	ldr	r3, [pc, #228]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a38      	ldr	r2, [pc, #224]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe ff42 	bl	8002d04 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e84:	f7fe ff3e 	bl	8002d04 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1c7      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e96:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea2:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4929      	ldr	r1, [pc, #164]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
 8003eb6:	e018      	b.n	8003eea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb8:	4b27      	ldr	r3, [pc, #156]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe ff1e 	bl	8002d04 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fe ff1a 	bl	8002d04 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e1a3      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d038      	beq.n	8003f68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d019      	beq.n	8003f32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f02:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0a:	f7fe fefb 	bl	8002d04 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f12:	f7fe fef7 	bl	8002d04 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e180      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x23a>
 8003f30:	e01a      	b.n	8003f68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f36:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <HAL_RCC_OscConfig+0x280>)
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3e:	f7fe fee1 	bl	8002d04 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f46:	f7fe fedd 	bl	8002d04 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d903      	bls.n	8003f5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e166      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
 8003f58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5c:	4b92      	ldr	r3, [pc, #584]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8003f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ee      	bne.n	8003f46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80a4 	beq.w	80040be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f76:	4b8c      	ldr	r3, [pc, #560]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10d      	bne.n	8003f9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	4b89      	ldr	r3, [pc, #548]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	4a88      	ldr	r2, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f8e:	4b86      	ldr	r3, [pc, #536]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f9e:	4b83      	ldr	r3, [pc, #524]	; (80041ac <HAL_RCC_OscConfig+0x4d4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d118      	bne.n	8003fdc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003faa:	4b80      	ldr	r3, [pc, #512]	; (80041ac <HAL_RCC_OscConfig+0x4d4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7f      	ldr	r2, [pc, #508]	; (80041ac <HAL_RCC_OscConfig+0x4d4>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb6:	f7fe fea5 	bl	8002d04 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbe:	f7fe fea1 	bl	8002d04 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b64      	cmp	r3, #100	; 0x64
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e12a      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd0:	4b76      	ldr	r3, [pc, #472]	; (80041ac <HAL_RCC_OscConfig+0x4d4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x31a>
 8003fe4:	4b70      	ldr	r3, [pc, #448]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	4a6f      	ldr	r2, [pc, #444]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff0:	e02d      	b.n	800404e <HAL_RCC_OscConfig+0x376>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0x33c>
 8003ffa:	4b6b      	ldr	r3, [pc, #428]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a6a      	ldr	r2, [pc, #424]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
 8004006:	4b68      	ldr	r3, [pc, #416]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	4a67      	ldr	r2, [pc, #412]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 800400c:	f023 0304 	bic.w	r3, r3, #4
 8004010:	6713      	str	r3, [r2, #112]	; 0x70
 8004012:	e01c      	b.n	800404e <HAL_RCC_OscConfig+0x376>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b05      	cmp	r3, #5
 800401a:	d10c      	bne.n	8004036 <HAL_RCC_OscConfig+0x35e>
 800401c:	4b62      	ldr	r3, [pc, #392]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4a61      	ldr	r2, [pc, #388]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004022:	f043 0304 	orr.w	r3, r3, #4
 8004026:	6713      	str	r3, [r2, #112]	; 0x70
 8004028:	4b5f      	ldr	r3, [pc, #380]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	4a5e      	ldr	r2, [pc, #376]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6713      	str	r3, [r2, #112]	; 0x70
 8004034:	e00b      	b.n	800404e <HAL_RCC_OscConfig+0x376>
 8004036:	4b5c      	ldr	r3, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a5b      	ldr	r2, [pc, #364]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
 8004042:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a58      	ldr	r2, [pc, #352]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004048:	f023 0304 	bic.w	r3, r3, #4
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d015      	beq.n	8004082 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fe fe55 	bl	8002d04 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fe fe51 	bl	8002d04 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0d8      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004074:	4b4c      	ldr	r3, [pc, #304]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ee      	beq.n	800405e <HAL_RCC_OscConfig+0x386>
 8004080:	e014      	b.n	80040ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fe fe3f 	bl	8002d04 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7fe fe3b 	bl	8002d04 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f241 3288 	movw	r2, #5000	; 0x1388
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e0c2      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a0:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1ee      	bne.n	800408a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b2:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	4a3c      	ldr	r2, [pc, #240]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80ae 	beq.w	8004224 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c8:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 030c 	and.w	r3, r3, #12
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d06d      	beq.n	80041b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d14b      	bne.n	8004174 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040dc:	4b32      	ldr	r3, [pc, #200]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a31      	ldr	r2, [pc, #196]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 80040e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fe fe0c 	bl	8002d04 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fe fe08 	bl	8002d04 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e091      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	3b01      	subs	r3, #1
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	071b      	lsls	r3, r3, #28
 800413a:	491b      	ldr	r1, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800414a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe fdda 	bl	8002d04 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004154:	f7fe fdd6 	bl	8002d04 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e05f      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x47c>
 8004172:	e057      	b.n	8004224 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a0b      	ldr	r2, [pc, #44]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 800417a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800417e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe fdc0 	bl	8002d04 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fe fdbc 	bl	8002d04 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e045      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <HAL_RCC_OscConfig+0x4d0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x4b0>
 80041a6:	e03d      	b.n	8004224 <HAL_RCC_OscConfig+0x54c>
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041b0:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <HAL_RCC_OscConfig+0x558>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d030      	beq.n	8004220 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d129      	bne.n	8004220 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d122      	bne.n	8004220 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041e0:	4013      	ands	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d119      	bne.n	8004220 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	3b01      	subs	r3, #1
 80041fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d10f      	bne.n	8004220 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d107      	bne.n	8004220 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800

08004234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0d0      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800424c:	4b6a      	ldr	r3, [pc, #424]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d910      	bls.n	800427c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b67      	ldr	r3, [pc, #412]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 020f 	bic.w	r2, r3, #15
 8004262:	4965      	ldr	r1, [pc, #404]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b63      	ldr	r3, [pc, #396]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0b8      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004294:	4b59      	ldr	r3, [pc, #356]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a58      	ldr	r2, [pc, #352]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800429e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042ac:	4b53      	ldr	r3, [pc, #332]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4a52      	ldr	r2, [pc, #328]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80042b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b8:	4b50      	ldr	r3, [pc, #320]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	494d      	ldr	r1, [pc, #308]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d040      	beq.n	8004358 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	4b47      	ldr	r3, [pc, #284]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d115      	bne.n	8004316 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e07f      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f6:	4b41      	ldr	r3, [pc, #260]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e073      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004306:	4b3d      	ldr	r3, [pc, #244]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e06b      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f023 0203 	bic.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4936      	ldr	r1, [pc, #216]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 8004324:	4313      	orrs	r3, r2
 8004326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004328:	f7fe fcec 	bl	8002d04 <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	e00a      	b.n	8004346 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004330:	f7fe fce8 	bl	8002d04 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e053      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	4b2d      	ldr	r3, [pc, #180]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 020c 	and.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	429a      	cmp	r2, r3
 8004356:	d1eb      	bne.n	8004330 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004358:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d210      	bcs.n	8004388 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b24      	ldr	r3, [pc, #144]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f023 020f 	bic.w	r2, r3, #15
 800436e:	4922      	ldr	r1, [pc, #136]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004376:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e032      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4916      	ldr	r1, [pc, #88]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	490e      	ldr	r1, [pc, #56]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043c6:	f000 f821 	bl	800440c <HAL_RCC_GetSysClockFreq>
 80043ca:	4602      	mov	r2, r0
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	490a      	ldr	r1, [pc, #40]	; (8004400 <HAL_RCC_ClockConfig+0x1cc>)
 80043d8:	5ccb      	ldrb	r3, [r1, r3]
 80043da:	fa22 f303 	lsr.w	r3, r2, r3
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <HAL_RCC_ClockConfig+0x1d0>)
 80043e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_ClockConfig+0x1d4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fc ffc0 	bl	800136c <HAL_InitTick>

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023c00 	.word	0x40023c00
 80043fc:	40023800 	.word	0x40023800
 8004400:	0800cb2c 	.word	0x0800cb2c
 8004404:	20000000 	.word	0x20000000
 8004408:	20000010 	.word	0x20000010

0800440c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800440c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004410:	b090      	sub	sp, #64	; 0x40
 8004412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
 8004418:	2300      	movs	r3, #0
 800441a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800441c:	2300      	movs	r3, #0
 800441e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004424:	4b59      	ldr	r3, [pc, #356]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	2b08      	cmp	r3, #8
 800442e:	d00d      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x40>
 8004430:	2b08      	cmp	r3, #8
 8004432:	f200 80a1 	bhi.w	8004578 <HAL_RCC_GetSysClockFreq+0x16c>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x34>
 800443a:	2b04      	cmp	r3, #4
 800443c:	d003      	beq.n	8004446 <HAL_RCC_GetSysClockFreq+0x3a>
 800443e:	e09b      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b53      	ldr	r3, [pc, #332]	; (8004590 <HAL_RCC_GetSysClockFreq+0x184>)
 8004442:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004444:	e09b      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004446:	4b53      	ldr	r3, [pc, #332]	; (8004594 <HAL_RCC_GetSysClockFreq+0x188>)
 8004448:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800444a:	e098      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800444c:	4b4f      	ldr	r3, [pc, #316]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004454:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004456:	4b4d      	ldr	r3, [pc, #308]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d028      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004462:	4b4a      	ldr	r3, [pc, #296]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	2200      	movs	r2, #0
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	627a      	str	r2, [r7, #36]	; 0x24
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004474:	2100      	movs	r1, #0
 8004476:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCC_GetSysClockFreq+0x188>)
 8004478:	fb03 f201 	mul.w	r2, r3, r1
 800447c:	2300      	movs	r3, #0
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	4413      	add	r3, r2
 8004484:	4a43      	ldr	r2, [pc, #268]	; (8004594 <HAL_RCC_GetSysClockFreq+0x188>)
 8004486:	fba0 1202 	umull	r1, r2, r0, r2
 800448a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800448c:	460a      	mov	r2, r1
 800448e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004492:	4413      	add	r3, r2
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004498:	2200      	movs	r2, #0
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	61fa      	str	r2, [r7, #28]
 800449e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044a6:	f7fb fed3 	bl	8000250 <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4613      	mov	r3, r2
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b2:	e053      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b4:	4b35      	ldr	r3, [pc, #212]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	099b      	lsrs	r3, r3, #6
 80044ba:	2200      	movs	r2, #0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	617a      	str	r2, [r7, #20]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044c6:	f04f 0b00 	mov.w	fp, #0
 80044ca:	4652      	mov	r2, sl
 80044cc:	465b      	mov	r3, fp
 80044ce:	f04f 0000 	mov.w	r0, #0
 80044d2:	f04f 0100 	mov.w	r1, #0
 80044d6:	0159      	lsls	r1, r3, #5
 80044d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044dc:	0150      	lsls	r0, r2, #5
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	ebb2 080a 	subs.w	r8, r2, sl
 80044e6:	eb63 090b 	sbc.w	r9, r3, fp
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004502:	eb63 0509 	sbc.w	r5, r3, r9
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	00eb      	lsls	r3, r5, #3
 8004510:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004514:	00e2      	lsls	r2, r4, #3
 8004516:	4614      	mov	r4, r2
 8004518:	461d      	mov	r5, r3
 800451a:	eb14 030a 	adds.w	r3, r4, sl
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	eb45 030b 	adc.w	r3, r5, fp
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004532:	4629      	mov	r1, r5
 8004534:	028b      	lsls	r3, r1, #10
 8004536:	4621      	mov	r1, r4
 8004538:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800453c:	4621      	mov	r1, r4
 800453e:	028a      	lsls	r2, r1, #10
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	2200      	movs	r2, #0
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	60fa      	str	r2, [r7, #12]
 800454c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004550:	f7fb fe7e 	bl	8000250 <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4613      	mov	r3, r2
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	3301      	adds	r3, #1
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800456c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004576:	e002      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_RCC_GetSysClockFreq+0x184>)
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800457c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004580:	4618      	mov	r0, r3
 8004582:	3740      	adds	r7, #64	; 0x40
 8004584:	46bd      	mov	sp, r7
 8004586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	00f42400 	.word	0x00f42400
 8004594:	017d7840 	.word	0x017d7840

08004598 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <HAL_RCC_GetHCLKFreq+0x14>)
 800459e:	681b      	ldr	r3, [r3, #0]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000000 	.word	0x20000000

080045b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045b4:	f7ff fff0 	bl	8004598 <HAL_RCC_GetHCLKFreq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	0a9b      	lsrs	r3, r3, #10
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	4903      	ldr	r1, [pc, #12]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c6:	5ccb      	ldrb	r3, [r1, r3]
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40023800 	.word	0x40023800
 80045d4:	0800cb3c 	.word	0x0800cb3c

080045d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045dc:	f7ff ffdc 	bl	8004598 <HAL_RCC_GetHCLKFreq>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	0b5b      	lsrs	r3, r3, #13
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4903      	ldr	r1, [pc, #12]	; (80045fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ee:	5ccb      	ldrb	r3, [r1, r3]
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40023800 	.word	0x40023800
 80045fc:	0800cb3c 	.word	0x0800cb3c

08004600 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	220f      	movs	r2, #15
 800460e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <HAL_RCC_GetClockConfig+0x5c>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0203 	and.w	r2, r3, #3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_RCC_GetClockConfig+0x5c>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <HAL_RCC_GetClockConfig+0x5c>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <HAL_RCC_GetClockConfig+0x5c>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	08db      	lsrs	r3, r3, #3
 800463a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004642:	4b07      	ldr	r3, [pc, #28]	; (8004660 <HAL_RCC_GetClockConfig+0x60>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 020f 	and.w	r2, r3, #15
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	601a      	str	r2, [r3, #0]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800
 8004660:	40023c00 	.word	0x40023c00

08004664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d012      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800468c:	4b69      	ldr	r3, [pc, #420]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4a68      	ldr	r2, [pc, #416]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004696:	6093      	str	r3, [r2, #8]
 8004698:	4b66      	ldr	r3, [pc, #408]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a0:	4964      	ldr	r1, [pc, #400]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046ae:	2301      	movs	r3, #1
 80046b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d017      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046be:	4b5d      	ldr	r3, [pc, #372]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	4959      	ldr	r1, [pc, #356]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046dc:	d101      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046ea:	2301      	movs	r3, #1
 80046ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d017      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046fa:	4b4e      	ldr	r3, [pc, #312]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004700:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	494a      	ldr	r1, [pc, #296]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004718:	d101      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800471a:	2301      	movs	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004726:	2301      	movs	r3, #1
 8004728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 808b 	beq.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004748:	4b3a      	ldr	r3, [pc, #232]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	4a39      	ldr	r2, [pc, #228]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004752:	6413      	str	r3, [r2, #64]	; 0x40
 8004754:	4b37      	ldr	r3, [pc, #220]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004760:	4b35      	ldr	r3, [pc, #212]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a34      	ldr	r2, [pc, #208]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800476a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476c:	f7fe faca 	bl	8002d04 <HAL_GetTick>
 8004770:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004774:	f7fe fac6 	bl	8002d04 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	; 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e38f      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004786:	4b2c      	ldr	r3, [pc, #176]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004792:	4b28      	ldr	r3, [pc, #160]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d035      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d02e      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047b0:	4b20      	ldr	r3, [pc, #128]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ba:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047c6:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047d2:	4a18      	ldr	r2, [pc, #96]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047d8:	4b16      	ldr	r3, [pc, #88]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d114      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fe fa8e 	bl	8002d04 <HAL_GetTick>
 80047e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ea:	e00a      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ec:	f7fe fa8a 	bl	8002d04 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e351      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004802:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0ee      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800481a:	d111      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800482a:	400b      	ands	r3, r1
 800482c:	4901      	ldr	r1, [pc, #4]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
 8004832:	e00b      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004834:	40023800 	.word	0x40023800
 8004838:	40007000 	.word	0x40007000
 800483c:	0ffffcff 	.word	0x0ffffcff
 8004840:	4bac      	ldr	r3, [pc, #688]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4aab      	ldr	r2, [pc, #684]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004846:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800484a:	6093      	str	r3, [r2, #8]
 800484c:	4ba9      	ldr	r3, [pc, #676]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004858:	49a6      	ldr	r1, [pc, #664]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485a:	4313      	orrs	r3, r2
 800485c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	d010      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800486a:	4ba2      	ldr	r3, [pc, #648]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004870:	4aa0      	ldr	r2, [pc, #640]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004876:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800487a:	4b9e      	ldr	r3, [pc, #632]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	499b      	ldr	r1, [pc, #620]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004898:	4b96      	ldr	r3, [pc, #600]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048a6:	4993      	ldr	r1, [pc, #588]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ba:	4b8e      	ldr	r3, [pc, #568]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c8:	498a      	ldr	r1, [pc, #552]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048dc:	4b85      	ldr	r3, [pc, #532]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ea:	4982      	ldr	r1, [pc, #520]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048fe:	4b7d      	ldr	r3, [pc, #500]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004904:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	4979      	ldr	r1, [pc, #484]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004920:	4b74      	ldr	r3, [pc, #464]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004926:	f023 0203 	bic.w	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	4971      	ldr	r1, [pc, #452]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004942:	4b6c      	ldr	r3, [pc, #432]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004948:	f023 020c 	bic.w	r2, r3, #12
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004950:	4968      	ldr	r1, [pc, #416]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004964:	4b63      	ldr	r3, [pc, #396]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	4960      	ldr	r1, [pc, #384]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004986:	4b5b      	ldr	r3, [pc, #364]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004994:	4957      	ldr	r1, [pc, #348]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049a8:	4b52      	ldr	r3, [pc, #328]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	494f      	ldr	r1, [pc, #316]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049ca:	4b4a      	ldr	r3, [pc, #296]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d8:	4946      	ldr	r1, [pc, #280]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049ec:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fa:	493e      	ldr	r1, [pc, #248]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a0e:	4b39      	ldr	r3, [pc, #228]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1c:	4935      	ldr	r1, [pc, #212]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a30:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a3e:	492d      	ldr	r1, [pc, #180]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d011      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a52:	4b28      	ldr	r3, [pc, #160]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a60:	4924      	ldr	r1, [pc, #144]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a70:	d101      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a72:	2301      	movs	r3, #1
 8004a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a92:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa0:	4914      	ldr	r1, [pc, #80]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac4:	490b      	ldr	r1, [pc, #44]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00f      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ade:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae8:	4902      	ldr	r1, [pc, #8]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004af0:	e002      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b04:	4b8a      	ldr	r3, [pc, #552]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	4986      	ldr	r1, [pc, #536]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00b      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b28:	4b81      	ldr	r3, [pc, #516]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b38:	497d      	ldr	r1, [pc, #500]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d006      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80d6 	beq.w	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b54:	4b76      	ldr	r3, [pc, #472]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a75      	ldr	r2, [pc, #468]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b60:	f7fe f8d0 	bl	8002d04 <HAL_GetTick>
 8004b64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b68:	f7fe f8cc 	bl	8002d04 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e195      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b7a:	4b6d      	ldr	r3, [pc, #436]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d021      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11d      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b9a:	4b65      	ldr	r3, [pc, #404]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ba8:	4b61      	ldr	r3, [pc, #388]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bae:	0e1b      	lsrs	r3, r3, #24
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	019a      	lsls	r2, r3, #6
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	071b      	lsls	r3, r3, #28
 8004bce:	4958      	ldr	r1, [pc, #352]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d02e      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c00:	d129      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c02:	4b4b      	ldr	r3, [pc, #300]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c10:	4b47      	ldr	r3, [pc, #284]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c16:	0f1b      	lsrs	r3, r3, #28
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	019a      	lsls	r2, r3, #6
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	061b      	lsls	r3, r3, #24
 8004c30:	431a      	orrs	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	071b      	lsls	r3, r3, #28
 8004c36:	493e      	ldr	r1, [pc, #248]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c3e:	4b3c      	ldr	r3, [pc, #240]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c44:	f023 021f 	bic.w	r2, r3, #31
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	4938      	ldr	r1, [pc, #224]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01d      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c62:	4b33      	ldr	r3, [pc, #204]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c68:	0e1b      	lsrs	r3, r3, #24
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c70:	4b2f      	ldr	r3, [pc, #188]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c76:	0f1b      	lsrs	r3, r3, #28
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	019a      	lsls	r2, r3, #6
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	061b      	lsls	r3, r3, #24
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	071b      	lsls	r3, r3, #28
 8004c96:	4926      	ldr	r1, [pc, #152]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d011      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	019a      	lsls	r2, r3, #6
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	491a      	ldr	r1, [pc, #104]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cce:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cda:	f7fe f813 	bl	8002d04 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ce2:	f7fe f80f 	bl	8002d04 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b64      	cmp	r3, #100	; 0x64
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0d8      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	f040 80ce 	bne.w	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d08:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a08      	ldr	r2, [pc, #32]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d14:	f7fd fff6 	bl	8002d04 <HAL_GetTick>
 8004d18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d1c:	f7fd fff2 	bl	8002d04 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d904      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e0bb      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d34:	4b5e      	ldr	r3, [pc, #376]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d40:	d0ec      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02e      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d12a      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d6a:	4b51      	ldr	r3, [pc, #324]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d78:	4b4d      	ldr	r3, [pc, #308]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	0f1b      	lsrs	r3, r3, #28
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	019a      	lsls	r2, r3, #6
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	071b      	lsls	r3, r3, #28
 8004d9e:	4944      	ldr	r1, [pc, #272]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004da6:	4b42      	ldr	r3, [pc, #264]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	3b01      	subs	r3, #1
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	493d      	ldr	r1, [pc, #244]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d022      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd4:	d11d      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dd6:	4b36      	ldr	r3, [pc, #216]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	0e1b      	lsrs	r3, r3, #24
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004de4:	4b32      	ldr	r3, [pc, #200]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	0f1b      	lsrs	r3, r3, #28
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	019a      	lsls	r2, r3, #6
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	061b      	lsls	r3, r3, #24
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	071b      	lsls	r3, r3, #28
 8004e0a:	4929      	ldr	r1, [pc, #164]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d028      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e1e:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e2c:	4b20      	ldr	r3, [pc, #128]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	0c1b      	lsrs	r3, r3, #16
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	019a      	lsls	r2, r3, #6
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	041b      	lsls	r3, r3, #16
 8004e44:	431a      	orrs	r2, r3
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	061b      	lsls	r3, r3, #24
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	071b      	lsls	r3, r3, #28
 8004e52:	4917      	ldr	r1, [pc, #92]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e5a:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	4911      	ldr	r1, [pc, #68]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e70:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a0e      	ldr	r2, [pc, #56]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fd ff42 	bl	8002d04 <HAL_GetTick>
 8004e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e84:	f7fd ff3e 	bl	8002d04 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	; 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e007      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ea2:	d1ef      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800

08004eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e049      	b.n	8004f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc f8f2 	bl	80010c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f000 fc66 	bl	80057c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d001      	beq.n	8004f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e054      	b.n	8005026 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a26      	ldr	r2, [pc, #152]	; (8005034 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d022      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0x80>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa6:	d01d      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0x80>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d018      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0x80>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a21      	ldr	r2, [pc, #132]	; (800503c <HAL_TIM_Base_Start_IT+0xd8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d013      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0x80>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00e      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0x80>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <HAL_TIM_Base_Start_IT+0xe0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d009      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0x80>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d004      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0x80>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1b      	ldr	r2, [pc, #108]	; (800504c <HAL_TIM_Base_Start_IT+0xe8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d115      	bne.n	8005010 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	4b19      	ldr	r3, [pc, #100]	; (8005050 <HAL_TIM_Base_Start_IT+0xec>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d015      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0xbe>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffc:	d011      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0201 	orr.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500e:	e008      	b.n	8005022 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e000      	b.n	8005024 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40010400 	.word	0x40010400
 8005048:	40014000 	.word	0x40014000
 800504c:	40001800 	.word	0x40001800
 8005050:	00010007 	.word	0x00010007

08005054 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e049      	b.n	80050fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f841 	bl	8005102 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3304      	adds	r3, #4
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f000 fb96 	bl	80057c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <HAL_TIM_PWM_Start+0x24>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b01      	cmp	r3, #1
 8005132:	bf14      	ite	ne
 8005134:	2301      	movne	r3, #1
 8005136:	2300      	moveq	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	e03c      	b.n	80051b6 <HAL_TIM_PWM_Start+0x9e>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b04      	cmp	r3, #4
 8005140:	d109      	bne.n	8005156 <HAL_TIM_PWM_Start+0x3e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b01      	cmp	r3, #1
 800514c:	bf14      	ite	ne
 800514e:	2301      	movne	r3, #1
 8005150:	2300      	moveq	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	e02f      	b.n	80051b6 <HAL_TIM_PWM_Start+0x9e>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d109      	bne.n	8005170 <HAL_TIM_PWM_Start+0x58>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	e022      	b.n	80051b6 <HAL_TIM_PWM_Start+0x9e>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b0c      	cmp	r3, #12
 8005174:	d109      	bne.n	800518a <HAL_TIM_PWM_Start+0x72>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	bf14      	ite	ne
 8005182:	2301      	movne	r3, #1
 8005184:	2300      	moveq	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	e015      	b.n	80051b6 <HAL_TIM_PWM_Start+0x9e>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b10      	cmp	r3, #16
 800518e:	d109      	bne.n	80051a4 <HAL_TIM_PWM_Start+0x8c>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	bf14      	ite	ne
 800519c:	2301      	movne	r3, #1
 800519e:	2300      	moveq	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e008      	b.n	80051b6 <HAL_TIM_PWM_Start+0x9e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e092      	b.n	80052e4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <HAL_TIM_PWM_Start+0xb6>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051cc:	e023      	b.n	8005216 <HAL_TIM_PWM_Start+0xfe>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d104      	bne.n	80051de <HAL_TIM_PWM_Start+0xc6>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051dc:	e01b      	b.n	8005216 <HAL_TIM_PWM_Start+0xfe>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d104      	bne.n	80051ee <HAL_TIM_PWM_Start+0xd6>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ec:	e013      	b.n	8005216 <HAL_TIM_PWM_Start+0xfe>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b0c      	cmp	r3, #12
 80051f2:	d104      	bne.n	80051fe <HAL_TIM_PWM_Start+0xe6>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051fc:	e00b      	b.n	8005216 <HAL_TIM_PWM_Start+0xfe>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b10      	cmp	r3, #16
 8005202:	d104      	bne.n	800520e <HAL_TIM_PWM_Start+0xf6>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800520c:	e003      	b.n	8005216 <HAL_TIM_PWM_Start+0xfe>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2202      	movs	r2, #2
 8005212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2201      	movs	r2, #1
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fdce 	bl	8005dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a30      	ldr	r2, [pc, #192]	; (80052ec <HAL_TIM_PWM_Start+0x1d4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <HAL_TIM_PWM_Start+0x120>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2f      	ldr	r2, [pc, #188]	; (80052f0 <HAL_TIM_PWM_Start+0x1d8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d101      	bne.n	800523c <HAL_TIM_PWM_Start+0x124>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <HAL_TIM_PWM_Start+0x126>
 800523c:	2300      	movs	r3, #0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005250:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a25      	ldr	r2, [pc, #148]	; (80052ec <HAL_TIM_PWM_Start+0x1d4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d022      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x18a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005264:	d01d      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x18a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <HAL_TIM_PWM_Start+0x1dc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d018      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x18a>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a20      	ldr	r2, [pc, #128]	; (80052f8 <HAL_TIM_PWM_Start+0x1e0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x18a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <HAL_TIM_PWM_Start+0x1e4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x18a>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a19      	ldr	r2, [pc, #100]	; (80052f0 <HAL_TIM_PWM_Start+0x1d8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x18a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <HAL_TIM_PWM_Start+0x1e8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x18a>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a19      	ldr	r2, [pc, #100]	; (8005304 <HAL_TIM_PWM_Start+0x1ec>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d115      	bne.n	80052ce <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	4b17      	ldr	r3, [pc, #92]	; (8005308 <HAL_TIM_PWM_Start+0x1f0>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b06      	cmp	r3, #6
 80052b2:	d015      	beq.n	80052e0 <HAL_TIM_PWM_Start+0x1c8>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ba:	d011      	beq.n	80052e0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052cc:	e008      	b.n	80052e0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0201 	orr.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e000      	b.n	80052e2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40010400 	.word	0x40010400
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40000c00 	.word	0x40000c00
 8005300:	40014000 	.word	0x40014000
 8005304:	40001800 	.word	0x40001800
 8005308:	00010007 	.word	0x00010007

0800530c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d122      	bne.n	8005368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b02      	cmp	r3, #2
 800532e:	d11b      	bne.n	8005368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0202 	mvn.w	r2, #2
 8005338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa1a 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa0c 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa1d 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b04      	cmp	r3, #4
 8005374:	d122      	bne.n	80053bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b04      	cmp	r3, #4
 8005382:	d11b      	bne.n	80053bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0204 	mvn.w	r2, #4
 800538c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f9f0 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9e2 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f9f3 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d122      	bne.n	8005410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d11b      	bne.n	8005410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0208 	mvn.w	r2, #8
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2204      	movs	r2, #4
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f9c6 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9b8 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f9c9 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	2b10      	cmp	r3, #16
 800541c:	d122      	bne.n	8005464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b10      	cmp	r3, #16
 800542a:	d11b      	bne.n	8005464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0210 	mvn.w	r2, #16
 8005434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2208      	movs	r2, #8
 800543a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f99c 	bl	8005788 <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f98e 	bl	8005774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f99f 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10e      	bne.n	8005490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b01      	cmp	r3, #1
 800547e:	d107      	bne.n	8005490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0201 	mvn.w	r2, #1
 8005488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fb fd6c 	bl	8000f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d10e      	bne.n	80054bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d107      	bne.n	80054bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fcb1 	bl	8005e1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ca:	d10e      	bne.n	80054ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d6:	2b80      	cmp	r3, #128	; 0x80
 80054d8:	d107      	bne.n	80054ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fca4 	bl	8005e32 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d10e      	bne.n	8005516 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d107      	bne.n	8005516 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800550e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f94d 	bl	80057b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b20      	cmp	r3, #32
 8005522:	d10e      	bne.n	8005542 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b20      	cmp	r3, #32
 8005530:	d107      	bne.n	8005542 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f06f 0220 	mvn.w	r2, #32
 800553a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fc64 	bl	8005e0a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005566:	2302      	movs	r3, #2
 8005568:	e0ff      	b.n	800576a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b14      	cmp	r3, #20
 8005576:	f200 80f0 	bhi.w	800575a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800557a:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005580:	080055d5 	.word	0x080055d5
 8005584:	0800575b 	.word	0x0800575b
 8005588:	0800575b 	.word	0x0800575b
 800558c:	0800575b 	.word	0x0800575b
 8005590:	08005615 	.word	0x08005615
 8005594:	0800575b 	.word	0x0800575b
 8005598:	0800575b 	.word	0x0800575b
 800559c:	0800575b 	.word	0x0800575b
 80055a0:	08005657 	.word	0x08005657
 80055a4:	0800575b 	.word	0x0800575b
 80055a8:	0800575b 	.word	0x0800575b
 80055ac:	0800575b 	.word	0x0800575b
 80055b0:	08005697 	.word	0x08005697
 80055b4:	0800575b 	.word	0x0800575b
 80055b8:	0800575b 	.word	0x0800575b
 80055bc:	0800575b 	.word	0x0800575b
 80055c0:	080056d9 	.word	0x080056d9
 80055c4:	0800575b 	.word	0x0800575b
 80055c8:	0800575b 	.word	0x0800575b
 80055cc:	0800575b 	.word	0x0800575b
 80055d0:	08005719 	.word	0x08005719
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68b9      	ldr	r1, [r7, #8]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f992 	bl	8005904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0208 	orr.w	r2, r2, #8
 80055ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0204 	bic.w	r2, r2, #4
 80055fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6999      	ldr	r1, [r3, #24]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	619a      	str	r2, [r3, #24]
      break;
 8005612:	e0a5      	b.n	8005760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f9e4 	bl	80059e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800562e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800563e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6999      	ldr	r1, [r3, #24]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	021a      	lsls	r2, r3, #8
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	619a      	str	r2, [r3, #24]
      break;
 8005654:	e084      	b.n	8005760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fa3b 	bl	8005ad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0208 	orr.w	r2, r2, #8
 8005670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0204 	bic.w	r2, r2, #4
 8005680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69d9      	ldr	r1, [r3, #28]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	61da      	str	r2, [r3, #28]
      break;
 8005694:	e064      	b.n	8005760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fa91 	bl	8005bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69d9      	ldr	r1, [r3, #28]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	021a      	lsls	r2, r3, #8
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	61da      	str	r2, [r3, #28]
      break;
 80056d6:	e043      	b.n	8005760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fac8 	bl	8005c74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0208 	orr.w	r2, r2, #8
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0204 	bic.w	r2, r2, #4
 8005702:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005716:	e023      	b.n	8005760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fafa 	bl	8005d18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005732:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005742:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	021a      	lsls	r2, r3, #8
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005758:	e002      	b.n	8005760 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	75fb      	strb	r3, [r7, #23]
      break;
 800575e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005768:	7dfb      	ldrb	r3, [r7, #23]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop

08005774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a40      	ldr	r2, [pc, #256]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d013      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e2:	d00f      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a3d      	ldr	r2, [pc, #244]	; (80058dc <TIM_Base_SetConfig+0x118>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a3c      	ldr	r2, [pc, #240]	; (80058e0 <TIM_Base_SetConfig+0x11c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a3b      	ldr	r2, [pc, #236]	; (80058e4 <TIM_Base_SetConfig+0x120>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a3a      	ldr	r2, [pc, #232]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d108      	bne.n	8005816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2f      	ldr	r2, [pc, #188]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d02b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005824:	d027      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a2c      	ldr	r2, [pc, #176]	; (80058dc <TIM_Base_SetConfig+0x118>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d023      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a2b      	ldr	r2, [pc, #172]	; (80058e0 <TIM_Base_SetConfig+0x11c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01f      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <TIM_Base_SetConfig+0x120>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d01b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a29      	ldr	r2, [pc, #164]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d017      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a28      	ldr	r2, [pc, #160]	; (80058ec <TIM_Base_SetConfig+0x128>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <TIM_Base_SetConfig+0x12c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00f      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a26      	ldr	r2, [pc, #152]	; (80058f4 <TIM_Base_SetConfig+0x130>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a25      	ldr	r2, [pc, #148]	; (80058f8 <TIM_Base_SetConfig+0x134>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a24      	ldr	r2, [pc, #144]	; (80058fc <TIM_Base_SetConfig+0x138>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a23      	ldr	r2, [pc, #140]	; (8005900 <TIM_Base_SetConfig+0x13c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_Base_SetConfig+0xf8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a0c      	ldr	r2, [pc, #48]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d103      	bne.n	80058c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	615a      	str	r2, [r3, #20]
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	40010400 	.word	0x40010400
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800
 80058f8:	40001800 	.word	0x40001800
 80058fc:	40001c00 	.word	0x40001c00
 8005900:	40002000 	.word	0x40002000

08005904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0201 	bic.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4b2b      	ldr	r3, [pc, #172]	; (80059dc <TIM_OC1_SetConfig+0xd8>)
 8005930:	4013      	ands	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 0302 	bic.w	r3, r3, #2
 800594c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a21      	ldr	r2, [pc, #132]	; (80059e0 <TIM_OC1_SetConfig+0xdc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_OC1_SetConfig+0x64>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a20      	ldr	r2, [pc, #128]	; (80059e4 <TIM_OC1_SetConfig+0xe0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d10c      	bne.n	8005982 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 0308 	bic.w	r3, r3, #8
 800596e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 0304 	bic.w	r3, r3, #4
 8005980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <TIM_OC1_SetConfig+0xdc>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_OC1_SetConfig+0x8e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <TIM_OC1_SetConfig+0xe0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d111      	bne.n	80059b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	fffeff8f 	.word	0xfffeff8f
 80059e0:	40010000 	.word	0x40010000
 80059e4:	40010400 	.word	0x40010400

080059e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f023 0210 	bic.w	r2, r3, #16
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4b2e      	ldr	r3, [pc, #184]	; (8005acc <TIM_OC2_SetConfig+0xe4>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 0320 	bic.w	r3, r3, #32
 8005a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a23      	ldr	r2, [pc, #140]	; (8005ad0 <TIM_OC2_SetConfig+0xe8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC2_SetConfig+0x68>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a22      	ldr	r2, [pc, #136]	; (8005ad4 <TIM_OC2_SetConfig+0xec>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10d      	bne.n	8005a6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <TIM_OC2_SetConfig+0xe8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_OC2_SetConfig+0x94>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <TIM_OC2_SetConfig+0xec>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d113      	bne.n	8005aa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	feff8fff 	.word	0xfeff8fff
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	40010400 	.word	0x40010400

08005ad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4b2d      	ldr	r3, [pc, #180]	; (8005bb8 <TIM_OC3_SetConfig+0xe0>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a22      	ldr	r2, [pc, #136]	; (8005bbc <TIM_OC3_SetConfig+0xe4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_OC3_SetConfig+0x66>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a21      	ldr	r2, [pc, #132]	; (8005bc0 <TIM_OC3_SetConfig+0xe8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d10d      	bne.n	8005b5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <TIM_OC3_SetConfig+0xe4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_OC3_SetConfig+0x92>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a16      	ldr	r2, [pc, #88]	; (8005bc0 <TIM_OC3_SetConfig+0xe8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d113      	bne.n	8005b92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	621a      	str	r2, [r3, #32]
}
 8005bac:	bf00      	nop
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	fffeff8f 	.word	0xfffeff8f
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40010400 	.word	0x40010400

08005bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4b1e      	ldr	r3, [pc, #120]	; (8005c68 <TIM_OC4_SetConfig+0xa4>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	031b      	lsls	r3, r3, #12
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <TIM_OC4_SetConfig+0xa8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_OC4_SetConfig+0x68>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a12      	ldr	r2, [pc, #72]	; (8005c70 <TIM_OC4_SetConfig+0xac>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d109      	bne.n	8005c40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	019b      	lsls	r3, r3, #6
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	621a      	str	r2, [r3, #32]
}
 8005c5a:	bf00      	nop
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	feff8fff 	.word	0xfeff8fff
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40010400 	.word	0x40010400

08005c74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <TIM_OC5_SetConfig+0x98>)
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	041b      	lsls	r3, r3, #16
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a12      	ldr	r2, [pc, #72]	; (8005d10 <TIM_OC5_SetConfig+0x9c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_OC5_SetConfig+0x5e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a11      	ldr	r2, [pc, #68]	; (8005d14 <TIM_OC5_SetConfig+0xa0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d109      	bne.n	8005ce6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	621a      	str	r2, [r3, #32]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	fffeff8f 	.word	0xfffeff8f
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40010400 	.word	0x40010400

08005d18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4b1c      	ldr	r3, [pc, #112]	; (8005db4 <TIM_OC6_SetConfig+0x9c>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	051b      	lsls	r3, r3, #20
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a13      	ldr	r2, [pc, #76]	; (8005db8 <TIM_OC6_SetConfig+0xa0>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d003      	beq.n	8005d78 <TIM_OC6_SetConfig+0x60>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a12      	ldr	r2, [pc, #72]	; (8005dbc <TIM_OC6_SetConfig+0xa4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d109      	bne.n	8005d8c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	029b      	lsls	r3, r3, #10
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	feff8fff 	.word	0xfeff8fff
 8005db8:	40010000 	.word	0x40010000
 8005dbc:	40010400 	.word	0x40010400

08005dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a1a      	ldr	r2, [r3, #32]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	401a      	ands	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	fa01 f303 	lsl.w	r3, r1, r3
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e040      	b.n	8005eda <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7fb f9a5 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2224      	movs	r2, #36	; 0x24
 8005e72:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f8af 	bl	8005fe8 <UART_SetConfig>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e022      	b.n	8005eda <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fb07 	bl	80064b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ec0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0201 	orr.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fb8e 	bl	80065f4 <UART_CheckIdleState>
 8005ed8:	4603      	mov	r3, r0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b08a      	sub	sp, #40	; 0x28
 8005ee6:	af02      	add	r7, sp, #8
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	603b      	str	r3, [r7, #0]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d171      	bne.n	8005fde <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <HAL_UART_Transmit+0x24>
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e06a      	b.n	8005fe0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2221      	movs	r2, #33	; 0x21
 8005f16:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f18:	f7fc fef4 	bl	8002d04 <HAL_GetTick>
 8005f1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	88fa      	ldrh	r2, [r7, #6]
 8005f22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	88fa      	ldrh	r2, [r7, #6]
 8005f2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f36:	d108      	bne.n	8005f4a <HAL_UART_Transmit+0x68>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	61bb      	str	r3, [r7, #24]
 8005f48:	e003      	b.n	8005f52 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f52:	e02c      	b.n	8005fae <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2180      	movs	r1, #128	; 0x80
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 fb95 	bl	800668e <UART_WaitOnFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e038      	b.n	8005fe0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10b      	bne.n	8005f8c <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	3302      	adds	r3, #2
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	e007      	b.n	8005f9c <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	781a      	ldrb	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1cc      	bne.n	8005f54 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2140      	movs	r1, #64	; 0x40
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fb62 	bl	800668e <UART_WaitOnFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e005      	b.n	8005fe0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e000      	b.n	8005fe0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3720      	adds	r7, #32
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4ba6      	ldr	r3, [pc, #664]	; (80062ac <UART_SetConfig+0x2c4>)
 8006014:	4013      	ands	r3, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6812      	ldr	r2, [r2, #0]
 800601a:	6979      	ldr	r1, [r7, #20]
 800601c:	430b      	orrs	r3, r1
 800601e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	430a      	orrs	r2, r1
 8006058:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a94      	ldr	r2, [pc, #592]	; (80062b0 <UART_SetConfig+0x2c8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d120      	bne.n	80060a6 <UART_SetConfig+0xbe>
 8006064:	4b93      	ldr	r3, [pc, #588]	; (80062b4 <UART_SetConfig+0x2cc>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	2b03      	cmp	r3, #3
 8006070:	d816      	bhi.n	80060a0 <UART_SetConfig+0xb8>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0x90>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006089 	.word	0x08006089
 800607c:	08006095 	.word	0x08006095
 8006080:	0800608f 	.word	0x0800608f
 8006084:	0800609b 	.word	0x0800609b
 8006088:	2301      	movs	r3, #1
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e150      	b.n	8006330 <UART_SetConfig+0x348>
 800608e:	2302      	movs	r3, #2
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e14d      	b.n	8006330 <UART_SetConfig+0x348>
 8006094:	2304      	movs	r3, #4
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e14a      	b.n	8006330 <UART_SetConfig+0x348>
 800609a:	2308      	movs	r3, #8
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e147      	b.n	8006330 <UART_SetConfig+0x348>
 80060a0:	2310      	movs	r3, #16
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e144      	b.n	8006330 <UART_SetConfig+0x348>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a83      	ldr	r2, [pc, #524]	; (80062b8 <UART_SetConfig+0x2d0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d132      	bne.n	8006116 <UART_SetConfig+0x12e>
 80060b0:	4b80      	ldr	r3, [pc, #512]	; (80062b4 <UART_SetConfig+0x2cc>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d828      	bhi.n	8006110 <UART_SetConfig+0x128>
 80060be:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <UART_SetConfig+0xdc>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060f9 	.word	0x080060f9
 80060c8:	08006111 	.word	0x08006111
 80060cc:	08006111 	.word	0x08006111
 80060d0:	08006111 	.word	0x08006111
 80060d4:	08006105 	.word	0x08006105
 80060d8:	08006111 	.word	0x08006111
 80060dc:	08006111 	.word	0x08006111
 80060e0:	08006111 	.word	0x08006111
 80060e4:	080060ff 	.word	0x080060ff
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006111 	.word	0x08006111
 80060f0:	08006111 	.word	0x08006111
 80060f4:	0800610b 	.word	0x0800610b
 80060f8:	2300      	movs	r3, #0
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e118      	b.n	8006330 <UART_SetConfig+0x348>
 80060fe:	2302      	movs	r3, #2
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e115      	b.n	8006330 <UART_SetConfig+0x348>
 8006104:	2304      	movs	r3, #4
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e112      	b.n	8006330 <UART_SetConfig+0x348>
 800610a:	2308      	movs	r3, #8
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e10f      	b.n	8006330 <UART_SetConfig+0x348>
 8006110:	2310      	movs	r3, #16
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e10c      	b.n	8006330 <UART_SetConfig+0x348>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a68      	ldr	r2, [pc, #416]	; (80062bc <UART_SetConfig+0x2d4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d120      	bne.n	8006162 <UART_SetConfig+0x17a>
 8006120:	4b64      	ldr	r3, [pc, #400]	; (80062b4 <UART_SetConfig+0x2cc>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800612a:	2b30      	cmp	r3, #48	; 0x30
 800612c:	d013      	beq.n	8006156 <UART_SetConfig+0x16e>
 800612e:	2b30      	cmp	r3, #48	; 0x30
 8006130:	d814      	bhi.n	800615c <UART_SetConfig+0x174>
 8006132:	2b20      	cmp	r3, #32
 8006134:	d009      	beq.n	800614a <UART_SetConfig+0x162>
 8006136:	2b20      	cmp	r3, #32
 8006138:	d810      	bhi.n	800615c <UART_SetConfig+0x174>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <UART_SetConfig+0x15c>
 800613e:	2b10      	cmp	r3, #16
 8006140:	d006      	beq.n	8006150 <UART_SetConfig+0x168>
 8006142:	e00b      	b.n	800615c <UART_SetConfig+0x174>
 8006144:	2300      	movs	r3, #0
 8006146:	77fb      	strb	r3, [r7, #31]
 8006148:	e0f2      	b.n	8006330 <UART_SetConfig+0x348>
 800614a:	2302      	movs	r3, #2
 800614c:	77fb      	strb	r3, [r7, #31]
 800614e:	e0ef      	b.n	8006330 <UART_SetConfig+0x348>
 8006150:	2304      	movs	r3, #4
 8006152:	77fb      	strb	r3, [r7, #31]
 8006154:	e0ec      	b.n	8006330 <UART_SetConfig+0x348>
 8006156:	2308      	movs	r3, #8
 8006158:	77fb      	strb	r3, [r7, #31]
 800615a:	e0e9      	b.n	8006330 <UART_SetConfig+0x348>
 800615c:	2310      	movs	r3, #16
 800615e:	77fb      	strb	r3, [r7, #31]
 8006160:	e0e6      	b.n	8006330 <UART_SetConfig+0x348>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a56      	ldr	r2, [pc, #344]	; (80062c0 <UART_SetConfig+0x2d8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d120      	bne.n	80061ae <UART_SetConfig+0x1c6>
 800616c:	4b51      	ldr	r3, [pc, #324]	; (80062b4 <UART_SetConfig+0x2cc>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006176:	2bc0      	cmp	r3, #192	; 0xc0
 8006178:	d013      	beq.n	80061a2 <UART_SetConfig+0x1ba>
 800617a:	2bc0      	cmp	r3, #192	; 0xc0
 800617c:	d814      	bhi.n	80061a8 <UART_SetConfig+0x1c0>
 800617e:	2b80      	cmp	r3, #128	; 0x80
 8006180:	d009      	beq.n	8006196 <UART_SetConfig+0x1ae>
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d810      	bhi.n	80061a8 <UART_SetConfig+0x1c0>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <UART_SetConfig+0x1a8>
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d006      	beq.n	800619c <UART_SetConfig+0x1b4>
 800618e:	e00b      	b.n	80061a8 <UART_SetConfig+0x1c0>
 8006190:	2300      	movs	r3, #0
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e0cc      	b.n	8006330 <UART_SetConfig+0x348>
 8006196:	2302      	movs	r3, #2
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e0c9      	b.n	8006330 <UART_SetConfig+0x348>
 800619c:	2304      	movs	r3, #4
 800619e:	77fb      	strb	r3, [r7, #31]
 80061a0:	e0c6      	b.n	8006330 <UART_SetConfig+0x348>
 80061a2:	2308      	movs	r3, #8
 80061a4:	77fb      	strb	r3, [r7, #31]
 80061a6:	e0c3      	b.n	8006330 <UART_SetConfig+0x348>
 80061a8:	2310      	movs	r3, #16
 80061aa:	77fb      	strb	r3, [r7, #31]
 80061ac:	e0c0      	b.n	8006330 <UART_SetConfig+0x348>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a44      	ldr	r2, [pc, #272]	; (80062c4 <UART_SetConfig+0x2dc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d125      	bne.n	8006204 <UART_SetConfig+0x21c>
 80061b8:	4b3e      	ldr	r3, [pc, #248]	; (80062b4 <UART_SetConfig+0x2cc>)
 80061ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061c6:	d017      	beq.n	80061f8 <UART_SetConfig+0x210>
 80061c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061cc:	d817      	bhi.n	80061fe <UART_SetConfig+0x216>
 80061ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d2:	d00b      	beq.n	80061ec <UART_SetConfig+0x204>
 80061d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d8:	d811      	bhi.n	80061fe <UART_SetConfig+0x216>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <UART_SetConfig+0x1fe>
 80061de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e2:	d006      	beq.n	80061f2 <UART_SetConfig+0x20a>
 80061e4:	e00b      	b.n	80061fe <UART_SetConfig+0x216>
 80061e6:	2300      	movs	r3, #0
 80061e8:	77fb      	strb	r3, [r7, #31]
 80061ea:	e0a1      	b.n	8006330 <UART_SetConfig+0x348>
 80061ec:	2302      	movs	r3, #2
 80061ee:	77fb      	strb	r3, [r7, #31]
 80061f0:	e09e      	b.n	8006330 <UART_SetConfig+0x348>
 80061f2:	2304      	movs	r3, #4
 80061f4:	77fb      	strb	r3, [r7, #31]
 80061f6:	e09b      	b.n	8006330 <UART_SetConfig+0x348>
 80061f8:	2308      	movs	r3, #8
 80061fa:	77fb      	strb	r3, [r7, #31]
 80061fc:	e098      	b.n	8006330 <UART_SetConfig+0x348>
 80061fe:	2310      	movs	r3, #16
 8006200:	77fb      	strb	r3, [r7, #31]
 8006202:	e095      	b.n	8006330 <UART_SetConfig+0x348>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a2f      	ldr	r2, [pc, #188]	; (80062c8 <UART_SetConfig+0x2e0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d125      	bne.n	800625a <UART_SetConfig+0x272>
 800620e:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <UART_SetConfig+0x2cc>)
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006214:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800621c:	d017      	beq.n	800624e <UART_SetConfig+0x266>
 800621e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006222:	d817      	bhi.n	8006254 <UART_SetConfig+0x26c>
 8006224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006228:	d00b      	beq.n	8006242 <UART_SetConfig+0x25a>
 800622a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622e:	d811      	bhi.n	8006254 <UART_SetConfig+0x26c>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <UART_SetConfig+0x254>
 8006234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006238:	d006      	beq.n	8006248 <UART_SetConfig+0x260>
 800623a:	e00b      	b.n	8006254 <UART_SetConfig+0x26c>
 800623c:	2301      	movs	r3, #1
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e076      	b.n	8006330 <UART_SetConfig+0x348>
 8006242:	2302      	movs	r3, #2
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e073      	b.n	8006330 <UART_SetConfig+0x348>
 8006248:	2304      	movs	r3, #4
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e070      	b.n	8006330 <UART_SetConfig+0x348>
 800624e:	2308      	movs	r3, #8
 8006250:	77fb      	strb	r3, [r7, #31]
 8006252:	e06d      	b.n	8006330 <UART_SetConfig+0x348>
 8006254:	2310      	movs	r3, #16
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e06a      	b.n	8006330 <UART_SetConfig+0x348>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1b      	ldr	r2, [pc, #108]	; (80062cc <UART_SetConfig+0x2e4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d138      	bne.n	80062d6 <UART_SetConfig+0x2ee>
 8006264:	4b13      	ldr	r3, [pc, #76]	; (80062b4 <UART_SetConfig+0x2cc>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800626e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006272:	d017      	beq.n	80062a4 <UART_SetConfig+0x2bc>
 8006274:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006278:	d82a      	bhi.n	80062d0 <UART_SetConfig+0x2e8>
 800627a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627e:	d00b      	beq.n	8006298 <UART_SetConfig+0x2b0>
 8006280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006284:	d824      	bhi.n	80062d0 <UART_SetConfig+0x2e8>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <UART_SetConfig+0x2aa>
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628e:	d006      	beq.n	800629e <UART_SetConfig+0x2b6>
 8006290:	e01e      	b.n	80062d0 <UART_SetConfig+0x2e8>
 8006292:	2300      	movs	r3, #0
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e04b      	b.n	8006330 <UART_SetConfig+0x348>
 8006298:	2302      	movs	r3, #2
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e048      	b.n	8006330 <UART_SetConfig+0x348>
 800629e:	2304      	movs	r3, #4
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e045      	b.n	8006330 <UART_SetConfig+0x348>
 80062a4:	2308      	movs	r3, #8
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e042      	b.n	8006330 <UART_SetConfig+0x348>
 80062aa:	bf00      	nop
 80062ac:	efff69f3 	.word	0xefff69f3
 80062b0:	40011000 	.word	0x40011000
 80062b4:	40023800 	.word	0x40023800
 80062b8:	40004400 	.word	0x40004400
 80062bc:	40004800 	.word	0x40004800
 80062c0:	40004c00 	.word	0x40004c00
 80062c4:	40005000 	.word	0x40005000
 80062c8:	40011400 	.word	0x40011400
 80062cc:	40007800 	.word	0x40007800
 80062d0:	2310      	movs	r3, #16
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e02c      	b.n	8006330 <UART_SetConfig+0x348>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a72      	ldr	r2, [pc, #456]	; (80064a4 <UART_SetConfig+0x4bc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d125      	bne.n	800632c <UART_SetConfig+0x344>
 80062e0:	4b71      	ldr	r3, [pc, #452]	; (80064a8 <UART_SetConfig+0x4c0>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80062ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062ee:	d017      	beq.n	8006320 <UART_SetConfig+0x338>
 80062f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062f4:	d817      	bhi.n	8006326 <UART_SetConfig+0x33e>
 80062f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062fa:	d00b      	beq.n	8006314 <UART_SetConfig+0x32c>
 80062fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006300:	d811      	bhi.n	8006326 <UART_SetConfig+0x33e>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <UART_SetConfig+0x326>
 8006306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800630a:	d006      	beq.n	800631a <UART_SetConfig+0x332>
 800630c:	e00b      	b.n	8006326 <UART_SetConfig+0x33e>
 800630e:	2300      	movs	r3, #0
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e00d      	b.n	8006330 <UART_SetConfig+0x348>
 8006314:	2302      	movs	r3, #2
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e00a      	b.n	8006330 <UART_SetConfig+0x348>
 800631a:	2304      	movs	r3, #4
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e007      	b.n	8006330 <UART_SetConfig+0x348>
 8006320:	2308      	movs	r3, #8
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e004      	b.n	8006330 <UART_SetConfig+0x348>
 8006326:	2310      	movs	r3, #16
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e001      	b.n	8006330 <UART_SetConfig+0x348>
 800632c:	2310      	movs	r3, #16
 800632e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006338:	d15b      	bne.n	80063f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800633a:	7ffb      	ldrb	r3, [r7, #31]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d828      	bhi.n	8006392 <UART_SetConfig+0x3aa>
 8006340:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <UART_SetConfig+0x360>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	0800636d 	.word	0x0800636d
 800634c:	08006375 	.word	0x08006375
 8006350:	0800637d 	.word	0x0800637d
 8006354:	08006393 	.word	0x08006393
 8006358:	08006383 	.word	0x08006383
 800635c:	08006393 	.word	0x08006393
 8006360:	08006393 	.word	0x08006393
 8006364:	08006393 	.word	0x08006393
 8006368:	0800638b 	.word	0x0800638b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800636c:	f7fe f920 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 8006370:	61b8      	str	r0, [r7, #24]
        break;
 8006372:	e013      	b.n	800639c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006374:	f7fe f930 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 8006378:	61b8      	str	r0, [r7, #24]
        break;
 800637a:	e00f      	b.n	800639c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800637c:	4b4b      	ldr	r3, [pc, #300]	; (80064ac <UART_SetConfig+0x4c4>)
 800637e:	61bb      	str	r3, [r7, #24]
        break;
 8006380:	e00c      	b.n	800639c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006382:	f7fe f843 	bl	800440c <HAL_RCC_GetSysClockFreq>
 8006386:	61b8      	str	r0, [r7, #24]
        break;
 8006388:	e008      	b.n	800639c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800638a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800638e:	61bb      	str	r3, [r7, #24]
        break;
 8006390:	e004      	b.n	800639c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	77bb      	strb	r3, [r7, #30]
        break;
 800639a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d074      	beq.n	800648c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	005a      	lsls	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	441a      	add	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b0f      	cmp	r3, #15
 80063bc:	d916      	bls.n	80063ec <UART_SetConfig+0x404>
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c4:	d212      	bcs.n	80063ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f023 030f 	bic.w	r3, r3, #15
 80063ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	b29a      	uxth	r2, r3
 80063dc:	89fb      	ldrh	r3, [r7, #14]
 80063de:	4313      	orrs	r3, r2
 80063e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	89fa      	ldrh	r2, [r7, #14]
 80063e8:	60da      	str	r2, [r3, #12]
 80063ea:	e04f      	b.n	800648c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	77bb      	strb	r3, [r7, #30]
 80063f0:	e04c      	b.n	800648c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063f2:	7ffb      	ldrb	r3, [r7, #31]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d828      	bhi.n	800644a <UART_SetConfig+0x462>
 80063f8:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <UART_SetConfig+0x418>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	08006425 	.word	0x08006425
 8006404:	0800642d 	.word	0x0800642d
 8006408:	08006435 	.word	0x08006435
 800640c:	0800644b 	.word	0x0800644b
 8006410:	0800643b 	.word	0x0800643b
 8006414:	0800644b 	.word	0x0800644b
 8006418:	0800644b 	.word	0x0800644b
 800641c:	0800644b 	.word	0x0800644b
 8006420:	08006443 	.word	0x08006443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006424:	f7fe f8c4 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 8006428:	61b8      	str	r0, [r7, #24]
        break;
 800642a:	e013      	b.n	8006454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800642c:	f7fe f8d4 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 8006430:	61b8      	str	r0, [r7, #24]
        break;
 8006432:	e00f      	b.n	8006454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006434:	4b1d      	ldr	r3, [pc, #116]	; (80064ac <UART_SetConfig+0x4c4>)
 8006436:	61bb      	str	r3, [r7, #24]
        break;
 8006438:	e00c      	b.n	8006454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800643a:	f7fd ffe7 	bl	800440c <HAL_RCC_GetSysClockFreq>
 800643e:	61b8      	str	r0, [r7, #24]
        break;
 8006440:	e008      	b.n	8006454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006446:	61bb      	str	r3, [r7, #24]
        break;
 8006448:	e004      	b.n	8006454 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	77bb      	strb	r3, [r7, #30]
        break;
 8006452:	bf00      	nop
    }

    if (pclk != 0U)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d018      	beq.n	800648c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	085a      	lsrs	r2, r3, #1
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	441a      	add	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	fbb2 f3f3 	udiv	r3, r2, r3
 800646c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b0f      	cmp	r3, #15
 8006472:	d909      	bls.n	8006488 <UART_SetConfig+0x4a0>
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647a:	d205      	bcs.n	8006488 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	b29a      	uxth	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60da      	str	r2, [r3, #12]
 8006486:	e001      	b.n	800648c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006498:	7fbb      	ldrb	r3, [r7, #30]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3720      	adds	r7, #32
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40007c00 	.word	0x40007c00
 80064a8:	40023800 	.word	0x40023800
 80064ac:	00f42400 	.word	0x00f42400

080064b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01a      	beq.n	80065c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ae:	d10a      	bne.n	80065c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  }
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006604:	f7fc fb7e 	bl	8002d04 <HAL_GetTick>
 8006608:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b08      	cmp	r3, #8
 8006616:	d10e      	bne.n	8006636 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f831 	bl	800668e <UART_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e027      	b.n	8006686 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b04      	cmp	r3, #4
 8006642:	d10e      	bne.n	8006662 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f81b 	bl	800668e <UART_WaitOnFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e011      	b.n	8006686 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2220      	movs	r2, #32
 800666c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b09c      	sub	sp, #112	; 0x70
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	603b      	str	r3, [r7, #0]
 800669a:	4613      	mov	r3, r2
 800669c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669e:	e0a7      	b.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	f000 80a3 	beq.w	80067f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066aa:	f7fc fb2b 	bl	8002d04 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d302      	bcc.n	80066c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80066ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d13f      	bne.n	8006740 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066d4:	667b      	str	r3, [r7, #100]	; 0x64
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e6      	bne.n	80066c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3308      	adds	r3, #8
 80066f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	663b      	str	r3, [r7, #96]	; 0x60
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3308      	adds	r3, #8
 8006710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006712:	64ba      	str	r2, [r7, #72]	; 0x48
 8006714:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e068      	b.n	8006812 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	d050      	beq.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800675c:	d148      	bne.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006766:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800677c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006786:	637b      	str	r3, [r7, #52]	; 0x34
 8006788:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800678c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e6      	bne.n	8006768 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3308      	adds	r3, #8
 80067a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	613b      	str	r3, [r7, #16]
   return(result);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f023 0301 	bic.w	r3, r3, #1
 80067b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3308      	adds	r3, #8
 80067b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067ba:	623a      	str	r2, [r7, #32]
 80067bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	69f9      	ldr	r1, [r7, #28]
 80067c0:	6a3a      	ldr	r2, [r7, #32]
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e5      	bne.n	800679a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e010      	b.n	8006812 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	69da      	ldr	r2, [r3, #28]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	4013      	ands	r3, r2
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	bf0c      	ite	eq
 8006800:	2301      	moveq	r3, #1
 8006802:	2300      	movne	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	429a      	cmp	r2, r3
 800680c:	f43f af48 	beq.w	80066a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3770      	adds	r7, #112	; 0x70
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800681c:	b084      	sub	sp, #16
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	f107 001c 	add.w	r0, r7, #28
 800682a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	2b01      	cmp	r3, #1
 8006832:	d120      	bne.n	8006876 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	4b20      	ldr	r3, [pc, #128]	; (80068c8 <USB_CoreInit+0xac>)
 8006846:	4013      	ands	r3, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685a:	2b01      	cmp	r3, #1
 800685c:	d105      	bne.n	800686a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa96 	bl	8006d9c <USB_CoreReset>
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]
 8006874:	e010      	b.n	8006898 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa8a 	bl	8006d9c <USB_CoreReset>
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006890:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	2b01      	cmp	r3, #1
 800689c:	d10b      	bne.n	80068b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f043 0206 	orr.w	r2, r3, #6
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f043 0220 	orr.w	r2, r3, #32
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068c2:	b004      	add	sp, #16
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	ffbdffbf 	.word	0xffbdffbf

080068cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f023 0201 	bic.w	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d115      	bne.n	800693c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800691c:	2001      	movs	r0, #1
 800691e:	f7fc f9fd 	bl	8002d1c <HAL_Delay>
      ms++;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3301      	adds	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fa29 	bl	8006d80 <USB_GetMode>
 800692e:	4603      	mov	r3, r0
 8006930:	2b01      	cmp	r3, #1
 8006932:	d01e      	beq.n	8006972 <USB_SetCurrentMode+0x84>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b31      	cmp	r3, #49	; 0x31
 8006938:	d9f0      	bls.n	800691c <USB_SetCurrentMode+0x2e>
 800693a:	e01a      	b.n	8006972 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d115      	bne.n	800696e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800694e:	2001      	movs	r0, #1
 8006950:	f7fc f9e4 	bl	8002d1c <HAL_Delay>
      ms++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3301      	adds	r3, #1
 8006958:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa10 	bl	8006d80 <USB_GetMode>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <USB_SetCurrentMode+0x84>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b31      	cmp	r3, #49	; 0x31
 800696a:	d9f0      	bls.n	800694e <USB_SetCurrentMode+0x60>
 800696c:	e001      	b.n	8006972 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e005      	b.n	800697e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b32      	cmp	r3, #50	; 0x32
 8006976:	d101      	bne.n	800697c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e000      	b.n	800697e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006988:	b084      	sub	sp, #16
 800698a:	b580      	push	{r7, lr}
 800698c:	b086      	sub	sp, #24
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069a2:	2300      	movs	r3, #0
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	e009      	b.n	80069bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	3340      	adds	r3, #64	; 0x40
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	2200      	movs	r2, #0
 80069b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	3301      	adds	r3, #1
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b0e      	cmp	r3, #14
 80069c0:	d9f2      	bls.n	80069a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d11c      	bne.n	8006a02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069d6:	f043 0302 	orr.w	r3, r3, #2
 80069da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	e005      	b.n	8006a0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a14:	461a      	mov	r2, r3
 8006a16:	2300      	movs	r3, #0
 8006a18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a20:	4619      	mov	r1, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a28:	461a      	mov	r2, r3
 8006a2a:	680b      	ldr	r3, [r1, #0]
 8006a2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d10c      	bne.n	8006a4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f965 	bl	8006d0c <USB_SetDevSpeed>
 8006a42:	e008      	b.n	8006a56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a44:	2101      	movs	r1, #1
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f960 	bl	8006d0c <USB_SetDevSpeed>
 8006a4c:	e003      	b.n	8006a56 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a4e:	2103      	movs	r1, #3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f95b 	bl	8006d0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a56:	2110      	movs	r1, #16
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f8f3 	bl	8006c44 <USB_FlushTxFifo>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f91f 	bl	8006cac <USB_FlushRxFifo>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7e:	461a      	mov	r2, r3
 8006a80:	2300      	movs	r3, #0
 8006a82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a96:	461a      	mov	r2, r3
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	e043      	b.n	8006b2a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab8:	d118      	bne.n	8006aec <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006acc:	461a      	mov	r2, r3
 8006ace:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	e013      	b.n	8006afe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	e008      	b.n	8006afe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af8:	461a      	mov	r2, r3
 8006afa:	2300      	movs	r3, #0
 8006afc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	3301      	adds	r3, #1
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d3b7      	bcc.n	8006aa2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b32:	2300      	movs	r3, #0
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	e043      	b.n	8006bc0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b4e:	d118      	bne.n	8006b82 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10a      	bne.n	8006b6c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b62:	461a      	mov	r2, r3
 8006b64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e013      	b.n	8006b94 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	e008      	b.n	8006b94 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8e:	461a      	mov	r2, r3
 8006b90:	2300      	movs	r3, #0
 8006b92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	613b      	str	r3, [r7, #16]
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d3b7      	bcc.n	8006b38 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006be8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d105      	bne.n	8006bfc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	f043 0210 	orr.w	r2, r3, #16
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699a      	ldr	r2, [r3, #24]
 8006c00:	4b0e      	ldr	r3, [pc, #56]	; (8006c3c <USB_DevInit+0x2b4>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f043 0208 	orr.w	r2, r3, #8
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d105      	bne.n	8006c2c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699a      	ldr	r2, [r3, #24]
 8006c24:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <USB_DevInit+0x2b8>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c38:	b004      	add	sp, #16
 8006c3a:	4770      	bx	lr
 8006c3c:	803c3800 	.word	0x803c3800
 8006c40:	40000004 	.word	0x40000004

08006c44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3301      	adds	r3, #1
 8006c56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a13      	ldr	r2, [pc, #76]	; (8006ca8 <USB_FlushTxFifo+0x64>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d901      	bls.n	8006c64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e01b      	b.n	8006c9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	daf2      	bge.n	8006c52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	019b      	lsls	r3, r3, #6
 8006c74:	f043 0220 	orr.w	r2, r3, #32
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4a08      	ldr	r2, [pc, #32]	; (8006ca8 <USB_FlushTxFifo+0x64>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d901      	bls.n	8006c8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e006      	b.n	8006c9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d0f0      	beq.n	8006c7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	00030d40 	.word	0x00030d40

08006cac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4a11      	ldr	r2, [pc, #68]	; (8006d08 <USB_FlushRxFifo+0x5c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d901      	bls.n	8006cca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e018      	b.n	8006cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	daf2      	bge.n	8006cb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2210      	movs	r2, #16
 8006cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4a08      	ldr	r2, [pc, #32]	; (8006d08 <USB_FlushRxFifo+0x5c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d901      	bls.n	8006cee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e006      	b.n	8006cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d0f0      	beq.n	8006cdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	00030d40 	.word	0x00030d40

08006d0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	68f9      	ldr	r1, [r7, #12]
 8006d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d58:	f023 0303 	bic.w	r3, r3, #3
 8006d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d6c:	f043 0302 	orr.w	r3, r3, #2
 8006d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3301      	adds	r3, #1
 8006dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4a13      	ldr	r2, [pc, #76]	; (8006e00 <USB_CoreReset+0x64>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d901      	bls.n	8006dba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e01b      	b.n	8006df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	daf2      	bge.n	8006da8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f043 0201 	orr.w	r2, r3, #1
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <USB_CoreReset+0x64>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d901      	bls.n	8006de4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e006      	b.n	8006df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d0f0      	beq.n	8006dd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	00030d40 	.word	0x00030d40

08006e04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006e08:	bf00      	nop
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e1a:	f3ef 8305 	mrs	r3, IPSR
 8006e1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10f      	bne.n	8006e46 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e26:	f3ef 8310 	mrs	r3, PRIMASK
 8006e2a:	607b      	str	r3, [r7, #4]
  return(result);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d105      	bne.n	8006e3e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e32:	f3ef 8311 	mrs	r3, BASEPRI
 8006e36:	603b      	str	r3, [r7, #0]
  return(result);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d007      	beq.n	8006e4e <osKernelInitialize+0x3a>
 8006e3e:	4b0e      	ldr	r3, [pc, #56]	; (8006e78 <osKernelInitialize+0x64>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d103      	bne.n	8006e4e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006e46:	f06f 0305 	mvn.w	r3, #5
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	e00c      	b.n	8006e68 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e4e:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <osKernelInitialize+0x64>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d105      	bne.n	8006e62 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e56:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <osKernelInitialize+0x64>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e002      	b.n	8006e68 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006e62:	f04f 33ff 	mov.w	r3, #4294967295
 8006e66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006e68:	68fb      	ldr	r3, [r7, #12]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	2000a6f0 	.word	0x2000a6f0

08006e7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e82:	f3ef 8305 	mrs	r3, IPSR
 8006e86:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10f      	bne.n	8006eae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e92:	607b      	str	r3, [r7, #4]
  return(result);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <osKernelStart+0x3a>
 8006ea6:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <osKernelStart+0x68>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d103      	bne.n	8006eb6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006eae:	f06f 0305 	mvn.w	r3, #5
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e010      	b.n	8006ed8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006eb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <osKernelStart+0x68>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d109      	bne.n	8006ed2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ebe:	f7ff ffa1 	bl	8006e04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ec2:	4b08      	ldr	r3, [pc, #32]	; (8006ee4 <osKernelStart+0x68>)
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ec8:	f002 fa94 	bl	80093f4 <vTaskStartScheduler>
      stat = osOK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e002      	b.n	8006ed8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ed6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	2000a6f0 	.word	0x2000a6f0

08006ee8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b090      	sub	sp, #64	; 0x40
 8006eec:	af04      	add	r7, sp, #16
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ef8:	f3ef 8305 	mrs	r3, IPSR
 8006efc:	61fb      	str	r3, [r7, #28]
  return(result);
 8006efe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f040 808f 	bne.w	8007024 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f06:	f3ef 8310 	mrs	r3, PRIMASK
 8006f0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d105      	bne.n	8006f1e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f12:	f3ef 8311 	mrs	r3, BASEPRI
 8006f16:	617b      	str	r3, [r7, #20]
  return(result);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <osThreadNew+0x3e>
 8006f1e:	4b44      	ldr	r3, [pc, #272]	; (8007030 <osThreadNew+0x148>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d07e      	beq.n	8007024 <osThreadNew+0x13c>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d07b      	beq.n	8007024 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006f2c:	2380      	movs	r3, #128	; 0x80
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006f30:	2318      	movs	r3, #24
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006f38:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d045      	beq.n	8006fd0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <osThreadNew+0x6a>
        name = attr->name;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <osThreadNew+0x90>
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	2b38      	cmp	r3, #56	; 0x38
 8006f6a:	d805      	bhi.n	8006f78 <osThreadNew+0x90>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <osThreadNew+0x94>
        return (NULL);
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e054      	b.n	8007026 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	089b      	lsrs	r3, r3, #2
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00e      	beq.n	8006fb2 <osThreadNew+0xca>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2bbf      	cmp	r3, #191	; 0xbf
 8006f9a:	d90a      	bls.n	8006fb2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d006      	beq.n	8006fb2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <osThreadNew+0xca>
        mem = 1;
 8006fac:	2301      	movs	r3, #1
 8006fae:	623b      	str	r3, [r7, #32]
 8006fb0:	e010      	b.n	8006fd4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10c      	bne.n	8006fd4 <osThreadNew+0xec>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d108      	bne.n	8006fd4 <osThreadNew+0xec>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d104      	bne.n	8006fd4 <osThreadNew+0xec>
          mem = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	623b      	str	r3, [r7, #32]
 8006fce:	e001      	b.n	8006fd4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d110      	bne.n	8006ffc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fe2:	9202      	str	r2, [sp, #8]
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f001 ff7d 	bl	8008ef0 <xTaskCreateStatic>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	613b      	str	r3, [r7, #16]
 8006ffa:	e013      	b.n	8007024 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d110      	bne.n	8007024 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	b29a      	uxth	r2, r3
 8007006:	f107 0310 	add.w	r3, r7, #16
 800700a:	9301      	str	r3, [sp, #4]
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f001 ffce 	bl	8008fb6 <xTaskCreate>
 800701a:	4603      	mov	r3, r0
 800701c:	2b01      	cmp	r3, #1
 800701e:	d001      	beq.n	8007024 <osThreadNew+0x13c>
          hTask = NULL;
 8007020:	2300      	movs	r3, #0
 8007022:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007024:	693b      	ldr	r3, [r7, #16]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3730      	adds	r7, #48	; 0x30
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	2000a6f0 	.word	0x2000a6f0

08007034 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800703c:	f3ef 8305 	mrs	r3, IPSR
 8007040:	613b      	str	r3, [r7, #16]
  return(result);
 8007042:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10f      	bne.n	8007068 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007048:	f3ef 8310 	mrs	r3, PRIMASK
 800704c:	60fb      	str	r3, [r7, #12]
  return(result);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007054:	f3ef 8311 	mrs	r3, BASEPRI
 8007058:	60bb      	str	r3, [r7, #8]
  return(result);
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d007      	beq.n	8007070 <osDelay+0x3c>
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <osDelay+0x58>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d103      	bne.n	8007070 <osDelay+0x3c>
    stat = osErrorISR;
 8007068:	f06f 0305 	mvn.w	r3, #5
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	e007      	b.n	8007080 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <osDelay+0x4c>
      vTaskDelay(ticks);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f002 f94c 	bl	8009318 <vTaskDelay>
    }
  }

  return (stat);
 8007080:	697b      	ldr	r3, [r7, #20]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	2000a6f0 	.word	0x2000a6f0

08007090 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800709c:	f3ef 8305 	mrs	r3, IPSR
 80070a0:	617b      	str	r3, [r7, #20]
  return(result);
 80070a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d13d      	bne.n	8007124 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a8:	f3ef 8310 	mrs	r3, PRIMASK
 80070ac:	613b      	str	r3, [r7, #16]
  return(result);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d105      	bne.n	80070c0 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070b4:	f3ef 8311 	mrs	r3, BASEPRI
 80070b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <osEventFlagsNew+0x38>
 80070c0:	4b1b      	ldr	r3, [pc, #108]	; (8007130 <osEventFlagsNew+0xa0>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d02d      	beq.n	8007124 <osEventFlagsNew+0x94>
    mem = -1;
 80070c8:	f04f 33ff 	mov.w	r3, #4294967295
 80070cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d015      	beq.n	8007100 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d006      	beq.n	80070ea <osEventFlagsNew+0x5a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	2b1f      	cmp	r3, #31
 80070e2:	d902      	bls.n	80070ea <osEventFlagsNew+0x5a>
        mem = 1;
 80070e4:	2301      	movs	r3, #1
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	e00c      	b.n	8007104 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d108      	bne.n	8007104 <osEventFlagsNew+0x74>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d104      	bne.n	8007104 <osEventFlagsNew+0x74>
          mem = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	e001      	b.n	8007104 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d106      	bne.n	8007118 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fa7e 	bl	8007610 <xEventGroupCreateStatic>
 8007114:	61f8      	str	r0, [r7, #28]
 8007116:	e005      	b.n	8007124 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800711e:	f000 fab2 	bl	8007686 <xEventGroupCreate>
 8007122:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007124:	69fb      	ldr	r3, [r7, #28]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3720      	adds	r7, #32
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	2000a6f0 	.word	0x2000a6f0

08007134 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d004      	beq.n	8007152 <osEventFlagsSet+0x1e>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8007152:	f06f 0303 	mvn.w	r3, #3
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	e03a      	b.n	80071d0 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800715a:	f3ef 8305 	mrs	r3, IPSR
 800715e:	617b      	str	r3, [r7, #20]
  return(result);
 8007160:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10f      	bne.n	8007186 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007166:	f3ef 8310 	mrs	r3, PRIMASK
 800716a:	613b      	str	r3, [r7, #16]
  return(result);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d105      	bne.n	800717e <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007172:	f3ef 8311 	mrs	r3, BASEPRI
 8007176:	60fb      	str	r3, [r7, #12]
  return(result);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d021      	beq.n	80071c2 <osEventFlagsSet+0x8e>
 800717e:	4b17      	ldr	r3, [pc, #92]	; (80071dc <osEventFlagsSet+0xa8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b02      	cmp	r3, #2
 8007184:	d11d      	bne.n	80071c2 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8007186:	2300      	movs	r3, #0
 8007188:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800718a:	f107 0308 	add.w	r3, r7, #8
 800718e:	461a      	mov	r2, r3
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	69b8      	ldr	r0, [r7, #24]
 8007194:	f000 fc26 	bl	80079e4 <xEventGroupSetBitsFromISR>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d103      	bne.n	80071a6 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800719e:	f06f 0302 	mvn.w	r3, #2
 80071a2:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80071a4:	e013      	b.n	80071ce <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00e      	beq.n	80071ce <osEventFlagsSet+0x9a>
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <osEventFlagsSet+0xac>)
 80071b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80071c0:	e005      	b.n	80071ce <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	69b8      	ldr	r0, [r7, #24]
 80071c6:	f000 fb4f 	bl	8007868 <xEventGroupSetBits>
 80071ca:	61f8      	str	r0, [r7, #28]
 80071cc:	e000      	b.n	80071d0 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80071ce:	bf00      	nop
  }

  return (rflags);
 80071d0:	69fb      	ldr	r3, [r7, #28]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	2000a6f0 	.word	0x2000a6f0
 80071e0:	e000ed04 	.word	0xe000ed04

080071e4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08e      	sub	sp, #56	; 0x38
 80071e8:	af02      	add	r7, sp, #8
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <osEventFlagsWait+0x22>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8007206:	f06f 0303 	mvn.w	r3, #3
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
 800720c:	e059      	b.n	80072c2 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800720e:	f3ef 8305 	mrs	r3, IPSR
 8007212:	61fb      	str	r3, [r7, #28]
  return(result);
 8007214:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10f      	bne.n	800723a <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800721a:	f3ef 8310 	mrs	r3, PRIMASK
 800721e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d105      	bne.n	8007232 <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007226:	f3ef 8311 	mrs	r3, BASEPRI
 800722a:	617b      	str	r3, [r7, #20]
  return(result);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d007      	beq.n	8007242 <osEventFlagsWait+0x5e>
 8007232:	4b26      	ldr	r3, [pc, #152]	; (80072cc <osEventFlagsWait+0xe8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d103      	bne.n	8007242 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800723a:	f06f 0305 	mvn.w	r3, #5
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
 8007240:	e03f      	b.n	80072c2 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007250:	e001      	b.n	8007256 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8007252:	2300      	movs	r3, #0
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8007260:	2300      	movs	r3, #0
 8007262:	62bb      	str	r3, [r7, #40]	; 0x28
 8007264:	e001      	b.n	800726a <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8007266:	2301      	movs	r3, #1
 8007268:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	6a38      	ldr	r0, [r7, #32]
 8007276:	f000 fa21 	bl	80076bc <xEventGroupWaitBits>
 800727a:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00e      	beq.n	80072a4 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	429a      	cmp	r2, r3
 800728c:	d019      	beq.n	80072c2 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8007294:	f06f 0301 	mvn.w	r3, #1
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
 800729a:	e012      	b.n	80072c2 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800729c:	f06f 0302 	mvn.w	r3, #2
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
 80072a2:	e00e      	b.n	80072c2 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	4013      	ands	r3, r2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d109      	bne.n	80072c2 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80072b4:	f06f 0301 	mvn.w	r3, #1
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24
 80072ba:	e002      	b.n	80072c2 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80072bc:	f06f 0302 	mvn.w	r3, #2
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3730      	adds	r7, #48	; 0x30
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	2000a6f0 	.word	0x2000a6f0

080072d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08c      	sub	sp, #48	; 0x30
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80072dc:	2300      	movs	r3, #0
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072e0:	f3ef 8305 	mrs	r3, IPSR
 80072e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80072e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d16f      	bne.n	80073cc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ec:	f3ef 8310 	mrs	r3, PRIMASK
 80072f0:	617b      	str	r3, [r7, #20]
  return(result);
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d105      	bne.n	8007304 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072f8:	f3ef 8311 	mrs	r3, BASEPRI
 80072fc:	613b      	str	r3, [r7, #16]
  return(result);
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <osMessageQueueNew+0x3c>
 8007304:	4b34      	ldr	r3, [pc, #208]	; (80073d8 <osMessageQueueNew+0x108>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d05f      	beq.n	80073cc <osMessageQueueNew+0xfc>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d05c      	beq.n	80073cc <osMessageQueueNew+0xfc>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d059      	beq.n	80073cc <osMessageQueueNew+0xfc>
    mem = -1;
 8007318:	f04f 33ff 	mov.w	r3, #4294967295
 800731c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d029      	beq.n	8007378 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d012      	beq.n	8007352 <osMessageQueueNew+0x82>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	2b4f      	cmp	r3, #79	; 0x4f
 8007332:	d90e      	bls.n	8007352 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00a      	beq.n	8007352 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695a      	ldr	r2, [r3, #20]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	429a      	cmp	r2, r3
 800734a:	d302      	bcc.n	8007352 <osMessageQueueNew+0x82>
        mem = 1;
 800734c:	2301      	movs	r3, #1
 800734e:	623b      	str	r3, [r7, #32]
 8007350:	e014      	b.n	800737c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d110      	bne.n	800737c <osMessageQueueNew+0xac>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10c      	bne.n	800737c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007366:	2b00      	cmp	r3, #0
 8007368:	d108      	bne.n	800737c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d104      	bne.n	800737c <osMessageQueueNew+0xac>
          mem = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	623b      	str	r3, [r7, #32]
 8007376:	e001      	b.n	800737c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d10b      	bne.n	800739a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691a      	ldr	r2, [r3, #16]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2100      	movs	r1, #0
 800738c:	9100      	str	r1, [sp, #0]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fc59 	bl	8007c48 <xQueueGenericCreateStatic>
 8007396:	6278      	str	r0, [r7, #36]	; 0x24
 8007398:	e008      	b.n	80073ac <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d105      	bne.n	80073ac <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80073a0:	2200      	movs	r2, #0
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fcef 	bl	8007d88 <xQueueGenericCreate>
 80073aa:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00c      	beq.n	80073cc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	61fb      	str	r3, [r7, #28]
 80073be:	e001      	b.n	80073c4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80073c4:	69f9      	ldr	r1, [r7, #28]
 80073c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073c8:	f001 fd24 	bl	8008e14 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3728      	adds	r7, #40	; 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	2000a6f0 	.word	0x2000a6f0

080073dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08a      	sub	sp, #40	; 0x28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	4613      	mov	r3, r2
 80073ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073f4:	f3ef 8305 	mrs	r3, IPSR
 80073f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80073fa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10f      	bne.n	8007420 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007400:	f3ef 8310 	mrs	r3, PRIMASK
 8007404:	61bb      	str	r3, [r7, #24]
  return(result);
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d105      	bne.n	8007418 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800740c:	f3ef 8311 	mrs	r3, BASEPRI
 8007410:	617b      	str	r3, [r7, #20]
  return(result);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d02c      	beq.n	8007472 <osMessageQueuePut+0x96>
 8007418:	4b28      	ldr	r3, [pc, #160]	; (80074bc <osMessageQueuePut+0xe0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d128      	bne.n	8007472 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <osMessageQueuePut+0x56>
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <osMessageQueuePut+0x56>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007432:	f06f 0303 	mvn.w	r3, #3
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007438:	e039      	b.n	80074ae <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800743a:	2300      	movs	r3, #0
 800743c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800743e:	f107 0210 	add.w	r2, r7, #16
 8007442:	2300      	movs	r3, #0
 8007444:	68b9      	ldr	r1, [r7, #8]
 8007446:	6a38      	ldr	r0, [r7, #32]
 8007448:	f000 ffa6 	bl	8008398 <xQueueGenericSendFromISR>
 800744c:	4603      	mov	r3, r0
 800744e:	2b01      	cmp	r3, #1
 8007450:	d003      	beq.n	800745a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007452:	f06f 0302 	mvn.w	r3, #2
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007458:	e029      	b.n	80074ae <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d026      	beq.n	80074ae <osMessageQueuePut+0xd2>
 8007460:	4b17      	ldr	r3, [pc, #92]	; (80074c0 <osMessageQueuePut+0xe4>)
 8007462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007470:	e01d      	b.n	80074ae <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <osMessageQueuePut+0xa2>
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d103      	bne.n	8007486 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800747e:	f06f 0303 	mvn.w	r3, #3
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
 8007484:	e014      	b.n	80074b0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007486:	2300      	movs	r3, #0
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	6a38      	ldr	r0, [r7, #32]
 800748e:	f000 fd6d 	bl	8007f6c <xQueueGenericSend>
 8007492:	4603      	mov	r3, r0
 8007494:	2b01      	cmp	r3, #1
 8007496:	d00b      	beq.n	80074b0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800749e:	f06f 0301 	mvn.w	r3, #1
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
 80074a4:	e004      	b.n	80074b0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80074a6:	f06f 0302 	mvn.w	r3, #2
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
 80074ac:	e000      	b.n	80074b0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80074ae:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3728      	adds	r7, #40	; 0x28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	2000a6f0 	.word	0x2000a6f0
 80074c0:	e000ed04 	.word	0xe000ed04

080074c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08a      	sub	sp, #40	; 0x28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074da:	f3ef 8305 	mrs	r3, IPSR
 80074de:	61fb      	str	r3, [r7, #28]
  return(result);
 80074e0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10f      	bne.n	8007506 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e6:	f3ef 8310 	mrs	r3, PRIMASK
 80074ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d105      	bne.n	80074fe <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074f2:	f3ef 8311 	mrs	r3, BASEPRI
 80074f6:	617b      	str	r3, [r7, #20]
  return(result);
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d02c      	beq.n	8007558 <osMessageQueueGet+0x94>
 80074fe:	4b28      	ldr	r3, [pc, #160]	; (80075a0 <osMessageQueueGet+0xdc>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d128      	bne.n	8007558 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <osMessageQueueGet+0x54>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <osMessageQueueGet+0x54>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007518:	f06f 0303 	mvn.w	r3, #3
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800751e:	e038      	b.n	8007592 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007520:	2300      	movs	r3, #0
 8007522:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007524:	f107 0310 	add.w	r3, r7, #16
 8007528:	461a      	mov	r2, r3
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	6a38      	ldr	r0, [r7, #32]
 800752e:	f001 fa4d 	bl	80089cc <xQueueReceiveFromISR>
 8007532:	4603      	mov	r3, r0
 8007534:	2b01      	cmp	r3, #1
 8007536:	d003      	beq.n	8007540 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007538:	f06f 0302 	mvn.w	r3, #2
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800753e:	e028      	b.n	8007592 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d025      	beq.n	8007592 <osMessageQueueGet+0xce>
 8007546:	4b17      	ldr	r3, [pc, #92]	; (80075a4 <osMessageQueueGet+0xe0>)
 8007548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007556:	e01c      	b.n	8007592 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <osMessageQueueGet+0xa0>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d103      	bne.n	800756c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007564:	f06f 0303 	mvn.w	r3, #3
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
 800756a:	e013      	b.n	8007594 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	68b9      	ldr	r1, [r7, #8]
 8007570:	6a38      	ldr	r0, [r7, #32]
 8007572:	f001 f821 	bl	80085b8 <xQueueReceive>
 8007576:	4603      	mov	r3, r0
 8007578:	2b01      	cmp	r3, #1
 800757a:	d00b      	beq.n	8007594 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007582:	f06f 0301 	mvn.w	r3, #1
 8007586:	627b      	str	r3, [r7, #36]	; 0x24
 8007588:	e004      	b.n	8007594 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800758a:	f06f 0302 	mvn.w	r3, #2
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
 8007590:	e000      	b.n	8007594 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007592:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007596:	4618      	mov	r0, r3
 8007598:	3728      	adds	r7, #40	; 0x28
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	2000a6f0 	.word	0x2000a6f0
 80075a4:	e000ed04 	.word	0xe000ed04

080075a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4a07      	ldr	r2, [pc, #28]	; (80075d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80075b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	4a06      	ldr	r2, [pc, #24]	; (80075d8 <vApplicationGetIdleTaskMemory+0x30>)
 80075be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2280      	movs	r2, #128	; 0x80
 80075c4:	601a      	str	r2, [r3, #0]
}
 80075c6:	bf00      	nop
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	2000a6f4 	.word	0x2000a6f4
 80075d8:	2000a7b4 	.word	0x2000a7b4

080075dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4a07      	ldr	r2, [pc, #28]	; (8007608 <vApplicationGetTimerTaskMemory+0x2c>)
 80075ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	4a06      	ldr	r2, [pc, #24]	; (800760c <vApplicationGetTimerTaskMemory+0x30>)
 80075f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075fa:	601a      	str	r2, [r3, #0]
}
 80075fc:	bf00      	nop
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	2000a9b4 	.word	0x2000a9b4
 800760c:	2000aa74 	.word	0x2000aa74

08007610 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10c      	bne.n	8007638 <xEventGroupCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	b672      	cpsid	i
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	b662      	cpsie	i
 8007632:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007638:	2320      	movs	r3, #32
 800763a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b20      	cmp	r3, #32
 8007640:	d00c      	beq.n	800765c <xEventGroupCreateStatic+0x4c>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	b672      	cpsid	i
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	b662      	cpsie	i
 8007656:	60fb      	str	r3, [r7, #12]
}
 8007658:	bf00      	nop
 800765a:	e7fe      	b.n	800765a <xEventGroupCreateStatic+0x4a>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <xEventGroupCreateStatic+0x6c>
		{
			pxEventBits->uxEventBits = 0;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	3304      	adds	r3, #4
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f9cb 	bl	8007a0c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2201      	movs	r2, #1
 800767a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800767c:	697b      	ldr	r3, [r7, #20]
	}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800768c:	2020      	movs	r0, #32
 800768e:	f003 fb91 	bl	800adb4 <pvPortMalloc>
 8007692:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3304      	adds	r3, #4
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 f9b1 	bl	8007a0c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80076b0:	687b      	ldr	r3, [r7, #4]
	}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b090      	sub	sp, #64	; 0x40
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10c      	bne.n	80076f6 <xEventGroupWaitBits+0x3a>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	b672      	cpsid	i
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	b662      	cpsie	i
 80076f0:	623b      	str	r3, [r7, #32]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00c      	beq.n	800771a <xEventGroupWaitBits+0x5e>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	b672      	cpsid	i
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	b662      	cpsie	i
 8007714:	61fb      	str	r3, [r7, #28]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10c      	bne.n	800773a <xEventGroupWaitBits+0x7e>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	b672      	cpsid	i
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	b662      	cpsie	i
 8007734:	61bb      	str	r3, [r7, #24]
}
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <xEventGroupWaitBits+0x7c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800773a:	f002 fc4f 	bl	8009fdc <xTaskGetSchedulerState>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <xEventGroupWaitBits+0x8e>
 8007744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <xEventGroupWaitBits+0x92>
 800774a:	2301      	movs	r3, #1
 800774c:	e000      	b.n	8007750 <xEventGroupWaitBits+0x94>
 800774e:	2300      	movs	r3, #0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10c      	bne.n	800776e <xEventGroupWaitBits+0xb2>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	b672      	cpsid	i
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	b662      	cpsie	i
 8007768:	617b      	str	r3, [r7, #20]
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <xEventGroupWaitBits+0xb0>
	}
	#endif

	vTaskSuspendAll();
 800776e:	f001 fed1 	bl	8009514 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	68b9      	ldr	r1, [r7, #8]
 800777c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800777e:	f000 f90f 	bl	80079a0 <prvTestWaitCondition>
 8007782:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00e      	beq.n	80077a8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800778e:	2300      	movs	r3, #0
 8007790:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d028      	beq.n	80077ea <xEventGroupWaitBits+0x12e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	43db      	mvns	r3, r3
 80077a0:	401a      	ands	r2, r3
 80077a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e020      	b.n	80077ea <xEventGroupWaitBits+0x12e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80077a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d104      	bne.n	80077b8 <xEventGroupWaitBits+0xfc>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80077b2:	2301      	movs	r3, #1
 80077b4:	633b      	str	r3, [r7, #48]	; 0x30
 80077b6:	e018      	b.n	80077ea <xEventGroupWaitBits+0x12e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <xEventGroupWaitBits+0x10a>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077c4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <xEventGroupWaitBits+0x118>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80077cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077d2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	1d18      	adds	r0, r3, #4
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077dc:	4313      	orrs	r3, r2
 80077de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077e0:	4619      	mov	r1, r3
 80077e2:	f002 f8e7 	bl	80099b4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80077ea:	f001 fea1 	bl	8009530 <xTaskResumeAll>
 80077ee:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80077f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d031      	beq.n	800785a <xEventGroupWaitBits+0x19e>
	{
		if( xAlreadyYielded == pdFALSE )
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d107      	bne.n	800780c <xEventGroupWaitBits+0x150>
		{
			portYIELD_WITHIN_API();
 80077fc:	4b19      	ldr	r3, [pc, #100]	; (8007864 <xEventGroupWaitBits+0x1a8>)
 80077fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800780c:	f002 fca4 	bl	800a158 <uxTaskResetEventItemValue>
 8007810:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d11a      	bne.n	8007852 <xEventGroupWaitBits+0x196>
		{
			taskENTER_CRITICAL();
 800781c:	f003 f9a0 	bl	800ab60 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800782c:	f000 f8b8 	bl	80079a0 <prvTestWaitCondition>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d009      	beq.n	800784a <xEventGroupWaitBits+0x18e>
				{
					if( xClearOnExit != pdFALSE )
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d006      	beq.n	800784a <xEventGroupWaitBits+0x18e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	43db      	mvns	r3, r3
 8007844:	401a      	ands	r2, r3
 8007846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007848:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800784a:	2301      	movs	r3, #1
 800784c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800784e:	f003 f9bb 	bl	800abc8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007854:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007858:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800785a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800785c:	4618      	mov	r0, r3
 800785e:	3740      	adds	r7, #64	; 0x40
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	e000ed04 	.word	0xe000ed04

08007868 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08e      	sub	sp, #56	; 0x38
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007872:	2300      	movs	r3, #0
 8007874:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800787a:	2300      	movs	r3, #0
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10c      	bne.n	800789e <xEventGroupSetBits+0x36>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	b672      	cpsid	i
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	b662      	cpsie	i
 8007898:	613b      	str	r3, [r7, #16]
}
 800789a:	bf00      	nop
 800789c:	e7fe      	b.n	800789c <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00c      	beq.n	80078c2 <xEventGroupSetBits+0x5a>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	b672      	cpsid	i
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	b662      	cpsie	i
 80078bc:	60fb      	str	r3, [r7, #12]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80078c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c4:	3304      	adds	r3, #4
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	3308      	adds	r3, #8
 80078cc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80078ce:	f001 fe21 	bl	8009514 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	431a      	orrs	r2, r3
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80078e4:	e03c      	b.n	8007960 <xEventGroupSetBits+0xf8>
		{
			pxNext = listGET_NEXT( pxListItem );
 80078e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80078ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80078fc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007904:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d108      	bne.n	8007922 <xEventGroupSetBits+0xba>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	4013      	ands	r3, r2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <xEventGroupSetBits+0xcc>
				{
					xMatchFound = pdTRUE;
 800791c:	2301      	movs	r3, #1
 800791e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007920:	e008      	b.n	8007934 <xEventGroupSetBits+0xcc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	4013      	ands	r3, r2
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	429a      	cmp	r2, r3
 800792e:	d101      	bne.n	8007934 <xEventGroupSetBits+0xcc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	2b00      	cmp	r3, #0
 8007938:	d010      	beq.n	800795c <xEventGroupSetBits+0xf4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <xEventGroupSetBits+0xe4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	4313      	orrs	r3, r2
 800794a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007954:	4619      	mov	r1, r3
 8007956:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007958:	f002 f93c 	bl	8009bd4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	429a      	cmp	r2, r3
 8007966:	d1be      	bne.n	80078e6 <xEventGroupSetBits+0x7e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	43db      	mvns	r3, r3
 8007970:	401a      	ands	r2, r3
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007976:	f001 fddb 	bl	8009530 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	681b      	ldr	r3, [r3, #0]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3738      	adds	r7, #56	; 0x38
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff ff68 	bl	8007868 <xEventGroupSetBits>
}
 8007998:	bf00      	nop
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d107      	bne.n	80079c6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4013      	ands	r3, r2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80079c0:	2301      	movs	r3, #1
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	e007      	b.n	80079d6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4013      	ands	r3, r2
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d101      	bne.n	80079d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80079d2:	2301      	movs	r3, #1
 80079d4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80079d6:	697b      	ldr	r3, [r7, #20]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	68f9      	ldr	r1, [r7, #12]
 80079f6:	4804      	ldr	r0, [pc, #16]	; (8007a08 <xEventGroupSetBitsFromISR+0x24>)
 80079f8:	f002 ff76 	bl	800a8e8 <xTimerPendFunctionCallFromISR>
 80079fc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80079fe:	697b      	ldr	r3, [r7, #20]
	}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	08007987 	.word	0x08007987

08007a0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f103 0208 	add.w	r2, r3, #8
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f04f 32ff 	mov.w	r2, #4294967295
 8007a24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f103 0208 	add.w	r2, r3, #8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f103 0208 	add.w	r2, r3, #8
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a66:	b480      	push	{r7}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	601a      	str	r2, [r3, #0]
}
 8007aa2:	bf00      	nop
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d103      	bne.n	8007ace <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	e00c      	b.n	8007ae8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e002      	b.n	8007adc <vListInsert+0x2e>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d2f6      	bcs.n	8007ad6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6892      	ldr	r2, [r2, #8]
 8007b36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	6852      	ldr	r2, [r2, #4]
 8007b40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d103      	bne.n	8007b54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	1e5a      	subs	r2, r3, #1
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10c      	bne.n	8007ba2 <xQueueGenericReset+0x2e>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	b672      	cpsid	i
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	b662      	cpsie	i
 8007b9c:	60bb      	str	r3, [r7, #8]
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007ba2:	f002 ffdd 	bl	800ab60 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bae:	68f9      	ldr	r1, [r7, #12]
 8007bb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bb2:	fb01 f303 	mul.w	r3, r1, r3
 8007bb6:	441a      	add	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	68f9      	ldr	r1, [r7, #12]
 8007bd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bd8:	fb01 f303 	mul.w	r3, r1, r3
 8007bdc:	441a      	add	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	22ff      	movs	r2, #255	; 0xff
 8007be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	22ff      	movs	r2, #255	; 0xff
 8007bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d114      	bne.n	8007c22 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d01a      	beq.n	8007c36 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3310      	adds	r3, #16
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 ff7f 	bl	8009b08 <xTaskRemoveFromEventList>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d012      	beq.n	8007c36 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c10:	4b0c      	ldr	r3, [pc, #48]	; (8007c44 <xQueueGenericReset+0xd0>)
 8007c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	e009      	b.n	8007c36 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	3310      	adds	r3, #16
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7ff fef0 	bl	8007a0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3324      	adds	r3, #36	; 0x24
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff feeb 	bl	8007a0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c36:	f002 ffc7 	bl	800abc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c3a:	2301      	movs	r3, #1
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	e000ed04 	.word	0xe000ed04

08007c48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08e      	sub	sp, #56	; 0x38
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10c      	bne.n	8007c76 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	b672      	cpsid	i
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	b662      	cpsie	i
 8007c70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10c      	bne.n	8007c96 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	b672      	cpsid	i
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	b662      	cpsie	i
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <xQueueGenericCreateStatic+0x5a>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <xQueueGenericCreateStatic+0x5e>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueGenericCreateStatic+0x60>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10c      	bne.n	8007cc6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	b672      	cpsid	i
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	b662      	cpsie	i
 8007cc0:	623b      	str	r3, [r7, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <xQueueGenericCreateStatic+0x8a>
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <xQueueGenericCreateStatic+0x8e>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <xQueueGenericCreateStatic+0x90>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10c      	bne.n	8007cf6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	b672      	cpsid	i
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	b662      	cpsie	i
 8007cf0:	61fb      	str	r3, [r7, #28]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cf6:	2350      	movs	r3, #80	; 0x50
 8007cf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	2b50      	cmp	r3, #80	; 0x50
 8007cfe:	d00c      	beq.n	8007d1a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	b672      	cpsid	i
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	b662      	cpsie	i
 8007d14:	61bb      	str	r3, [r7, #24]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00e      	beq.n	8007d44 <xQueueGenericCreateStatic+0xfc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	4613      	mov	r3, r2
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f881 	bl	8007e44 <prvInitialiseNewQueue>
 8007d42:	e017      	b.n	8007d74 <xQueueGenericCreateStatic+0x12c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8007d44:	f7f9 fca6 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7f9 fc1c 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 8007d50:	4603      	mov	r3, r0
 8007d52:	461a      	mov	r2, r3
 8007d54:	4b0a      	ldr	r3, [pc, #40]	; (8007d80 <xQueueGenericCreateStatic+0x138>)
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	4013      	ands	r3, r2
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d009      	beq.n	8007d74 <xQueueGenericCreateStatic+0x12c>
 8007d60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007d64:	4a07      	ldr	r2, [pc, #28]	; (8007d84 <xQueueGenericCreateStatic+0x13c>)
 8007d66:	5cd3      	ldrb	r3, [r2, r3]
 8007d68:	3340      	adds	r3, #64	; 0x40
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fa f898 	bl	8001ea4 <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3730      	adds	r7, #48	; 0x30
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	2000000a 	.word	0x2000000a
 8007d84:	20000004 	.word	0x20000004

08007d88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08a      	sub	sp, #40	; 0x28
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10c      	bne.n	8007db6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	b672      	cpsid	i
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	b662      	cpsie	i
 8007db0:	613b      	str	r3, [r7, #16]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d102      	bne.n	8007dc2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61fb      	str	r3, [r7, #28]
 8007dc0:	e004      	b.n	8007dcc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	fb02 f303 	mul.w	r3, r2, r3
 8007dca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	3350      	adds	r3, #80	; 0x50
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f002 ffef 	bl	800adb4 <pvPortMalloc>
 8007dd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d012      	beq.n	8007e04 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	3350      	adds	r3, #80	; 0x50
 8007de6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007df0:	79fa      	ldrb	r2, [r7, #7]
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	4613      	mov	r3, r2
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	68b9      	ldr	r1, [r7, #8]
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 f821 	bl	8007e44 <prvInitialiseNewQueue>
 8007e02:	e016      	b.n	8007e32 <xQueueGenericCreate+0xaa>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8007e04:	f7f9 fc46 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7f9 fbbc 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 8007e10:	4603      	mov	r3, r0
 8007e12:	461a      	mov	r2, r3
 8007e14:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <xQueueGenericCreate+0xb4>)
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d008      	beq.n	8007e32 <xQueueGenericCreate+0xaa>
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	4a07      	ldr	r2, [pc, #28]	; (8007e40 <xQueueGenericCreate+0xb8>)
 8007e24:	5cd3      	ldrb	r3, [r2, r3]
 8007e26:	3340      	adds	r3, #64	; 0x40
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fa f839 	bl	8001ea4 <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e32:	69bb      	ldr	r3, [r7, #24]
	}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3720      	adds	r7, #32
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	2000000a 	.word	0x2000000a
 8007e40:	20000004 	.word	0x20000004

08007e44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e44:	b5b0      	push	{r4, r5, r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
 8007e50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d103      	bne.n	8007e60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	6a3a      	ldr	r2, [r7, #32]
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	e002      	b.n	8007e66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e72:	2101      	movs	r1, #1
 8007e74:	6a38      	ldr	r0, [r7, #32]
 8007e76:	f7ff fe7d 	bl	8007b74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8007e82:	6a38      	ldr	r0, [r7, #32]
 8007e84:	f7f9 fb67 	bl	8001556 <prvTraceGetQueueType>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4b34      	ldr	r3, [pc, #208]	; (8007f60 <prvInitialiseNewQueue+0x11c>)
 8007e8e:	5c9b      	ldrb	r3, [r3, r2]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fa fb8d 	bl	80025b0 <prvTraceGetObjectHandle>
 8007e96:	4603      	mov	r3, r0
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6a38      	ldr	r0, [r7, #32]
 8007e9e:	f7f9 fbcb 	bl	8001638 <prvTraceSetQueueNumberLow16>
 8007ea2:	4b30      	ldr	r3, [pc, #192]	; (8007f64 <prvInitialiseNewQueue+0x120>)
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6a38      	ldr	r0, [r7, #32]
 8007eaa:	f7f9 fbdd 	bl	8001668 <prvTraceSetQueueNumberHigh16>
 8007eae:	6a38      	ldr	r0, [r7, #32]
 8007eb0:	f7f9 fb51 	bl	8001556 <prvTraceGetQueueType>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4b29      	ldr	r3, [pc, #164]	; (8007f60 <prvInitialiseNewQueue+0x11c>)
 8007eba:	5c9c      	ldrb	r4, [r3, r2]
 8007ebc:	6a38      	ldr	r0, [r7, #32]
 8007ebe:	f7f9 fb9f 	bl	8001600 <prvTraceGetQueueNumberLow16>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f7fa fc1f 	bl	800270c <prvMarkObjectAsUsed>
 8007ece:	f7f9 fbe1 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7f9 fb57 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 8007eda:	4603      	mov	r3, r0
 8007edc:	461a      	mov	r2, r3
 8007ede:	4b22      	ldr	r3, [pc, #136]	; (8007f68 <prvInitialiseNewQueue+0x124>)
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d025      	beq.n	8007f36 <prvInitialiseNewQueue+0xf2>
 8007eea:	6a38      	ldr	r0, [r7, #32]
 8007eec:	f7f9 fb95 	bl	800161a <prvTraceGetQueueNumberHigh16>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	4b1c      	ldr	r3, [pc, #112]	; (8007f68 <prvInitialiseNewQueue+0x124>)
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01a      	beq.n	8007f36 <prvInitialiseNewQueue+0xf2>
 8007f00:	6a38      	ldr	r0, [r7, #32]
 8007f02:	f7f9 fb28 	bl	8001556 <prvTraceGetQueueType>
 8007f06:	4603      	mov	r3, r0
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <prvInitialiseNewQueue+0x11c>)
 8007f0c:	5c9b      	ldrb	r3, [r3, r2]
 8007f0e:	3318      	adds	r3, #24
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	461d      	mov	r5, r3
 8007f14:	6a38      	ldr	r0, [r7, #32]
 8007f16:	f7f9 fb1e 	bl	8001556 <prvTraceGetQueueType>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <prvInitialiseNewQueue+0x11c>)
 8007f20:	5c9c      	ldrb	r4, [r3, r2]
 8007f22:	6a38      	ldr	r0, [r7, #32]
 8007f24:	f7f9 fb6c 	bl	8001600 <prvTraceGetQueueNumberLow16>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4628      	mov	r0, r5
 8007f32:	f7f9 fe73 	bl	8001c1c <prvTraceStoreKernelCall>
 8007f36:	6a38      	ldr	r0, [r7, #32]
 8007f38:	f7f9 fb0d 	bl	8001556 <prvTraceGetQueueType>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <prvInitialiseNewQueue+0x11c>)
 8007f42:	5c9c      	ldrb	r4, [r3, r2]
 8007f44:	6a38      	ldr	r0, [r7, #32]
 8007f46:	f7f9 fb5b 	bl	8001600 <prvTraceGetQueueNumberLow16>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4619      	mov	r1, r3
 8007f52:	4620      	mov	r0, r4
 8007f54:	f7fa f8f8 	bl	8002148 <prvTraceSetObjectState>
}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8007f60:	20000004 	.word	0x20000004
 8007f64:	2000000c 	.word	0x2000000c
 8007f68:	2000000a 	.word	0x2000000a

08007f6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f6c:	b5b0      	push	{r4, r5, r7, lr}
 8007f6e:	b08e      	sub	sp, #56	; 0x38
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10c      	bne.n	8007fa2 <xQueueGenericSend+0x36>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	b672      	cpsid	i
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	b662      	cpsie	i
 8007f9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d103      	bne.n	8007fb0 <xQueueGenericSend+0x44>
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <xQueueGenericSend+0x48>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <xQueueGenericSend+0x4a>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10c      	bne.n	8007fd4 <xQueueGenericSend+0x68>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	b672      	cpsid	i
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	b662      	cpsie	i
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d103      	bne.n	8007fe2 <xQueueGenericSend+0x76>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d101      	bne.n	8007fe6 <xQueueGenericSend+0x7a>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <xQueueGenericSend+0x7c>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10c      	bne.n	8008006 <xQueueGenericSend+0x9a>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	b672      	cpsid	i
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	b662      	cpsie	i
 8008000:	623b      	str	r3, [r7, #32]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008006:	f001 ffe9 	bl	8009fdc <xTaskGetSchedulerState>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <xQueueGenericSend+0xaa>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <xQueueGenericSend+0xae>
 8008016:	2301      	movs	r3, #1
 8008018:	e000      	b.n	800801c <xQueueGenericSend+0xb0>
 800801a:	2300      	movs	r3, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10c      	bne.n	800803a <xQueueGenericSend+0xce>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	b672      	cpsid	i
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	b662      	cpsie	i
 8008034:	61fb      	str	r3, [r7, #28]
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800803a:	f002 fd91 	bl	800ab60 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008046:	429a      	cmp	r2, r3
 8008048:	d303      	bcc.n	8008052 <xQueueGenericSend+0xe6>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b02      	cmp	r3, #2
 800804e:	f040 8084 	bne.w	800815a <xQueueGenericSend+0x1ee>
			{
				traceQUEUE_SEND( pxQueue );
 8008052:	f7f9 fb1f 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8008056:	4603      	mov	r3, r0
 8008058:	4618      	mov	r0, r3
 800805a:	f7f9 fa95 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 800805e:	4603      	mov	r3, r0
 8008060:	461a      	mov	r2, r3
 8008062:	4ba6      	ldr	r3, [pc, #664]	; (80082fc <xQueueGenericSend+0x390>)
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	4013      	ands	r3, r2
 8008068:	b29b      	uxth	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d02a      	beq.n	80080c4 <xQueueGenericSend+0x158>
 800806e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008070:	f7f9 fad3 	bl	800161a <prvTraceGetQueueNumberHigh16>
 8008074:	4603      	mov	r3, r0
 8008076:	461a      	mov	r2, r3
 8008078:	4ba0      	ldr	r3, [pc, #640]	; (80082fc <xQueueGenericSend+0x390>)
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	4013      	ands	r3, r2
 800807e:	b29b      	uxth	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01f      	beq.n	80080c4 <xQueueGenericSend+0x158>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10a      	bne.n	80080a0 <xQueueGenericSend+0x134>
 800808a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800808c:	f7f9 fa63 	bl	8001556 <prvTraceGetQueueType>
 8008090:	4603      	mov	r3, r0
 8008092:	461a      	mov	r2, r3
 8008094:	4b9a      	ldr	r3, [pc, #616]	; (8008300 <xQueueGenericSend+0x394>)
 8008096:	5c9b      	ldrb	r3, [r3, r2]
 8008098:	3320      	adds	r3, #32
 800809a:	b2db      	uxtb	r3, r3
 800809c:	461d      	mov	r5, r3
 800809e:	e000      	b.n	80080a2 <xQueueGenericSend+0x136>
 80080a0:	2525      	movs	r5, #37	; 0x25
 80080a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080a4:	f7f9 fa57 	bl	8001556 <prvTraceGetQueueType>
 80080a8:	4603      	mov	r3, r0
 80080aa:	461a      	mov	r2, r3
 80080ac:	4b94      	ldr	r3, [pc, #592]	; (8008300 <xQueueGenericSend+0x394>)
 80080ae:	5c9c      	ldrb	r4, [r3, r2]
 80080b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080b2:	f7f9 faa5 	bl	8001600 <prvTraceGetQueueNumberLow16>
 80080b6:	4603      	mov	r3, r0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	4621      	mov	r1, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	f7f9 fdac 	bl	8001c1c <prvTraceStoreKernelCall>
 80080c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080c6:	f7f9 fa46 	bl	8001556 <prvTraceGetQueueType>
 80080ca:	4603      	mov	r3, r0
 80080cc:	461a      	mov	r2, r3
 80080ce:	4b8c      	ldr	r3, [pc, #560]	; (8008300 <xQueueGenericSend+0x394>)
 80080d0:	5c9c      	ldrb	r4, [r3, r2]
 80080d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080d4:	f7f9 fa94 	bl	8001600 <prvTraceGetQueueNumberLow16>
 80080d8:	4603      	mov	r3, r0
 80080da:	b2dd      	uxtb	r5, r3
 80080dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080de:	f7f9 fa3a 	bl	8001556 <prvTraceGetQueueType>
 80080e2:	4603      	mov	r3, r0
 80080e4:	461a      	mov	r2, r3
 80080e6:	4b86      	ldr	r3, [pc, #536]	; (8008300 <xQueueGenericSend+0x394>)
 80080e8:	5c9b      	ldrb	r3, [r3, r2]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d005      	beq.n	80080fa <xQueueGenericSend+0x18e>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	3301      	adds	r3, #1
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	e000      	b.n	80080fc <xQueueGenericSend+0x190>
 80080fa:	2300      	movs	r3, #0
 80080fc:	461a      	mov	r2, r3
 80080fe:	4629      	mov	r1, r5
 8008100:	4620      	mov	r0, r4
 8008102:	f7fa f821 	bl	8002148 <prvTraceSetObjectState>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800810c:	f000 fd71 	bl	8008bf2 <prvCopyDataToQueue>
 8008110:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2b00      	cmp	r3, #0
 8008118:	d010      	beq.n	800813c <xQueueGenericSend+0x1d0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	3324      	adds	r3, #36	; 0x24
 800811e:	4618      	mov	r0, r3
 8008120:	f001 fcf2 	bl	8009b08 <xTaskRemoveFromEventList>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d013      	beq.n	8008152 <xQueueGenericSend+0x1e6>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800812a:	4b76      	ldr	r3, [pc, #472]	; (8008304 <xQueueGenericSend+0x398>)
 800812c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	e00a      	b.n	8008152 <xQueueGenericSend+0x1e6>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <xQueueGenericSend+0x1e6>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008142:	4b70      	ldr	r3, [pc, #448]	; (8008304 <xQueueGenericSend+0x398>)
 8008144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008152:	f002 fd39 	bl	800abc8 <vPortExitCritical>
				return pdPASS;
 8008156:	2301      	movs	r3, #1
 8008158:	e115      	b.n	8008386 <xQueueGenericSend+0x41a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d13c      	bne.n	80081da <xQueueGenericSend+0x26e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008160:	f002 fd32 	bl	800abc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8008164:	f7f9 fa96 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8008168:	4603      	mov	r3, r0
 800816a:	4618      	mov	r0, r3
 800816c:	f7f9 fa0c 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 8008170:	4603      	mov	r3, r0
 8008172:	461a      	mov	r2, r3
 8008174:	4b61      	ldr	r3, [pc, #388]	; (80082fc <xQueueGenericSend+0x390>)
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	4013      	ands	r3, r2
 800817a:	b29b      	uxth	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d02a      	beq.n	80081d6 <xQueueGenericSend+0x26a>
 8008180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008182:	f7f9 fa4a 	bl	800161a <prvTraceGetQueueNumberHigh16>
 8008186:	4603      	mov	r3, r0
 8008188:	461a      	mov	r2, r3
 800818a:	4b5c      	ldr	r3, [pc, #368]	; (80082fc <xQueueGenericSend+0x390>)
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	4013      	ands	r3, r2
 8008190:	b29b      	uxth	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d01f      	beq.n	80081d6 <xQueueGenericSend+0x26a>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <xQueueGenericSend+0x246>
 800819c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800819e:	f7f9 f9da 	bl	8001556 <prvTraceGetQueueType>
 80081a2:	4603      	mov	r3, r0
 80081a4:	461a      	mov	r2, r3
 80081a6:	4b56      	ldr	r3, [pc, #344]	; (8008300 <xQueueGenericSend+0x394>)
 80081a8:	5c9b      	ldrb	r3, [r3, r2]
 80081aa:	3348      	adds	r3, #72	; 0x48
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	461d      	mov	r5, r3
 80081b0:	e000      	b.n	80081b4 <xQueueGenericSend+0x248>
 80081b2:	254d      	movs	r5, #77	; 0x4d
 80081b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081b6:	f7f9 f9ce 	bl	8001556 <prvTraceGetQueueType>
 80081ba:	4603      	mov	r3, r0
 80081bc:	461a      	mov	r2, r3
 80081be:	4b50      	ldr	r3, [pc, #320]	; (8008300 <xQueueGenericSend+0x394>)
 80081c0:	5c9c      	ldrb	r4, [r3, r2]
 80081c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081c4:	f7f9 fa1c 	bl	8001600 <prvTraceGetQueueNumberLow16>
 80081c8:	4603      	mov	r3, r0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	461a      	mov	r2, r3
 80081ce:	4621      	mov	r1, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	f7f9 fd23 	bl	8001c1c <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e0d5      	b.n	8008386 <xQueueGenericSend+0x41a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d106      	bne.n	80081ee <xQueueGenericSend+0x282>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081e0:	f107 0314 	add.w	r3, r7, #20
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 fd5b 	bl	8009ca0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081ea:	2301      	movs	r3, #1
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081ee:	f002 fceb 	bl	800abc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081f2:	f001 f98f 	bl	8009514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081f6:	f002 fcb3 	bl	800ab60 <vPortEnterCritical>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008200:	b25b      	sxtb	r3, r3
 8008202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008206:	d103      	bne.n	8008210 <xQueueGenericSend+0x2a4>
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008216:	b25b      	sxtb	r3, r3
 8008218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821c:	d103      	bne.n	8008226 <xQueueGenericSend+0x2ba>
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008226:	f002 fccf 	bl	800abc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800822a:	1d3a      	adds	r2, r7, #4
 800822c:	f107 0314 	add.w	r3, r7, #20
 8008230:	4611      	mov	r1, r2
 8008232:	4618      	mov	r0, r3
 8008234:	f001 fd4a 	bl	8009ccc <xTaskCheckForTimeOut>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d164      	bne.n	8008308 <xQueueGenericSend+0x39c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800823e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008240:	f000 fdcf 	bl	8008de2 <prvIsQueueFull>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d051      	beq.n	80082ee <xQueueGenericSend+0x382>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800824a:	f7f9 fa23 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 800824e:	4603      	mov	r3, r0
 8008250:	4618      	mov	r0, r3
 8008252:	f7f9 f999 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 8008256:	4603      	mov	r3, r0
 8008258:	461a      	mov	r2, r3
 800825a:	4b28      	ldr	r3, [pc, #160]	; (80082fc <xQueueGenericSend+0x390>)
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	4013      	ands	r3, r2
 8008260:	b29b      	uxth	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d02a      	beq.n	80082bc <xQueueGenericSend+0x350>
 8008266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008268:	f7f9 f9d7 	bl	800161a <prvTraceGetQueueNumberHigh16>
 800826c:	4603      	mov	r3, r0
 800826e:	461a      	mov	r2, r3
 8008270:	4b22      	ldr	r3, [pc, #136]	; (80082fc <xQueueGenericSend+0x390>)
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	4013      	ands	r3, r2
 8008276:	b29b      	uxth	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d01f      	beq.n	80082bc <xQueueGenericSend+0x350>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10a      	bne.n	8008298 <xQueueGenericSend+0x32c>
 8008282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008284:	f7f9 f967 	bl	8001556 <prvTraceGetQueueType>
 8008288:	4603      	mov	r3, r0
 800828a:	461a      	mov	r2, r3
 800828c:	4b1c      	ldr	r3, [pc, #112]	; (8008300 <xQueueGenericSend+0x394>)
 800828e:	5c9b      	ldrb	r3, [r3, r2]
 8008290:	3370      	adds	r3, #112	; 0x70
 8008292:	b2db      	uxtb	r3, r3
 8008294:	461d      	mov	r5, r3
 8008296:	e000      	b.n	800829a <xQueueGenericSend+0x32e>
 8008298:	2575      	movs	r5, #117	; 0x75
 800829a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800829c:	f7f9 f95b 	bl	8001556 <prvTraceGetQueueType>
 80082a0:	4603      	mov	r3, r0
 80082a2:	461a      	mov	r2, r3
 80082a4:	4b16      	ldr	r3, [pc, #88]	; (8008300 <xQueueGenericSend+0x394>)
 80082a6:	5c9c      	ldrb	r4, [r3, r2]
 80082a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082aa:	f7f9 f9a9 	bl	8001600 <prvTraceGetQueueNumberLow16>
 80082ae:	4603      	mov	r3, r0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	461a      	mov	r2, r3
 80082b4:	4621      	mov	r1, r4
 80082b6:	4628      	mov	r0, r5
 80082b8:	f7f9 fcb0 	bl	8001c1c <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	3310      	adds	r3, #16
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 fb4f 	bl	8009968 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082cc:	f000 fd21 	bl	8008d12 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082d0:	f001 f92e 	bl	8009530 <xTaskResumeAll>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f47f aeaf 	bne.w	800803a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80082dc:	4b09      	ldr	r3, [pc, #36]	; (8008304 <xQueueGenericSend+0x398>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	e6a5      	b.n	800803a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082f0:	f000 fd0f 	bl	8008d12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082f4:	f001 f91c 	bl	8009530 <xTaskResumeAll>
 80082f8:	e69f      	b.n	800803a <xQueueGenericSend+0xce>
 80082fa:	bf00      	nop
 80082fc:	2000000a 	.word	0x2000000a
 8008300:	20000004 	.word	0x20000004
 8008304:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800830a:	f000 fd02 	bl	8008d12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800830e:	f001 f90f 	bl	8009530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8008312:	f7f9 f9bf 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8008316:	4603      	mov	r3, r0
 8008318:	4618      	mov	r0, r3
 800831a:	f7f9 f935 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 800831e:	4603      	mov	r3, r0
 8008320:	461a      	mov	r2, r3
 8008322:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <xQueueGenericSend+0x424>)
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	4013      	ands	r3, r2
 8008328:	b29b      	uxth	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d02a      	beq.n	8008384 <xQueueGenericSend+0x418>
 800832e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008330:	f7f9 f973 	bl	800161a <prvTraceGetQueueNumberHigh16>
 8008334:	4603      	mov	r3, r0
 8008336:	461a      	mov	r2, r3
 8008338:	4b15      	ldr	r3, [pc, #84]	; (8008390 <xQueueGenericSend+0x424>)
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	4013      	ands	r3, r2
 800833e:	b29b      	uxth	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d01f      	beq.n	8008384 <xQueueGenericSend+0x418>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10a      	bne.n	8008360 <xQueueGenericSend+0x3f4>
 800834a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800834c:	f7f9 f903 	bl	8001556 <prvTraceGetQueueType>
 8008350:	4603      	mov	r3, r0
 8008352:	461a      	mov	r2, r3
 8008354:	4b0f      	ldr	r3, [pc, #60]	; (8008394 <xQueueGenericSend+0x428>)
 8008356:	5c9b      	ldrb	r3, [r3, r2]
 8008358:	3348      	adds	r3, #72	; 0x48
 800835a:	b2db      	uxtb	r3, r3
 800835c:	461d      	mov	r5, r3
 800835e:	e000      	b.n	8008362 <xQueueGenericSend+0x3f6>
 8008360:	254d      	movs	r5, #77	; 0x4d
 8008362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008364:	f7f9 f8f7 	bl	8001556 <prvTraceGetQueueType>
 8008368:	4603      	mov	r3, r0
 800836a:	461a      	mov	r2, r3
 800836c:	4b09      	ldr	r3, [pc, #36]	; (8008394 <xQueueGenericSend+0x428>)
 800836e:	5c9c      	ldrb	r4, [r3, r2]
 8008370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008372:	f7f9 f945 	bl	8001600 <prvTraceGetQueueNumberLow16>
 8008376:	4603      	mov	r3, r0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	461a      	mov	r2, r3
 800837c:	4621      	mov	r1, r4
 800837e:	4628      	mov	r0, r5
 8008380:	f7f9 fc4c 	bl	8001c1c <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 8008384:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008386:	4618      	mov	r0, r3
 8008388:	3738      	adds	r7, #56	; 0x38
 800838a:	46bd      	mov	sp, r7
 800838c:	bdb0      	pop	{r4, r5, r7, pc}
 800838e:	bf00      	nop
 8008390:	2000000a 	.word	0x2000000a
 8008394:	20000004 	.word	0x20000004

08008398 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008398:	b5b0      	push	{r4, r5, r7, lr}
 800839a:	b08e      	sub	sp, #56	; 0x38
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
 80083a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10c      	bne.n	80083ca <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	b672      	cpsid	i
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	b662      	cpsie	i
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d103      	bne.n	80083d8 <xQueueGenericSendFromISR+0x40>
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <xQueueGenericSendFromISR+0x44>
 80083d8:	2301      	movs	r3, #1
 80083da:	e000      	b.n	80083de <xQueueGenericSendFromISR+0x46>
 80083dc:	2300      	movs	r3, #0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10c      	bne.n	80083fc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	b672      	cpsid	i
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	b662      	cpsie	i
 80083f6:	623b      	str	r3, [r7, #32]
}
 80083f8:	bf00      	nop
 80083fa:	e7fe      	b.n	80083fa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d103      	bne.n	800840a <xQueueGenericSendFromISR+0x72>
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008406:	2b01      	cmp	r3, #1
 8008408:	d101      	bne.n	800840e <xQueueGenericSendFromISR+0x76>
 800840a:	2301      	movs	r3, #1
 800840c:	e000      	b.n	8008410 <xQueueGenericSendFromISR+0x78>
 800840e:	2300      	movs	r3, #0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10c      	bne.n	800842e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	b672      	cpsid	i
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	b662      	cpsie	i
 8008428:	61fb      	str	r3, [r7, #28]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800842e:	f002 fc7d 	bl	800ad2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008432:	f3ef 8211 	mrs	r2, BASEPRI
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	b672      	cpsid	i
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	b662      	cpsie	i
 800844a:	61ba      	str	r2, [r7, #24]
 800844c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800844e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008450:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845a:	429a      	cmp	r2, r3
 800845c:	d302      	bcc.n	8008464 <xQueueGenericSendFromISR+0xcc>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d16c      	bne.n	800853e <xQueueGenericSendFromISR+0x1a6>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800846a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800846e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008470:	f7f9 f8d3 	bl	800161a <prvTraceGetQueueNumberHigh16>
 8008474:	4603      	mov	r3, r0
 8008476:	461a      	mov	r2, r3
 8008478:	4b4d      	ldr	r3, [pc, #308]	; (80085b0 <xQueueGenericSendFromISR+0x218>)
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	4013      	ands	r3, r2
 800847e:	b29b      	uxth	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01f      	beq.n	80084c4 <xQueueGenericSendFromISR+0x12c>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <xQueueGenericSendFromISR+0x108>
 800848a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800848c:	f7f9 f863 	bl	8001556 <prvTraceGetQueueType>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	4b47      	ldr	r3, [pc, #284]	; (80085b4 <xQueueGenericSendFromISR+0x21c>)
 8008496:	5c9b      	ldrb	r3, [r3, r2]
 8008498:	3330      	adds	r3, #48	; 0x30
 800849a:	b2db      	uxtb	r3, r3
 800849c:	461d      	mov	r5, r3
 800849e:	e000      	b.n	80084a2 <xQueueGenericSendFromISR+0x10a>
 80084a0:	2535      	movs	r5, #53	; 0x35
 80084a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084a4:	f7f9 f857 	bl	8001556 <prvTraceGetQueueType>
 80084a8:	4603      	mov	r3, r0
 80084aa:	461a      	mov	r2, r3
 80084ac:	4b41      	ldr	r3, [pc, #260]	; (80085b4 <xQueueGenericSendFromISR+0x21c>)
 80084ae:	5c9c      	ldrb	r4, [r3, r2]
 80084b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084b2:	f7f9 f8a5 	bl	8001600 <prvTraceGetQueueNumberLow16>
 80084b6:	4603      	mov	r3, r0
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	461a      	mov	r2, r3
 80084bc:	4621      	mov	r1, r4
 80084be:	4628      	mov	r0, r5
 80084c0:	f7f9 fbac 	bl	8001c1c <prvTraceStoreKernelCall>
 80084c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084c6:	f7f9 f846 	bl	8001556 <prvTraceGetQueueType>
 80084ca:	4603      	mov	r3, r0
 80084cc:	461a      	mov	r2, r3
 80084ce:	4b39      	ldr	r3, [pc, #228]	; (80085b4 <xQueueGenericSendFromISR+0x21c>)
 80084d0:	5c9c      	ldrb	r4, [r3, r2]
 80084d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084d4:	f7f9 f894 	bl	8001600 <prvTraceGetQueueNumberLow16>
 80084d8:	4603      	mov	r3, r0
 80084da:	b2d9      	uxtb	r1, r3
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	3301      	adds	r3, #1
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	461a      	mov	r2, r3
 80084e8:	4620      	mov	r0, r4
 80084ea:	f7f9 fe2d 	bl	8002148 <prvTraceSetObjectState>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084f4:	f000 fb7d 	bl	8008bf2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d112      	bne.n	8008528 <xQueueGenericSendFromISR+0x190>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d016      	beq.n	8008538 <xQueueGenericSendFromISR+0x1a0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	3324      	adds	r3, #36	; 0x24
 800850e:	4618      	mov	r0, r3
 8008510:	f001 fafa 	bl	8009b08 <xTaskRemoveFromEventList>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00e      	beq.n	8008538 <xQueueGenericSendFromISR+0x1a0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <xQueueGenericSendFromISR+0x1a0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	e007      	b.n	8008538 <xQueueGenericSendFromISR+0x1a0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008528:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800852c:	3301      	adds	r3, #1
 800852e:	b2db      	uxtb	r3, r3
 8008530:	b25a      	sxtb	r2, r3
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008538:	2301      	movs	r3, #1
 800853a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800853c:	e02c      	b.n	8008598 <xQueueGenericSendFromISR+0x200>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800853e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008540:	f7f9 f86b 	bl	800161a <prvTraceGetQueueNumberHigh16>
 8008544:	4603      	mov	r3, r0
 8008546:	461a      	mov	r2, r3
 8008548:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <xQueueGenericSendFromISR+0x218>)
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	4013      	ands	r3, r2
 800854e:	b29b      	uxth	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01f      	beq.n	8008594 <xQueueGenericSendFromISR+0x1fc>
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <xQueueGenericSendFromISR+0x1d8>
 800855a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800855c:	f7f8 fffb 	bl	8001556 <prvTraceGetQueueType>
 8008560:	4603      	mov	r3, r0
 8008562:	461a      	mov	r2, r3
 8008564:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <xQueueGenericSendFromISR+0x21c>)
 8008566:	5c9b      	ldrb	r3, [r3, r2]
 8008568:	3358      	adds	r3, #88	; 0x58
 800856a:	b2db      	uxtb	r3, r3
 800856c:	461d      	mov	r5, r3
 800856e:	e000      	b.n	8008572 <xQueueGenericSendFromISR+0x1da>
 8008570:	255d      	movs	r5, #93	; 0x5d
 8008572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008574:	f7f8 ffef 	bl	8001556 <prvTraceGetQueueType>
 8008578:	4603      	mov	r3, r0
 800857a:	461a      	mov	r2, r3
 800857c:	4b0d      	ldr	r3, [pc, #52]	; (80085b4 <xQueueGenericSendFromISR+0x21c>)
 800857e:	5c9c      	ldrb	r4, [r3, r2]
 8008580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008582:	f7f9 f83d 	bl	8001600 <prvTraceGetQueueNumberLow16>
 8008586:	4603      	mov	r3, r0
 8008588:	b2db      	uxtb	r3, r3
 800858a:	461a      	mov	r2, r3
 800858c:	4621      	mov	r1, r4
 800858e:	4628      	mov	r0, r5
 8008590:	f7f9 fb44 	bl	8001c1c <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 8008594:	2300      	movs	r3, #0
 8008596:	637b      	str	r3, [r7, #52]	; 0x34
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3738      	adds	r7, #56	; 0x38
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bdb0      	pop	{r4, r5, r7, pc}
 80085ae:	bf00      	nop
 80085b0:	2000000a 	.word	0x2000000a
 80085b4:	20000004 	.word	0x20000004

080085b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085b8:	b5b0      	push	{r4, r5, r7, lr}
 80085ba:	b08c      	sub	sp, #48	; 0x30
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085c4:	2300      	movs	r3, #0
 80085c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10c      	bne.n	80085ec <xQueueReceive+0x34>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	b672      	cpsid	i
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	b662      	cpsie	i
 80085e6:	623b      	str	r3, [r7, #32]
}
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d103      	bne.n	80085fa <xQueueReceive+0x42>
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <xQueueReceive+0x46>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <xQueueReceive+0x48>
 80085fe:	2300      	movs	r3, #0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10c      	bne.n	800861e <xQueueReceive+0x66>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	b672      	cpsid	i
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	b662      	cpsie	i
 8008618:	61fb      	str	r3, [r7, #28]
}
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800861e:	f001 fcdd 	bl	8009fdc <xTaskGetSchedulerState>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <xQueueReceive+0x76>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <xQueueReceive+0x7a>
 800862e:	2301      	movs	r3, #1
 8008630:	e000      	b.n	8008634 <xQueueReceive+0x7c>
 8008632:	2300      	movs	r3, #0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10c      	bne.n	8008652 <xQueueReceive+0x9a>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	b672      	cpsid	i
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	b662      	cpsie	i
 800864c:	61bb      	str	r3, [r7, #24]
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008652:	f002 fa85 	bl	800ab60 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	2b00      	cmp	r3, #0
 8008660:	d07b      	beq.n	800875a <xQueueReceive+0x1a2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008666:	f000 fb2e 	bl	8008cc6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800866a:	f7f9 f813 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 800866e:	4603      	mov	r3, r0
 8008670:	4618      	mov	r0, r3
 8008672:	f7f8 ff89 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 8008676:	4603      	mov	r3, r0
 8008678:	461a      	mov	r2, r3
 800867a:	4bac      	ldr	r3, [pc, #688]	; (800892c <xQueueReceive+0x374>)
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	4013      	ands	r3, r2
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d025      	beq.n	80086d2 <xQueueReceive+0x11a>
 8008686:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008688:	f7f8 ffc7 	bl	800161a <prvTraceGetQueueNumberHigh16>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	4ba6      	ldr	r3, [pc, #664]	; (800892c <xQueueReceive+0x374>)
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	4013      	ands	r3, r2
 8008696:	b29b      	uxth	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01a      	beq.n	80086d2 <xQueueReceive+0x11a>
 800869c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800869e:	f7f8 ff5a 	bl	8001556 <prvTraceGetQueueType>
 80086a2:	4603      	mov	r3, r0
 80086a4:	461a      	mov	r2, r3
 80086a6:	4ba2      	ldr	r3, [pc, #648]	; (8008930 <xQueueReceive+0x378>)
 80086a8:	5c9b      	ldrb	r3, [r3, r2]
 80086aa:	3328      	adds	r3, #40	; 0x28
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	461d      	mov	r5, r3
 80086b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086b2:	f7f8 ff50 	bl	8001556 <prvTraceGetQueueType>
 80086b6:	4603      	mov	r3, r0
 80086b8:	461a      	mov	r2, r3
 80086ba:	4b9d      	ldr	r3, [pc, #628]	; (8008930 <xQueueReceive+0x378>)
 80086bc:	5c9c      	ldrb	r4, [r3, r2]
 80086be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086c0:	f7f8 ff9e 	bl	8001600 <prvTraceGetQueueNumberLow16>
 80086c4:	4603      	mov	r3, r0
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	461a      	mov	r2, r3
 80086ca:	4621      	mov	r1, r4
 80086cc:	4628      	mov	r0, r5
 80086ce:	f7f9 faa5 	bl	8001c1c <prvTraceStoreKernelCall>
 80086d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086d4:	f7f8 ff3f 	bl	8001556 <prvTraceGetQueueType>
 80086d8:	4603      	mov	r3, r0
 80086da:	461a      	mov	r2, r3
 80086dc:	4b94      	ldr	r3, [pc, #592]	; (8008930 <xQueueReceive+0x378>)
 80086de:	5c9c      	ldrb	r4, [r3, r2]
 80086e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086e2:	f7f8 ff8d 	bl	8001600 <prvTraceGetQueueNumberLow16>
 80086e6:	4603      	mov	r3, r0
 80086e8:	b2dd      	uxtb	r5, r3
 80086ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086ec:	f7f8 ff33 	bl	8001556 <prvTraceGetQueueType>
 80086f0:	4603      	mov	r3, r0
 80086f2:	461a      	mov	r2, r3
 80086f4:	4b8e      	ldr	r3, [pc, #568]	; (8008930 <xQueueReceive+0x378>)
 80086f6:	5c9b      	ldrb	r3, [r3, r2]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d108      	bne.n	800870e <xQueueReceive+0x156>
 80086fc:	f7f8 ffca 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8008700:	4603      	mov	r3, r0
 8008702:	4618      	mov	r0, r3
 8008704:	f7f8 ff33 	bl	800156e <prvTraceGetTaskNumberLow16>
 8008708:	4603      	mov	r3, r0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	e004      	b.n	8008718 <xQueueReceive+0x160>
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	b2db      	uxtb	r3, r3
 8008714:	3b01      	subs	r3, #1
 8008716:	b2db      	uxtb	r3, r3
 8008718:	461a      	mov	r2, r3
 800871a:	4629      	mov	r1, r5
 800871c:	4620      	mov	r0, r4
 800871e:	f7f9 fd13 	bl	8002148 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	1e5a      	subs	r2, r3, #1
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00f      	beq.n	8008752 <xQueueReceive+0x19a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	3310      	adds	r3, #16
 8008736:	4618      	mov	r0, r3
 8008738:	f001 f9e6 	bl	8009b08 <xTaskRemoveFromEventList>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <xQueueReceive+0x19a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008742:	4b7c      	ldr	r3, [pc, #496]	; (8008934 <xQueueReceive+0x37c>)
 8008744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008752:	f002 fa39 	bl	800abc8 <vPortExitCritical>
				return pdPASS;
 8008756:	2301      	movs	r3, #1
 8008758:	e12f      	b.n	80089ba <xQueueReceive+0x402>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d137      	bne.n	80087d0 <xQueueReceive+0x218>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008760:	f002 fa32 	bl	800abc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008764:	f7f8 ff96 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8008768:	4603      	mov	r3, r0
 800876a:	4618      	mov	r0, r3
 800876c:	f7f8 ff0c 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	4b6d      	ldr	r3, [pc, #436]	; (800892c <xQueueReceive+0x374>)
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	4013      	ands	r3, r2
 800877a:	b29b      	uxth	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d025      	beq.n	80087cc <xQueueReceive+0x214>
 8008780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008782:	f7f8 ff4a 	bl	800161a <prvTraceGetQueueNumberHigh16>
 8008786:	4603      	mov	r3, r0
 8008788:	461a      	mov	r2, r3
 800878a:	4b68      	ldr	r3, [pc, #416]	; (800892c <xQueueReceive+0x374>)
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	4013      	ands	r3, r2
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d01a      	beq.n	80087cc <xQueueReceive+0x214>
 8008796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008798:	f7f8 fedd 	bl	8001556 <prvTraceGetQueueType>
 800879c:	4603      	mov	r3, r0
 800879e:	461a      	mov	r2, r3
 80087a0:	4b63      	ldr	r3, [pc, #396]	; (8008930 <xQueueReceive+0x378>)
 80087a2:	5c9b      	ldrb	r3, [r3, r2]
 80087a4:	3350      	adds	r3, #80	; 0x50
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	461d      	mov	r5, r3
 80087aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087ac:	f7f8 fed3 	bl	8001556 <prvTraceGetQueueType>
 80087b0:	4603      	mov	r3, r0
 80087b2:	461a      	mov	r2, r3
 80087b4:	4b5e      	ldr	r3, [pc, #376]	; (8008930 <xQueueReceive+0x378>)
 80087b6:	5c9c      	ldrb	r4, [r3, r2]
 80087b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087ba:	f7f8 ff21 	bl	8001600 <prvTraceGetQueueNumberLow16>
 80087be:	4603      	mov	r3, r0
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	4621      	mov	r1, r4
 80087c6:	4628      	mov	r0, r5
 80087c8:	f7f9 fa28 	bl	8001c1c <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 80087cc:	2300      	movs	r3, #0
 80087ce:	e0f4      	b.n	80089ba <xQueueReceive+0x402>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d106      	bne.n	80087e4 <xQueueReceive+0x22c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087d6:	f107 0310 	add.w	r3, r7, #16
 80087da:	4618      	mov	r0, r3
 80087dc:	f001 fa60 	bl	8009ca0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087e0:	2301      	movs	r3, #1
 80087e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087e4:	f002 f9f0 	bl	800abc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087e8:	f000 fe94 	bl	8009514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087ec:	f002 f9b8 	bl	800ab60 <vPortEnterCritical>
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087f6:	b25b      	sxtb	r3, r3
 80087f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fc:	d103      	bne.n	8008806 <xQueueReceive+0x24e>
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800880c:	b25b      	sxtb	r3, r3
 800880e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008812:	d103      	bne.n	800881c <xQueueReceive+0x264>
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800881c:	f002 f9d4 	bl	800abc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008820:	1d3a      	adds	r2, r7, #4
 8008822:	f107 0310 	add.w	r3, r7, #16
 8008826:	4611      	mov	r1, r2
 8008828:	4618      	mov	r0, r3
 800882a:	f001 fa4f 	bl	8009ccc <xTaskCheckForTimeOut>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	f040 8081 	bne.w	8008938 <xQueueReceive+0x380>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008838:	f000 fabd 	bl	8008db6 <prvIsQueueEmpty>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d06e      	beq.n	8008920 <xQueueReceive+0x368>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8008842:	f7f8 ff27 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8008846:	4603      	mov	r3, r0
 8008848:	4618      	mov	r0, r3
 800884a:	f7f8 fe9d 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 800884e:	4603      	mov	r3, r0
 8008850:	461a      	mov	r2, r3
 8008852:	4b36      	ldr	r3, [pc, #216]	; (800892c <xQueueReceive+0x374>)
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	4013      	ands	r3, r2
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d025      	beq.n	80088aa <xQueueReceive+0x2f2>
 800885e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008860:	f7f8 fedb 	bl	800161a <prvTraceGetQueueNumberHigh16>
 8008864:	4603      	mov	r3, r0
 8008866:	461a      	mov	r2, r3
 8008868:	4b30      	ldr	r3, [pc, #192]	; (800892c <xQueueReceive+0x374>)
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	4013      	ands	r3, r2
 800886e:	b29b      	uxth	r3, r3
 8008870:	2b00      	cmp	r3, #0
 8008872:	d01a      	beq.n	80088aa <xQueueReceive+0x2f2>
 8008874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008876:	f7f8 fe6e 	bl	8001556 <prvTraceGetQueueType>
 800887a:	4603      	mov	r3, r0
 800887c:	461a      	mov	r2, r3
 800887e:	4b2c      	ldr	r3, [pc, #176]	; (8008930 <xQueueReceive+0x378>)
 8008880:	5c9b      	ldrb	r3, [r3, r2]
 8008882:	3368      	adds	r3, #104	; 0x68
 8008884:	b2db      	uxtb	r3, r3
 8008886:	461d      	mov	r5, r3
 8008888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800888a:	f7f8 fe64 	bl	8001556 <prvTraceGetQueueType>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
 8008892:	4b27      	ldr	r3, [pc, #156]	; (8008930 <xQueueReceive+0x378>)
 8008894:	5c9c      	ldrb	r4, [r3, r2]
 8008896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008898:	f7f8 feb2 	bl	8001600 <prvTraceGetQueueNumberLow16>
 800889c:	4603      	mov	r3, r0
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	461a      	mov	r2, r3
 80088a2:	4621      	mov	r1, r4
 80088a4:	4628      	mov	r0, r5
 80088a6:	f7f9 f9b9 	bl	8001c1c <prvTraceStoreKernelCall>
 80088aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088ac:	f7f8 fe53 	bl	8001556 <prvTraceGetQueueType>
 80088b0:	4603      	mov	r3, r0
 80088b2:	461a      	mov	r2, r3
 80088b4:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <xQueueReceive+0x378>)
 80088b6:	5c9b      	ldrb	r3, [r3, r2]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d018      	beq.n	80088ee <xQueueReceive+0x336>
 80088bc:	f7f8 feea 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 80088c0:	4603      	mov	r3, r0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7f8 fe60 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 80088c8:	4603      	mov	r3, r0
 80088ca:	461a      	mov	r2, r3
 80088cc:	4b17      	ldr	r3, [pc, #92]	; (800892c <xQueueReceive+0x374>)
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	4013      	ands	r3, r2
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00a      	beq.n	80088ee <xQueueReceive+0x336>
 80088d8:	f7f8 fedc 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 80088dc:	4603      	mov	r3, r0
 80088de:	4618      	mov	r0, r3
 80088e0:	f7f8 fe45 	bl	800156e <prvTraceGetTaskNumberLow16>
 80088e4:	4603      	mov	r3, r0
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7f9 fca5 	bl	8002238 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	3324      	adds	r3, #36	; 0x24
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	4611      	mov	r1, r2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f001 f836 	bl	8009968 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088fe:	f000 fa08 	bl	8008d12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008902:	f000 fe15 	bl	8009530 <xTaskResumeAll>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	f47f aea2 	bne.w	8008652 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800890e:	4b09      	ldr	r3, [pc, #36]	; (8008934 <xQueueReceive+0x37c>)
 8008910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	e698      	b.n	8008652 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008922:	f000 f9f6 	bl	8008d12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008926:	f000 fe03 	bl	8009530 <xTaskResumeAll>
 800892a:	e692      	b.n	8008652 <xQueueReceive+0x9a>
 800892c:	2000000a 	.word	0x2000000a
 8008930:	20000004 	.word	0x20000004
 8008934:	e000ed04 	.word	0xe000ed04
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800893a:	f000 f9ea 	bl	8008d12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800893e:	f000 fdf7 	bl	8009530 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008944:	f000 fa37 	bl	8008db6 <prvIsQueueEmpty>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	f43f ae81 	beq.w	8008652 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008950:	f7f8 fea0 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8008954:	4603      	mov	r3, r0
 8008956:	4618      	mov	r0, r3
 8008958:	f7f8 fe16 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 800895c:	4603      	mov	r3, r0
 800895e:	461a      	mov	r2, r3
 8008960:	4b18      	ldr	r3, [pc, #96]	; (80089c4 <xQueueReceive+0x40c>)
 8008962:	881b      	ldrh	r3, [r3, #0]
 8008964:	4013      	ands	r3, r2
 8008966:	b29b      	uxth	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d025      	beq.n	80089b8 <xQueueReceive+0x400>
 800896c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800896e:	f7f8 fe54 	bl	800161a <prvTraceGetQueueNumberHigh16>
 8008972:	4603      	mov	r3, r0
 8008974:	461a      	mov	r2, r3
 8008976:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <xQueueReceive+0x40c>)
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	4013      	ands	r3, r2
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01a      	beq.n	80089b8 <xQueueReceive+0x400>
 8008982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008984:	f7f8 fde7 	bl	8001556 <prvTraceGetQueueType>
 8008988:	4603      	mov	r3, r0
 800898a:	461a      	mov	r2, r3
 800898c:	4b0e      	ldr	r3, [pc, #56]	; (80089c8 <xQueueReceive+0x410>)
 800898e:	5c9b      	ldrb	r3, [r3, r2]
 8008990:	3350      	adds	r3, #80	; 0x50
 8008992:	b2db      	uxtb	r3, r3
 8008994:	461d      	mov	r5, r3
 8008996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008998:	f7f8 fddd 	bl	8001556 <prvTraceGetQueueType>
 800899c:	4603      	mov	r3, r0
 800899e:	461a      	mov	r2, r3
 80089a0:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <xQueueReceive+0x410>)
 80089a2:	5c9c      	ldrb	r4, [r3, r2]
 80089a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089a6:	f7f8 fe2b 	bl	8001600 <prvTraceGetQueueNumberLow16>
 80089aa:	4603      	mov	r3, r0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	461a      	mov	r2, r3
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f7f9 f932 	bl	8001c1c <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 80089b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3730      	adds	r7, #48	; 0x30
 80089be:	46bd      	mov	sp, r7
 80089c0:	bdb0      	pop	{r4, r5, r7, pc}
 80089c2:	bf00      	nop
 80089c4:	2000000a 	.word	0x2000000a
 80089c8:	20000004 	.word	0x20000004

080089cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80089cc:	b5b0      	push	{r4, r5, r7, lr}
 80089ce:	b08e      	sub	sp, #56	; 0x38
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10c      	bne.n	80089fc <xQueueReceiveFromISR+0x30>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	b672      	cpsid	i
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	b662      	cpsie	i
 80089f6:	623b      	str	r3, [r7, #32]
}
 80089f8:	bf00      	nop
 80089fa:	e7fe      	b.n	80089fa <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d103      	bne.n	8008a0a <xQueueReceiveFromISR+0x3e>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <xQueueReceiveFromISR+0x42>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <xQueueReceiveFromISR+0x44>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10c      	bne.n	8008a2e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a18:	b672      	cpsid	i
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	b662      	cpsie	i
 8008a28:	61fb      	str	r3, [r7, #28]
}
 8008a2a:	bf00      	nop
 8008a2c:	e7fe      	b.n	8008a2c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a2e:	f002 f97d 	bl	800ad2c <vPortValidateInterruptPriority>
	__asm volatile
 8008a32:	f3ef 8211 	mrs	r2, BASEPRI
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	b672      	cpsid	i
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	b662      	cpsie	i
 8008a4a:	61ba      	str	r2, [r7, #24]
 8008a4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008a4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d06a      	beq.n	8008b34 <xQueueReceiveFromISR+0x168>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8008a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a6a:	f7f8 fdd6 	bl	800161a <prvTraceGetQueueNumberHigh16>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	461a      	mov	r2, r3
 8008a72:	4b4a      	ldr	r3, [pc, #296]	; (8008b9c <xQueueReceiveFromISR+0x1d0>)
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	4013      	ands	r3, r2
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d01a      	beq.n	8008ab4 <xQueueReceiveFromISR+0xe8>
 8008a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a80:	f7f8 fd69 	bl	8001556 <prvTraceGetQueueType>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	4b45      	ldr	r3, [pc, #276]	; (8008ba0 <xQueueReceiveFromISR+0x1d4>)
 8008a8a:	5c9b      	ldrb	r3, [r3, r2]
 8008a8c:	3338      	adds	r3, #56	; 0x38
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	461d      	mov	r5, r3
 8008a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a94:	f7f8 fd5f 	bl	8001556 <prvTraceGetQueueType>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4b40      	ldr	r3, [pc, #256]	; (8008ba0 <xQueueReceiveFromISR+0x1d4>)
 8008a9e:	5c9c      	ldrb	r4, [r3, r2]
 8008aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aa2:	f7f8 fdad 	bl	8001600 <prvTraceGetQueueNumberLow16>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	461a      	mov	r2, r3
 8008aac:	4621      	mov	r1, r4
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f7f9 f8b4 	bl	8001c1c <prvTraceStoreKernelCall>
 8008ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ab6:	f7f8 fd4e 	bl	8001556 <prvTraceGetQueueType>
 8008aba:	4603      	mov	r3, r0
 8008abc:	461a      	mov	r2, r3
 8008abe:	4b38      	ldr	r3, [pc, #224]	; (8008ba0 <xQueueReceiveFromISR+0x1d4>)
 8008ac0:	5c9c      	ldrb	r4, [r3, r2]
 8008ac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ac4:	f7f8 fd9c 	bl	8001600 <prvTraceGetQueueNumberLow16>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	b2d9      	uxtb	r1, r3
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f7f9 fb35 	bl	8002148 <prvTraceSetObjectState>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ae2:	f000 f8f0 	bl	8008cc6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae8:	1e5a      	subs	r2, r3, #1
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008aee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d112      	bne.n	8008b1e <xQueueReceiveFromISR+0x152>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d016      	beq.n	8008b2e <xQueueReceiveFromISR+0x162>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	3310      	adds	r3, #16
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 ffff 	bl	8009b08 <xTaskRemoveFromEventList>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00e      	beq.n	8008b2e <xQueueReceiveFromISR+0x162>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00b      	beq.n	8008b2e <xQueueReceiveFromISR+0x162>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	e007      	b.n	8008b2e <xQueueReceiveFromISR+0x162>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b22:	3301      	adds	r3, #1
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	b25a      	sxtb	r2, r3
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	637b      	str	r3, [r7, #52]	; 0x34
 8008b32:	e027      	b.n	8008b84 <xQueueReceiveFromISR+0x1b8>
		}
		else
		{
			xReturn = pdFAIL;
 8008b34:	2300      	movs	r3, #0
 8008b36:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8008b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b3a:	f7f8 fd6e 	bl	800161a <prvTraceGetQueueNumberHigh16>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461a      	mov	r2, r3
 8008b42:	4b16      	ldr	r3, [pc, #88]	; (8008b9c <xQueueReceiveFromISR+0x1d0>)
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	4013      	ands	r3, r2
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d01a      	beq.n	8008b84 <xQueueReceiveFromISR+0x1b8>
 8008b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b50:	f7f8 fd01 	bl	8001556 <prvTraceGetQueueType>
 8008b54:	4603      	mov	r3, r0
 8008b56:	461a      	mov	r2, r3
 8008b58:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <xQueueReceiveFromISR+0x1d4>)
 8008b5a:	5c9b      	ldrb	r3, [r3, r2]
 8008b5c:	3360      	adds	r3, #96	; 0x60
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	461d      	mov	r5, r3
 8008b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b64:	f7f8 fcf7 	bl	8001556 <prvTraceGetQueueType>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <xQueueReceiveFromISR+0x1d4>)
 8008b6e:	5c9c      	ldrb	r4, [r3, r2]
 8008b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b72:	f7f8 fd45 	bl	8001600 <prvTraceGetQueueNumberLow16>
 8008b76:	4603      	mov	r3, r0
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	4628      	mov	r0, r5
 8008b80:	f7f9 f84c 	bl	8001c1c <prvTraceStoreKernelCall>
 8008b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b86:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f383 8811 	msr	BASEPRI, r3
}
 8008b8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3738      	adds	r7, #56	; 0x38
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bdb0      	pop	{r4, r5, r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	2000000a 	.word	0x2000000a
 8008ba0:	20000004 	.word	0x20000004

08008ba4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 8008be6:	4618      	mov	r0, r3
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10d      	bne.n	8008c2c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d14d      	bne.n	8008cb4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f001 f9fb 	bl	800a018 <xTaskPriorityDisinherit>
 8008c22:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	609a      	str	r2, [r3, #8]
 8008c2a:	e043      	b.n	8008cb4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d119      	bne.n	8008c66 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6858      	ldr	r0, [r3, #4]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	f002 faf5 	bl	800b22c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4a:	441a      	add	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d32b      	bcc.n	8008cb4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	605a      	str	r2, [r3, #4]
 8008c64:	e026      	b.n	8008cb4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	68d8      	ldr	r0, [r3, #12]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	461a      	mov	r2, r3
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	f002 fadb 	bl	800b22c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	68da      	ldr	r2, [r3, #12]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	425b      	negs	r3, r3
 8008c80:	441a      	add	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	68da      	ldr	r2, [r3, #12]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d207      	bcs.n	8008ca2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	425b      	negs	r3, r3
 8008c9c:	441a      	add	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d105      	bne.n	8008cb4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d002      	beq.n	8008cb4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008cbc:	697b      	ldr	r3, [r7, #20]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d018      	beq.n	8008d0a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce0:	441a      	add	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d303      	bcc.n	8008cfa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68d9      	ldr	r1, [r3, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	461a      	mov	r2, r3
 8008d04:	6838      	ldr	r0, [r7, #0]
 8008d06:	f002 fa91 	bl	800b22c <memcpy>
	}
}
 8008d0a:	bf00      	nop
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d1a:	f001 ff21 	bl	800ab60 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d24:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d26:	e011      	b.n	8008d4c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d012      	beq.n	8008d56 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3324      	adds	r3, #36	; 0x24
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fee7 	bl	8009b08 <xTaskRemoveFromEventList>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d40:	f001 f82a 	bl	8009d98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	dce9      	bgt.n	8008d28 <prvUnlockQueue+0x16>
 8008d54:	e000      	b.n	8008d58 <prvUnlockQueue+0x46>
					break;
 8008d56:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	22ff      	movs	r2, #255	; 0xff
 8008d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d60:	f001 ff32 	bl	800abc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d64:	f001 fefc 	bl	800ab60 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d6e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d70:	e011      	b.n	8008d96 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d012      	beq.n	8008da0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	3310      	adds	r3, #16
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fec2 	bl	8009b08 <xTaskRemoveFromEventList>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d8a:	f001 f805 	bl	8009d98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dce9      	bgt.n	8008d72 <prvUnlockQueue+0x60>
 8008d9e:	e000      	b.n	8008da2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008da0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	22ff      	movs	r2, #255	; 0xff
 8008da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008daa:	f001 ff0d 	bl	800abc8 <vPortExitCritical>
}
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dbe:	f001 fecf 	bl	800ab60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d102      	bne.n	8008dd0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	60fb      	str	r3, [r7, #12]
 8008dce:	e001      	b.n	8008dd4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dd4:	f001 fef8 	bl	800abc8 <vPortExitCritical>

	return xReturn;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dea:	f001 feb9 	bl	800ab60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d102      	bne.n	8008e00 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	e001      	b.n	8008e04 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e04:	f001 fee0 	bl	800abc8 <vPortExitCritical>

	return xReturn;
 8008e08:	68fb      	ldr	r3, [r7, #12]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e14:	b590      	push	{r4, r7, lr}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60fb      	str	r3, [r7, #12]
 8008e22:	e025      	b.n	8008e70 <vQueueAddToRegistry+0x5c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e24:	4a16      	ldr	r2, [pc, #88]	; (8008e80 <vQueueAddToRegistry+0x6c>)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d11c      	bne.n	8008e6a <vQueueAddToRegistry+0x56>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e30:	4913      	ldr	r1, [pc, #76]	; (8008e80 <vQueueAddToRegistry+0x6c>)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e3a:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <vQueueAddToRegistry+0x6c>)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	4413      	add	r3, r2
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7f8 fb85 	bl	8001556 <prvTraceGetQueueType>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	461a      	mov	r2, r3
 8008e50:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <vQueueAddToRegistry+0x70>)
 8008e52:	5c9c      	ldrb	r4, [r3, r2]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7f8 fbd3 	bl	8001600 <prvTraceGetQueueNumberLow16>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	4619      	mov	r1, r3
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7f9 fc96 	bl	8002794 <prvTraceSetObjectName>
				break;
 8008e68:	e006      	b.n	8008e78 <vQueueAddToRegistry+0x64>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b07      	cmp	r3, #7
 8008e74:	d9d6      	bls.n	8008e24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e76:	bf00      	nop
 8008e78:	bf00      	nop
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd90      	pop	{r4, r7, pc}
 8008e80:	2000ae74 	.word	0x2000ae74
 8008e84:	20000004 	.word	0x20000004

08008e88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e98:	f001 fe62 	bl	800ab60 <vPortEnterCritical>
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ea2:	b25b      	sxtb	r3, r3
 8008ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea8:	d103      	bne.n	8008eb2 <vQueueWaitForMessageRestricted+0x2a>
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008eb8:	b25b      	sxtb	r3, r3
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebe:	d103      	bne.n	8008ec8 <vQueueWaitForMessageRestricted+0x40>
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ec8:	f001 fe7e 	bl	800abc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d106      	bne.n	8008ee2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	3324      	adds	r3, #36	; 0x24
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	68b9      	ldr	r1, [r7, #8]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fda9 	bl	8009a34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ee2:	6978      	ldr	r0, [r7, #20]
 8008ee4:	f7ff ff15 	bl	8008d12 <prvUnlockQueue>
	}
 8008ee8:	bf00      	nop
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08e      	sub	sp, #56	; 0x38
 8008ef4:	af04      	add	r7, sp, #16
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10c      	bne.n	8008f1e <xTaskCreateStatic+0x2e>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	b672      	cpsid	i
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	b662      	cpsie	i
 8008f18:	623b      	str	r3, [r7, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10c      	bne.n	8008f3e <xTaskCreateStatic+0x4e>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	b672      	cpsid	i
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	b662      	cpsie	i
 8008f38:	61fb      	str	r3, [r7, #28]
}
 8008f3a:	bf00      	nop
 8008f3c:	e7fe      	b.n	8008f3c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f3e:	23c0      	movs	r3, #192	; 0xc0
 8008f40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	2bc0      	cmp	r3, #192	; 0xc0
 8008f46:	d00c      	beq.n	8008f62 <xTaskCreateStatic+0x72>
	__asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	b672      	cpsid	i
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	b662      	cpsie	i
 8008f5c:	61bb      	str	r3, [r7, #24]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d01e      	beq.n	8008fa8 <xTaskCreateStatic+0xb8>
 8008f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01b      	beq.n	8008fa8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f82:	2300      	movs	r3, #0
 8008f84:	9303      	str	r3, [sp, #12]
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	9302      	str	r3, [sp, #8]
 8008f8a:	f107 0314 	add.w	r3, r7, #20
 8008f8e:	9301      	str	r3, [sp, #4]
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	68b9      	ldr	r1, [r7, #8]
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f000 f850 	bl	8009040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fa2:	f000 f8f9 	bl	8009198 <prvAddNewTaskToReadyList>
 8008fa6:	e001      	b.n	8008fac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fac:	697b      	ldr	r3, [r7, #20]
	}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3728      	adds	r7, #40	; 0x28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b08c      	sub	sp, #48	; 0x30
 8008fba:	af04      	add	r7, sp, #16
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	60b9      	str	r1, [r7, #8]
 8008fc0:	603b      	str	r3, [r7, #0]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008fc6:	88fb      	ldrh	r3, [r7, #6]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 fef2 	bl	800adb4 <pvPortMalloc>
 8008fd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00e      	beq.n	8008ff6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008fd8:	20c0      	movs	r0, #192	; 0xc0
 8008fda:	f001 feeb 	bl	800adb4 <pvPortMalloc>
 8008fde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d003      	beq.n	8008fee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	631a      	str	r2, [r3, #48]	; 0x30
 8008fec:	e005      	b.n	8008ffa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008fee:	6978      	ldr	r0, [r7, #20]
 8008ff0:	f001 ffba 	bl	800af68 <vPortFree>
 8008ff4:	e001      	b.n	8008ffa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d017      	beq.n	8009030 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009008:	88fa      	ldrh	r2, [r7, #6]
 800900a:	2300      	movs	r3, #0
 800900c:	9303      	str	r3, [sp, #12]
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	9302      	str	r3, [sp, #8]
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	9301      	str	r3, [sp, #4]
 8009016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 f80e 	bl	8009040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009024:	69f8      	ldr	r0, [r7, #28]
 8009026:	f000 f8b7 	bl	8009198 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800902a:	2301      	movs	r3, #1
 800902c:	61bb      	str	r3, [r7, #24]
 800902e:	e002      	b.n	8009036 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009030:	f04f 33ff 	mov.w	r3, #4294967295
 8009034:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009036:	69bb      	ldr	r3, [r7, #24]
	}
 8009038:	4618      	mov	r0, r3
 800903a:	3720      	adds	r7, #32
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	461a      	mov	r2, r3
 8009058:	21a5      	movs	r1, #165	; 0xa5
 800905a:	f002 f8f5 	bl	800b248 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009062:	6879      	ldr	r1, [r7, #4]
 8009064:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009068:	440b      	add	r3, r1
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	f023 0307 	bic.w	r3, r3, #7
 8009076:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	f003 0307 	and.w	r3, r3, #7
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00c      	beq.n	800909c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	b672      	cpsid	i
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	b662      	cpsie	i
 8009096:	617b      	str	r3, [r7, #20]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01f      	beq.n	80090e2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090a2:	2300      	movs	r3, #0
 80090a4:	61fb      	str	r3, [r7, #28]
 80090a6:	e012      	b.n	80090ce <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	4413      	add	r3, r2
 80090ae:	7819      	ldrb	r1, [r3, #0]
 80090b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	4413      	add	r3, r2
 80090b6:	3334      	adds	r3, #52	; 0x34
 80090b8:	460a      	mov	r2, r1
 80090ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	4413      	add	r3, r2
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d006      	beq.n	80090d6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	3301      	adds	r3, #1
 80090cc:	61fb      	str	r3, [r7, #28]
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	2b0f      	cmp	r3, #15
 80090d2:	d9e9      	bls.n	80090a8 <prvInitialiseNewTask+0x68>
 80090d4:	e000      	b.n	80090d8 <prvInitialiseNewTask+0x98>
			{
				break;
 80090d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090e0:	e003      	b.n	80090ea <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	2b37      	cmp	r3, #55	; 0x37
 80090ee:	d901      	bls.n	80090f4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090f0:	2337      	movs	r3, #55	; 0x37
 80090f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	2200      	movs	r2, #0
 8009104:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	3304      	adds	r3, #4
 800910a:	4618      	mov	r0, r3
 800910c:	f7fe fc9e 	bl	8007a4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	3318      	adds	r3, #24
 8009114:	4618      	mov	r0, r3
 8009116:	f7fe fc99 	bl	8007a4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800911a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800911e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800912e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	2200      	movs	r2, #0
 8009134:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	2200      	movs	r2, #0
 800913a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	2200      	movs	r2, #0
 8009142:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	3358      	adds	r3, #88	; 0x58
 800914a:	2260      	movs	r2, #96	; 0x60
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f002 f87a 	bl	800b248 <memset>
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	4a0d      	ldr	r2, [pc, #52]	; (800918c <prvInitialiseNewTask+0x14c>)
 8009158:	65da      	str	r2, [r3, #92]	; 0x5c
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	4a0c      	ldr	r2, [pc, #48]	; (8009190 <prvInitialiseNewTask+0x150>)
 800915e:	661a      	str	r2, [r3, #96]	; 0x60
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	4a0c      	ldr	r2, [pc, #48]	; (8009194 <prvInitialiseNewTask+0x154>)
 8009164:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	68f9      	ldr	r1, [r7, #12]
 800916a:	69b8      	ldr	r0, [r7, #24]
 800916c:	f001 fbdc 	bl	800a928 <pxPortInitialiseStack>
 8009170:	4602      	mov	r2, r0
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800917c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009182:	bf00      	nop
 8009184:	3720      	adds	r7, #32
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	0800cb64 	.word	0x0800cb64
 8009190:	0800cb84 	.word	0x0800cb84
 8009194:	0800cb44 	.word	0x0800cb44

08009198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091a0:	f001 fcde 	bl	800ab60 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091a4:	4b53      	ldr	r3, [pc, #332]	; (80092f4 <prvAddNewTaskToReadyList+0x15c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3301      	adds	r3, #1
 80091aa:	4a52      	ldr	r2, [pc, #328]	; (80092f4 <prvAddNewTaskToReadyList+0x15c>)
 80091ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091ae:	4b52      	ldr	r3, [pc, #328]	; (80092f8 <prvAddNewTaskToReadyList+0x160>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d109      	bne.n	80091ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091b6:	4a50      	ldr	r2, [pc, #320]	; (80092f8 <prvAddNewTaskToReadyList+0x160>)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091bc:	4b4d      	ldr	r3, [pc, #308]	; (80092f4 <prvAddNewTaskToReadyList+0x15c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d110      	bne.n	80091e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091c4:	f000 fe36 	bl	8009e34 <prvInitialiseTaskLists>
 80091c8:	e00d      	b.n	80091e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091ca:	4b4c      	ldr	r3, [pc, #304]	; (80092fc <prvAddNewTaskToReadyList+0x164>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d109      	bne.n	80091e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091d2:	4b49      	ldr	r3, [pc, #292]	; (80092f8 <prvAddNewTaskToReadyList+0x160>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091dc:	429a      	cmp	r2, r3
 80091de:	d802      	bhi.n	80091e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091e0:	4a45      	ldr	r2, [pc, #276]	; (80092f8 <prvAddNewTaskToReadyList+0x160>)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091e6:	4b46      	ldr	r3, [pc, #280]	; (8009300 <prvAddNewTaskToReadyList+0x168>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3301      	adds	r3, #1
 80091ec:	4a44      	ldr	r2, [pc, #272]	; (8009300 <prvAddNewTaskToReadyList+0x168>)
 80091ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80091f0:	4b43      	ldr	r3, [pc, #268]	; (8009300 <prvAddNewTaskToReadyList+0x168>)
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d048      	beq.n	8009290 <prvAddNewTaskToReadyList+0xf8>
 80091fe:	2003      	movs	r0, #3
 8009200:	f7f9 f9d6 	bl	80025b0 <prvTraceGetObjectHandle>
 8009204:	4603      	mov	r3, r0
 8009206:	b29b      	uxth	r3, r3
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7f8 f9ca 	bl	80015a4 <prvTraceSetTaskNumberLow16>
 8009210:	4b3c      	ldr	r3, [pc, #240]	; (8009304 <prvAddNewTaskToReadyList+0x16c>)
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7f8 f9dc 	bl	80015d4 <prvTraceSetTaskNumberHigh16>
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7f8 f9a6 	bl	800156e <prvTraceGetTaskNumberLow16>
 8009222:	4603      	mov	r3, r0
 8009224:	b2d9      	uxtb	r1, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3334      	adds	r3, #52	; 0x34
 800922a:	461a      	mov	r2, r3
 800922c:	2003      	movs	r0, #3
 800922e:	f7f9 fab1 	bl	8002794 <prvTraceSetObjectName>
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7f8 f99b 	bl	800156e <prvTraceGetTaskNumberLow16>
 8009238:	4603      	mov	r3, r0
 800923a:	b2d9      	uxtb	r1, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	b2db      	uxtb	r3, r3
 8009242:	461a      	mov	r2, r3
 8009244:	2003      	movs	r0, #3
 8009246:	f7f8 ff05 	bl	8002054 <prvTraceSetPriorityProperty>
 800924a:	f7f8 fa23 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 800924e:	4603      	mov	r3, r0
 8009250:	4618      	mov	r0, r3
 8009252:	f7f8 f999 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 8009256:	4603      	mov	r3, r0
 8009258:	461a      	mov	r2, r3
 800925a:	4b2b      	ldr	r3, [pc, #172]	; (8009308 <prvAddNewTaskToReadyList+0x170>)
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	4013      	ands	r3, r2
 8009260:	b29b      	uxth	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d014      	beq.n	8009290 <prvAddNewTaskToReadyList+0xf8>
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7f8 f98e 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 800926c:	4603      	mov	r3, r0
 800926e:	461a      	mov	r2, r3
 8009270:	4b25      	ldr	r3, [pc, #148]	; (8009308 <prvAddNewTaskToReadyList+0x170>)
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	4013      	ands	r3, r2
 8009276:	b29b      	uxth	r3, r3
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <prvAddNewTaskToReadyList+0xf8>
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7f8 f976 	bl	800156e <prvTraceGetTaskNumberLow16>
 8009282:	4603      	mov	r3, r0
 8009284:	b2db      	uxtb	r3, r3
 8009286:	461a      	mov	r2, r3
 8009288:	2103      	movs	r1, #3
 800928a:	201b      	movs	r0, #27
 800928c:	f7f8 fcc6 	bl	8001c1c <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009294:	4b1d      	ldr	r3, [pc, #116]	; (800930c <prvAddNewTaskToReadyList+0x174>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	429a      	cmp	r2, r3
 800929a:	d903      	bls.n	80092a4 <prvAddNewTaskToReadyList+0x10c>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a1a      	ldr	r2, [pc, #104]	; (800930c <prvAddNewTaskToReadyList+0x174>)
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a8:	4613      	mov	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4a17      	ldr	r2, [pc, #92]	; (8009310 <prvAddNewTaskToReadyList+0x178>)
 80092b2:	441a      	add	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	3304      	adds	r3, #4
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f7fe fbd3 	bl	8007a66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092c0:	f001 fc82 	bl	800abc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092c4:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <prvAddNewTaskToReadyList+0x164>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00e      	beq.n	80092ea <prvAddNewTaskToReadyList+0x152>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092cc:	4b0a      	ldr	r3, [pc, #40]	; (80092f8 <prvAddNewTaskToReadyList+0x160>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d207      	bcs.n	80092ea <prvAddNewTaskToReadyList+0x152>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092da:	4b0e      	ldr	r3, [pc, #56]	; (8009314 <prvAddNewTaskToReadyList+0x17c>)
 80092dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	2000b388 	.word	0x2000b388
 80092f8:	2000aeb4 	.word	0x2000aeb4
 80092fc:	2000b394 	.word	0x2000b394
 8009300:	2000b3a4 	.word	0x2000b3a4
 8009304:	2000000c 	.word	0x2000000c
 8009308:	2000000a 	.word	0x2000000a
 800930c:	2000b390 	.word	0x2000b390
 8009310:	2000aeb8 	.word	0x2000aeb8
 8009314:	e000ed04 	.word	0xe000ed04

08009318 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009320:	2300      	movs	r3, #0
 8009322:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d04d      	beq.n	80093c6 <vTaskDelay+0xae>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800932a:	4b2e      	ldr	r3, [pc, #184]	; (80093e4 <vTaskDelay+0xcc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00c      	beq.n	800934c <vTaskDelay+0x34>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	b672      	cpsid	i
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	b662      	cpsie	i
 8009346:	60bb      	str	r3, [r7, #8]
}
 8009348:	bf00      	nop
 800934a:	e7fe      	b.n	800934a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800934c:	f000 f8e2 	bl	8009514 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8009350:	4b25      	ldr	r3, [pc, #148]	; (80093e8 <vTaskDelay+0xd0>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4618      	mov	r0, r3
 8009356:	f7f8 f917 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 800935a:	4603      	mov	r3, r0
 800935c:	461a      	mov	r2, r3
 800935e:	4b23      	ldr	r3, [pc, #140]	; (80093ec <vTaskDelay+0xd4>)
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	4013      	ands	r3, r2
 8009364:	b29b      	uxth	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00d      	beq.n	8009386 <vTaskDelay+0x6e>
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	2089      	movs	r0, #137	; 0x89
 800936e:	f7f8 fd99 	bl	8001ea4 <prvTraceStoreKernelCallWithNumericParamOnly>
 8009372:	4b1d      	ldr	r3, [pc, #116]	; (80093e8 <vTaskDelay+0xd0>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4618      	mov	r0, r3
 8009378:	f7f8 f8f9 	bl	800156e <prvTraceGetTaskNumberLow16>
 800937c:	4603      	mov	r3, r0
 800937e:	b2db      	uxtb	r3, r3
 8009380:	4618      	mov	r0, r3
 8009382:	f7f8 ff59 	bl	8002238 <prvTraceSetTaskInstanceFinished>
 8009386:	f7f8 f985 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 800938a:	4603      	mov	r3, r0
 800938c:	4618      	mov	r0, r3
 800938e:	f7f8 f8fb 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 8009392:	4603      	mov	r3, r0
 8009394:	461a      	mov	r2, r3
 8009396:	4b15      	ldr	r3, [pc, #84]	; (80093ec <vTaskDelay+0xd4>)
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	4013      	ands	r3, r2
 800939c:	b29b      	uxth	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <vTaskDelay+0xa0>
 80093a2:	f7f8 f977 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 80093a6:	4603      	mov	r3, r0
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7f8 f8e0 	bl	800156e <prvTraceGetTaskNumberLow16>
 80093ae:	4603      	mov	r3, r0
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7f8 ff40 	bl	8002238 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093b8:	2100      	movs	r1, #0
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fee4 	bl	800a188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093c0:	f000 f8b6 	bl	8009530 <xTaskResumeAll>
 80093c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d107      	bne.n	80093dc <vTaskDelay+0xc4>
		{
			portYIELD_WITHIN_API();
 80093cc:	4b08      	ldr	r3, [pc, #32]	; (80093f0 <vTaskDelay+0xd8>)
 80093ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	2000b3b0 	.word	0x2000b3b0
 80093e8:	2000aeb4 	.word	0x2000aeb4
 80093ec:	2000000a 	.word	0x2000000a
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08a      	sub	sp, #40	; 0x28
 80093f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093fe:	2300      	movs	r3, #0
 8009400:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009402:	463a      	mov	r2, r7
 8009404:	1d39      	adds	r1, r7, #4
 8009406:	f107 0308 	add.w	r3, r7, #8
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe f8cc 	bl	80075a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	9202      	str	r2, [sp, #8]
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	2300      	movs	r3, #0
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	2300      	movs	r3, #0
 8009420:	460a      	mov	r2, r1
 8009422:	4933      	ldr	r1, [pc, #204]	; (80094f0 <vTaskStartScheduler+0xfc>)
 8009424:	4833      	ldr	r0, [pc, #204]	; (80094f4 <vTaskStartScheduler+0x100>)
 8009426:	f7ff fd63 	bl	8008ef0 <xTaskCreateStatic>
 800942a:	4603      	mov	r3, r0
 800942c:	4a32      	ldr	r2, [pc, #200]	; (80094f8 <vTaskStartScheduler+0x104>)
 800942e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009430:	4b31      	ldr	r3, [pc, #196]	; (80094f8 <vTaskStartScheduler+0x104>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009438:	2301      	movs	r3, #1
 800943a:	617b      	str	r3, [r7, #20]
 800943c:	e001      	b.n	8009442 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800943e:	2300      	movs	r3, #0
 8009440:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d102      	bne.n	800944e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009448:	f000 fef2 	bl	800a230 <xTimerCreateTimerTask>
 800944c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d138      	bne.n	80094c6 <vTaskStartScheduler+0xd2>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	b672      	cpsid	i
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	b662      	cpsie	i
 8009468:	613b      	str	r3, [r7, #16]
}
 800946a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800946c:	4b23      	ldr	r3, [pc, #140]	; (80094fc <vTaskStartScheduler+0x108>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3358      	adds	r3, #88	; 0x58
 8009472:	4a23      	ldr	r2, [pc, #140]	; (8009500 <vTaskStartScheduler+0x10c>)
 8009474:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009476:	4b23      	ldr	r3, [pc, #140]	; (8009504 <vTaskStartScheduler+0x110>)
 8009478:	f04f 32ff 	mov.w	r2, #4294967295
 800947c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800947e:	4b22      	ldr	r3, [pc, #136]	; (8009508 <vTaskStartScheduler+0x114>)
 8009480:	2201      	movs	r2, #1
 8009482:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009484:	4b21      	ldr	r3, [pc, #132]	; (800950c <vTaskStartScheduler+0x118>)
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800948a:	f7f7 fbb1 	bl	8000bf0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 800948e:	f7f8 f901 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8009492:	4603      	mov	r3, r0
 8009494:	4618      	mov	r0, r3
 8009496:	f7f8 f877 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 800949a:	4603      	mov	r3, r0
 800949c:	461a      	mov	r2, r3
 800949e:	4b1c      	ldr	r3, [pc, #112]	; (8009510 <vTaskStartScheduler+0x11c>)
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	4013      	ands	r3, r2
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <vTaskStartScheduler+0xcc>
 80094aa:	f7f8 f8f3 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 80094ae:	4603      	mov	r3, r0
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7f8 f85c 	bl	800156e <prvTraceGetTaskNumberLow16>
 80094b6:	4603      	mov	r3, r0
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7f8 fd58 	bl	8001f70 <prvTraceStoreTaskswitch>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094c0:	f001 fabe 	bl	800aa40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094c4:	e010      	b.n	80094e8 <vTaskStartScheduler+0xf4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094cc:	d10c      	bne.n	80094e8 <vTaskStartScheduler+0xf4>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	b672      	cpsid	i
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	b662      	cpsie	i
 80094e2:	60fb      	str	r3, [r7, #12]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <vTaskStartScheduler+0xf2>
}
 80094e8:	bf00      	nop
 80094ea:	3718      	adds	r7, #24
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	0800c9c8 	.word	0x0800c9c8
 80094f4:	08009e05 	.word	0x08009e05
 80094f8:	2000b3ac 	.word	0x2000b3ac
 80094fc:	2000aeb4 	.word	0x2000aeb4
 8009500:	2000001c 	.word	0x2000001c
 8009504:	2000b3a8 	.word	0x2000b3a8
 8009508:	2000b394 	.word	0x2000b394
 800950c:	2000b38c 	.word	0x2000b38c
 8009510:	2000000a 	.word	0x2000000a

08009514 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009518:	4b04      	ldr	r3, [pc, #16]	; (800952c <vTaskSuspendAll+0x18>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3301      	adds	r3, #1
 800951e:	4a03      	ldr	r2, [pc, #12]	; (800952c <vTaskSuspendAll+0x18>)
 8009520:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009522:	bf00      	nop
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	2000b3b0 	.word	0x2000b3b0

08009530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009536:	2300      	movs	r3, #0
 8009538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800953a:	2300      	movs	r3, #0
 800953c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800953e:	4b43      	ldr	r3, [pc, #268]	; (800964c <xTaskResumeAll+0x11c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10c      	bne.n	8009560 <xTaskResumeAll+0x30>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	b672      	cpsid	i
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	b662      	cpsie	i
 800955a:	603b      	str	r3, [r7, #0]
}
 800955c:	bf00      	nop
 800955e:	e7fe      	b.n	800955e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009560:	f001 fafe 	bl	800ab60 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009564:	4b39      	ldr	r3, [pc, #228]	; (800964c <xTaskResumeAll+0x11c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3b01      	subs	r3, #1
 800956a:	4a38      	ldr	r2, [pc, #224]	; (800964c <xTaskResumeAll+0x11c>)
 800956c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800956e:	4b37      	ldr	r3, [pc, #220]	; (800964c <xTaskResumeAll+0x11c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d162      	bne.n	800963c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009576:	4b36      	ldr	r3, [pc, #216]	; (8009650 <xTaskResumeAll+0x120>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d05e      	beq.n	800963c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800957e:	e02f      	b.n	80095e0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009580:	4b34      	ldr	r3, [pc, #208]	; (8009654 <xTaskResumeAll+0x124>)
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	3318      	adds	r3, #24
 800958c:	4618      	mov	r0, r3
 800958e:	f7fe fac7 	bl	8007b20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3304      	adds	r3, #4
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe fac2 	bl	8007b20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a0:	4b2d      	ldr	r3, [pc, #180]	; (8009658 <xTaskResumeAll+0x128>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d903      	bls.n	80095b0 <xTaskResumeAll+0x80>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ac:	4a2a      	ldr	r2, [pc, #168]	; (8009658 <xTaskResumeAll+0x128>)
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4a27      	ldr	r2, [pc, #156]	; (800965c <xTaskResumeAll+0x12c>)
 80095be:	441a      	add	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	3304      	adds	r3, #4
 80095c4:	4619      	mov	r1, r3
 80095c6:	4610      	mov	r0, r2
 80095c8:	f7fe fa4d 	bl	8007a66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d0:	4b23      	ldr	r3, [pc, #140]	; (8009660 <xTaskResumeAll+0x130>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d302      	bcc.n	80095e0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80095da:	4b22      	ldr	r3, [pc, #136]	; (8009664 <xTaskResumeAll+0x134>)
 80095dc:	2201      	movs	r2, #1
 80095de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095e0:	4b1c      	ldr	r3, [pc, #112]	; (8009654 <xTaskResumeAll+0x124>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1cb      	bne.n	8009580 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095ee:	f000 fcc5 	bl	8009f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80095f2:	4b1d      	ldr	r3, [pc, #116]	; (8009668 <xTaskResumeAll+0x138>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d010      	beq.n	8009620 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095fe:	f000 f847 	bl	8009690 <xTaskIncrementTick>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009608:	4b16      	ldr	r3, [pc, #88]	; (8009664 <xTaskResumeAll+0x134>)
 800960a:	2201      	movs	r2, #1
 800960c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3b01      	subs	r3, #1
 8009612:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1f1      	bne.n	80095fe <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800961a:	4b13      	ldr	r3, [pc, #76]	; (8009668 <xTaskResumeAll+0x138>)
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009620:	4b10      	ldr	r3, [pc, #64]	; (8009664 <xTaskResumeAll+0x134>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d009      	beq.n	800963c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009628:	2301      	movs	r3, #1
 800962a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800962c:	4b0f      	ldr	r3, [pc, #60]	; (800966c <xTaskResumeAll+0x13c>)
 800962e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800963c:	f001 fac4 	bl	800abc8 <vPortExitCritical>

	return xAlreadyYielded;
 8009640:	68bb      	ldr	r3, [r7, #8]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	2000b3b0 	.word	0x2000b3b0
 8009650:	2000b388 	.word	0x2000b388
 8009654:	2000b348 	.word	0x2000b348
 8009658:	2000b390 	.word	0x2000b390
 800965c:	2000aeb8 	.word	0x2000aeb8
 8009660:	2000aeb4 	.word	0x2000aeb4
 8009664:	2000b39c 	.word	0x2000b39c
 8009668:	2000b398 	.word	0x2000b398
 800966c:	e000ed04 	.word	0xe000ed04

08009670 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <xTaskGetTickCount+0x1c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800967c:	687b      	ldr	r3, [r7, #4]
}
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	2000b38c 	.word	0x2000b38c

08009690 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009696:	2300      	movs	r3, #0
 8009698:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800969a:	4b59      	ldr	r3, [pc, #356]	; (8009800 <xTaskIncrementTick+0x170>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d003      	beq.n	80096aa <xTaskIncrementTick+0x1a>
 80096a2:	4b58      	ldr	r3, [pc, #352]	; (8009804 <xTaskIncrementTick+0x174>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d107      	bne.n	80096ba <xTaskIncrementTick+0x2a>
 80096aa:	4b57      	ldr	r3, [pc, #348]	; (8009808 <xTaskIncrementTick+0x178>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3301      	adds	r3, #1
 80096b0:	4a55      	ldr	r2, [pc, #340]	; (8009808 <xTaskIncrementTick+0x178>)
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	2000      	movs	r0, #0
 80096b6:	f7f9 fab9 	bl	8002c2c <prvTracePortGetTimeStamp>
 80096ba:	4b51      	ldr	r3, [pc, #324]	; (8009800 <xTaskIncrementTick+0x170>)
 80096bc:	681b      	ldr	r3, [r3, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096be:	4b50      	ldr	r3, [pc, #320]	; (8009800 <xTaskIncrementTick+0x170>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f040 808b 	bne.w	80097de <xTaskIncrementTick+0x14e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096c8:	4b50      	ldr	r3, [pc, #320]	; (800980c <xTaskIncrementTick+0x17c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	3301      	adds	r3, #1
 80096ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096d0:	4a4e      	ldr	r2, [pc, #312]	; (800980c <xTaskIncrementTick+0x17c>)
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d122      	bne.n	8009722 <xTaskIncrementTick+0x92>
		{
			taskSWITCH_DELAYED_LISTS();
 80096dc:	4b4c      	ldr	r3, [pc, #304]	; (8009810 <xTaskIncrementTick+0x180>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00c      	beq.n	8009700 <xTaskIncrementTick+0x70>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	b672      	cpsid	i
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	b662      	cpsie	i
 80096fa:	603b      	str	r3, [r7, #0]
}
 80096fc:	bf00      	nop
 80096fe:	e7fe      	b.n	80096fe <xTaskIncrementTick+0x6e>
 8009700:	4b43      	ldr	r3, [pc, #268]	; (8009810 <xTaskIncrementTick+0x180>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	60fb      	str	r3, [r7, #12]
 8009706:	4b43      	ldr	r3, [pc, #268]	; (8009814 <xTaskIncrementTick+0x184>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a41      	ldr	r2, [pc, #260]	; (8009810 <xTaskIncrementTick+0x180>)
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	4a41      	ldr	r2, [pc, #260]	; (8009814 <xTaskIncrementTick+0x184>)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	4b40      	ldr	r3, [pc, #256]	; (8009818 <xTaskIncrementTick+0x188>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3301      	adds	r3, #1
 800971a:	4a3f      	ldr	r2, [pc, #252]	; (8009818 <xTaskIncrementTick+0x188>)
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	f000 fc2d 	bl	8009f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009722:	4b3e      	ldr	r3, [pc, #248]	; (800981c <xTaskIncrementTick+0x18c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	429a      	cmp	r2, r3
 800972a:	d349      	bcc.n	80097c0 <xTaskIncrementTick+0x130>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800972c:	4b38      	ldr	r3, [pc, #224]	; (8009810 <xTaskIncrementTick+0x180>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d104      	bne.n	8009740 <xTaskIncrementTick+0xb0>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009736:	4b39      	ldr	r3, [pc, #228]	; (800981c <xTaskIncrementTick+0x18c>)
 8009738:	f04f 32ff 	mov.w	r2, #4294967295
 800973c:	601a      	str	r2, [r3, #0]
					break;
 800973e:	e03f      	b.n	80097c0 <xTaskIncrementTick+0x130>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009740:	4b33      	ldr	r3, [pc, #204]	; (8009810 <xTaskIncrementTick+0x180>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	429a      	cmp	r2, r3
 8009756:	d203      	bcs.n	8009760 <xTaskIncrementTick+0xd0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009758:	4a30      	ldr	r2, [pc, #192]	; (800981c <xTaskIncrementTick+0x18c>)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800975e:	e02f      	b.n	80097c0 <xTaskIncrementTick+0x130>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	3304      	adds	r3, #4
 8009764:	4618      	mov	r0, r3
 8009766:	f7fe f9db 	bl	8007b20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976e:	2b00      	cmp	r3, #0
 8009770:	d004      	beq.n	800977c <xTaskIncrementTick+0xec>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	3318      	adds	r3, #24
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe f9d2 	bl	8007b20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009780:	4b27      	ldr	r3, [pc, #156]	; (8009820 <xTaskIncrementTick+0x190>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	429a      	cmp	r2, r3
 8009786:	d903      	bls.n	8009790 <xTaskIncrementTick+0x100>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	4a24      	ldr	r2, [pc, #144]	; (8009820 <xTaskIncrementTick+0x190>)
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009794:	4613      	mov	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4a21      	ldr	r2, [pc, #132]	; (8009824 <xTaskIncrementTick+0x194>)
 800979e:	441a      	add	r2, r3
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	3304      	adds	r3, #4
 80097a4:	4619      	mov	r1, r3
 80097a6:	4610      	mov	r0, r2
 80097a8:	f7fe f95d 	bl	8007a66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b0:	4b1d      	ldr	r3, [pc, #116]	; (8009828 <xTaskIncrementTick+0x198>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d3b8      	bcc.n	800972c <xTaskIncrementTick+0x9c>
						{
							xSwitchRequired = pdTRUE;
 80097ba:	2301      	movs	r3, #1
 80097bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097be:	e7b5      	b.n	800972c <xTaskIncrementTick+0x9c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097c0:	4b19      	ldr	r3, [pc, #100]	; (8009828 <xTaskIncrementTick+0x198>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c6:	4917      	ldr	r1, [pc, #92]	; (8009824 <xTaskIncrementTick+0x194>)
 80097c8:	4613      	mov	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d907      	bls.n	80097e8 <xTaskIncrementTick+0x158>
			{
				xSwitchRequired = pdTRUE;
 80097d8:	2301      	movs	r3, #1
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	e004      	b.n	80097e8 <xTaskIncrementTick+0x158>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80097de:	4b09      	ldr	r3, [pc, #36]	; (8009804 <xTaskIncrementTick+0x174>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3301      	adds	r3, #1
 80097e4:	4a07      	ldr	r2, [pc, #28]	; (8009804 <xTaskIncrementTick+0x174>)
 80097e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80097e8:	4b10      	ldr	r3, [pc, #64]	; (800982c <xTaskIncrementTick+0x19c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <xTaskIncrementTick+0x164>
		{
			xSwitchRequired = pdTRUE;
 80097f0:	2301      	movs	r3, #1
 80097f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80097f4:	697b      	ldr	r3, [r7, #20]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	2000b3b0 	.word	0x2000b3b0
 8009804:	2000b398 	.word	0x2000b398
 8009808:	20001fa4 	.word	0x20001fa4
 800980c:	2000b38c 	.word	0x2000b38c
 8009810:	2000b340 	.word	0x2000b340
 8009814:	2000b344 	.word	0x2000b344
 8009818:	2000b3a0 	.word	0x2000b3a0
 800981c:	2000b3a8 	.word	0x2000b3a8
 8009820:	2000b390 	.word	0x2000b390
 8009824:	2000aeb8 	.word	0x2000aeb8
 8009828:	2000aeb4 	.word	0x2000aeb4
 800982c:	2000b39c 	.word	0x2000b39c

08009830 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009836:	4b43      	ldr	r3, [pc, #268]	; (8009944 <vTaskSwitchContext+0x114>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800983e:	4b42      	ldr	r3, [pc, #264]	; (8009948 <vTaskSwitchContext+0x118>)
 8009840:	2201      	movs	r2, #1
 8009842:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009844:	e07a      	b.n	800993c <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 8009846:	4b40      	ldr	r3, [pc, #256]	; (8009948 <vTaskSwitchContext+0x118>)
 8009848:	2200      	movs	r2, #0
 800984a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800984c:	f7f7 f9de 	bl	8000c0c <getRunTimeCounterValue>
 8009850:	4603      	mov	r3, r0
 8009852:	4a3e      	ldr	r2, [pc, #248]	; (800994c <vTaskSwitchContext+0x11c>)
 8009854:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009856:	4b3d      	ldr	r3, [pc, #244]	; (800994c <vTaskSwitchContext+0x11c>)
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	4b3d      	ldr	r3, [pc, #244]	; (8009950 <vTaskSwitchContext+0x120>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d909      	bls.n	8009876 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009862:	4b3c      	ldr	r3, [pc, #240]	; (8009954 <vTaskSwitchContext+0x124>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009868:	4a38      	ldr	r2, [pc, #224]	; (800994c <vTaskSwitchContext+0x11c>)
 800986a:	6810      	ldr	r0, [r2, #0]
 800986c:	4a38      	ldr	r2, [pc, #224]	; (8009950 <vTaskSwitchContext+0x120>)
 800986e:	6812      	ldr	r2, [r2, #0]
 8009870:	1a82      	subs	r2, r0, r2
 8009872:	440a      	add	r2, r1
 8009874:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009876:	4b35      	ldr	r3, [pc, #212]	; (800994c <vTaskSwitchContext+0x11c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a35      	ldr	r2, [pc, #212]	; (8009950 <vTaskSwitchContext+0x120>)
 800987c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800987e:	4b36      	ldr	r3, [pc, #216]	; (8009958 <vTaskSwitchContext+0x128>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	e012      	b.n	80098ac <vTaskSwitchContext+0x7c>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10c      	bne.n	80098a6 <vTaskSwitchContext+0x76>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	b672      	cpsid	i
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	b662      	cpsie	i
 80098a0:	607b      	str	r3, [r7, #4]
}
 80098a2:	bf00      	nop
 80098a4:	e7fe      	b.n	80098a4 <vTaskSwitchContext+0x74>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	492b      	ldr	r1, [pc, #172]	; (800995c <vTaskSwitchContext+0x12c>)
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	440b      	add	r3, r1
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d0e2      	beq.n	8009886 <vTaskSwitchContext+0x56>
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	4613      	mov	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4a24      	ldr	r2, [pc, #144]	; (800995c <vTaskSwitchContext+0x12c>)
 80098cc:	4413      	add	r3, r2
 80098ce:	60bb      	str	r3, [r7, #8]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	685a      	ldr	r2, [r3, #4]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	605a      	str	r2, [r3, #4]
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	3308      	adds	r3, #8
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d104      	bne.n	80098f0 <vTaskSwitchContext+0xc0>
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	605a      	str	r2, [r3, #4]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	4a17      	ldr	r2, [pc, #92]	; (8009954 <vTaskSwitchContext+0x124>)
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	4a17      	ldr	r2, [pc, #92]	; (8009958 <vTaskSwitchContext+0x128>)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8009900:	f7f7 fec8 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8009904:	4603      	mov	r3, r0
 8009906:	4618      	mov	r0, r3
 8009908:	f7f7 fe3e 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 800990c:	4603      	mov	r3, r0
 800990e:	461a      	mov	r2, r3
 8009910:	4b13      	ldr	r3, [pc, #76]	; (8009960 <vTaskSwitchContext+0x130>)
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	4013      	ands	r3, r2
 8009916:	b29b      	uxth	r3, r3
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00a      	beq.n	8009932 <vTaskSwitchContext+0x102>
 800991c:	f7f7 feba 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8009920:	4603      	mov	r3, r0
 8009922:	4618      	mov	r0, r3
 8009924:	f7f7 fe23 	bl	800156e <prvTraceGetTaskNumberLow16>
 8009928:	4603      	mov	r3, r0
 800992a:	b2db      	uxtb	r3, r3
 800992c:	4618      	mov	r0, r3
 800992e:	f7f8 fb1f 	bl	8001f70 <prvTraceStoreTaskswitch>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009932:	4b08      	ldr	r3, [pc, #32]	; (8009954 <vTaskSwitchContext+0x124>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3358      	adds	r3, #88	; 0x58
 8009938:	4a0a      	ldr	r2, [pc, #40]	; (8009964 <vTaskSwitchContext+0x134>)
 800993a:	6013      	str	r3, [r2, #0]
}
 800993c:	bf00      	nop
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	2000b3b0 	.word	0x2000b3b0
 8009948:	2000b39c 	.word	0x2000b39c
 800994c:	2000b3b8 	.word	0x2000b3b8
 8009950:	2000b3b4 	.word	0x2000b3b4
 8009954:	2000aeb4 	.word	0x2000aeb4
 8009958:	2000b390 	.word	0x2000b390
 800995c:	2000aeb8 	.word	0x2000aeb8
 8009960:	2000000a 	.word	0x2000000a
 8009964:	2000001c 	.word	0x2000001c

08009968 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10c      	bne.n	8009992 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	b672      	cpsid	i
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	b662      	cpsie	i
 800998c:	60fb      	str	r3, [r7, #12]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009992:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <vTaskPlaceOnEventList+0x48>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3318      	adds	r3, #24
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7fe f887 	bl	8007aae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099a0:	2101      	movs	r1, #1
 80099a2:	6838      	ldr	r0, [r7, #0]
 80099a4:	f000 fbf0 	bl	800a188 <prvAddCurrentTaskToDelayedList>
}
 80099a8:	bf00      	nop
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	2000aeb4 	.word	0x2000aeb4

080099b4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10c      	bne.n	80099e0 <vTaskPlaceOnUnorderedEventList+0x2c>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	b672      	cpsid	i
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	b662      	cpsie	i
 80099da:	617b      	str	r3, [r7, #20]
}
 80099dc:	bf00      	nop
 80099de:	e7fe      	b.n	80099de <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80099e0:	4b12      	ldr	r3, [pc, #72]	; (8009a2c <vTaskPlaceOnUnorderedEventList+0x78>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10c      	bne.n	8009a02 <vTaskPlaceOnUnorderedEventList+0x4e>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	b672      	cpsid	i
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	b662      	cpsie	i
 80099fc:	613b      	str	r3, [r7, #16]
}
 80099fe:	bf00      	nop
 8009a00:	e7fe      	b.n	8009a00 <vTaskPlaceOnUnorderedEventList+0x4c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009a02:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009a0c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a0e:	4b08      	ldr	r3, [pc, #32]	; (8009a30 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3318      	adds	r3, #24
 8009a14:	4619      	mov	r1, r3
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7fe f825 	bl	8007a66 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fbb2 	bl	800a188 <prvAddCurrentTaskToDelayedList>
}
 8009a24:	bf00      	nop
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	2000b3b0 	.word	0x2000b3b0
 8009a30:	2000aeb4 	.word	0x2000aeb4

08009a34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10c      	bne.n	8009a60 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	b672      	cpsid	i
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	b662      	cpsie	i
 8009a5a:	617b      	str	r3, [r7, #20]
}
 8009a5c:	bf00      	nop
 8009a5e:	e7fe      	b.n	8009a5e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a60:	4b26      	ldr	r3, [pc, #152]	; (8009afc <vTaskPlaceOnEventListRestricted+0xc8>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3318      	adds	r3, #24
 8009a66:	4619      	mov	r1, r3
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7fd fffc 	bl	8007a66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009a74:	f04f 33ff 	mov.w	r3, #4294967295
 8009a78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8009a7a:	4b20      	ldr	r3, [pc, #128]	; (8009afc <vTaskPlaceOnEventListRestricted+0xc8>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7f7 fd82 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	4b1d      	ldr	r3, [pc, #116]	; (8009b00 <vTaskPlaceOnEventListRestricted+0xcc>)
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d011      	beq.n	8009ab8 <vTaskPlaceOnEventListRestricted+0x84>
 8009a94:	4b1b      	ldr	r3, [pc, #108]	; (8009b04 <vTaskPlaceOnEventListRestricted+0xd0>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	2088      	movs	r0, #136	; 0x88
 8009aa0:	f7f8 fa00 	bl	8001ea4 <prvTraceStoreKernelCallWithNumericParamOnly>
 8009aa4:	4b15      	ldr	r3, [pc, #84]	; (8009afc <vTaskPlaceOnEventListRestricted+0xc8>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7f7 fd60 	bl	800156e <prvTraceGetTaskNumberLow16>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7f8 fbc0 	bl	8002238 <prvTraceSetTaskInstanceFinished>
 8009ab8:	f7f7 fdec 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8009abc:	4603      	mov	r3, r0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7f7 fd62 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	4b0d      	ldr	r3, [pc, #52]	; (8009b00 <vTaskPlaceOnEventListRestricted+0xcc>)
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	4013      	ands	r3, r2
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00a      	beq.n	8009aea <vTaskPlaceOnEventListRestricted+0xb6>
 8009ad4:	f7f7 fdde 	bl	8001694 <prvTraceGetCurrentTaskHandle>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7f7 fd47 	bl	800156e <prvTraceGetTaskNumberLow16>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7f8 fba7 	bl	8002238 <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009aea:	6879      	ldr	r1, [r7, #4]
 8009aec:	68b8      	ldr	r0, [r7, #8]
 8009aee:	f000 fb4b 	bl	800a188 <prvAddCurrentTaskToDelayedList>
	}
 8009af2:	bf00      	nop
 8009af4:	3718      	adds	r7, #24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	2000aeb4 	.word	0x2000aeb4
 8009b00:	2000000a 	.word	0x2000000a
 8009b04:	2000b38c 	.word	0x2000b38c

08009b08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10c      	bne.n	8009b38 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	b672      	cpsid	i
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	b662      	cpsie	i
 8009b32:	60fb      	str	r3, [r7, #12]
}
 8009b34:	bf00      	nop
 8009b36:	e7fe      	b.n	8009b36 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	3318      	adds	r3, #24
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fd ffef 	bl	8007b20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b42:	4b1e      	ldr	r3, [pc, #120]	; (8009bbc <xTaskRemoveFromEventList+0xb4>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d11d      	bne.n	8009b86 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fd ffe6 	bl	8007b20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b58:	4b19      	ldr	r3, [pc, #100]	; (8009bc0 <xTaskRemoveFromEventList+0xb8>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d903      	bls.n	8009b68 <xTaskRemoveFromEventList+0x60>
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b64:	4a16      	ldr	r2, [pc, #88]	; (8009bc0 <xTaskRemoveFromEventList+0xb8>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4a13      	ldr	r2, [pc, #76]	; (8009bc4 <xTaskRemoveFromEventList+0xbc>)
 8009b76:	441a      	add	r2, r3
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7fd ff71 	bl	8007a66 <vListInsertEnd>
 8009b84:	e005      	b.n	8009b92 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	3318      	adds	r3, #24
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	480e      	ldr	r0, [pc, #56]	; (8009bc8 <xTaskRemoveFromEventList+0xc0>)
 8009b8e:	f7fd ff6a 	bl	8007a66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b96:	4b0d      	ldr	r3, [pc, #52]	; (8009bcc <xTaskRemoveFromEventList+0xc4>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d905      	bls.n	8009bac <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ba4:	4b0a      	ldr	r3, [pc, #40]	; (8009bd0 <xTaskRemoveFromEventList+0xc8>)
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	e001      	b.n	8009bb0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009bac:	2300      	movs	r3, #0
 8009bae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009bb0:	697b      	ldr	r3, [r7, #20]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	2000b3b0 	.word	0x2000b3b0
 8009bc0:	2000b390 	.word	0x2000b390
 8009bc4:	2000aeb8 	.word	0x2000aeb8
 8009bc8:	2000b348 	.word	0x2000b348
 8009bcc:	2000aeb4 	.word	0x2000aeb4
 8009bd0:	2000b39c 	.word	0x2000b39c

08009bd4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009bde:	4b2b      	ldr	r3, [pc, #172]	; (8009c8c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10c      	bne.n	8009c00 <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	b672      	cpsid	i
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	b662      	cpsie	i
 8009bfa:	613b      	str	r3, [r7, #16]
}
 8009bfc:	bf00      	nop
 8009bfe:	e7fe      	b.n	8009bfe <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10c      	bne.n	8009c30 <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	b672      	cpsid	i
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	b662      	cpsie	i
 8009c2a:	60fb      	str	r3, [r7, #12]
}
 8009c2c:	bf00      	nop
 8009c2e:	e7fe      	b.n	8009c2e <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7fd ff75 	bl	8007b20 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	3304      	adds	r3, #4
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fd ff70 	bl	8007b20 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c44:	4b12      	ldr	r3, [pc, #72]	; (8009c90 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d903      	bls.n	8009c54 <vTaskRemoveFromUnorderedEventList+0x80>
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	4a0f      	ldr	r2, [pc, #60]	; (8009c90 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c58:	4613      	mov	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4a0c      	ldr	r2, [pc, #48]	; (8009c94 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009c62:	441a      	add	r2, r3
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7fd fefb 	bl	8007a66 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c74:	4b08      	ldr	r3, [pc, #32]	; (8009c98 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d902      	bls.n	8009c84 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009c7e:	4b07      	ldr	r3, [pc, #28]	; (8009c9c <vTaskRemoveFromUnorderedEventList+0xc8>)
 8009c80:	2201      	movs	r2, #1
 8009c82:	601a      	str	r2, [r3, #0]
	}
}
 8009c84:	bf00      	nop
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	2000b3b0 	.word	0x2000b3b0
 8009c90:	2000b390 	.word	0x2000b390
 8009c94:	2000aeb8 	.word	0x2000aeb8
 8009c98:	2000aeb4 	.word	0x2000aeb4
 8009c9c:	2000b39c 	.word	0x2000b39c

08009ca0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ca8:	4b06      	ldr	r3, [pc, #24]	; (8009cc4 <vTaskInternalSetTimeOutState+0x24>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cb0:	4b05      	ldr	r3, [pc, #20]	; (8009cc8 <vTaskInternalSetTimeOutState+0x28>)
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	605a      	str	r2, [r3, #4]
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	2000b3a0 	.word	0x2000b3a0
 8009cc8:	2000b38c 	.word	0x2000b38c

08009ccc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b088      	sub	sp, #32
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10c      	bne.n	8009cf6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	b672      	cpsid	i
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	b662      	cpsie	i
 8009cf0:	613b      	str	r3, [r7, #16]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10c      	bne.n	8009d16 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	b672      	cpsid	i
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	b662      	cpsie	i
 8009d10:	60fb      	str	r3, [r7, #12]
}
 8009d12:	bf00      	nop
 8009d14:	e7fe      	b.n	8009d14 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009d16:	f000 ff23 	bl	800ab60 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d1a:	4b1d      	ldr	r3, [pc, #116]	; (8009d90 <xTaskCheckForTimeOut+0xc4>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d32:	d102      	bne.n	8009d3a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d34:	2300      	movs	r3, #0
 8009d36:	61fb      	str	r3, [r7, #28]
 8009d38:	e023      	b.n	8009d82 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	4b15      	ldr	r3, [pc, #84]	; (8009d94 <xTaskCheckForTimeOut+0xc8>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d007      	beq.n	8009d56 <xTaskCheckForTimeOut+0x8a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	69ba      	ldr	r2, [r7, #24]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d302      	bcc.n	8009d56 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d50:	2301      	movs	r3, #1
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	e015      	b.n	8009d82 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d20b      	bcs.n	8009d78 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	1ad2      	subs	r2, r2, r3
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7ff ff97 	bl	8009ca0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d72:	2300      	movs	r3, #0
 8009d74:	61fb      	str	r3, [r7, #28]
 8009d76:	e004      	b.n	8009d82 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d82:	f000 ff21 	bl	800abc8 <vPortExitCritical>

	return xReturn;
 8009d86:	69fb      	ldr	r3, [r7, #28]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3720      	adds	r7, #32
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	2000b38c 	.word	0x2000b38c
 8009d94:	2000b3a0 	.word	0x2000b3a0

08009d98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d9c:	4b03      	ldr	r3, [pc, #12]	; (8009dac <vTaskMissedYield+0x14>)
 8009d9e:	2201      	movs	r2, #1
 8009da0:	601a      	str	r2, [r3, #0]
}
 8009da2:	bf00      	nop
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	2000b39c 	.word	0x2000b39c

08009db0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dc6:	60fb      	str	r3, [r7, #12]
 8009dc8:	e001      	b.n	8009dce <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8009dce:	68fb      	ldr	r3, [r7, #12]
	}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d004      	beq.n	8009df6 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8009df6:	bf00      	nop
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
	...

08009e04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e0c:	f000 f852 	bl	8009eb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e10:	4b06      	ldr	r3, [pc, #24]	; (8009e2c <prvIdleTask+0x28>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d9f9      	bls.n	8009e0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e18:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <prvIdleTask+0x2c>)
 8009e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e28:	e7f0      	b.n	8009e0c <prvIdleTask+0x8>
 8009e2a:	bf00      	nop
 8009e2c:	2000aeb8 	.word	0x2000aeb8
 8009e30:	e000ed04 	.word	0xe000ed04

08009e34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	607b      	str	r3, [r7, #4]
 8009e3e:	e00c      	b.n	8009e5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	4a12      	ldr	r2, [pc, #72]	; (8009e94 <prvInitialiseTaskLists+0x60>)
 8009e4c:	4413      	add	r3, r2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fd fddc 	bl	8007a0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3301      	adds	r3, #1
 8009e58:	607b      	str	r3, [r7, #4]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b37      	cmp	r3, #55	; 0x37
 8009e5e:	d9ef      	bls.n	8009e40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e60:	480d      	ldr	r0, [pc, #52]	; (8009e98 <prvInitialiseTaskLists+0x64>)
 8009e62:	f7fd fdd3 	bl	8007a0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e66:	480d      	ldr	r0, [pc, #52]	; (8009e9c <prvInitialiseTaskLists+0x68>)
 8009e68:	f7fd fdd0 	bl	8007a0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e6c:	480c      	ldr	r0, [pc, #48]	; (8009ea0 <prvInitialiseTaskLists+0x6c>)
 8009e6e:	f7fd fdcd 	bl	8007a0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e72:	480c      	ldr	r0, [pc, #48]	; (8009ea4 <prvInitialiseTaskLists+0x70>)
 8009e74:	f7fd fdca 	bl	8007a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e78:	480b      	ldr	r0, [pc, #44]	; (8009ea8 <prvInitialiseTaskLists+0x74>)
 8009e7a:	f7fd fdc7 	bl	8007a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e7e:	4b0b      	ldr	r3, [pc, #44]	; (8009eac <prvInitialiseTaskLists+0x78>)
 8009e80:	4a05      	ldr	r2, [pc, #20]	; (8009e98 <prvInitialiseTaskLists+0x64>)
 8009e82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e84:	4b0a      	ldr	r3, [pc, #40]	; (8009eb0 <prvInitialiseTaskLists+0x7c>)
 8009e86:	4a05      	ldr	r2, [pc, #20]	; (8009e9c <prvInitialiseTaskLists+0x68>)
 8009e88:	601a      	str	r2, [r3, #0]
}
 8009e8a:	bf00      	nop
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	2000aeb8 	.word	0x2000aeb8
 8009e98:	2000b318 	.word	0x2000b318
 8009e9c:	2000b32c 	.word	0x2000b32c
 8009ea0:	2000b348 	.word	0x2000b348
 8009ea4:	2000b35c 	.word	0x2000b35c
 8009ea8:	2000b374 	.word	0x2000b374
 8009eac:	2000b340 	.word	0x2000b340
 8009eb0:	2000b344 	.word	0x2000b344

08009eb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009eba:	e019      	b.n	8009ef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ebc:	f000 fe50 	bl	800ab60 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ec0:	4b10      	ldr	r3, [pc, #64]	; (8009f04 <prvCheckTasksWaitingTermination+0x50>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fd fe27 	bl	8007b20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ed2:	4b0d      	ldr	r3, [pc, #52]	; (8009f08 <prvCheckTasksWaitingTermination+0x54>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	4a0b      	ldr	r2, [pc, #44]	; (8009f08 <prvCheckTasksWaitingTermination+0x54>)
 8009eda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009edc:	4b0b      	ldr	r3, [pc, #44]	; (8009f0c <prvCheckTasksWaitingTermination+0x58>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	4a0a      	ldr	r2, [pc, #40]	; (8009f0c <prvCheckTasksWaitingTermination+0x58>)
 8009ee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ee6:	f000 fe6f 	bl	800abc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f810 	bl	8009f10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ef0:	4b06      	ldr	r3, [pc, #24]	; (8009f0c <prvCheckTasksWaitingTermination+0x58>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e1      	bne.n	8009ebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	2000b35c 	.word	0x2000b35c
 8009f08:	2000b388 	.word	0x2000b388
 8009f0c:	2000b370 	.word	0x2000b370

08009f10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3358      	adds	r3, #88	; 0x58
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f001 f9a9 	bl	800b274 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d108      	bne.n	8009f3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f30:	4618      	mov	r0, r3
 8009f32:	f001 f819 	bl	800af68 <vPortFree>
				vPortFree( pxTCB );
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 f816 	bl	800af68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f3c:	e01a      	b.n	8009f74 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d103      	bne.n	8009f50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 f80d 	bl	800af68 <vPortFree>
	}
 8009f4e:	e011      	b.n	8009f74 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d00c      	beq.n	8009f74 <prvDeleteTCB+0x64>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	b672      	cpsid	i
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	b662      	cpsie	i
 8009f6e:	60fb      	str	r3, [r7, #12]
}
 8009f70:	bf00      	nop
 8009f72:	e7fe      	b.n	8009f72 <prvDeleteTCB+0x62>
	}
 8009f74:	bf00      	nop
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f82:	4b0c      	ldr	r3, [pc, #48]	; (8009fb4 <prvResetNextTaskUnblockTime+0x38>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d104      	bne.n	8009f96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8009f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f94:	e008      	b.n	8009fa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f96:	4b07      	ldr	r3, [pc, #28]	; (8009fb4 <prvResetNextTaskUnblockTime+0x38>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	4a04      	ldr	r2, [pc, #16]	; (8009fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8009fa6:	6013      	str	r3, [r2, #0]
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	2000b340 	.word	0x2000b340
 8009fb8:	2000b3a8 	.word	0x2000b3a8

08009fbc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009fc2:	4b05      	ldr	r3, [pc, #20]	; (8009fd8 <xTaskGetCurrentTaskHandle+0x1c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009fc8:	687b      	ldr	r3, [r7, #4]
	}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	2000aeb4 	.word	0x2000aeb4

08009fdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009fe2:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <xTaskGetSchedulerState+0x34>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d102      	bne.n	8009ff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fea:	2301      	movs	r3, #1
 8009fec:	607b      	str	r3, [r7, #4]
 8009fee:	e008      	b.n	800a002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ff0:	4b08      	ldr	r3, [pc, #32]	; (800a014 <xTaskGetSchedulerState+0x38>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d102      	bne.n	8009ffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	607b      	str	r3, [r7, #4]
 8009ffc:	e001      	b.n	800a002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ffe:	2300      	movs	r3, #0
 800a000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a002:	687b      	ldr	r3, [r7, #4]
	}
 800a004:	4618      	mov	r0, r3
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	2000b394 	.word	0x2000b394
 800a014:	2000b3b0 	.word	0x2000b3b0

0800a018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a018:	b590      	push	{r4, r7, lr}
 800a01a:	b087      	sub	sp, #28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f000 8087 	beq.w	800a13e <xTaskPriorityDisinherit+0x126>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a030:	4b45      	ldr	r3, [pc, #276]	; (800a148 <xTaskPriorityDisinherit+0x130>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	429a      	cmp	r2, r3
 800a038:	d00c      	beq.n	800a054 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	b672      	cpsid	i
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	b662      	cpsie	i
 800a04e:	60fb      	str	r3, [r7, #12]
}
 800a050:	bf00      	nop
 800a052:	e7fe      	b.n	800a052 <xTaskPriorityDisinherit+0x3a>
			configASSERT( pxTCB->uxMutexesHeld );
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10c      	bne.n	800a076 <xTaskPriorityDisinherit+0x5e>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	b672      	cpsid	i
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	b662      	cpsie	i
 800a070:	60bb      	str	r3, [r7, #8]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a07a:	1e5a      	subs	r2, r3, #1
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a088:	429a      	cmp	r2, r3
 800a08a:	d058      	beq.n	800a13e <xTaskPriorityDisinherit+0x126>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a090:	2b00      	cmp	r3, #0
 800a092:	d154      	bne.n	800a13e <xTaskPriorityDisinherit+0x126>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	3304      	adds	r3, #4
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fd fd41 	bl	8007b20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a09e:	6938      	ldr	r0, [r7, #16]
 800a0a0:	f7f7 fa72 	bl	8001588 <prvTraceGetTaskNumberHigh16>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4b28      	ldr	r3, [pc, #160]	; (800a14c <xTaskPriorityDisinherit+0x134>)
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d020      	beq.n	800a0f6 <xTaskPriorityDisinherit+0xde>
 800a0b4:	6938      	ldr	r0, [r7, #16]
 800a0b6:	f7f7 fa5a 	bl	800156e <prvTraceGetTaskNumberLow16>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	461c      	mov	r4, r3
 800a0c0:	6938      	ldr	r0, [r7, #16]
 800a0c2:	f7f7 fa54 	bl	800156e <prvTraceGetTaskNumberLow16>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	2003      	movs	r0, #3
 800a0ce:	f7f7 fffd 	bl	80020cc <prvTraceGetPriorityProperty>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	2103      	movs	r1, #3
 800a0d8:	208f      	movs	r0, #143	; 0x8f
 800a0da:	f7f7 fe1d 	bl	8001d18 <prvTraceStoreKernelCallWithParam>
 800a0de:	6938      	ldr	r0, [r7, #16]
 800a0e0:	f7f7 fa45 	bl	800156e <prvTraceGetTaskNumberLow16>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	b2d9      	uxtb	r1, r3
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	2003      	movs	r0, #3
 800a0f2:	f7f7 ffaf 	bl	8002054 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a102:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a10e:	4b10      	ldr	r3, [pc, #64]	; (800a150 <xTaskPriorityDisinherit+0x138>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d903      	bls.n	800a11e <xTaskPriorityDisinherit+0x106>
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	4a0d      	ldr	r2, [pc, #52]	; (800a150 <xTaskPriorityDisinherit+0x138>)
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a122:	4613      	mov	r3, r2
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	4413      	add	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4a0a      	ldr	r2, [pc, #40]	; (800a154 <xTaskPriorityDisinherit+0x13c>)
 800a12c:	441a      	add	r2, r3
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	3304      	adds	r3, #4
 800a132:	4619      	mov	r1, r3
 800a134:	4610      	mov	r0, r2
 800a136:	f7fd fc96 	bl	8007a66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a13a:	2301      	movs	r3, #1
 800a13c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a13e:	697b      	ldr	r3, [r7, #20]
	}
 800a140:	4618      	mov	r0, r3
 800a142:	371c      	adds	r7, #28
 800a144:	46bd      	mov	sp, r7
 800a146:	bd90      	pop	{r4, r7, pc}
 800a148:	2000aeb4 	.word	0x2000aeb4
 800a14c:	2000000a 	.word	0x2000000a
 800a150:	2000b390 	.word	0x2000b390
 800a154:	2000aeb8 	.word	0x2000aeb8

0800a158 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a15e:	4b09      	ldr	r3, [pc, #36]	; (800a184 <uxTaskResetEventItemValue+0x2c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a166:	4b07      	ldr	r3, [pc, #28]	; (800a184 <uxTaskResetEventItemValue+0x2c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16c:	4b05      	ldr	r3, [pc, #20]	; (800a184 <uxTaskResetEventItemValue+0x2c>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a174:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a176:	687b      	ldr	r3, [r7, #4]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	2000aeb4 	.word	0x2000aeb4

0800a188 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a192:	4b21      	ldr	r3, [pc, #132]	; (800a218 <prvAddCurrentTaskToDelayedList+0x90>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a198:	4b20      	ldr	r3, [pc, #128]	; (800a21c <prvAddCurrentTaskToDelayedList+0x94>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fd fcbe 	bl	8007b20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1aa:	d10a      	bne.n	800a1c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1b2:	4b1a      	ldr	r3, [pc, #104]	; (800a21c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4819      	ldr	r0, [pc, #100]	; (800a220 <prvAddCurrentTaskToDelayedList+0x98>)
 800a1bc:	f7fd fc53 	bl	8007a66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1c0:	e026      	b.n	800a210 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1ca:	4b14      	ldr	r3, [pc, #80]	; (800a21c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d209      	bcs.n	800a1ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1da:	4b12      	ldr	r3, [pc, #72]	; (800a224 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	4b0f      	ldr	r3, [pc, #60]	; (800a21c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3304      	adds	r3, #4
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	f7fd fc61 	bl	8007aae <vListInsert>
}
 800a1ec:	e010      	b.n	800a210 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ee:	4b0e      	ldr	r3, [pc, #56]	; (800a228 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	4b0a      	ldr	r3, [pc, #40]	; (800a21c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f7fd fc57 	bl	8007aae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	429a      	cmp	r2, r3
 800a208:	d202      	bcs.n	800a210 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a20a:	4a08      	ldr	r2, [pc, #32]	; (800a22c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	6013      	str	r3, [r2, #0]
}
 800a210:	bf00      	nop
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	2000b38c 	.word	0x2000b38c
 800a21c:	2000aeb4 	.word	0x2000aeb4
 800a220:	2000b374 	.word	0x2000b374
 800a224:	2000b344 	.word	0x2000b344
 800a228:	2000b340 	.word	0x2000b340
 800a22c:	2000b3a8 	.word	0x2000b3a8

0800a230 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b08a      	sub	sp, #40	; 0x28
 800a234:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a236:	2300      	movs	r3, #0
 800a238:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a23a:	f000 fb15 	bl	800a868 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a23e:	4b1d      	ldr	r3, [pc, #116]	; (800a2b4 <xTimerCreateTimerTask+0x84>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d021      	beq.n	800a28a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a24e:	1d3a      	adds	r2, r7, #4
 800a250:	f107 0108 	add.w	r1, r7, #8
 800a254:	f107 030c 	add.w	r3, r7, #12
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fd f9bf 	bl	80075dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a25e:	6879      	ldr	r1, [r7, #4]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	9202      	str	r2, [sp, #8]
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	2302      	movs	r3, #2
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	2300      	movs	r3, #0
 800a26e:	460a      	mov	r2, r1
 800a270:	4911      	ldr	r1, [pc, #68]	; (800a2b8 <xTimerCreateTimerTask+0x88>)
 800a272:	4812      	ldr	r0, [pc, #72]	; (800a2bc <xTimerCreateTimerTask+0x8c>)
 800a274:	f7fe fe3c 	bl	8008ef0 <xTaskCreateStatic>
 800a278:	4603      	mov	r3, r0
 800a27a:	4a11      	ldr	r2, [pc, #68]	; (800a2c0 <xTimerCreateTimerTask+0x90>)
 800a27c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a27e:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <xTimerCreateTimerTask+0x90>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a286:	2301      	movs	r3, #1
 800a288:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10c      	bne.n	800a2aa <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	b672      	cpsid	i
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	b662      	cpsie	i
 800a2a4:	613b      	str	r3, [r7, #16]
}
 800a2a6:	bf00      	nop
 800a2a8:	e7fe      	b.n	800a2a8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a2aa:	697b      	ldr	r3, [r7, #20]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3718      	adds	r7, #24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	2000b3ec 	.word	0x2000b3ec
 800a2b8:	0800c9f8 	.word	0x0800c9f8
 800a2bc:	0800a401 	.word	0x0800a401
 800a2c0:	2000b3f0 	.word	0x2000b3f0

0800a2c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b08a      	sub	sp, #40	; 0x28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10c      	bne.n	800a2f6 <xTimerGenericCommand+0x32>
	__asm volatile
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	b672      	cpsid	i
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	b662      	cpsie	i
 800a2f0:	623b      	str	r3, [r7, #32]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a2f6:	4b1a      	ldr	r3, [pc, #104]	; (800a360 <xTimerGenericCommand+0x9c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d02a      	beq.n	800a354 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	2b05      	cmp	r3, #5
 800a30e:	dc18      	bgt.n	800a342 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a310:	f7ff fe64 	bl	8009fdc <xTaskGetSchedulerState>
 800a314:	4603      	mov	r3, r0
 800a316:	2b02      	cmp	r3, #2
 800a318:	d109      	bne.n	800a32e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a31a:	4b11      	ldr	r3, [pc, #68]	; (800a360 <xTimerGenericCommand+0x9c>)
 800a31c:	6818      	ldr	r0, [r3, #0]
 800a31e:	f107 0110 	add.w	r1, r7, #16
 800a322:	2300      	movs	r3, #0
 800a324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a326:	f7fd fe21 	bl	8007f6c <xQueueGenericSend>
 800a32a:	6278      	str	r0, [r7, #36]	; 0x24
 800a32c:	e012      	b.n	800a354 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a32e:	4b0c      	ldr	r3, [pc, #48]	; (800a360 <xTimerGenericCommand+0x9c>)
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	f107 0110 	add.w	r1, r7, #16
 800a336:	2300      	movs	r3, #0
 800a338:	2200      	movs	r2, #0
 800a33a:	f7fd fe17 	bl	8007f6c <xQueueGenericSend>
 800a33e:	6278      	str	r0, [r7, #36]	; 0x24
 800a340:	e008      	b.n	800a354 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a342:	4b07      	ldr	r3, [pc, #28]	; (800a360 <xTimerGenericCommand+0x9c>)
 800a344:	6818      	ldr	r0, [r3, #0]
 800a346:	f107 0110 	add.w	r1, r7, #16
 800a34a:	2300      	movs	r3, #0
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	f7fe f823 	bl	8008398 <xQueueGenericSendFromISR>
 800a352:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a356:	4618      	mov	r0, r3
 800a358:	3728      	adds	r7, #40	; 0x28
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	2000b3ec 	.word	0x2000b3ec

0800a364 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af02      	add	r7, sp, #8
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a36e:	4b23      	ldr	r3, [pc, #140]	; (800a3fc <prvProcessExpiredTimer+0x98>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	3304      	adds	r3, #4
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fd fbcf 	bl	8007b20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a388:	f003 0304 	and.w	r3, r3, #4
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d024      	beq.n	800a3da <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	699a      	ldr	r2, [r3, #24]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	18d1      	adds	r1, r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	6978      	ldr	r0, [r7, #20]
 800a39e:	f000 f8d3 	bl	800a548 <prvInsertTimerInActiveList>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d021      	beq.n	800a3ec <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	6978      	ldr	r0, [r7, #20]
 800a3b4:	f7ff ff86 	bl	800a2c4 <xTimerGenericCommand>
 800a3b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d115      	bne.n	800a3ec <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	b672      	cpsid	i
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	b662      	cpsie	i
 800a3d4:	60fb      	str	r3, [r7, #12]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3e0:	f023 0301 	bic.w	r3, r3, #1
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	6978      	ldr	r0, [r7, #20]
 800a3f2:	4798      	blx	r3
}
 800a3f4:	bf00      	nop
 800a3f6:	3718      	adds	r7, #24
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	2000b3e4 	.word	0x2000b3e4

0800a400 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a408:	f107 0308 	add.w	r3, r7, #8
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 f857 	bl	800a4c0 <prvGetNextExpireTime>
 800a412:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	4619      	mov	r1, r3
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f000 f803 	bl	800a424 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a41e:	f000 f8d5 	bl	800a5cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a422:	e7f1      	b.n	800a408 <prvTimerTask+0x8>

0800a424 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a42e:	f7ff f871 	bl	8009514 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a432:	f107 0308 	add.w	r3, r7, #8
 800a436:	4618      	mov	r0, r3
 800a438:	f000 f866 	bl	800a508 <prvSampleTimeNow>
 800a43c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d130      	bne.n	800a4a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10a      	bne.n	800a460 <prvProcessTimerOrBlockTask+0x3c>
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d806      	bhi.n	800a460 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a452:	f7ff f86d 	bl	8009530 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7ff ff83 	bl	800a364 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a45e:	e024      	b.n	800a4aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d008      	beq.n	800a478 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a466:	4b13      	ldr	r3, [pc, #76]	; (800a4b4 <prvProcessTimerOrBlockTask+0x90>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <prvProcessTimerOrBlockTask+0x50>
 800a470:	2301      	movs	r3, #1
 800a472:	e000      	b.n	800a476 <prvProcessTimerOrBlockTask+0x52>
 800a474:	2300      	movs	r3, #0
 800a476:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a478:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <prvProcessTimerOrBlockTask+0x94>)
 800a47a:	6818      	ldr	r0, [r3, #0]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	4619      	mov	r1, r3
 800a486:	f7fe fcff 	bl	8008e88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a48a:	f7ff f851 	bl	8009530 <xTaskResumeAll>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a494:	4b09      	ldr	r3, [pc, #36]	; (800a4bc <prvProcessTimerOrBlockTask+0x98>)
 800a496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	f3bf 8f6f 	isb	sy
}
 800a4a4:	e001      	b.n	800a4aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a4a6:	f7ff f843 	bl	8009530 <xTaskResumeAll>
}
 800a4aa:	bf00      	nop
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	2000b3e8 	.word	0x2000b3e8
 800a4b8:	2000b3ec 	.word	0x2000b3ec
 800a4bc:	e000ed04 	.word	0xe000ed04

0800a4c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4c8:	4b0e      	ldr	r3, [pc, #56]	; (800a504 <prvGetNextExpireTime+0x44>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d101      	bne.n	800a4d6 <prvGetNextExpireTime+0x16>
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	e000      	b.n	800a4d8 <prvGetNextExpireTime+0x18>
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d105      	bne.n	800a4f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4e4:	4b07      	ldr	r3, [pc, #28]	; (800a504 <prvGetNextExpireTime+0x44>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60fb      	str	r3, [r7, #12]
 800a4ee:	e001      	b.n	800a4f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	2000b3e4 	.word	0x2000b3e4

0800a508 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a510:	f7ff f8ae 	bl	8009670 <xTaskGetTickCount>
 800a514:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a516:	4b0b      	ldr	r3, [pc, #44]	; (800a544 <prvSampleTimeNow+0x3c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d205      	bcs.n	800a52c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a520:	f000 f93c 	bl	800a79c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	e002      	b.n	800a532 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a532:	4a04      	ldr	r2, [pc, #16]	; (800a544 <prvSampleTimeNow+0x3c>)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a538:	68fb      	ldr	r3, [r7, #12]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	2000b3f4 	.word	0x2000b3f4

0800a548 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d812      	bhi.n	800a594 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	1ad2      	subs	r2, r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d302      	bcc.n	800a582 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	617b      	str	r3, [r7, #20]
 800a580:	e01b      	b.n	800a5ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a582:	4b10      	ldr	r3, [pc, #64]	; (800a5c4 <prvInsertTimerInActiveList+0x7c>)
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3304      	adds	r3, #4
 800a58a:	4619      	mov	r1, r3
 800a58c:	4610      	mov	r0, r2
 800a58e:	f7fd fa8e 	bl	8007aae <vListInsert>
 800a592:	e012      	b.n	800a5ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d206      	bcs.n	800a5aa <prvInsertTimerInActiveList+0x62>
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d302      	bcc.n	800a5aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
 800a5a8:	e007      	b.n	800a5ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5aa:	4b07      	ldr	r3, [pc, #28]	; (800a5c8 <prvInsertTimerInActiveList+0x80>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	f7fd fa7a 	bl	8007aae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5ba:	697b      	ldr	r3, [r7, #20]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	2000b3e8 	.word	0x2000b3e8
 800a5c8:	2000b3e4 	.word	0x2000b3e4

0800a5cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08e      	sub	sp, #56	; 0x38
 800a5d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5d2:	e0d0      	b.n	800a776 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	da1a      	bge.n	800a610 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5da:	1d3b      	adds	r3, r7, #4
 800a5dc:	3304      	adds	r3, #4
 800a5de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10c      	bne.n	800a600 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	b672      	cpsid	i
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	b662      	cpsie	i
 800a5fa:	61fb      	str	r3, [r7, #28]
}
 800a5fc:	bf00      	nop
 800a5fe:	e7fe      	b.n	800a5fe <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a606:	6850      	ldr	r0, [r2, #4]
 800a608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a60a:	6892      	ldr	r2, [r2, #8]
 800a60c:	4611      	mov	r1, r2
 800a60e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	f2c0 80ae 	blt.w	800a774 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d004      	beq.n	800a62e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	3304      	adds	r3, #4
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fd fa79 	bl	8007b20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a62e:	463b      	mov	r3, r7
 800a630:	4618      	mov	r0, r3
 800a632:	f7ff ff69 	bl	800a508 <prvSampleTimeNow>
 800a636:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b09      	cmp	r3, #9
 800a63c:	f200 809b 	bhi.w	800a776 <prvProcessReceivedCommands+0x1aa>
 800a640:	a201      	add	r2, pc, #4	; (adr r2, 800a648 <prvProcessReceivedCommands+0x7c>)
 800a642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a646:	bf00      	nop
 800a648:	0800a671 	.word	0x0800a671
 800a64c:	0800a671 	.word	0x0800a671
 800a650:	0800a671 	.word	0x0800a671
 800a654:	0800a6e9 	.word	0x0800a6e9
 800a658:	0800a6fd 	.word	0x0800a6fd
 800a65c:	0800a74b 	.word	0x0800a74b
 800a660:	0800a671 	.word	0x0800a671
 800a664:	0800a671 	.word	0x0800a671
 800a668:	0800a6e9 	.word	0x0800a6e9
 800a66c:	0800a6fd 	.word	0x0800a6fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a676:	f043 0301 	orr.w	r3, r3, #1
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	18d1      	adds	r1, r2, r3
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a690:	f7ff ff5a 	bl	800a548 <prvInsertTimerInActiveList>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d06d      	beq.n	800a776 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6a8:	f003 0304 	and.w	r3, r3, #4
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d062      	beq.n	800a776 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	441a      	add	r2, r3
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	2300      	movs	r3, #0
 800a6be:	2100      	movs	r1, #0
 800a6c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6c2:	f7ff fdff 	bl	800a2c4 <xTimerGenericCommand>
 800a6c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d153      	bne.n	800a776 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	b672      	cpsid	i
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	b662      	cpsie	i
 800a6e2:	61bb      	str	r3, [r7, #24]
}
 800a6e4:	bf00      	nop
 800a6e6:	e7fe      	b.n	800a6e6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6ee:	f023 0301 	bic.w	r3, r3, #1
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a6fa:	e03c      	b.n	800a776 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a702:	f043 0301 	orr.w	r3, r3, #1
 800a706:	b2da      	uxtb	r2, r3
 800a708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a712:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10c      	bne.n	800a736 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	b672      	cpsid	i
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	b662      	cpsie	i
 800a730:	617b      	str	r3, [r7, #20]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a738:	699a      	ldr	r2, [r3, #24]
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	18d1      	adds	r1, r2, r3
 800a73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a744:	f7ff ff00 	bl	800a548 <prvInsertTimerInActiveList>
					break;
 800a748:	e015      	b.n	800a776 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a750:	f003 0302 	and.w	r3, r3, #2
 800a754:	2b00      	cmp	r3, #0
 800a756:	d103      	bne.n	800a760 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a75a:	f000 fc05 	bl	800af68 <vPortFree>
 800a75e:	e00a      	b.n	800a776 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a766:	f023 0301 	bic.w	r3, r3, #1
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a772:	e000      	b.n	800a776 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a774:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a776:	4b08      	ldr	r3, [pc, #32]	; (800a798 <prvProcessReceivedCommands+0x1cc>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	1d39      	adds	r1, r7, #4
 800a77c:	2200      	movs	r2, #0
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fd ff1a 	bl	80085b8 <xQueueReceive>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	f47f af24 	bne.w	800a5d4 <prvProcessReceivedCommands+0x8>
	}
}
 800a78c:	bf00      	nop
 800a78e:	bf00      	nop
 800a790:	3730      	adds	r7, #48	; 0x30
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	2000b3ec 	.word	0x2000b3ec

0800a79c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b088      	sub	sp, #32
 800a7a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7a2:	e04a      	b.n	800a83a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7a4:	4b2e      	ldr	r3, [pc, #184]	; (800a860 <prvSwitchTimerLists+0xc4>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ae:	4b2c      	ldr	r3, [pc, #176]	; (800a860 <prvSwitchTimerLists+0xc4>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	3304      	adds	r3, #4
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7fd f9af 	bl	8007b20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d0:	f003 0304 	and.w	r3, r3, #4
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d030      	beq.n	800a83a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	4413      	add	r3, r2
 800a7e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d90e      	bls.n	800a808 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7f6:	4b1a      	ldr	r3, [pc, #104]	; (800a860 <prvSwitchTimerLists+0xc4>)
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	4619      	mov	r1, r3
 800a800:	4610      	mov	r0, r2
 800a802:	f7fd f954 	bl	8007aae <vListInsert>
 800a806:	e018      	b.n	800a83a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a808:	2300      	movs	r3, #0
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	2300      	movs	r3, #0
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	2100      	movs	r1, #0
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f7ff fd56 	bl	800a2c4 <xTimerGenericCommand>
 800a818:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10c      	bne.n	800a83a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	b672      	cpsid	i
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	b662      	cpsie	i
 800a834:	603b      	str	r3, [r7, #0]
}
 800a836:	bf00      	nop
 800a838:	e7fe      	b.n	800a838 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a83a:	4b09      	ldr	r3, [pc, #36]	; (800a860 <prvSwitchTimerLists+0xc4>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1af      	bne.n	800a7a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a844:	4b06      	ldr	r3, [pc, #24]	; (800a860 <prvSwitchTimerLists+0xc4>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a84a:	4b06      	ldr	r3, [pc, #24]	; (800a864 <prvSwitchTimerLists+0xc8>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a04      	ldr	r2, [pc, #16]	; (800a860 <prvSwitchTimerLists+0xc4>)
 800a850:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a852:	4a04      	ldr	r2, [pc, #16]	; (800a864 <prvSwitchTimerLists+0xc8>)
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	6013      	str	r3, [r2, #0]
}
 800a858:	bf00      	nop
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	2000b3e4 	.word	0x2000b3e4
 800a864:	2000b3e8 	.word	0x2000b3e8

0800a868 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a86e:	f000 f977 	bl	800ab60 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a872:	4b15      	ldr	r3, [pc, #84]	; (800a8c8 <prvCheckForValidListAndQueue+0x60>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d120      	bne.n	800a8bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a87a:	4814      	ldr	r0, [pc, #80]	; (800a8cc <prvCheckForValidListAndQueue+0x64>)
 800a87c:	f7fd f8c6 	bl	8007a0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a880:	4813      	ldr	r0, [pc, #76]	; (800a8d0 <prvCheckForValidListAndQueue+0x68>)
 800a882:	f7fd f8c3 	bl	8007a0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a886:	4b13      	ldr	r3, [pc, #76]	; (800a8d4 <prvCheckForValidListAndQueue+0x6c>)
 800a888:	4a10      	ldr	r2, [pc, #64]	; (800a8cc <prvCheckForValidListAndQueue+0x64>)
 800a88a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a88c:	4b12      	ldr	r3, [pc, #72]	; (800a8d8 <prvCheckForValidListAndQueue+0x70>)
 800a88e:	4a10      	ldr	r2, [pc, #64]	; (800a8d0 <prvCheckForValidListAndQueue+0x68>)
 800a890:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a892:	2300      	movs	r3, #0
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	4b11      	ldr	r3, [pc, #68]	; (800a8dc <prvCheckForValidListAndQueue+0x74>)
 800a898:	4a11      	ldr	r2, [pc, #68]	; (800a8e0 <prvCheckForValidListAndQueue+0x78>)
 800a89a:	2110      	movs	r1, #16
 800a89c:	200a      	movs	r0, #10
 800a89e:	f7fd f9d3 	bl	8007c48 <xQueueGenericCreateStatic>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	4a08      	ldr	r2, [pc, #32]	; (800a8c8 <prvCheckForValidListAndQueue+0x60>)
 800a8a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8a8:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <prvCheckForValidListAndQueue+0x60>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8b0:	4b05      	ldr	r3, [pc, #20]	; (800a8c8 <prvCheckForValidListAndQueue+0x60>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	490b      	ldr	r1, [pc, #44]	; (800a8e4 <prvCheckForValidListAndQueue+0x7c>)
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe faac 	bl	8008e14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8bc:	f000 f984 	bl	800abc8 <vPortExitCritical>
}
 800a8c0:	bf00      	nop
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	2000b3ec 	.word	0x2000b3ec
 800a8cc:	2000b3bc 	.word	0x2000b3bc
 800a8d0:	2000b3d0 	.word	0x2000b3d0
 800a8d4:	2000b3e4 	.word	0x2000b3e4
 800a8d8:	2000b3e8 	.word	0x2000b3e8
 800a8dc:	2000b498 	.word	0x2000b498
 800a8e0:	2000b3f8 	.word	0x2000b3f8
 800a8e4:	0800ca00 	.word	0x0800ca00

0800a8e8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08a      	sub	sp, #40	; 0x28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a8f6:	f06f 0301 	mvn.w	r3, #1
 800a8fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a908:	4b06      	ldr	r3, [pc, #24]	; (800a924 <xTimerPendFunctionCallFromISR+0x3c>)
 800a90a:	6818      	ldr	r0, [r3, #0]
 800a90c:	f107 0114 	add.w	r1, r7, #20
 800a910:	2300      	movs	r3, #0
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	f7fd fd40 	bl	8008398 <xQueueGenericSendFromISR>
 800a918:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3728      	adds	r7, #40	; 0x28
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	2000b3ec 	.word	0x2000b3ec

0800a928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3b04      	subs	r3, #4
 800a938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	3b04      	subs	r3, #4
 800a946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f023 0201 	bic.w	r2, r3, #1
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3b04      	subs	r3, #4
 800a956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a958:	4a0c      	ldr	r2, [pc, #48]	; (800a98c <pxPortInitialiseStack+0x64>)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3b14      	subs	r3, #20
 800a962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3b04      	subs	r3, #4
 800a96e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f06f 0202 	mvn.w	r2, #2
 800a976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	3b20      	subs	r3, #32
 800a97c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a97e:	68fb      	ldr	r3, [r7, #12]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3714      	adds	r7, #20
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	0800a991 	.word	0x0800a991

0800a990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a996:	2300      	movs	r3, #0
 800a998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a99a:	4b14      	ldr	r3, [pc, #80]	; (800a9ec <prvTaskExitError+0x5c>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a2:	d00c      	beq.n	800a9be <prvTaskExitError+0x2e>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	b672      	cpsid	i
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	b662      	cpsie	i
 800a9b8:	60fb      	str	r3, [r7, #12]
}
 800a9ba:	bf00      	nop
 800a9bc:	e7fe      	b.n	800a9bc <prvTaskExitError+0x2c>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	b672      	cpsid	i
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	b662      	cpsie	i
 800a9d2:	60bb      	str	r3, [r7, #8]
}
 800a9d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9d6:	bf00      	nop
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0fc      	beq.n	800a9d8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9de:	bf00      	nop
 800a9e0:	bf00      	nop
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	20000018 	.word	0x20000018

0800a9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9f0:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <pxCurrentTCBConst2>)
 800a9f2:	6819      	ldr	r1, [r3, #0]
 800a9f4:	6808      	ldr	r0, [r1, #0]
 800a9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fa:	f380 8809 	msr	PSP, r0
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f04f 0000 	mov.w	r0, #0
 800aa06:	f380 8811 	msr	BASEPRI, r0
 800aa0a:	4770      	bx	lr
 800aa0c:	f3af 8000 	nop.w

0800aa10 <pxCurrentTCBConst2>:
 800aa10:	2000aeb4 	.word	0x2000aeb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa14:	bf00      	nop
 800aa16:	bf00      	nop

0800aa18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa18:	4808      	ldr	r0, [pc, #32]	; (800aa3c <prvPortStartFirstTask+0x24>)
 800aa1a:	6800      	ldr	r0, [r0, #0]
 800aa1c:	6800      	ldr	r0, [r0, #0]
 800aa1e:	f380 8808 	msr	MSP, r0
 800aa22:	f04f 0000 	mov.w	r0, #0
 800aa26:	f380 8814 	msr	CONTROL, r0
 800aa2a:	b662      	cpsie	i
 800aa2c:	b661      	cpsie	f
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	df00      	svc	0
 800aa38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa3a:	bf00      	nop
 800aa3c:	e000ed08 	.word	0xe000ed08

0800aa40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa46:	4b40      	ldr	r3, [pc, #256]	; (800ab48 <xPortStartScheduler+0x108>)
 800aa48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	22ff      	movs	r2, #255	; 0xff
 800aa56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	4b38      	ldr	r3, [pc, #224]	; (800ab4c <xPortStartScheduler+0x10c>)
 800aa6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa6e:	4b38      	ldr	r3, [pc, #224]	; (800ab50 <xPortStartScheduler+0x110>)
 800aa70:	2207      	movs	r2, #7
 800aa72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa74:	e009      	b.n	800aa8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aa76:	4b36      	ldr	r3, [pc, #216]	; (800ab50 <xPortStartScheduler+0x110>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	4a34      	ldr	r2, [pc, #208]	; (800ab50 <xPortStartScheduler+0x110>)
 800aa7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa8a:	79fb      	ldrb	r3, [r7, #7]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa92:	2b80      	cmp	r3, #128	; 0x80
 800aa94:	d0ef      	beq.n	800aa76 <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800aa96:	4b2e      	ldr	r3, [pc, #184]	; (800ab50 <xPortStartScheduler+0x110>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f1c3 0307 	rsb	r3, r3, #7
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d00c      	beq.n	800aabc <xPortStartScheduler+0x7c>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	b672      	cpsid	i
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	b662      	cpsie	i
 800aab6:	613b      	str	r3, [r7, #16]
}
 800aab8:	bf00      	nop
 800aaba:	e7fe      	b.n	800aaba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aabc:	4b24      	ldr	r3, [pc, #144]	; (800ab50 <xPortStartScheduler+0x110>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f1c3 0307 	rsb	r3, r3, #7
 800aac4:	2b04      	cmp	r3, #4
 800aac6:	d00c      	beq.n	800aae2 <xPortStartScheduler+0xa2>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	b672      	cpsid	i
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	b662      	cpsie	i
 800aadc:	60fb      	str	r3, [r7, #12]
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <xPortStartScheduler+0xa0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aae2:	4b1b      	ldr	r3, [pc, #108]	; (800ab50 <xPortStartScheduler+0x110>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	021b      	lsls	r3, r3, #8
 800aae8:	4a19      	ldr	r2, [pc, #100]	; (800ab50 <xPortStartScheduler+0x110>)
 800aaea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aaec:	4b18      	ldr	r3, [pc, #96]	; (800ab50 <xPortStartScheduler+0x110>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aaf4:	4a16      	ldr	r2, [pc, #88]	; (800ab50 <xPortStartScheduler+0x110>)
 800aaf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab00:	4b14      	ldr	r3, [pc, #80]	; (800ab54 <xPortStartScheduler+0x114>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a13      	ldr	r2, [pc, #76]	; (800ab54 <xPortStartScheduler+0x114>)
 800ab06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab0c:	4b11      	ldr	r3, [pc, #68]	; (800ab54 <xPortStartScheduler+0x114>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a10      	ldr	r2, [pc, #64]	; (800ab54 <xPortStartScheduler+0x114>)
 800ab12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab18:	f000 f8da 	bl	800acd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab1c:	4b0e      	ldr	r3, [pc, #56]	; (800ab58 <xPortStartScheduler+0x118>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab22:	f000 f8f9 	bl	800ad18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab26:	4b0d      	ldr	r3, [pc, #52]	; (800ab5c <xPortStartScheduler+0x11c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a0c      	ldr	r2, [pc, #48]	; (800ab5c <xPortStartScheduler+0x11c>)
 800ab2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab32:	f7ff ff71 	bl	800aa18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab36:	f7fe fe7b 	bl	8009830 <vTaskSwitchContext>
	prvTaskExitError();
 800ab3a:	f7ff ff29 	bl	800a990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3718      	adds	r7, #24
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	e000e400 	.word	0xe000e400
 800ab4c:	2000b4e8 	.word	0x2000b4e8
 800ab50:	2000b4ec 	.word	0x2000b4ec
 800ab54:	e000ed20 	.word	0xe000ed20
 800ab58:	20000018 	.word	0x20000018
 800ab5c:	e000ef34 	.word	0xe000ef34

0800ab60 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
	__asm volatile
 800ab66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6a:	b672      	cpsid	i
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	b662      	cpsie	i
 800ab7a:	607b      	str	r3, [r7, #4]
}
 800ab7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab7e:	4b10      	ldr	r3, [pc, #64]	; (800abc0 <vPortEnterCritical+0x60>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3301      	adds	r3, #1
 800ab84:	4a0e      	ldr	r2, [pc, #56]	; (800abc0 <vPortEnterCritical+0x60>)
 800ab86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab88:	4b0d      	ldr	r3, [pc, #52]	; (800abc0 <vPortEnterCritical+0x60>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d111      	bne.n	800abb4 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab90:	4b0c      	ldr	r3, [pc, #48]	; (800abc4 <vPortEnterCritical+0x64>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00c      	beq.n	800abb4 <vPortEnterCritical+0x54>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9e:	b672      	cpsid	i
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	b662      	cpsie	i
 800abae:	603b      	str	r3, [r7, #0]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <vPortEnterCritical+0x52>
	}
}
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	20000018 	.word	0x20000018
 800abc4:	e000ed04 	.word	0xe000ed04

0800abc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abce:	4b13      	ldr	r3, [pc, #76]	; (800ac1c <vPortExitCritical+0x54>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10c      	bne.n	800abf0 <vPortExitCritical+0x28>
	__asm volatile
 800abd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abda:	b672      	cpsid	i
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	b662      	cpsie	i
 800abea:	607b      	str	r3, [r7, #4]
}
 800abec:	bf00      	nop
 800abee:	e7fe      	b.n	800abee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800abf0:	4b0a      	ldr	r3, [pc, #40]	; (800ac1c <vPortExitCritical+0x54>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	4a09      	ldr	r2, [pc, #36]	; (800ac1c <vPortExitCritical+0x54>)
 800abf8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abfa:	4b08      	ldr	r3, [pc, #32]	; (800ac1c <vPortExitCritical+0x54>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d105      	bne.n	800ac0e <vPortExitCritical+0x46>
 800ac02:	2300      	movs	r3, #0
 800ac04:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	f383 8811 	msr	BASEPRI, r3
}
 800ac0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac0e:	bf00      	nop
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	20000018 	.word	0x20000018

0800ac20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac20:	f3ef 8009 	mrs	r0, PSP
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	4b15      	ldr	r3, [pc, #84]	; (800ac80 <pxCurrentTCBConst>)
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	f01e 0f10 	tst.w	lr, #16
 800ac30:	bf08      	it	eq
 800ac32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3a:	6010      	str	r0, [r2, #0]
 800ac3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac44:	b672      	cpsid	i
 800ac46:	f380 8811 	msr	BASEPRI, r0
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	b662      	cpsie	i
 800ac54:	f7fe fdec 	bl	8009830 <vTaskSwitchContext>
 800ac58:	f04f 0000 	mov.w	r0, #0
 800ac5c:	f380 8811 	msr	BASEPRI, r0
 800ac60:	bc09      	pop	{r0, r3}
 800ac62:	6819      	ldr	r1, [r3, #0]
 800ac64:	6808      	ldr	r0, [r1, #0]
 800ac66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6a:	f01e 0f10 	tst.w	lr, #16
 800ac6e:	bf08      	it	eq
 800ac70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac74:	f380 8809 	msr	PSP, r0
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop

0800ac80 <pxCurrentTCBConst>:
 800ac80:	2000aeb4 	.word	0x2000aeb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop

0800ac88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	b672      	cpsid	i
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	b662      	cpsie	i
 800aca2:	607b      	str	r3, [r7, #4]
}
 800aca4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aca6:	f7fe fcf3 	bl	8009690 <xTaskIncrementTick>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d003      	beq.n	800acb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acb0:	4b06      	ldr	r3, [pc, #24]	; (800accc <SysTick_Handler+0x44>)
 800acb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	2300      	movs	r3, #0
 800acba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	f383 8811 	msr	BASEPRI, r3
}
 800acc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	e000ed04 	.word	0xe000ed04

0800acd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acd0:	b480      	push	{r7}
 800acd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acd4:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <vPortSetupTimerInterrupt+0x34>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acda:	4b0b      	ldr	r3, [pc, #44]	; (800ad08 <vPortSetupTimerInterrupt+0x38>)
 800acdc:	2200      	movs	r2, #0
 800acde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ace0:	4b0a      	ldr	r3, [pc, #40]	; (800ad0c <vPortSetupTimerInterrupt+0x3c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a0a      	ldr	r2, [pc, #40]	; (800ad10 <vPortSetupTimerInterrupt+0x40>)
 800ace6:	fba2 2303 	umull	r2, r3, r2, r3
 800acea:	099b      	lsrs	r3, r3, #6
 800acec:	4a09      	ldr	r2, [pc, #36]	; (800ad14 <vPortSetupTimerInterrupt+0x44>)
 800acee:	3b01      	subs	r3, #1
 800acf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acf2:	4b04      	ldr	r3, [pc, #16]	; (800ad04 <vPortSetupTimerInterrupt+0x34>)
 800acf4:	2207      	movs	r2, #7
 800acf6:	601a      	str	r2, [r3, #0]
}
 800acf8:	bf00      	nop
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	e000e010 	.word	0xe000e010
 800ad08:	e000e018 	.word	0xe000e018
 800ad0c:	20000000 	.word	0x20000000
 800ad10:	10624dd3 	.word	0x10624dd3
 800ad14:	e000e014 	.word	0xe000e014

0800ad18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad28 <vPortEnableVFP+0x10>
 800ad1c:	6801      	ldr	r1, [r0, #0]
 800ad1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad22:	6001      	str	r1, [r0, #0]
 800ad24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad26:	bf00      	nop
 800ad28:	e000ed88 	.word	0xe000ed88

0800ad2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad32:	f3ef 8305 	mrs	r3, IPSR
 800ad36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b0f      	cmp	r3, #15
 800ad3c:	d916      	bls.n	800ad6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad3e:	4a19      	ldr	r2, [pc, #100]	; (800ada4 <vPortValidateInterruptPriority+0x78>)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4413      	add	r3, r2
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad48:	4b17      	ldr	r3, [pc, #92]	; (800ada8 <vPortValidateInterruptPriority+0x7c>)
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	7afa      	ldrb	r2, [r7, #11]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d20c      	bcs.n	800ad6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	b672      	cpsid	i
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	b662      	cpsie	i
 800ad66:	607b      	str	r3, [r7, #4]
}
 800ad68:	bf00      	nop
 800ad6a:	e7fe      	b.n	800ad6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad6c:	4b0f      	ldr	r3, [pc, #60]	; (800adac <vPortValidateInterruptPriority+0x80>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad74:	4b0e      	ldr	r3, [pc, #56]	; (800adb0 <vPortValidateInterruptPriority+0x84>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d90c      	bls.n	800ad96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad80:	b672      	cpsid	i
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	b662      	cpsie	i
 800ad90:	603b      	str	r3, [r7, #0]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <vPortValidateInterruptPriority+0x68>
	}
 800ad96:	bf00      	nop
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	e000e3f0 	.word	0xe000e3f0
 800ada8:	2000b4e8 	.word	0x2000b4e8
 800adac:	e000ed0c 	.word	0xe000ed0c
 800adb0:	2000b4ec 	.word	0x2000b4ec

0800adb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08a      	sub	sp, #40	; 0x28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800adbc:	2300      	movs	r3, #0
 800adbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800adc0:	f7fe fba8 	bl	8009514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800adc4:	4b63      	ldr	r3, [pc, #396]	; (800af54 <pvPortMalloc+0x1a0>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d101      	bne.n	800add0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800adcc:	f000 f932 	bl	800b034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800add0:	4b61      	ldr	r3, [pc, #388]	; (800af58 <pvPortMalloc+0x1a4>)
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4013      	ands	r3, r2
 800add8:	2b00      	cmp	r3, #0
 800adda:	f040 8092 	bne.w	800af02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d01f      	beq.n	800ae24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ade4:	2208      	movs	r2, #8
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4413      	add	r3, r2
 800adea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f003 0307 	and.w	r3, r3, #7
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d016      	beq.n	800ae24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f023 0307 	bic.w	r3, r3, #7
 800adfc:	3308      	adds	r3, #8
 800adfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00c      	beq.n	800ae24 <pvPortMalloc+0x70>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	b672      	cpsid	i
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	b662      	cpsie	i
 800ae1e:	617b      	str	r3, [r7, #20]
}
 800ae20:	bf00      	nop
 800ae22:	e7fe      	b.n	800ae22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d06b      	beq.n	800af02 <pvPortMalloc+0x14e>
 800ae2a:	4b4c      	ldr	r3, [pc, #304]	; (800af5c <pvPortMalloc+0x1a8>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d866      	bhi.n	800af02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae34:	4b4a      	ldr	r3, [pc, #296]	; (800af60 <pvPortMalloc+0x1ac>)
 800ae36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae38:	4b49      	ldr	r3, [pc, #292]	; (800af60 <pvPortMalloc+0x1ac>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae3e:	e004      	b.n	800ae4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d903      	bls.n	800ae5c <pvPortMalloc+0xa8>
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1f1      	bne.n	800ae40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae5c:	4b3d      	ldr	r3, [pc, #244]	; (800af54 <pvPortMalloc+0x1a0>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d04d      	beq.n	800af02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2208      	movs	r2, #8
 800ae6c:	4413      	add	r3, r2
 800ae6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	1ad2      	subs	r2, r2, r3
 800ae80:	2308      	movs	r3, #8
 800ae82:	005b      	lsls	r3, r3, #1
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d921      	bls.n	800aecc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	f003 0307 	and.w	r3, r3, #7
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00c      	beq.n	800aeb4 <pvPortMalloc+0x100>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	b672      	cpsid	i
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	b662      	cpsie	i
 800aeae:	613b      	str	r3, [r7, #16]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	1ad2      	subs	r2, r2, r3
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aec6:	69b8      	ldr	r0, [r7, #24]
 800aec8:	f000 f916 	bl	800b0f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aecc:	4b23      	ldr	r3, [pc, #140]	; (800af5c <pvPortMalloc+0x1a8>)
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	4a21      	ldr	r2, [pc, #132]	; (800af5c <pvPortMalloc+0x1a8>)
 800aed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aeda:	4b20      	ldr	r3, [pc, #128]	; (800af5c <pvPortMalloc+0x1a8>)
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	4b21      	ldr	r3, [pc, #132]	; (800af64 <pvPortMalloc+0x1b0>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d203      	bcs.n	800aeee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aee6:	4b1d      	ldr	r3, [pc, #116]	; (800af5c <pvPortMalloc+0x1a8>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a1e      	ldr	r2, [pc, #120]	; (800af64 <pvPortMalloc+0x1b0>)
 800aeec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	4b19      	ldr	r3, [pc, #100]	; (800af58 <pvPortMalloc+0x1a4>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	431a      	orrs	r2, r3
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d006      	beq.n	800af16 <pvPortMalloc+0x162>
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	4619      	mov	r1, r3
 800af0e:	2094      	movs	r0, #148	; 0x94
 800af10:	f7f6 fdf6 	bl	8001b00 <vTraceStoreMemMangEvent>
 800af14:	e005      	b.n	800af22 <pvPortMalloc+0x16e>
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	4619      	mov	r1, r3
 800af1c:	20e8      	movs	r0, #232	; 0xe8
 800af1e:	f7f6 fdef 	bl	8001b00 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 800af22:	f7fe fb05 	bl	8009530 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	f003 0307 	and.w	r3, r3, #7
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00c      	beq.n	800af4a <pvPortMalloc+0x196>
	__asm volatile
 800af30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af34:	b672      	cpsid	i
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	b662      	cpsie	i
 800af44:	60fb      	str	r3, [r7, #12]
}
 800af46:	bf00      	nop
 800af48:	e7fe      	b.n	800af48 <pvPortMalloc+0x194>
	return pvReturn;
 800af4a:	69fb      	ldr	r3, [r7, #28]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3728      	adds	r7, #40	; 0x28
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	2000f0f8 	.word	0x2000f0f8
 800af58:	2000f104 	.word	0x2000f104
 800af5c:	2000f0fc 	.word	0x2000f0fc
 800af60:	2000f0f0 	.word	0x2000f0f0
 800af64:	2000f100 	.word	0x2000f100

0800af68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d054      	beq.n	800b024 <vPortFree+0xbc>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af7a:	2308      	movs	r3, #8
 800af7c:	425b      	negs	r3, r3
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	4413      	add	r3, r2
 800af82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	4b27      	ldr	r3, [pc, #156]	; (800b02c <vPortFree+0xc4>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4013      	ands	r3, r2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10c      	bne.n	800afb0 <vPortFree+0x48>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	b672      	cpsid	i
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	b662      	cpsie	i
 800afaa:	60fb      	str	r3, [r7, #12]
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00c      	beq.n	800afd2 <vPortFree+0x6a>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbc:	b672      	cpsid	i
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	b662      	cpsie	i
 800afcc:	60bb      	str	r3, [r7, #8]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	4b15      	ldr	r3, [pc, #84]	; (800b02c <vPortFree+0xc4>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4013      	ands	r3, r2
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d021      	beq.n	800b024 <vPortFree+0xbc>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d11d      	bne.n	800b024 <vPortFree+0xbc>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <vPortFree+0xc4>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	43db      	mvns	r3, r3
 800aff2:	401a      	ands	r2, r3
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aff8:	f7fe fa8c 	bl	8009514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <vPortFree+0xc8>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4413      	add	r3, r2
 800b006:	4a0a      	ldr	r2, [pc, #40]	; (800b030 <vPortFree+0xc8>)
 800b008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800b00a:	6879      	ldr	r1, [r7, #4]
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	425b      	negs	r3, r3
 800b012:	461a      	mov	r2, r3
 800b014:	2096      	movs	r0, #150	; 0x96
 800b016:	f7f6 fd73 	bl	8001b00 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b01a:	6938      	ldr	r0, [r7, #16]
 800b01c:	f000 f86c 	bl	800b0f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b020:	f7fe fa86 	bl	8009530 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b024:	bf00      	nop
 800b026:	3718      	adds	r7, #24
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	2000f104 	.word	0x2000f104
 800b030:	2000f0fc 	.word	0x2000f0fc

0800b034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b03a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b03e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b040:	4b27      	ldr	r3, [pc, #156]	; (800b0e0 <prvHeapInit+0xac>)
 800b042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f003 0307 	and.w	r3, r3, #7
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00c      	beq.n	800b068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3307      	adds	r3, #7
 800b052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f023 0307 	bic.w	r3, r3, #7
 800b05a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	4a1f      	ldr	r2, [pc, #124]	; (800b0e0 <prvHeapInit+0xac>)
 800b064:	4413      	add	r3, r2
 800b066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b06c:	4a1d      	ldr	r2, [pc, #116]	; (800b0e4 <prvHeapInit+0xb0>)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b072:	4b1c      	ldr	r3, [pc, #112]	; (800b0e4 <prvHeapInit+0xb0>)
 800b074:	2200      	movs	r2, #0
 800b076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	4413      	add	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b080:	2208      	movs	r2, #8
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	1a9b      	subs	r3, r3, r2
 800b086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f023 0307 	bic.w	r3, r3, #7
 800b08e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	4a15      	ldr	r2, [pc, #84]	; (800b0e8 <prvHeapInit+0xb4>)
 800b094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b096:	4b14      	ldr	r3, [pc, #80]	; (800b0e8 <prvHeapInit+0xb4>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2200      	movs	r2, #0
 800b09c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b09e:	4b12      	ldr	r3, [pc, #72]	; (800b0e8 <prvHeapInit+0xb4>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	1ad2      	subs	r2, r2, r3
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0b4:	4b0c      	ldr	r3, [pc, #48]	; (800b0e8 <prvHeapInit+0xb4>)
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	4a0a      	ldr	r2, [pc, #40]	; (800b0ec <prvHeapInit+0xb8>)
 800b0c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	4a09      	ldr	r2, [pc, #36]	; (800b0f0 <prvHeapInit+0xbc>)
 800b0ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0cc:	4b09      	ldr	r3, [pc, #36]	; (800b0f4 <prvHeapInit+0xc0>)
 800b0ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0d2:	601a      	str	r2, [r3, #0]
}
 800b0d4:	bf00      	nop
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	2000b4f0 	.word	0x2000b4f0
 800b0e4:	2000f0f0 	.word	0x2000f0f0
 800b0e8:	2000f0f8 	.word	0x2000f0f8
 800b0ec:	2000f100 	.word	0x2000f100
 800b0f0:	2000f0fc 	.word	0x2000f0fc
 800b0f4:	2000f104 	.word	0x2000f104

0800b0f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b100:	4b28      	ldr	r3, [pc, #160]	; (800b1a4 <prvInsertBlockIntoFreeList+0xac>)
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	e002      	b.n	800b10c <prvInsertBlockIntoFreeList+0x14>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	429a      	cmp	r2, r3
 800b114:	d8f7      	bhi.n	800b106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	4413      	add	r3, r2
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	429a      	cmp	r2, r3
 800b126:	d108      	bne.n	800b13a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	441a      	add	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	441a      	add	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d118      	bne.n	800b180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	4b15      	ldr	r3, [pc, #84]	; (800b1a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d00d      	beq.n	800b176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685a      	ldr	r2, [r3, #4]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	441a      	add	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	e008      	b.n	800b188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b176:	4b0c      	ldr	r3, [pc, #48]	; (800b1a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	e003      	b.n	800b188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d002      	beq.n	800b196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b196:	bf00      	nop
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	2000f0f0 	.word	0x2000f0f0
 800b1a8:	2000f0f8 	.word	0x2000f0f8

0800b1ac <__libc_init_array>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	4d0d      	ldr	r5, [pc, #52]	; (800b1e4 <__libc_init_array+0x38>)
 800b1b0:	4c0d      	ldr	r4, [pc, #52]	; (800b1e8 <__libc_init_array+0x3c>)
 800b1b2:	1b64      	subs	r4, r4, r5
 800b1b4:	10a4      	asrs	r4, r4, #2
 800b1b6:	2600      	movs	r6, #0
 800b1b8:	42a6      	cmp	r6, r4
 800b1ba:	d109      	bne.n	800b1d0 <__libc_init_array+0x24>
 800b1bc:	4d0b      	ldr	r5, [pc, #44]	; (800b1ec <__libc_init_array+0x40>)
 800b1be:	4c0c      	ldr	r4, [pc, #48]	; (800b1f0 <__libc_init_array+0x44>)
 800b1c0:	f000 f956 	bl	800b470 <_init>
 800b1c4:	1b64      	subs	r4, r4, r5
 800b1c6:	10a4      	asrs	r4, r4, #2
 800b1c8:	2600      	movs	r6, #0
 800b1ca:	42a6      	cmp	r6, r4
 800b1cc:	d105      	bne.n	800b1da <__libc_init_array+0x2e>
 800b1ce:	bd70      	pop	{r4, r5, r6, pc}
 800b1d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1d4:	4798      	blx	r3
 800b1d6:	3601      	adds	r6, #1
 800b1d8:	e7ee      	b.n	800b1b8 <__libc_init_array+0xc>
 800b1da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1de:	4798      	blx	r3
 800b1e0:	3601      	adds	r6, #1
 800b1e2:	e7f2      	b.n	800b1ca <__libc_init_array+0x1e>
 800b1e4:	0800cbd4 	.word	0x0800cbd4
 800b1e8:	0800cbd4 	.word	0x0800cbd4
 800b1ec:	0800cbd4 	.word	0x0800cbd4
 800b1f0:	0800cbd8 	.word	0x0800cbd8

0800b1f4 <__itoa>:
 800b1f4:	1e93      	subs	r3, r2, #2
 800b1f6:	2b22      	cmp	r3, #34	; 0x22
 800b1f8:	b510      	push	{r4, lr}
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	d904      	bls.n	800b208 <__itoa+0x14>
 800b1fe:	2300      	movs	r3, #0
 800b200:	700b      	strb	r3, [r1, #0]
 800b202:	461c      	mov	r4, r3
 800b204:	4620      	mov	r0, r4
 800b206:	bd10      	pop	{r4, pc}
 800b208:	2a0a      	cmp	r2, #10
 800b20a:	d109      	bne.n	800b220 <__itoa+0x2c>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	da07      	bge.n	800b220 <__itoa+0x2c>
 800b210:	232d      	movs	r3, #45	; 0x2d
 800b212:	700b      	strb	r3, [r1, #0]
 800b214:	4240      	negs	r0, r0
 800b216:	2101      	movs	r1, #1
 800b218:	4421      	add	r1, r4
 800b21a:	f000 f88f 	bl	800b33c <__utoa>
 800b21e:	e7f1      	b.n	800b204 <__itoa+0x10>
 800b220:	2100      	movs	r1, #0
 800b222:	e7f9      	b.n	800b218 <__itoa+0x24>

0800b224 <itoa>:
 800b224:	f7ff bfe6 	b.w	800b1f4 <__itoa>

0800b228 <__retarget_lock_acquire_recursive>:
 800b228:	4770      	bx	lr

0800b22a <__retarget_lock_release_recursive>:
 800b22a:	4770      	bx	lr

0800b22c <memcpy>:
 800b22c:	440a      	add	r2, r1
 800b22e:	4291      	cmp	r1, r2
 800b230:	f100 33ff 	add.w	r3, r0, #4294967295
 800b234:	d100      	bne.n	800b238 <memcpy+0xc>
 800b236:	4770      	bx	lr
 800b238:	b510      	push	{r4, lr}
 800b23a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b23e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b242:	4291      	cmp	r1, r2
 800b244:	d1f9      	bne.n	800b23a <memcpy+0xe>
 800b246:	bd10      	pop	{r4, pc}

0800b248 <memset>:
 800b248:	4402      	add	r2, r0
 800b24a:	4603      	mov	r3, r0
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d100      	bne.n	800b252 <memset+0xa>
 800b250:	4770      	bx	lr
 800b252:	f803 1b01 	strb.w	r1, [r3], #1
 800b256:	e7f9      	b.n	800b24c <memset+0x4>

0800b258 <cleanup_glue>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	460c      	mov	r4, r1
 800b25c:	6809      	ldr	r1, [r1, #0]
 800b25e:	4605      	mov	r5, r0
 800b260:	b109      	cbz	r1, 800b266 <cleanup_glue+0xe>
 800b262:	f7ff fff9 	bl	800b258 <cleanup_glue>
 800b266:	4621      	mov	r1, r4
 800b268:	4628      	mov	r0, r5
 800b26a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b26e:	f000 b8b3 	b.w	800b3d8 <_free_r>
	...

0800b274 <_reclaim_reent>:
 800b274:	4b2c      	ldr	r3, [pc, #176]	; (800b328 <_reclaim_reent+0xb4>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4283      	cmp	r3, r0
 800b27a:	b570      	push	{r4, r5, r6, lr}
 800b27c:	4604      	mov	r4, r0
 800b27e:	d051      	beq.n	800b324 <_reclaim_reent+0xb0>
 800b280:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b282:	b143      	cbz	r3, 800b296 <_reclaim_reent+0x22>
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d14a      	bne.n	800b320 <_reclaim_reent+0xac>
 800b28a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b28c:	6819      	ldr	r1, [r3, #0]
 800b28e:	b111      	cbz	r1, 800b296 <_reclaim_reent+0x22>
 800b290:	4620      	mov	r0, r4
 800b292:	f000 f8a1 	bl	800b3d8 <_free_r>
 800b296:	6961      	ldr	r1, [r4, #20]
 800b298:	b111      	cbz	r1, 800b2a0 <_reclaim_reent+0x2c>
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 f89c 	bl	800b3d8 <_free_r>
 800b2a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2a2:	b111      	cbz	r1, 800b2aa <_reclaim_reent+0x36>
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f000 f897 	bl	800b3d8 <_free_r>
 800b2aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b2ac:	b111      	cbz	r1, 800b2b4 <_reclaim_reent+0x40>
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f000 f892 	bl	800b3d8 <_free_r>
 800b2b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b2b6:	b111      	cbz	r1, 800b2be <_reclaim_reent+0x4a>
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 f88d 	bl	800b3d8 <_free_r>
 800b2be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b2c0:	b111      	cbz	r1, 800b2c8 <_reclaim_reent+0x54>
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 f888 	bl	800b3d8 <_free_r>
 800b2c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b2ca:	b111      	cbz	r1, 800b2d2 <_reclaim_reent+0x5e>
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 f883 	bl	800b3d8 <_free_r>
 800b2d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b2d4:	b111      	cbz	r1, 800b2dc <_reclaim_reent+0x68>
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f000 f87e 	bl	800b3d8 <_free_r>
 800b2dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2de:	b111      	cbz	r1, 800b2e6 <_reclaim_reent+0x72>
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f000 f879 	bl	800b3d8 <_free_r>
 800b2e6:	69a3      	ldr	r3, [r4, #24]
 800b2e8:	b1e3      	cbz	r3, 800b324 <_reclaim_reent+0xb0>
 800b2ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	4798      	blx	r3
 800b2f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b2f2:	b1b9      	cbz	r1, 800b324 <_reclaim_reent+0xb0>
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2fa:	f7ff bfad 	b.w	800b258 <cleanup_glue>
 800b2fe:	5949      	ldr	r1, [r1, r5]
 800b300:	b941      	cbnz	r1, 800b314 <_reclaim_reent+0xa0>
 800b302:	3504      	adds	r5, #4
 800b304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b306:	2d80      	cmp	r5, #128	; 0x80
 800b308:	68d9      	ldr	r1, [r3, #12]
 800b30a:	d1f8      	bne.n	800b2fe <_reclaim_reent+0x8a>
 800b30c:	4620      	mov	r0, r4
 800b30e:	f000 f863 	bl	800b3d8 <_free_r>
 800b312:	e7ba      	b.n	800b28a <_reclaim_reent+0x16>
 800b314:	680e      	ldr	r6, [r1, #0]
 800b316:	4620      	mov	r0, r4
 800b318:	f000 f85e 	bl	800b3d8 <_free_r>
 800b31c:	4631      	mov	r1, r6
 800b31e:	e7ef      	b.n	800b300 <_reclaim_reent+0x8c>
 800b320:	2500      	movs	r5, #0
 800b322:	e7ef      	b.n	800b304 <_reclaim_reent+0x90>
 800b324:	bd70      	pop	{r4, r5, r6, pc}
 800b326:	bf00      	nop
 800b328:	2000001c 	.word	0x2000001c

0800b32c <strcpy>:
 800b32c:	4603      	mov	r3, r0
 800b32e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b332:	f803 2b01 	strb.w	r2, [r3], #1
 800b336:	2a00      	cmp	r2, #0
 800b338:	d1f9      	bne.n	800b32e <strcpy+0x2>
 800b33a:	4770      	bx	lr

0800b33c <__utoa>:
 800b33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33e:	4c1f      	ldr	r4, [pc, #124]	; (800b3bc <__utoa+0x80>)
 800b340:	b08b      	sub	sp, #44	; 0x2c
 800b342:	4605      	mov	r5, r0
 800b344:	460b      	mov	r3, r1
 800b346:	466e      	mov	r6, sp
 800b348:	f104 0c20 	add.w	ip, r4, #32
 800b34c:	6820      	ldr	r0, [r4, #0]
 800b34e:	6861      	ldr	r1, [r4, #4]
 800b350:	4637      	mov	r7, r6
 800b352:	c703      	stmia	r7!, {r0, r1}
 800b354:	3408      	adds	r4, #8
 800b356:	4564      	cmp	r4, ip
 800b358:	463e      	mov	r6, r7
 800b35a:	d1f7      	bne.n	800b34c <__utoa+0x10>
 800b35c:	7921      	ldrb	r1, [r4, #4]
 800b35e:	7139      	strb	r1, [r7, #4]
 800b360:	1e91      	subs	r1, r2, #2
 800b362:	6820      	ldr	r0, [r4, #0]
 800b364:	6038      	str	r0, [r7, #0]
 800b366:	2922      	cmp	r1, #34	; 0x22
 800b368:	f04f 0100 	mov.w	r1, #0
 800b36c:	d904      	bls.n	800b378 <__utoa+0x3c>
 800b36e:	7019      	strb	r1, [r3, #0]
 800b370:	460b      	mov	r3, r1
 800b372:	4618      	mov	r0, r3
 800b374:	b00b      	add	sp, #44	; 0x2c
 800b376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b378:	1e58      	subs	r0, r3, #1
 800b37a:	4684      	mov	ip, r0
 800b37c:	fbb5 f7f2 	udiv	r7, r5, r2
 800b380:	fb02 5617 	mls	r6, r2, r7, r5
 800b384:	3628      	adds	r6, #40	; 0x28
 800b386:	446e      	add	r6, sp
 800b388:	460c      	mov	r4, r1
 800b38a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b38e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b392:	462e      	mov	r6, r5
 800b394:	42b2      	cmp	r2, r6
 800b396:	f101 0101 	add.w	r1, r1, #1
 800b39a:	463d      	mov	r5, r7
 800b39c:	d9ee      	bls.n	800b37c <__utoa+0x40>
 800b39e:	2200      	movs	r2, #0
 800b3a0:	545a      	strb	r2, [r3, r1]
 800b3a2:	1919      	adds	r1, r3, r4
 800b3a4:	1aa5      	subs	r5, r4, r2
 800b3a6:	42aa      	cmp	r2, r5
 800b3a8:	dae3      	bge.n	800b372 <__utoa+0x36>
 800b3aa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b3ae:	780e      	ldrb	r6, [r1, #0]
 800b3b0:	7006      	strb	r6, [r0, #0]
 800b3b2:	3201      	adds	r2, #1
 800b3b4:	f801 5901 	strb.w	r5, [r1], #-1
 800b3b8:	e7f4      	b.n	800b3a4 <__utoa+0x68>
 800b3ba:	bf00      	nop
 800b3bc:	0800cba4 	.word	0x0800cba4

0800b3c0 <__malloc_lock>:
 800b3c0:	4801      	ldr	r0, [pc, #4]	; (800b3c8 <__malloc_lock+0x8>)
 800b3c2:	f7ff bf31 	b.w	800b228 <__retarget_lock_acquire_recursive>
 800b3c6:	bf00      	nop
 800b3c8:	2000f108 	.word	0x2000f108

0800b3cc <__malloc_unlock>:
 800b3cc:	4801      	ldr	r0, [pc, #4]	; (800b3d4 <__malloc_unlock+0x8>)
 800b3ce:	f7ff bf2c 	b.w	800b22a <__retarget_lock_release_recursive>
 800b3d2:	bf00      	nop
 800b3d4:	2000f108 	.word	0x2000f108

0800b3d8 <_free_r>:
 800b3d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3da:	2900      	cmp	r1, #0
 800b3dc:	d044      	beq.n	800b468 <_free_r+0x90>
 800b3de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3e2:	9001      	str	r0, [sp, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f1a1 0404 	sub.w	r4, r1, #4
 800b3ea:	bfb8      	it	lt
 800b3ec:	18e4      	addlt	r4, r4, r3
 800b3ee:	f7ff ffe7 	bl	800b3c0 <__malloc_lock>
 800b3f2:	4a1e      	ldr	r2, [pc, #120]	; (800b46c <_free_r+0x94>)
 800b3f4:	9801      	ldr	r0, [sp, #4]
 800b3f6:	6813      	ldr	r3, [r2, #0]
 800b3f8:	b933      	cbnz	r3, 800b408 <_free_r+0x30>
 800b3fa:	6063      	str	r3, [r4, #4]
 800b3fc:	6014      	str	r4, [r2, #0]
 800b3fe:	b003      	add	sp, #12
 800b400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b404:	f7ff bfe2 	b.w	800b3cc <__malloc_unlock>
 800b408:	42a3      	cmp	r3, r4
 800b40a:	d908      	bls.n	800b41e <_free_r+0x46>
 800b40c:	6825      	ldr	r5, [r4, #0]
 800b40e:	1961      	adds	r1, r4, r5
 800b410:	428b      	cmp	r3, r1
 800b412:	bf01      	itttt	eq
 800b414:	6819      	ldreq	r1, [r3, #0]
 800b416:	685b      	ldreq	r3, [r3, #4]
 800b418:	1949      	addeq	r1, r1, r5
 800b41a:	6021      	streq	r1, [r4, #0]
 800b41c:	e7ed      	b.n	800b3fa <_free_r+0x22>
 800b41e:	461a      	mov	r2, r3
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	b10b      	cbz	r3, 800b428 <_free_r+0x50>
 800b424:	42a3      	cmp	r3, r4
 800b426:	d9fa      	bls.n	800b41e <_free_r+0x46>
 800b428:	6811      	ldr	r1, [r2, #0]
 800b42a:	1855      	adds	r5, r2, r1
 800b42c:	42a5      	cmp	r5, r4
 800b42e:	d10b      	bne.n	800b448 <_free_r+0x70>
 800b430:	6824      	ldr	r4, [r4, #0]
 800b432:	4421      	add	r1, r4
 800b434:	1854      	adds	r4, r2, r1
 800b436:	42a3      	cmp	r3, r4
 800b438:	6011      	str	r1, [r2, #0]
 800b43a:	d1e0      	bne.n	800b3fe <_free_r+0x26>
 800b43c:	681c      	ldr	r4, [r3, #0]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	6053      	str	r3, [r2, #4]
 800b442:	4421      	add	r1, r4
 800b444:	6011      	str	r1, [r2, #0]
 800b446:	e7da      	b.n	800b3fe <_free_r+0x26>
 800b448:	d902      	bls.n	800b450 <_free_r+0x78>
 800b44a:	230c      	movs	r3, #12
 800b44c:	6003      	str	r3, [r0, #0]
 800b44e:	e7d6      	b.n	800b3fe <_free_r+0x26>
 800b450:	6825      	ldr	r5, [r4, #0]
 800b452:	1961      	adds	r1, r4, r5
 800b454:	428b      	cmp	r3, r1
 800b456:	bf04      	itt	eq
 800b458:	6819      	ldreq	r1, [r3, #0]
 800b45a:	685b      	ldreq	r3, [r3, #4]
 800b45c:	6063      	str	r3, [r4, #4]
 800b45e:	bf04      	itt	eq
 800b460:	1949      	addeq	r1, r1, r5
 800b462:	6021      	streq	r1, [r4, #0]
 800b464:	6054      	str	r4, [r2, #4]
 800b466:	e7ca      	b.n	800b3fe <_free_r+0x26>
 800b468:	b003      	add	sp, #12
 800b46a:	bd30      	pop	{r4, r5, pc}
 800b46c:	2000f10c 	.word	0x2000f10c

0800b470 <_init>:
 800b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b472:	bf00      	nop
 800b474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b476:	bc08      	pop	{r3}
 800b478:	469e      	mov	lr, r3
 800b47a:	4770      	bx	lr

0800b47c <_fini>:
 800b47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47e:	bf00      	nop
 800b480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b482:	bc08      	pop	{r3}
 800b484:	469e      	mov	lr, r3
 800b486:	4770      	bx	lr
